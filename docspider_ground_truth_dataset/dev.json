[
    {
        "question_id": 1,
        "spider_question_id": 3,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "query": "db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 })",
        "gpt4 answer": "db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2,
        "spider_question_id": 4,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "query": "db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 })",
        "gpt4 answer": "db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3,
        "spider_question_id": 5,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "query": "db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } }}, { $project: { avg: \"$avgAge\", min: \"$minAge\", max: \"$maxAge\" } }])",
        "gpt4 answer": "db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, average_age: { $avg: \"$Age\" }, min_age: { $min: \"$Age\" }, max_age: { $max: \"$Age\" } } }, { $project: { average_age: 1, min_age: 1, max_age: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } }}, { $project: { avg: \"$avgAge\", min: \"$minAge\", max: \"$maxAge\" } }])"
    },
    {
        "question_id": 4,
        "spider_question_id": 6,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "query": "db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } }}, { $project: { avg: \"$avgAge\", min: \"$minAge\", max: \"$maxAge\" } }])",
        "gpt4 answer": "db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { averageAge: 1, minAge: 1, maxAge: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } }}, { $project: { avg: \"$avgAge\", min: \"$minAge\", max: \"$maxAge\" } }])"
    },
    {
        "question_id": 5,
        "spider_question_id": 7,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "query": "db.singer.find({}, {Song_Name: 1, Song_release_year: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.singer.find({}, {Song_Name: 1, Song_release_year: 1}).sort({Age: 1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 6,
        "spider_question_id": 8,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "query": "db.singer.find({}, { Song_Name: 1, Song_release_year: 1 }).sort({ Age: 1 }).limit(1)",
        "gpt4 answer": "db.singer.find({}, { Song_Name: 1, Song_release_year: 1 }).sort({ Age: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 7,
        "spider_question_id": 11,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country , count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { country: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Country\", numberOfSingers: { $sum: 1 } } }, { $project: { country: \"$_id\", numberOfSingers: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { country: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 8,
        "spider_question_id": 12,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country , count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 9,
        "spider_question_id": 13,
        "db_id": "concert_singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "query": "db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"singer\", let: { avgAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Age\", \"$$avgAge\" ] } } }, { $project: { Song_Name: 1 } } ], as: \"songNames\" } }, { $unwind: \"$songNames\" }, { $replaceRoot: { newRoot: \"$songNames\" } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"singer\", let: { averageAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Age\", \"$$averageAge\"] } } }, { $project: { Song_Name: 1 } } ], as: \"songsAboveAverageAge\" } }, { $unwind: \"$songsAboveAverageAge\" }, { $replaceRoot: { newRoot: \"$songsAboveAverageAge\" } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"singer\", let: { avgAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Age\", \"$$avgAge\" ] } } }, { $project: { Song_Name: 1 } } ], as: \"songNames\" } }, { $unwind: \"$songNames\" }, { $replaceRoot: { newRoot: \"$songNames\" } }])"
    },
    {
        "question_id": 10,
        "spider_question_id": 14,
        "db_id": "concert_singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "query": "db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"singer\", let: { averageAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Age\", \"$$averageAge\" ] } } }, { $project: { Song_Name: 1 } } ], as: \"olderSingers\" } }, { $unwind: \"$olderSingers\" }, { $replaceRoot: { newRoot: \"$olderSingers\" } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: null, avgAge: { $avg: \"$Age\" } } }, { $addFields: { avgAge: \"$avgAge\" } }, { $lookup: { from: \"singer\", let: { avgAgeVar: \"$avgAge\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Age\", \"$$avgAgeVar\"] } } }, { $project: { Song_Name: 1 } } ], as: \"songs_by_older_singers\" } }, { $unwind: \"$songs_by_older_singers\" }, { $replaceRoot: { newRoot: \"$songs_by_older_singers\" } }, { $project: { Song_Name: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"singer\", let: { averageAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Age\", \"$$averageAge\" ] } } }, { $project: { Song_Name: 1 } } ], as: \"olderSingers\" } }, { $unwind: \"$olderSingers\" }, { $replaceRoot: { newRoot: \"$olderSingers\" } }])"
    },
    {
        "question_id": 11,
        "spider_question_id": 18,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "select avg(capacity) , max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "query": "db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" }, maxCapacity: { $max: \"$Capacity\" } } }, { $project: { avg: \"$averageCapacity\", max: \"$maxCapacity\" } }])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: null, AverageCapacity: { $avg: \"$Capacity\" }, MaximumCapacity: { $max: \"$Capacity\" } } }, { $project: { AverageCapacity: 1, MaximumCapacity: 1 } } ])",
        "deepseek answer": "db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" }, maxCapacity: { $max: \"$Capacity\" } } }, { $project: { avg: \"$averageCapacity\", max: \"$maxCapacity\" } }])"
    },
    {
        "question_id": 12,
        "spider_question_id": 19,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "query": "db.stadium.aggregate([ { $sort: { Average: -1 } }, { $limit: 1 }, { $project: { Name: 1, Capacity: 1 } }])",
        "gpt4 answer": "db.stadium.find({}, { Name: 1, Capacity: 1 }).sort({ Average: -1 }).limit(1)",
        "deepseek answer": "db.stadium.aggregate([ { $sort: { Average: -1 } }, { $limit: 1 }, { $project: { Name: 1, Capacity: 1 } }])"
    },
    {
        "question_id": 13,
        "spider_question_id": 20,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "query": "db.stadium.find({}, { Name: 1, Capacity: 1 }).sort({ Average: -1 }).limit(1)",
        "gpt4 answer": "db.stadium.find({}, { Name: 1, Capacity: 1 }).sort({ Average: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 14,
        "spider_question_id": 27,
        "db_id": "concert_singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "query": "db.concert.aggregate([ { $group: { _id: \"$Year\", numConcerts: { $sum: 1 } } }, { $sort: { numConcerts: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.concert.aggregate([ { $group: { _id: \"$Year\", numConcerts: { $sum: 1 } } }, { $sort: { numConcerts: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 15,
        "spider_question_id": 28,
        "db_id": "concert_singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "query": "db.concert.aggregate([ { $group: { _id: \"$Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } }])",
        "gpt4 answer": "db.concert.aggregate([ { $group: { _id: \"$Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.concert.aggregate([ { $group: { _id: \"$Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } }])"
    },
    {
        "question_id": 16,
        "spider_question_id": 31,
        "db_id": "concert_singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Country\", above_40: { $sum: { $cond: [{ $gt: [\"$Age\", 40] }, 1, 0] } }, below_30: { $sum: { $cond: [{ $lt: [\"$Age\", 30] }, 1, 0] } } } }, { $match: { $and: [ { above_40: { $gt: 0 } }, { below_30: { $gt: 0 } } ] } }, { $project: { Country: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 17,
        "spider_question_id": 34,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "query": "db.concert.aggregate([ { $lookup: { from: \"singer_in_concert\", localField: \"concert_ID\", foreignField: \"concert_ID\", as: \"singers\" } }, { $project: { concert_Name: 1, Theme: 1, numSingers: { $size: \"$singers\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 18,
        "spider_question_id": 35,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "query": "db.concert.aggregate([ { $lookup: { from: \"singer_in_concert\", localField: \"concert_ID\", foreignField: \"concert_ID\", as: \"singer_count\" } }, { $project: { concert_Name: 1, Theme: 1, number_of_singers: { $size: \"$singer_count\" } } } ])",
        "gpt4 answer": "db.concert.aggregate([ { $lookup: { from: \"singer_in_concert\", localField: \"concert_ID\", foreignField: \"concert_ID\", as: \"singer_count\" } }, { $project: { concert_Name: 1, Theme: 1, number_of_singers: { $size: \"$singer_count\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 19,
        "spider_question_id": 40,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "query": "db.singer.find( { \"Song_Name\": { \"$regex\": \"Hey\", \"$options\": \"i\" } }, { \"Name\": 1, \"Country\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.singer.find( { \"Song_Name\": { \"$regex\": \"Hey\", \"$options\": \"i\" } }, { \"Name\": 1, \"Country\": 1, \"_id\": 0 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 20,
        "spider_question_id": 41,
        "db_id": "concert_singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "query": "db.singer.find( { Song_Name: /Hey/ }, { Name: 1, Country: 1 } )",
        "gpt4 answer": "db.singer.find( { Song_Name: /Hey/ }, { Name: 1, Country: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 21,
        "spider_question_id": 50,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "query": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", maxWeight: { $max: \"$weight\" } } }, { $project: { petType: \"$_id\", maxWeight: 1 } } ])",
        "gpt4 answer": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", maxWeight: { $max: \"$weight\" } } }, { $project: { petType: \"$_id\", maxWeight: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 22,
        "spider_question_id": 51,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "query": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", maxWeight: { $max: \"$weight\" } } }, { $project: { PetType: \"$_id\", maxWeight: 1 } } ])",
        "gpt4 answer": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", maxWeight: { $max: \"$weight\" } } }, { $project: { PetType: \"$_id\", maxWeight: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 23,
        "spider_question_id": 54,
        "db_id": "pets_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "query": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"StudentPets\" } }, { $unwind: \"$StudentPets\" }, { $lookup: { from: \"Pets\", localField: \"StudentPets.PetID\", foreignField: \"PetID\", as: \"StudentPetsDetails\" } }, { $match: { \"StudentPetsDetails.PetType\": 'dog' } }, { $count: \"NumberOfDogPets\" } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"StudentPets\" } }, { $unwind: \"$StudentPets\" }, { $lookup: { from: \"Pets\", localField: \"StudentPets.PetID\", foreignField: \"PetID\", as: \"StudentPetsDetails\" } }, { $match: { \"StudentPetsDetails.PetType\": 'dog' } }, { $count: \"NumberOfDogPets\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 24,
        "spider_question_id": 55,
        "db_id": "pets_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "question": "How many dog pets are raised by female students?",
        "query": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetInfo\" } }, { $unwind: \"$PetInfo\" }, { $lookup: { from: \"Pets\", localField: \"PetInfo.PetID\", foreignField: \"PetID\", as: \"PetDetails\" } }, { $unwind: \"$PetDetails\" }, { $match: { \"PetDetails.PetType\": \"dog\" } }, { $count: \"NumberOfDogs\" } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetInfo\" } }, { $unwind: \"$PetInfo\" }, { $lookup: { from: \"Pets\", localField: \"PetInfo.PetID\", foreignField: \"PetID\", as: \"PetDetails\" } }, { $unwind: \"$PetDetails\" }, { $match: { \"PetDetails.PetType\": \"dog\" } }, { $count: \"NumberOfDogs\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 25,
        "spider_question_id": 58,
        "db_id": "pets_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"pets_info\" } }, { $unwind: \"$pets_info\" }, { $lookup: { from: \"Pets\", localField: \"pets_info.PetID\", foreignField: \"PetID\", as: \"pet_details\" } }, { $unwind: \"$pet_details\" }, { $match: { $or: [ { \"pet_details.PetType\": \"cat\" }, { \"pet_details.PetType\": \"dog\" } ] } }, { $group: { _id: \"$Fname\" } }, { $project: { Fname: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"pets_info\" } }, { $unwind: \"$pets_info\" }, { $lookup: { from: \"Pets\", localField: \"pets_info.PetID\", foreignField: \"PetID\", as: \"pet_details\" } }, { $unwind: \"$pet_details\" }, { $match: { $or: [ { \"pet_details.PetType\": \"cat\" }, { \"pet_details.PetType\": \"dog\" } ] } }, { $group: { _id: \"$Fname\" } }, { $project: { Fname: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 26,
        "spider_question_id": 59,
        "db_id": "pets_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_pets\" } }, { $unwind: \"$student_pets\" }, { $lookup: { from: \"Pets\", localField: \"student_pets.PetID\", foreignField: \"PetID\", as: \"pet_details\" } }, { $unwind: \"$pet_details\" }, { $match: { $or: [ { \"pet_details.PetType\": \"cat\" }, { \"pet_details.PetType\": \"dog\" } ] } }, { $group: { _id: \"$Fname\" } }, { $project: { Fname: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_pets\" } }, { $unwind: \"$student_pets\" }, { $lookup: { from: \"Pets\", localField: \"student_pets.PetID\", foreignField: \"PetID\", as: \"pet_details\" } }, { $unwind: \"$pet_details\" }, { $match: { $or: [ { \"pet_details.PetType\": \"cat\" }, { \"pet_details.PetType\": \"dog\" } ] } }, { $group: { _id: \"$Fname\" } }, { $project: { Fname: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 27,
        "spider_question_id": 68,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "query": "db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1)",
        "gpt4 answer": "db.Pets.find({}, { PetType: 1, weight: 1 }).sort({ pet_age: 1 }).limit(1)",
        "deepseek answer": "db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1)"
    },
    {
        "question_id": 28,
        "spider_question_id": 69,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "query": "db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1)",
        "gpt4 answer": "db.Pets.find({}, { PetType: 1, weight: 1 }).sort({ pet_age: 1 }).limit(1)",
        "deepseek answer": "db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1)"
    },
    {
        "question_id": 29,
        "spider_question_id": 70,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "query": "db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 })",
        "gpt4 answer": "db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 30,
        "spider_question_id": 71,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "query": "db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 })",
        "gpt4 answer": "db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 31,
        "spider_question_id": 72,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "query": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", averageAge: { $avg: \"$pet_age\" }, maximumAge: { $max: \"$pet_age\" } } } ])",
        "gpt4 answer": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", averageAge: { $avg: \"$pet_age\" }, maximumAge: { $max: \"$pet_age\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 32,
        "spider_question_id": 73,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet type?",
        "query": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", average_age: { $avg: \"$pet_age\" }, maximum_age: { $max: \"$pet_age\" } } } ])",
        "gpt4 answer": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", average_age: { $avg: \"$pet_age\" }, maximum_age: { $max: \"$pet_age\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 33,
        "spider_question_id": 74,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "query": "db.Pets.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $group: { _id: \"$PetType\", averageWeight: { $avg: \"$weight\" } } }, { $project: { pettype: \"$_id\", averageWeight: 1 } }])",
        "gpt4 answer": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", averageWeight: { $avg: \"$weight\" } } } ])",
        "deepseek answer": "db.Pets.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $group: { _id: \"$PetType\", averageWeight: { $avg: \"$weight\" } } }, { $project: { pettype: \"$_id\", averageWeight: 1 } }])"
    },
    {
        "question_id": 34,
        "spider_question_id": 75,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "query": "db.Pets.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $group: { _id: \"$PetType\", averageWeight: { $avg: \"$weight\" } } }])",
        "gpt4 answer": "db.Pets.aggregate([ { $group: { _id: \"$PetType\", avgWeight: { $avg: \"$weight\" } } }, { $project: { PetType: \"$_id\", AverageWeight: \"$avgWeight\" } } ])",
        "deepseek answer": "db.Pets.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $group: { _id: \"$PetType\", averageWeight: { $avg: \"$weight\" } } }])"
    },
    {
        "question_id": 35,
        "spider_question_id": 76,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "question": "Find the first name and age of students who have a pet.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 36,
        "spider_question_id": 77,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } }, { $group: { _id: { Fname: \"$Fname\", Age: \"$Age\" } } }, { $project: { Fname: \"$_id.Fname\", Age: \"$_id.Age\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } }, { $group: { _id: { Fname: \"$Fname\", Age: \"$Age\" } } }, { $project: { Fname: \"$_id.Fname\", Age: \"$_id.Age\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 37,
        "spider_question_id": 78,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "query": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $project: { petid: \"$pet_info.PetID\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $project: { petid: \"$pet_info.PetID\" } }])"
    },
    {
        "question_id": 38,
        "spider_question_id": 80,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"Pets\" } }, { $match: { \"Pets.0\": { $exists: true } } }, { $project: { StuID: 1, NumberOfPets: { $size: \"$Pets\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"Pets\" } }, { $match: { \"Pets.0\": { $exists: true } } }, { $project: { StuID: 1, NumberOfPets: { $size: \"$Pets\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 39,
        "spider_question_id": 81,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"StudentPets\" }}, { $unwind: \"$StudentPets\" }, { $group: { _id: \"$StuID\", NumberOfPets: { $sum: 1 } }}, { $project: { StuID: \"$_id\", NumberOfPets: 1 }} ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"StudentPets\" }}, { $unwind: \"$StudentPets\" }, { $group: { _id: \"$StuID\", NumberOfPets: { $sum: 1 } }}, { $project: { StuID: \"$_id\", NumberOfPets: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 40,
        "spider_question_id": 82,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetsDetails\" } }, { $match: { $expr: { $gt: [{ $size: \"$PetsDetails\" }, 1] } } }, { $project: { Fname: 1, Sex: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetsDetails\" } }, { $match: { $expr: { $gt: [{ $size: \"$PetsDetails\" }, 1] } } }, { $project: { Fname: 1, Sex: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 41,
        "spider_question_id": 83,
        "db_id": "pets_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { \"PetOwners\": { $size: 2 } } }, { $project: { Fname: 1, Sex: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { \"PetOwners\": { $size: 2 } } }, { $project: { Fname: 1, Sex: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 42,
        "spider_question_id": 84,
        "db_id": "pets_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_pets\" } }, { $unwind: \"$student_pets\" }, { $lookup: { from: \"Pets\", localField: \"student_pets.PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $match: { \"pet_info.pet_age\": 3, \"pet_info.PetType\": \"cat\" } }, { $project: { LName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_pets\" } }, { $unwind: \"$student_pets\" }, { $lookup: { from: \"Pets\", localField: \"student_pets.PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $match: { \"pet_info.pet_age\": 3, \"pet_info.PetType\": \"cat\" } }, { $project: { LName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 43,
        "spider_question_id": 85,
        "db_id": "pets_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_pets\" } }, { $unwind: \"$student_pets\" }, { $lookup: { from: \"Pets\", localField: \"student_pets.PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $match: { \"pet_info.pet_age\": 3, \"pet_info.PetType\": \"cat\" } }, { $project: { LName: 1 } }])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetsInfo\" } }, { $unwind: \"$PetsInfo\" }, { $lookup: { from: \"Pets\", localField: \"PetsInfo.PetID\", foreignField: \"PetID\", as: \"PetsDetails\" } }, { $unwind: \"$PetsDetails\" }, { $match: { \"PetsDetails.pet_age\": 3, \"PetsDetails.PetType\": \"cat\" } }, { $project: { LName: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_pets\" } }, { $unwind: \"$student_pets\" }, { $lookup: { from: \"Pets\", localField: \"student_pets.PetID\", foreignField: \"PetID\", as: \"pet_info\" } }, { $unwind: \"$pet_info\" }, { $match: { \"pet_info.pet_age\": 3, \"pet_info.PetType\": \"cat\" } }, { $project: { LName: 1 } }])"
    },
    {
        "question_id": 44,
        "spider_question_id": 86,
        "db_id": "pets_1",
        "difficulty": "extra",
        "spider_gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"Pets\" } }, { $match: { \"Pets\": { $size: 0 } } }, { $group: { _id: null, AverageAge: { $avg: \"$Age\" } } }, { $project: { AverageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"Pets\" } }, { $match: { \"Pets\": { $size: 0 } } }, { $group: { _id: null, AverageAge: { $avg: \"$Age\" } } }, { $project: { AverageAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 45,
        "spider_question_id": 87,
        "db_id": "pets_1",
        "difficulty": "extra",
        "spider_gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { PetOwners: { $size: 0 } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Pet\", localField: \"StuID\", foreignField: \"StuID\", as: \"PetOwners\" } }, { $match: { PetOwners: { $size: 0 } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 46,
        "spider_question_id": 90,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "query": "db.continents.aggregate([ { $lookup: { from: \"countries\", localField: \"ContId\", foreignField: \"Continent\", as: \"countries\" } }, { $project: { ContId: 1, Continent: 1, countryCount: { $size: \"$countries\" } } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.continents.aggregate([ { $lookup: { from: \"countries\", localField: \"ContId\", foreignField: \"Continent\", as: \"countries\" } }, { $project: { ContId: 1, Continent: 1, countryCount: { $size: \"$countries\" } } }])"
    },
    {
        "question_id": 47,
        "spider_question_id": 91,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "query": "db.continents.aggregate([ { $lookup: { from: \"countries\", localField: \"ContId\", foreignField: \"Continent\", as: \"countries\" } }, { $project: { \"_id\": 0, \"ContId\": 1, \"Continent\": 1, \"countriesCount\": { $size: \"$countries\" } } }])",
        "gpt4 answer": "db.continents.aggregate([ { $lookup: { from: \"countries\", localField: \"ContId\", foreignField: \"Continent\", as: \"countriesList\" } }, { $project: { ContId: \"$ContId\", Continent: \"$Continent\", NumberOfCountries: { $size: \"$countriesList\" } } } ])",
        "deepseek answer": "db.continents.aggregate([ { $lookup: { from: \"countries\", localField: \"ContId\", foreignField: \"Continent\", as: \"countries\" } }, { $project: { \"_id\": 0, \"ContId\": 1, \"Continent\": 1, \"countriesCount\": { $size: \"$countries\" } } }])"
    },
    {
        "question_id": 48,
        "spider_question_id": 96,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
        "question": "Which model of the car has the minimum horsepower?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $sort: { \"car_data.Horsepower\": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $sort: { Horsepower: 1 } }, { $limit: 1 }, { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_info\" }}, { $unwind: \"$car_info\" }, { $project: { Model: \"$car_info.Model\" } } ])",
        "deepseek answer": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $sort: { \"car_data.Horsepower\": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
    },
    {
        "question_id": 49,
        "spider_question_id": 97,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $sort: { \"car_data.Horsepower\": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $sort: { Horsepower: 1 } }, { $limit: 1 }, { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"carName\" }}, { $unwind: \"$carName\" }, { $project: { Model: \"$carName.Model\" } } ])",
        "deepseek answer": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $sort: { \"car_data.Horsepower\": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
    },
    {
        "question_id": 50,
        "spider_question_id": 100,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "query": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $lookup: { from: \"car_names\", localField: \"models.Model\", foreignField: \"Model\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $lookup: { from: \"cars_data\", localField: \"car_names.MakeId\", foreignField: \"Id\", as: \"cars_data\" } }, { $unwind: \"$cars_data\" }, { $match: { \"cars_data.Year\": 1970 } }, { $group: { _id: \"$Maker\" } }, { $project: { Maker: \"$_id\" } } ])",
        "gpt4 answer": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $lookup: { from: \"car_names\", localField: \"models.Model\", foreignField: \"Model\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $lookup: { from: \"cars_data\", localField: \"car_names.MakeId\", foreignField: \"Id\", as: \"cars_data\" } }, { $unwind: \"$cars_data\" }, { $match: { \"cars_data.Year\": 1970 } }, { $group: { _id: \"$Maker\" } }, { $project: { Maker: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 51,
        "spider_question_id": 101,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "query": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $lookup: { from: \"car_names\", localField: \"models.Model\", foreignField: \"Model\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $lookup: { from: \"cars_data\", localField: \"car_names.MakeId\", foreignField: \"Id\", as: \"cars_data\" } }, { $unwind: \"$cars_data\" }, { $match: { \"cars_data.Year\": 1970 } }, { $group: { _id: \"$Maker\" } }])",
        "gpt4 answer": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $lookup: { from: \"car_names\", localField: \"models.Model\", foreignField: \"Model\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $lookup: { from: \"cars_data\", localField: \"car_names.MakeId\", foreignField: \"Id\", as: \"cars_data\" } }, { $unwind: \"$cars_data\" }, { $match: { \"cars_data.Year\": 1970 } }, { $project: { \"Maker\": 1 } }, { $group: { _id: \"$Maker\" }}, { $project: { Maker: \"$_id\" } } ])",
        "deepseek answer": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $lookup: { from: \"car_names\", localField: \"models.Model\", foreignField: \"Model\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $lookup: { from: \"cars_data\", localField: \"car_names.MakeId\", foreignField: \"Id\", as: \"cars_data\" } }, { $unwind: \"$cars_data\" }, { $match: { \"cars_data.Year\": 1970 } }, { $group: { _id: \"$Maker\" } }])"
    },
    {
        "question_id": 52,
        "spider_question_id": 112,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "query": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names_data\" } }, { $match: { \"car_names_data.Make\": \"amc hornet sportabout (sw)\" } }, { $project: { Accelerate: 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_details\" } }, { $match: { \"car_details.Make\": \"amc hornet sportabout (sw)\" } }, { $project: { Accelerate: 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names_data\" } }, { $match: { \"car_names_data.Make\": \"amc hornet sportabout (sw)\" } }, { $project: { Accelerate: 1 } }])"
    },
    {
        "question_id": 53,
        "spider_question_id": 113,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "query": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_name_info\" } }, { $match: { \"car_name_info.Make\": \"amc hornet sportabout (sw)\" } }, { $project: { Accelerate: 1 } } ])",
        "gpt4 answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_name_info\" } }, { $match: { \"car_name_info.Make\": \"amc hornet sportabout (sw)\" } }, { $project: { Accelerate: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 54,
        "spider_question_id": 120,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "query": "db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: \"$Weight\" } } }, { $project: { minWeight: 1 } }])",
        "gpt4 answer": "db.cars_data.find({ Cylinders: 8, Year: 1974 }, { Weight: 1 }).sort({ Weight: 1 }).limit(1)",
        "deepseek answer": "db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: \"$Weight\" } } }, { $project: { minWeight: 1 } }])"
    },
    {
        "question_id": 55,
        "spider_question_id": 121,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "query": "db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: \"$Weight\" } } }, { $project: { minWeight: 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: \"$Weight\" } } }, { $project: { minWeight: 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: \"$Weight\" } } }, { $project: { minWeight: 1 } }])"
    },
    {
        "question_id": 56,
        "spider_question_id": 128,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR",
        "question": "What is the average weight of cars each year?",
        "query": "db.cars_data.aggregate([ { $group: { _id: \"$Year\", averageWeight: { $avg: \"$Weight\" } } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $group: { _id: \"$Year\", averageWeight: { $avg: \"$Weight\" } } }, { $project: { Year: \"$_id\", AverageWeight: \"$averageWeight\" } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $group: { _id: \"$Year\", averageWeight: { $avg: \"$Weight\" } } }])"
    },
    {
        "question_id": 57,
        "spider_question_id": 129,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR",
        "question": "What is the average weight and year for each year?",
        "query": "db.cars_data.aggregate([ { $group: { _id: \"$Year\", averageWeight: { $avg: \"$Weight\" } } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $group: { _id: \"$Year\", averageWeight: { $avg: \"$Weight\" } } }, { $project: { Year: \"$_id\", averageWeight: 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $group: { _id: \"$Year\", averageWeight: { $avg: \"$Weight\" } } }])"
    },
    {
        "question_id": 58,
        "spider_question_id": 132,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "query": "db.cars_data.aggregate([ { $match: { Cylinders: 3 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"carName\" } }, { $unwind: \"$carName\" }, { $project: { Horsepower: 1, Make: \"$carName.Make\" } } ])",
        "gpt4 answer": "db.cars_data.aggregate([ { $match: { Cylinders: 3 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"carName\" } }, { $unwind: \"$carName\" }, { $project: { Horsepower: 1, Make: \"$carName.Make\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 59,
        "spider_question_id": 133,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { \"car_data.Cylinders\": 3 } }, { $sort: { \"car_data.Horsepower\": -1 } }, { $limit: 1 }, { $project: { Horsepower: \"$car_data.Horsepower\", Make: 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $match: { Cylinders: 3 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_make_info\" } }, { $unwind: \"$car_make_info\" }, { $project: { Horsepower: \"$Horsepower\", Make: \"$car_make_info.Make\" } } ])",
        "deepseek answer": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { \"car_data.Cylinders\": 3 } }, { $sort: { \"car_data.Horsepower\": -1 } }, { $limit: 1 }, { $project: { Horsepower: \"$car_data.Horsepower\", Make: 1 } }])"
    },
    {
        "question_id": 60,
        "spider_question_id": 135,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1",
        "question": "What is the car model with the highest mpg ?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $sort: { \"car_data.MPG\": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $sort: { \"car_data.MPG\": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
    },
    {
        "question_id": 61,
        "spider_question_id": 138,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
        "question": "What is the average edispl of the cars of model volvo?",
        "query": "db.car_names.aggregate([ { $match: { Model: \"volvo\" } }, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $group: { _id: null, avgEdispl: { $avg: \"$car_data.Edispl\" } } }, { $project: { avgEdispl: 1 } } ])",
        "gpt4 answer": "db.car_names.aggregate([ { $match: { Model: \"volvo\" } }, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $group: { _id: null, avgEdispl: { $avg: \"$car_data.Edispl\" } } }, { $project: { avgEdispl: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 62,
        "spider_question_id": 139,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
        "question": "What is the average edispl for all volvos?",
        "query": "db.car_names.aggregate([ { $match: { Model: \"volvo\" }}, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"carsData\" }}, { $unwind: \"$carsData\" }, { $group: { _id: null, averageEdispl: { $avg: \"$carsData.Edispl\" } }}, { $project: { averageEdispl: 1 }} ])",
        "gpt4 answer": "db.car_names.aggregate([ { $match: { Model: \"volvo\" }}, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"carsData\" }}, { $unwind: \"$carsData\" }, { $group: { _id: null, averageEdispl: { $avg: \"$carsData.Edispl\" } }}, { $project: { averageEdispl: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 63,
        "spider_question_id": 140,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "query": "db.cars_data.aggregate([ { $group: { _id: \"$Cylinders\", maxAccelerate: { $max: \"$Accelerate\" } } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $group: { _id: \"$Cylinders\", maxAccelerate: { $max: \"$Accelerate\" } } }, { $project: { Cylinders: \"$_id\", maxAccelerate: 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $group: { _id: \"$Cylinders\", maxAccelerate: { $max: \"$Accelerate\" } } }])"
    },
    {
        "question_id": 64,
        "spider_question_id": 141,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "query": "db.cars_data.aggregate([ { $group: { _id: \"$Cylinders\", maxAccelerate: { $max: \"$Accelerate\" } } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $group: { _id: \"$Cylinders\", maxAccelerate: { $max: \"$Accelerate\" } } }, { $project: { Cylinders: \"$_id\", maxAccelerate: 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $group: { _id: \"$Cylinders\", maxAccelerate: { $max: \"$Accelerate\" } } }])"
    },
    {
        "question_id": 65,
        "spider_question_id": 142,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "question": "Which model has the most version(make) of cars?",
        "query": "db.car_names.aggregate([ { $group: { _id: \"$Model\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: \"$_id\" } }])",
        "gpt4 answer": "db.car_names.aggregate([ { $group: { _id: \"$Model\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.car_names.aggregate([ { $group: { _id: \"$Model\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: \"$_id\" } }])"
    },
    {
        "question_id": 66,
        "spider_question_id": 143,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "question": "What model has the most different versions?",
        "query": "db.car_names.aggregate([ { $group: { _id: \"$Model\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: \"$_id\" } }])",
        "gpt4 answer": "db.car_names.aggregate([ { $group: { _id: \"$Model\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: \"$_id\" } } ])",
        "deepseek answer": "db.car_names.aggregate([ { $group: { _id: \"$Model\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: \"$_id\" } }])"
    },
    {
        "question_id": 67,
        "spider_question_id": 148,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "query": "db.car_makers.aggregate([ { $match: { FullName: \"American Motor Company\" } }, { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.car_makers.aggregate([ { $match: { FullName: \"American Motor Company\" } }, { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $count: \"numberOfModels\" } ])",
        "deepseek answer": "db.car_makers.aggregate([ { $match: { FullName: \"American Motor Company\" } }, { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $unwind: \"$models\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 68,
        "spider_question_id": 149,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "query": "db.car_makers.aggregate([ { $match: { FullName: \"American Motor Company\" } }, { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $project: { modelCount: { $size: \"$models\" } } }])",
        "gpt4 answer": "db.model_list.aggregate([ { $lookup: { from: \"car_makers\", localField: \"Maker\", foreignField: \"Id\", as: \"maker_info\" } }, { $match: { \"maker_info.FullName\": \"American Motor Company\" } }, { $count: \"num_models\" } ])",
        "deepseek answer": "db.car_makers.aggregate([ { $match: { FullName: \"American Motor Company\" } }, { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $project: { modelCount: { $size: \"$models\" } } }])"
    },
    {
        "question_id": 69,
        "spider_question_id": 150,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "query": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $project: { FullName: 1, _id: \"$Id\", modelsCount: { $size: \"$models\" } } }, { $match: { modelsCount: { $gt: 3 } } }, { $project: { Id: \"$_id\", FullName: 1 } } ])",
        "gpt4 answer": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $project: { FullName: 1, _id: \"$Id\", modelsCount: { $size: \"$models\" } } }, { $match: { modelsCount: { $gt: 3 } } }, { $project: { Id: \"$_id\", FullName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 70,
        "spider_question_id": 151,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "query": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $match: { \"models.0\": { $exists: true } } }, { $addFields: { modelCount: { $size: \"$models\" } } }, { $match: { modelCount: { $gt: 3 } } }, { $project: { Id: 1, FullName: 1 } }])",
        "gpt4 answer": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $match: { \"models.3\": { $exists: true } } }, { $project: { FullName: 1, Id: 1 } } ])",
        "deepseek answer": "db.car_makers.aggregate([ { $lookup: { from: \"model_list\", localField: \"Id\", foreignField: \"Maker\", as: \"models\" } }, { $match: { \"models.0\": { $exists: true } } }, { $addFields: { modelCount: { $size: \"$models\" } } }, { $match: { modelCount: { $gt: 3 } } }, { $project: { Id: 1, FullName: 1 } }])"
    },
    {
        "question_id": 71,
        "spider_question_id": 152,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"model_list\", localField: \"Model\", foreignField: \"Model\", as: \"model_info\" } }, { $unwind: \"$model_info\" }, { $lookup: { from: \"car_makers\", localField: \"model_info.Maker\", foreignField: \"Id\", as: \"maker_info\" } }, { $unwind: \"$maker_info\" }, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { $or: [ { \"maker_info.FullName\": \"General Motors\" }, { \"car_data.Weight\": { $gt: 3500 } } ] } }, { $group: { _id: \"$model_info.Model\" } }, { $project: { Model: \"$_id\" } } ])",
        "gpt4 answer": "db.car_names.aggregate([ { $lookup: { from: \"model_list\", localField: \"Model\", foreignField: \"Model\", as: \"model_info\" } }, { $unwind: \"$model_info\" }, { $lookup: { from: \"car_makers\", localField: \"model_info.Maker\", foreignField: \"Id\", as: \"maker_info\" } }, { $unwind: \"$maker_info\" }, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { $or: [ { \"maker_info.FullName\": \"General Motors\" }, { \"car_data.Weight\": { $gt: 3500 } } ] } }, { $group: { _id: \"$model_info.Model\" } }, { $project: { Model: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 72,
        "spider_question_id": 153,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"model_list\", localField: \"Model\", foreignField: \"Model\", as: \"model_info\" } }, { $unwind: \"$model_info\" }, { $lookup: { from: \"car_makers\", localField: \"model_info.Maker\", foreignField: \"Id\", as: \"maker_info\" } }, { $unwind: \"$maker_info\" }, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { $or: [ { \"maker_info.FullName\": \"General Motors\" }, { \"car_data.Weight\": { $gt: 3500 } } ] } }, { $group: { _id: \"$model_info.Model\" } } ])",
        "gpt4 answer": "db.car_names.aggregate([ { $lookup: { from: \"model_list\", localField: \"Model\", foreignField: \"Model\", as: \"model_info\" } }, { $unwind: \"$model_info\" }, { $lookup: { from: \"car_makers\", localField: \"model_info.Maker\", foreignField: \"Id\", as: \"maker_info\" } }, { $unwind: \"$maker_info\" }, { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { $or: [ { \"maker_info.FullName\": \"General Motors\" }, { \"car_data.Weight\": { $gt: 3500 } } ] } }, { $group: { _id: \"$model_info.Model\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 73,
        "spider_question_id": 154,
        "db_id": "car_1",
        "difficulty": "easy",
        "spider_gold_sql": "select distinct year from cars_data where weight between 3000 and 4000",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "query": "db.cars_data.aggregate([ { $match: { Weight: { $gte: 3000, $lte: 4000 } } }, { $group: { _id: \"$Year\" } } ])",
        "gpt4 answer": "db.cars_data.aggregate([ { $match: { Weight: { $gte: 3000, $lte: 4000 } } }, { $group: { _id: \"$Year\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 74,
        "spider_question_id": 155,
        "db_id": "car_1",
        "difficulty": "easy",
        "spider_gold_sql": "select distinct year from cars_data where weight between 3000 and 4000",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "query": "db.cars_data.aggregate([ { $match: { Weight: { $lt: 4000, $gt: 3000 } } }, { $group: { _id: \"$Year\" } }, { $project: { Year: \"$_id\" } } ])",
        "gpt4 answer": "db.cars_data.aggregate([ { $match: { Weight: { $lt: 4000, $gt: 3000 } } }, { $group: { _id: \"$Year\" } }, { $project: { Year: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 75,
        "spider_question_id": 156,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "query": "db.cars_data.find({}, {Horsepower: 1}).sort({Accelerate: -1}).limit(1)",
        "gpt4 answer": "db.cars_data.find({}, {Horsepower: 1}).sort({Accelerate: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 76,
        "spider_question_id": 157,
        "db_id": "car_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "query": "db.cars_data.find({}, { Horsepower: 1 }).sort({ Accelerate: -1 }).limit(1)",
        "gpt4 answer": "db.cars_data.find({}, { Horsepower: 1 }).sort({ Accelerate: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 77,
        "spider_question_id": 158,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "query": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $match: { \"car_names.Model\": \"volvo\" } }, { $sort: { \"Accelerate\": 1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"Cylinders\": 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"carNameData\" } }, { $unwind: \"$carNameData\" }, { $match: { \"carNameData.Model\": \"volvo\" } }, { $sort: { Accelerate: 1 } }, { $limit: 1 }, { $project: { Cylinders: 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names\" } }, { $unwind: \"$car_names\" }, { $match: { \"car_names.Model\": \"volvo\" } }, { $sort: { \"Accelerate\": 1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"Cylinders\": 1 } }])"
    },
    {
        "question_id": 78,
        "spider_question_id": 159,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "query": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names_data\" } }, { $unwind: \"$car_names_data\" }, { $match: { \"car_names_data.Model\": \"volvo\" } }, { $sort: { \"Accelerate\": 1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"Cylinders\": 1 } }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names_info\" } }, { $match: { \"car_names_info.Model\": \"volvo\" } }, { $sort: { \"Accelerate\": 1 } }, { $limit: 1 }, { $project: { \"Cylinders\": 1 } } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $lookup: { from: \"car_names\", localField: \"Id\", foreignField: \"MakeId\", as: \"car_names_data\" } }, { $unwind: \"$car_names_data\" }, { $match: { \"car_names_data.Model\": \"volvo\" } }, { $sort: { \"Accelerate\": 1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"Cylinders\": 1 } }])"
    },
    {
        "question_id": 79,
        "spider_question_id": 160,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "query": "db.cars_data.aggregate([ { $sort: { \"Horsepower\": -1 } }, { $limit: 1 }, { $project: { \"Accelerate\": 1 } }, { $lookup: { from: \"cars_data\", let: { maxAcc: \"$Accelerate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Accelerate\", \"$$maxAcc\"] } } }, { $count: \"count\" } ], as: \"carsWithGreaterAcc\" } }, { $unwind: \"$carsWithGreaterAcc\" }, { $replaceRoot: { newRoot: \"$carsWithGreaterAcc\" } } ])",
        "gpt4 answer": "db.cars_data.aggregate([ { $sort: { \"Horsepower\": -1 } }, { $limit: 1 }, { $project: { \"Accelerate\": 1 } }, { $lookup: { from: \"cars_data\", let: { maxAcc: \"$Accelerate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Accelerate\", \"$$maxAcc\"] } } }, { $count: \"count\" } ], as: \"carsWithGreaterAcc\" } }, { $unwind: \"$carsWithGreaterAcc\" }, { $replaceRoot: { newRoot: \"$carsWithGreaterAcc\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 80,
        "spider_question_id": 161,
        "db_id": "car_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "query": "db.cars_data.aggregate([ { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $group: { _id: null, maxAccelerate: { $first: \"$Accelerate\" } } }, { $lookup: { from: \"cars_data\", let: { maxAccel: \"$maxAccelerate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Accelerate\", \"$$maxAccel\"] } } }, { $count: \"count\" } ], as: \"carCount\" } }, { $unwind: \"$carCount\" }, { $replaceRoot: { newRoot: \"$carCount\" } } ])",
        "gpt4 answer": "db.cars_data.aggregate([ { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $group: { _id: null, maxAccelerate: { $first: \"$Accelerate\" } } }, { $lookup: { from: \"cars_data\", let: { maxAccel: \"$maxAccelerate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Accelerate\", \"$$maxAccel\"] } } }, { $count: \"count\" } ], as: \"carCount\" } }, { $unwind: \"$carCount\" }, { $replaceRoot: { newRoot: \"$carCount\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 81,
        "spider_question_id": 164,
        "db_id": "car_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6",
        "question": "How many cars has over 6 cylinders?",
        "query": "db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: \"total\" }])",
        "gpt4 answer": "db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: \"total\" } ])",
        "deepseek answer": "db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: \"total\" }])"
    },
    {
        "question_id": 82,
        "spider_question_id": 165,
        "db_id": "car_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "query": "db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: \"total\" }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: \"total\" }])"
    },
    {
        "question_id": 83,
        "spider_question_id": 166,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { \"car_data.Cylinders\": 4 } }, { $sort: { \"car_data.Horsepower\": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { \"car_data.Cylinders\": 4 } }, { $sort: { \"car_data.Horsepower\": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
    },
    {
        "question_id": 84,
        "spider_question_id": 167,
        "db_id": "car_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "query": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { \"car_data.Cylinders\": 4 } }, { $sort: { \"car_data.Horsepower\": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.car_names.aggregate([ { $lookup: { from: \"cars_data\", localField: \"MakeId\", foreignField: \"Id\", as: \"car_data\" } }, { $unwind: \"$car_data\" }, { $match: { \"car_data.Cylinders\": 4 } }, { $sort: { \"car_data.Horsepower\": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
    },
    {
        "question_id": 85,
        "spider_question_id": 180,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "question": "Which country does Airline 'JetBlue Airways' belong to?",
        "query": "db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1})",
        "gpt4 answer": "db.airlines.findOne({ Airline: 'JetBlue Airways' }, { Country: 1 })",
        "deepseek answer": "db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1})"
    },
    {
        "question_id": 86,
        "spider_question_id": 181,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "query": "db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1})",
        "gpt4 answer": "db.airlines.findOne({ Airline: \"JetBlue Airways\" }, { Country: 1 })",
        "deepseek answer": "db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1})"
    },
    {
        "question_id": 87,
        "spider_question_id": 182,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline 'JetBlue Airways'?",
        "query": "db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1})",
        "gpt4 answer": "db.airlines.findOne({ Airline: 'JetBlue Airways' }, { Abbreviation: 1 })",
        "deepseek answer": "db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1})"
    },
    {
        "question_id": 88,
        "spider_question_id": 183,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "query": "db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1})",
        "gpt4 answer": "db.airlines.findOne({ Airline: 'JetBlue Airways' }, { Abbreviation: 1 })",
        "deepseek answer": "db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1})"
    },
    {
        "question_id": 89,
        "spider_question_id": 184,
        "db_id": "flight_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "question": "List all airline names and their abbreviations in 'USA'.",
        "query": "db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1})",
        "gpt4 answer": "db.airlines.find({ Country: 'USA' }, { Airline: 1, Abbreviation: 1 })",
        "deepseek answer": "db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1})"
    },
    {
        "question_id": 90,
        "spider_question_id": 185,
        "db_id": "flight_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "query": "db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1})",
        "gpt4 answer": "db.airlines.find({ Country: 'USA' }, { Airline: 1, Abbreviation: 1 })",
        "deepseek answer": "db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1})"
    },
    {
        "question_id": 91,
        "spider_question_id": 194,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "query": "db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1})",
        "gpt4 answer": "db.airlines.findOne({ Abbreviation: 'UAL' }, { Airline: 1 })",
        "deepseek answer": "db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1})"
    },
    {
        "question_id": 92,
        "spider_question_id": 195,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "query": "db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1})",
        "gpt4 answer": "db.airlines.find({ Abbreviation: 'UAL' }, { Airline: 1 })",
        "deepseek answer": "db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1})"
    },
    {
        "question_id": 93,
        "spider_question_id": 200,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "query": "db.airports.find({AirportCode: 'AKO'}, {AirportName: 1})",
        "gpt4 answer": "db.airports.findOne({ AirportCode: 'AKO' }, { AirportName: 1 })",
        "deepseek answer": "db.airports.find({AirportCode: 'AKO'}, {AirportName: 1})"
    },
    {
        "question_id": 94,
        "spider_question_id": 201,
        "db_id": "flight_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "query": "db.airports.find({AirportCode: 'AKO'}, {AirportName: 1})",
        "gpt4 answer": "db.airports.findOne({ AirportCode: 'AKO' }, { AirportName: 1 })",
        "deepseek answer": "db.airports.find({AirportCode: 'AKO'}, {AirportName: 1})"
    },
    {
        "question_id": 95,
        "spider_question_id": 214,
        "db_id": "flight_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "query": "db.flights.aggregate([ { $lookup: { from: \"airlines\", localField: \"Airline\", foreignField: \"uid\", as: \"airline_info\" } }, { $match: { \"airline_info.Airline\": \"JetBlue Airways\" } }, { $count: \"total_flights\" } ])",
        "gpt4 answer": "db.flights.aggregate([ { $lookup: { from: \"airlines\", localField: \"Airline\", foreignField: \"uid\", as: \"airline_info\" } }, { $match: { \"airline_info.Airline\": \"JetBlue Airways\" } }, { $count: \"total_flights\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 96,
        "spider_question_id": 215,
        "db_id": "flight_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "query": "db.flights.aggregate([ { $lookup: { from: \"airlines\", localField: \"Airline\", foreignField: \"uid\", as: \"airline_info\" } }, { $match: { \"airline_info.Airline\": \"JetBlue Airways\" } }, { $count: \"JetBlue_Flights\" } ])",
        "gpt4 answer": "db.flights.aggregate([ { $lookup: { from: \"airlines\", localField: \"Airline\", foreignField: \"uid\", as: \"airline_info\" } }, { $match: { \"airline_info.Airline\": \"JetBlue Airways\" } }, { $count: \"JetBlue_Flights\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 97,
        "spider_question_id": 244,
        "db_id": "flight_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "query": "db.airlines.aggregate([ { $lookup: { from: \"flights\", localField: \"uid\", foreignField: \"Airline\", as: \"flights\" } }, { $match: { \"flights.Airline\": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: \"$Airline\", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.airlines.aggregate([ { $lookup: { from: \"flights\", localField: \"uid\", foreignField: \"Airline\", as: \"flights\" } }, { $match: { \"flights.Airline\": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: \"$Airline\", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])"
    },
    {
        "question_id": 98,
        "spider_question_id": 245,
        "db_id": "flight_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
        "question": "Which airlines have less than 200 flights?",
        "query": "db.airlines.aggregate([ { $lookup: { from: \"flights\", localField: \"uid\", foreignField: \"Airline\", as: \"flights\" } }, { $match: { \"flights.Airline\": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: \"$Airline\", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])",
        "gpt4 answer": "db.flights.aggregate([ { $group: { _id: \"$Airline\", totalFlights: { $sum: 1 } } }, { $match: { totalFlights: { $lt: 200 } } }, { $lookup: { from: \"airlines\", localField: \"_id\", foreignField: \"uid\", as: \"airline_info\" } }, { $unwind: \"$airline_info\" }, { $project: { Airline: \"$airline_info.Airline\" } } ])",
        "deepseek answer": "db.airlines.aggregate([ { $lookup: { from: \"flights\", localField: \"uid\", foreignField: \"Airline\", as: \"flights\" } }, { $match: { \"flights.Airline\": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: \"$Airline\", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])"
    },
    {
        "question_id": 99,
        "spider_question_id": 262,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "query": "db.employee.find({}, { Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.employee.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.employee.find({}, { Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 100,
        "spider_question_id": 263,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "query": "db.employee.find({}, { Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.employee.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.employee.find({}, { Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 101,
        "spider_question_id": 264,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "query": "db.employee.aggregate([ { $group: { _id: \"$City\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.employee.aggregate([ { $group: { _id: \"$City\", numberOfEmployees: { $sum: 1 } } }, { $project: { City: \"$_id\", numberOfEmployees: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $group: { _id: \"$City\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 102,
        "spider_question_id": 265,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "query": "db.employee.aggregate([ { $group: { _id: \"$City\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.employee.aggregate([ { $group: { _id: \"$City\", numberOfEmployees: { $sum: 1 } } }, { $project: { city: \"$_id\", count: \"$numberOfEmployees\" } } ])",
        "deepseek answer": "db.employee.aggregate([ { $group: { _id: \"$City\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 103,
        "spider_question_id": 266,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "query": "db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: \"$City\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { City: \"$_id\" } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: \"$City\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { City: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 104,
        "spider_question_id": 267,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "question": "Find the cities that have more than one employee under age 30.",
        "query": "db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: \"$City\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { _id: 1, count: 0 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: \"$City\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { _id: 1, count: 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 105,
        "spider_question_id": 268,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each location.",
        "query": "db.shop.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.shop.aggregate([ { $group: { _id: \"$Location\", NumberOfShops: { $sum: 1 } } } ])",
        "deepseek answer": "db.shop.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 106,
        "spider_question_id": 269,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many shops are there in each location?",
        "query": "db.shop.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.shop.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.shop.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 107,
        "spider_question_id": 272,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "query": "db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: \"$Number_products\" }, maxProducts: { $max: \"$Number_products\" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])",
        "gpt4 answer": "db.shop.aggregate([ { $group: { _id: null, minNumber_products: { $min: \"$Number_products\" }, maxNumber_products: { $max: \"$Number_products\" } } }, { $project: { minNumber_products: 1, maxNumber_products: 1 } } ])",
        "deepseek answer": "db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: \"$Number_products\" }, maxProducts: { $max: \"$Number_products\" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])"
    },
    {
        "question_id": 108,
        "spider_question_id": 273,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "query": "db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: \"$Number_products\" }, maxProducts: { $max: \"$Number_products\" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])",
        "gpt4 answer": "db.shop.aggregate([ { $group: { _id: null, minNumber_products: { $min: \"$Number_products\" }, maxNumber_products: { $max: \"$Number_products\" } } }, { $project: { minNumber_products: 1, maxNumber_products: 1 } } ])",
        "deepseek answer": "db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: \"$Number_products\" }, maxProducts: { $max: \"$Number_products\" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])"
    },
    {
        "question_id": 109,
        "spider_question_id": 274,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "query": "db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 })",
        "gpt4 answer": "db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 110,
        "spider_question_id": 275,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "query": "db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 })",
        "gpt4 answer": "db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 111,
        "spider_question_id": 278,
        "db_id": "employee_hire_evaluation",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "query": "db.employee.aggregate([ { $lookup: { from: \"evaluation\", localField: \"Employee_ID\", foreignField: \"Employee_ID\", as: \"evaluation_data\" } }, { $project: { Name: 1, evaluation_count: { $size: \"$evaluation_data\" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"evaluation\", localField: \"Employee_ID\", foreignField: \"Employee_ID\", as: \"evaluation_data\" } }, { $project: { Name: 1, evaluation_count: { $size: \"$evaluation_data\" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])"
    },
    {
        "question_id": 112,
        "spider_question_id": 279,
        "db_id": "employee_hire_evaluation",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "query": "db.employee.aggregate([ { $lookup: { from: \"evaluation\", localField: \"Employee_ID\", foreignField: \"Employee_ID\", as: \"evaluation_data\" } }, { $project: { Name: 1, evaluation_count: { $size: \"$evaluation_data\" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"evaluation\", localField: \"Employee_ID\", foreignField: \"Employee_ID\", as: \"evaluation_data\" } }, { $project: { Name: 1, evaluation_count: { $size: \"$evaluation_data\" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])"
    },
    {
        "question_id": 113,
        "spider_question_id": 284,
        "db_id": "employee_hire_evaluation",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "query": "db.shop.aggregate([ { $lookup: { from: \"hiring\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"hires\" } }, { $project: { Name: 1, hiresCount: { $size: \"$hires\" } } }, { $sort: { hiresCount: -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 114,
        "spider_question_id": 286,
        "db_id": "employee_hire_evaluation",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "query": "db.shop.aggregate([ { $lookup: { from: \"hiring\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"hiring_info\" } }, { $match: { \"hiring_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $lookup: { from: \"hiring\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"hiring_info\" } }, { $match: { \"hiring_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 115,
        "spider_question_id": 287,
        "db_id": "employee_hire_evaluation",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "query": "db.shop.aggregate([ { $lookup: { from: \"hiring\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"hiring_info\" } }, { $match: { hiring_info: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $lookup: { from: \"hiring\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"hiring_info\" } }, { $match: { hiring_info: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 116,
        "spider_question_id": 288,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "query": "db.hiring.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$shop_info.Name\", count: { $sum: 1 } } }, { $project: { ShopName: \"$_id\", EmployeeCount: \"$count\" } }])",
        "gpt4 answer": "db.hiring.aggregate([ { $group: { _id: \"$Shop_ID\", numEmployees: { $sum: 1 } } }, { $lookup: { from: \"shop\", localField: \"_id\", foreignField: \"Shop_ID\", as: \"shopInfo\" } }, { $project: { shopName: \"$shopInfo.Name\", numEmployees: 1 } }, { $unwind: \"$shopName\" } ])",
        "deepseek answer": "db.hiring.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$shop_info.Name\", count: { $sum: 1 } } }, { $project: { ShopName: \"$_id\", EmployeeCount: \"$count\" } }])"
    },
    {
        "question_id": 117,
        "spider_question_id": 289,
        "db_id": "employee_hire_evaluation",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "query": "db.hiring.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$shop_info.Name\", count: { $sum: 1 } } }, { $project: { name: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.hiring.aggregate([ { $group: { _id: \"$Shop_ID\", numberOfEmployees: { $sum: 1 } } }, { $lookup: { from: \"shop\", localField: \"_id\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $project: { numberOfEmployees: 1, shopName: \"$shop_info.Name\" } } ])",
        "deepseek answer": "db.hiring.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$shop_info.Name\", count: { $sum: 1 } } }, { $project: { name: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 118,
        "spider_question_id": 290,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total bonus given in all evaluations?",
        "query": "db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: \"$Bonus\" } } }, { $project: { sum: \"$totalBonus\" } }])",
        "gpt4 answer": "db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: \"$Bonus\" } } }, { $project: { totalBonus: 1 } } ])",
        "deepseek answer": "db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: \"$Bonus\" } } }, { $project: { sum: \"$totalBonus\" } }])"
    },
    {
        "question_id": 119,
        "spider_question_id": 291,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "query": "db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: \"$Bonus\" } } }, { $project: { sum: \"$totalBonus\" } }])",
        "gpt4 answer": "db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: \"$Bonus\" } } }, { $project: { totalBonus: 1 } } ])",
        "deepseek answer": "db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: \"$Bonus\" } } }, { $project: { sum: \"$totalBonus\" } }])"
    },
    {
        "question_id": 120,
        "spider_question_id": 292,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "query": "db.hiring.find({})",
        "gpt4 answer": "db.hiring.find({})",
        "deepseek answer": "db.hiring.find({})"
    },
    {
        "question_id": 121,
        "spider_question_id": 293,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "query": "db.hiring.find({})",
        "gpt4 answer": "db.hiring.find({})",
        "deepseek answer": "db.hiring.find({})"
    },
    {
        "question_id": 122,
        "spider_question_id": 297,
        "db_id": "employee_hire_evaluation",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "query": "db.shop.aggregate([ { $group: { _id: \"$Location\" } }, { $count: \"distinctLocations\" } ])",
        "gpt4 answer": "db.shop.aggregate([ { $group: { _id: \"$Location\" } }, { $count: \"distinctLocations\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 123,
        "spider_question_id": 300,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , document_name , document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "query": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 })",
        "gpt4 answer": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 124,
        "spider_question_id": 301,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , document_name , document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "query": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 })",
        "gpt4 answer": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 125,
        "spider_question_id": 302,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "query": "db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 })",
        "gpt4 answer": "db.Documents.find( { Document_Description: /w/ }, { Document_Name: 1, Template_ID: 1 } )",
        "deepseek answer": "db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 })"
    },
    {
        "question_id": 126,
        "spider_question_id": 303,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "query": "db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 })",
        "gpt4 answer": "db.Documents.find( { Document_Description: /w/ }, { Document_Name: 1, Template_ID: 1 } )",
        "deepseek answer": "db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 })"
    },
    {
        "question_id": 127,
        "spider_question_id": 304,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named 'Robbin CV'?",
        "query": "db.Documents.find( { \"Document_Name\": \"Robbin CV\" }, { \"_id\": 0, \"Document_ID\": 1, \"Template_ID\": 1, \"Document_Description\": 1 })",
        "gpt4 answer": "db.Documents.find( { Document_Name: 'Robbin CV' }, { Document_ID: 1, Template_ID: 1, Document_Description: 1 } )",
        "deepseek answer": "db.Documents.find( { \"Document_Name\": \"Robbin CV\" }, { \"_id\": 0, \"Document_ID\": 1, \"Template_ID\": 1, \"Document_Description\": 1 })"
    },
    {
        "question_id": 128,
        "spider_question_id": 305,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "query": "db.Documents.find( { Document_Name: 'Robbin CV' }, { Document_ID: 1, Template_ID: 1, Document_Description: 1 } )",
        "gpt4 answer": "db.Documents.find( { Document_Name: 'Robbin CV' }, { Document_ID: 1, Template_ID: 1, Document_Description: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 129,
        "spider_question_id": 306,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 130,
        "spider_question_id": 307,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\" } }, { $count: \"unique_templates\" } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\" } }, { $count: \"unique_templates\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 131,
        "spider_question_id": 308,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template_data\" } }, { $unwind: \"$template_data\" }, { $match: { \"template_data.Template_Type_Code\": \"PPT\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template_info\" } }, { $unwind: \"$template_info\" }, { $match: { \"template_info.Template_Type_Code\": \"PPT\" } }, { $count: \"total_documents_using_PPT_template\" } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template_data\" } }, { $unwind: \"$template_data\" }, { $match: { \"template_data.Template_Type_Code\": \"PPT\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 132,
        "spider_question_id": 309,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template_info\" } }, { $unwind: \"$template_info\" }, { $match: { \"template_info.Template_Type_Code\": \"PPT\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"TemplateDetails\" } }, { $unwind: \"$TemplateDetails\" }, { $match: { \"TemplateDetails.Template_Type_Code\": \"PPT\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template_info\" } }, { $unwind: \"$template_info\" }, { $match: { \"template_info.Template_Type_Code\": \"PPT\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 133,
        "spider_question_id": 310,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", NumberOfDocuments: { $sum: 1 } } }, { $project: { Template_ID: \"$_id\", NumberOfDocuments: \"$NumberOfDocuments\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 134,
        "spider_question_id": 311,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 135,
        "spider_question_id": 314,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "question": "Show ids for all templates that are used by more than one document.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: \"$_id\" } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } }}, { $match: { count: { $gt: 1 } }}, { $project: { template_id: \"$_id\" }} ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: \"$_id\" } }])"
    },
    {
        "question_id": 136,
        "spider_question_id": 315,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: \"$_id\" } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { template_id: \"$_id\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: \"$_id\" } }])"
    },
    {
        "question_id": 137,
        "spider_question_id": 316,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents\": { $size: 0 } } }, { $project: { Template_ID: 1 } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"DocumentUsage\" } }, { $match: { DocumentUsage: { $size: 0 } } }, { $project: { Template_ID: 1 } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents\": { $size: 0 } } }, { $project: { Template_ID: 1 } }])"
    },
    {
        "question_id": 138,
        "spider_question_id": 317,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents\": { $size: 0 } } }, { $project: { Template_ID: 1 } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"Template_Documents\" } }, { $match: { Template_Documents: { $size: 0 } } }, { $project: { Template_ID: 1 } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents\": { $size: 0 } } }, { $project: { Template_ID: 1 } }])"
    },
    {
        "question_id": 139,
        "spider_question_id": 320,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_id , version_number , template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "query": "db.Templates.find({}, {Template_ID: 1, Version_Number: 1, Template_Type_Code: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 140,
        "spider_question_id": 321,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_id , version_number , template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "query": "db.Templates.find({}, { Template_ID: 1, Version_Number: 1, Template_Type_Code: 1 })",
        "gpt4 answer": "db.Templates.find({}, { Template_ID: 1, Version_Number: 1, Template_Type_Code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 141,
        "spider_question_id": 322,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\" } }])"
    },
    {
        "question_id": 142,
        "spider_question_id": 324,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "query": "db.Templates.find( { \"Template_Type_Code\": { \"$in\": [\"PP\", \"PPT\"] } }, { \"_id\": 0, \"Template_ID\": 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.find( { \"Template_Type_Code\": { \"$in\": [\"PP\", \"PPT\"] } }, { \"_id\": 0, \"Template_ID\": 1 })"
    },
    {
        "question_id": 143,
        "spider_question_id": 325,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "query": "db.Templates.find( { \"Template_Type_Code\": { $in: [\"PP\", \"PPT\"] } }, { \"_id\": 0, \"Template_ID\": 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.find( { \"Template_Type_Code\": { $in: [\"PP\", \"PPT\"] } }, { \"_id\": 0, \"Template_ID\": 1 })"
    },
    {
        "question_id": 144,
        "spider_question_id": 327,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "query": "db.Templates.aggregate([ { $match: { Template_Type_Code: \"CV\" } }, { $count: \"TotalCVTemplates\" } ])",
        "gpt4 answer": "db.Templates.aggregate([ { $match: { Template_Type_Code: \"CV\" } }, { $count: \"TotalCVTemplates\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 145,
        "spider_question_id": 328,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "query": "db.Templates.find({ Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 })",
        "gpt4 answer": "db.Templates.find({ Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 146,
        "spider_question_id": 329,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "query": "db.Templates.find( { Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 } )",
        "gpt4 answer": "db.Templates.find( { Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 147,
        "spider_question_id": 330,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", NumberOfTemplates: { $sum: 1 } } }, { $project: { Template_Type_Code: \"$_id\", NumberOfTemplates: 1 } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 148,
        "spider_question_id": 331,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $project: { template_type_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 149,
        "spider_question_id": 332,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 150,
        "spider_question_id": 333,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 151,
        "spider_question_id": 334,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
        "question": "Show all template type codes with less than three templates.",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { template_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: \"$_id\" } }])"
    },
    {
        "question_id": 152,
        "spider_question_id": 335,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { template_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: \"$_id\" } }])"
    },
    {
        "question_id": 153,
        "spider_question_id": 336,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Version_Number) , template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", minVersion: { $min: \"$Version_Number\" } } }, { $sort: { minVersion: 1 } }, { $limit: 1 }, { $project: { template_type_code: \"$_id\", minVersion: 1 } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", MinVersion: { $min: \"$Version_Number\" } } }, { $sort: { MinVersion: 1 } }, { $limit: 1 }, { $project: { MinVersion: 1, Template_Type_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", minVersion: { $min: \"$Version_Number\" } } }, { $sort: { minVersion: 1 } }, { $limit: 1 }, { $project: { template_type_code: \"$_id\", minVersion: 1 } }])"
    },
    {
        "question_id": 154,
        "spider_question_id": 337,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Version_Number) , template_type_code FROM Templates",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "query": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", minVersion: { $min: \"$Version_Number\" } }}, { $project: { Version_Number: \"$minVersion\", Template_Type_Code: \"$_id\" }}, { $sort: { Version_Number: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Templates.aggregate([ { $group: { _id: \"$Template_Type_Code\", minVersion: { $min: \"$Version_Number\" } }}, { $project: { Version_Number: \"$minVersion\", Template_Type_Code: \"$_id\" }}, { $sort: { Version_Number: 1 } }, { $limit: 1 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 155,
        "spider_question_id": 338,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
        "question": "What is the template type code of the template used by document with the name 'Data base'?",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Data base\" } }, { $project: { \"Template_Type_Code\": 1 } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { Document_Name: 'Data base' } }, { $lookup: { from: 'Templates', localField: 'Template_ID', foreignField: 'Template_ID', as: 'templateInfo' } }, { $unwind: '$templateInfo' }, { $project: { template_type_code: '$templateInfo.Template_Type_Code' } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Data base\" } }, { $project: { \"Template_Type_Code\": 1 } }])"
    },
    {
        "question_id": 156,
        "spider_question_id": 339,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Data base\" } }, { $project: { \"_id\": 0, \"Template_Type_Code\": 1 } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { Document_Name: \"Data base\" } }, { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template\" } }, { $unwind: \"$template\" }, { $project: { template_type_code: \"$template.Template_Type_Code\" } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Data base\" } }, { $project: { \"_id\": 0, \"Template_Type_Code\": 1 } }])"
    },
    {
        "question_id": 157,
        "spider_question_id": 340,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
        "question": "Show all document names using templates with template type code BK.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"template\" } }, { $unwind: \"$template\" }, { $lookup: { from: \"Ref_Template_Types\", localField: \"template.Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"templateType\" } }, { $unwind: \"$templateType\" }, { $match: { \"templateType.Template_Type_Code\": \"BK\" } }, { $project: { Document_Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 158,
        "spider_question_id": 341,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "query": "db.Templates.aggregate([ { $match: { \"Template_Type_Code\": \"BK\" } }, { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $project: { \"_id\": 0, \"Document_Name\": \"$documents.Document_Name\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.aggregate([ { $match: { \"Template_Type_Code\": \"BK\" } }, { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $project: { \"_id\": 0, \"Document_Name\": \"$documents.Document_Name\" } }])"
    },
    {
        "question_id": 159,
        "spider_question_id": 342,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $project: { Template_Type_Code: \"$_id\", count: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $project: { Template_Type_Code: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 160,
        "spider_question_id": 343,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different template type codes, and how many documents use each type?",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $project: { Template_Type_Code: \"$_id\", count: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $project: { Template_Type_Code: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 161,
        "spider_question_id": 344,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: \"$_id\" } }])"
    },
    {
        "question_id": 162,
        "spider_question_id": 345,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: \"$_id\" } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Template_ID\", count: { $sum: 1 } } }, { $lookup: { from: \"Templates\", localField: \"_id\", foreignField: \"Template_ID\", as: \"template_info\" } }, { $unwind: \"$template_info\" }, { $group: { _id: \"$template_info.Template_Type_Code\", totalCount: { $sum: \"$count\" } } }, { $sort: { totalCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: \"$_id\" } }])"
    },
    {
        "question_id": 163,
        "spider_question_id": 348,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "query": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1})",
        "gpt4 answer": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1})"
    },
    {
        "question_id": 164,
        "spider_question_id": 349,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "query": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1})",
        "gpt4 answer": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1})"
    },
    {
        "question_id": 165,
        "spider_question_id": 350,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
        "question": "What is the template type descriptions for template type code 'AD'.",
        "query": "db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })",
        "gpt4 answer": "db.Ref_Template_Types.find({ Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })"
    },
    {
        "question_id": 166,
        "spider_question_id": 351,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "query": "db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })",
        "gpt4 answer": "db.Ref_Template_Types.find({ Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })"
    },
    {
        "question_id": 167,
        "spider_question_id": 352,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
        "question": "What is the template type code for template type description 'Book'.",
        "query": "db.Ref_Template_Types.findOne({Template_Type_Description: 'Book'}, {Template_Type_Code: 1})",
        "gpt4 answer": "db.Ref_Template_Types.find({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 })",
        "deepseek answer": "db.Ref_Template_Types.findOne({Template_Type_Description: 'Book'}, {Template_Type_Code: 1})"
    },
    {
        "question_id": 168,
        "spider_question_id": 353,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
        "question": "Return the type code of the template type with the description 'Book'.",
        "query": "db.Ref_Template_Types.findOne({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 })",
        "gpt4 answer": "db.Ref_Template_Types.find({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 })",
        "deepseek answer": "db.Ref_Template_Types.findOne({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 })"
    },
    {
        "question_id": 169,
        "spider_question_id": 354,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "query": "db.Ref_Template_Types.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"Templates\" } }, { $unwind: \"$Templates\" }, { $lookup: { from: \"Documents\", localField: \"Templates.Template_ID\", foreignField: \"Template_ID\", as: \"Documents\" } }, { $match: { \"Documents\": { $exists: true, $not: {$size: 0} } } }, { $group: { _id: \"$Template_Type_Description\" } }, { $project: { Template_Type_Description: \"$_id\" } } ])",
        "gpt4 answer": "db.Ref_Template_Types.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"Templates\" } }, { $unwind: \"$Templates\" }, { $lookup: { from: \"Documents\", localField: \"Templates.Template_ID\", foreignField: \"Template_ID\", as: \"Documents\" } }, { $match: { \"Documents\": { $exists: true, $not: {$size: 0} } } }, { $group: { _id: \"$Template_Type_Description\" } }, { $project: { Template_Type_Description: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 170,
        "spider_question_id": 355,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "query": "db.Ref_Template_Types.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"templates\" } }, { $unwind: \"$templates\" }, { $lookup: { from: \"Documents\", localField: \"templates.Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Description\" } }, { $project: { Template_Type_Description: \"$_id\" } }])",
        "gpt4 answer": "db.Templates.aggregate([ { $lookup: { from: \"Documents\", localField: \"Template_ID\", foreignField: \"Template_ID\", as: \"Documents\" } }, { $match: { \"Documents\": { $ne: [] } } }, { $lookup: { from: \"Ref_Template_Types\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"TemplateTypes\" } }, { $unwind: \"$TemplateTypes\" }, { $group: { _id: \"$TemplateTypes.Template_Type_Description\" } }, { $project: { template_type_description: \"$_id\" } } ])",
        "deepseek answer": "db.Ref_Template_Types.aggregate([ { $lookup: { from: \"Templates\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"templates\" } }, { $unwind: \"$templates\" }, { $lookup: { from: \"Documents\", localField: \"templates.Template_ID\", foreignField: \"Template_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $group: { _id: \"$Template_Type_Description\" } }, { $project: { Template_Type_Description: \"$_id\" } }])"
    },
    {
        "question_id": 171,
        "spider_question_id": 356,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
        "question": "What are the template ids with template type description 'Presentation'.",
        "query": "db.Templates.find( { \"Template_Type_Code\": { \"$in\": db.Ref_Template_Types.find( { \"Template_Type_Description\": \"Presentation\" }, { \"Template_Type_Code\": 1, \"_id\": 0 } ).toArray().map(function(doc) { return doc.Template_Type_Code }) } }, { \"Template_ID\": 1, \"_id\": 0 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Templates.find( { \"Template_Type_Code\": { \"$in\": db.Ref_Template_Types.find( { \"Template_Type_Description\": \"Presentation\" }, { \"Template_Type_Code\": 1, \"_id\": 0 } ).toArray().map(function(doc) { return doc.Template_Type_Code }) } }, { \"Template_ID\": 1, \"_id\": 0 })"
    },
    {
        "question_id": 172,
        "spider_question_id": 357,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "query": "db.Templates.aggregate([ { $lookup: { from: \"Ref_Template_Types\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"ref_type\" } }, { $match: { \"ref_type.Template_Type_Description\": \"Presentation\" } }, { $project: { Template_ID: 1 } } ])",
        "gpt4 answer": "db.Templates.aggregate([ { $lookup: { from: \"Ref_Template_Types\", localField: \"Template_Type_Code\", foreignField: \"Template_Type_Code\", as: \"ref_type\" } }, { $match: { \"ref_type.Template_Type_Description\": \"Presentation\" } }, { $project: { Template_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 173,
        "spider_question_id": 360,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Summer Show\" } }, { $count: \"total\" }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document\" } }, { $match: { \"document.Document_Name\": \"Summer Show\" } }, { $count: \"paragraph_count\" } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Summer Show\" } }, { $count: \"total\" }])"
    },
    {
        "question_id": 174,
        "spider_question_id": 361,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Summer Show\" } }, { $count: \"total\" }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_info\" } }, { $match: { \"document_info.Document_Name\": \"Summer Show\" } }, { $count: \"paragraph_count\" } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Summer Show\" } }, { $count: \"total\" }])"
    },
    {
        "question_id": 175,
        "spider_question_id": 364,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Welcome to NY\" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: 'Documents', localField: 'Document_ID', foreignField: 'Document_ID', as: 'document_info' } }, { $match: { 'document_info.Document_Name': 'Welcome to NY' } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Welcome to NY\" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])"
    },
    {
        "question_id": 176,
        "spider_question_id": 365,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Welcome to NY\" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document\" } }, { $match: { \"document.Document_Name\": \"Welcome to NY\" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Welcome to NY\" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])"
    },
    {
        "question_id": 177,
        "spider_question_id": 366,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
        "question": "Show all paragraph texts for the document 'Customer reviews'.",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Customer reviews\" } }, { $project: { Paragraph_Text: 1 } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { Document_Name: 'Customer reviews' } }, { $lookup: { from: 'Paragraphs', localField: 'Document_ID', foreignField: 'Document_ID', as: 'Paragraphs' } }, { $unwind: '$Paragraphs' }, { $project: { paragraph_text: '$Paragraphs.Paragraph_Text' } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Customer reviews\" } }, { $project: { Paragraph_Text: 1 } }])"
    },
    {
        "question_id": 178,
        "spider_question_id": 367,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Customer reviews\" } }, { $project: { Paragraph_Text: 1 } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_info\" } }, { $unwind: \"$document_info\" }, { $match: { \"document_info.Document_Name\": \"Customer reviews\" } }, { $project: { Paragraph_Text: 1 } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"Customer reviews\" } }, { $project: { Paragraph_Text: 1 } }])"
    },
    {
        "question_id": 179,
        "spider_question_id": 368,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $sort: { _id: 1 } }, { $project: { document_id: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", paragraphCount: { $sum: 1 } } }, { $sort: { _id: 1 } }, { $project: { Document_ID: \"$_id\", Paragraph_Count: \"$paragraphCount\" } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $sort: { _id: 1 } }, { $project: { document_id: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 180,
        "spider_question_id": 369,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $sort: { _id: 1 } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", numberOfParagraphs: { $sum: 1 } } }, { $sort: { _id: 1 } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $sort: { _id: 1 } }])"
    },
    {
        "question_id": 181,
        "spider_question_id": 370,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_info\" } }, { $unwind: \"$document_info\" }, { $group: { _id: \"$Document_ID\", document_name: { $first: \"$document_info.Document_Name\" }, number_of_paragraphs: { $sum: 1 } } }, { $project: { document_id: \"$_id\", document_name: 1, number_of_paragraphs: 1 } } ])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_info\" } }, { $unwind: \"$document_info\" }, { $group: { _id: \"$Document_ID\", document_name: { $first: \"$document_info.Document_Name\" }, number_of_paragraphs: { $sum: 1 } } }, { $project: { document_id: \"$_id\", document_name: 1, number_of_paragraphs: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 182,
        "spider_question_id": 371,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "query": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"DocumentInfo\" } }, { $unwind: \"$DocumentInfo\" }, { $group: { _id: \"$Document_ID\", Document_Name: { $first: \"$DocumentInfo.Document_Name\" }, NumberOfParagraphs: { $count: {} } } }, { $project: { Document_ID: \"$_id\", Document_Name: 1, NumberOfParagraphs: 1 } } ])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $lookup: { from: \"Documents\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"DocumentInfo\" } }, { $unwind: \"$DocumentInfo\" }, { $group: { _id: \"$Document_ID\", Document_Name: { $first: \"$DocumentInfo.Document_Name\" }, NumberOfParagraphs: { $count: {} } } }, { $project: { Document_ID: \"$_id\", Document_Name: 1, NumberOfParagraphs: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 183,
        "spider_question_id": 372,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "question": "List all document ids with at least two paragraphs.",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $project: { Document_ID: \"$_id\" }} ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])"
    },
    {
        "question_id": 184,
        "spider_question_id": 373,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", paragraphCount: { $sum: 1 } } }, { $match: { paragraphCount: { $gte: 2 } } }, { $project: { document_id: \"$_id\" } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])"
    },
    {
        "question_id": 185,
        "spider_question_id": 374,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: \"Documents\", localField: \"_id\", foreignField: \"Document_ID\", as: \"document_details\" }}, { $unwind: \"$document_details\"}, { $project: { document_id: \"$_id\", document_name: \"$document_details.Document_Name\" }} ])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: \"Documents\", localField: \"_id\", foreignField: \"Document_ID\", as: \"document_details\" }}, { $unwind: \"$document_details\"}, { $project: { document_id: \"$_id\", document_name: \"$document_details.Document_Name\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 186,
        "spider_question_id": 375,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Documents\", localField: \"_id\", foreignField: \"Document_ID\", as: \"documentDetails\" } }, { $unwind: \"$documentDetails\" }, { $project: { document_id: \"$_id\", document_name: \"$documentDetails.Document_Name\" } } ])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Documents\", localField: \"_id\", foreignField: \"Document_ID\", as: \"documentDetails\" } }, { $unwind: \"$documentDetails\" }, { $project: { document_id: \"$_id\", document_name: \"$documentDetails.Document_Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 187,
        "spider_question_id": 378,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", paragraphCount: { $sum: 1 } } }, { $match: { paragraphCount: { $gte: 1, $lte: 2 } } }, { $project: { document_id: \"$_id\" } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])"
    },
    {
        "question_id": 188,
        "spider_question_id": 379,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "query": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: '$_id' } } ])",
        "deepseek answer": "db.Paragraphs.aggregate([ { $group: { _id: \"$Document_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: \"$_id\" } }])"
    },
    {
        "question_id": 189,
        "spider_question_id": 380,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "query": "db.Paragraphs.aggregate([ { $match: { $or: [{ Paragraph_Text: 'Brazil' }, { Paragraph_Text: 'Ireland' }] } }, { $group: { _id: \"$Document_ID\", countries: { $addToSet: \"$Paragraph_Text\" } } }, { $match: { countries: { $all: ['Brazil', 'Ireland'] } } }, { $project: { Document_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.Paragraphs.aggregate([ { $match: { $or: [{ Paragraph_Text: 'Brazil' }, { Paragraph_Text: 'Ireland' }] } }, { $group: { _id: \"$Document_ID\", countries: { $addToSet: \"$Paragraph_Text\" } } }, { $match: { countries: { $all: ['Brazil', 'Ireland'] } } }, { $project: { Document_ID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 190,
        "spider_question_id": 381,
        "db_id": "cre_Doc_Template_Mgt",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Paragraphs\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"paragraphs\" } }, { $match: { \"paragraphs.Paragraph_Text\": { $all: [\"Brazil\", \"Ireland\"]} } }, { $project: { _id: \"$Document_ID\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 191,
        "spider_question_id": 384,
        "db_id": "course_teach",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "query": "db.teacher.find({}, {Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.teacher.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.teacher.find({}, {Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 192,
        "spider_question_id": 385,
        "db_id": "course_teach",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "query": "db.teacher.find({}, {Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.teacher.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.teacher.find({}, {Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 193,
        "spider_question_id": 386,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Age , Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "query": "db.teacher.find({}, {Age: 1, Hometown: 1})",
        "gpt4 answer": "db.teacher.find({}, {Age: 1, Hometown: 1})",
        "deepseek answer": "db.teacher.find({}, {Age: 1, Hometown: 1})"
    },
    {
        "question_id": 194,
        "spider_question_id": 387,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Age , Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "query": "db.teacher.aggregate([ { $project: { Age: 1, Hometown: 1 } }])",
        "gpt4 answer": "db.teacher.find({}, { Age: 1, Hometown: 1 })",
        "deepseek answer": "db.teacher.aggregate([ { $project: { Age: 1, Hometown: 1 } }])"
    },
    {
        "question_id": 195,
        "spider_question_id": 388,
        "db_id": "course_teach",
        "difficulty": "easy",
        "spider_gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "query": "db.teacher.find({ hometown: { $ne: 'Little Lever Urban District' } }, { Name: 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.teacher.find({ hometown: { $ne: 'Little Lever Urban District' } }, { Name: 1 })"
    },
    {
        "question_id": 196,
        "spider_question_id": 389,
        "db_id": "course_teach",
        "difficulty": "easy",
        "spider_gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "query": "db.teacher.find({hometown: {$ne: 'Little Lever Urban District'}}, { Name: 1})",
        "gpt4 answer": "db.teacher.find({hometown: {$ne: \"Little Lever Urban District\"}}, {Name: 1})",
        "deepseek answer": "db.teacher.find({hometown: {$ne: 'Little Lever Urban District'}}, { Name: 1})"
    },
    {
        "question_id": 197,
        "spider_question_id": 392,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "query": "db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.teacher.find({}, { Hometown: 1 }).sort({ Age: 1 }).limit(1)",
        "deepseek answer": "db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1)"
    },
    {
        "question_id": 198,
        "spider_question_id": 393,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest teacher from?",
        "query": "db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.teacher.find({}, { Hometown: 1 }).sort({ Age: 1 }).limit(1)",
        "deepseek answer": "db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1)"
    },
    {
        "question_id": 199,
        "spider_question_id": 394,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "query": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }, { $project: { Hometown: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }, { $project: { Hometown: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 200,
        "spider_question_id": 395,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "query": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 201,
        "spider_question_id": 397,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "query": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.teacher.aggregate([ { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 202,
        "spider_question_id": 400,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "query": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $unwind: \"$arrangements\" }, { $lookup: { from: \"course\", localField: \"arrangements.Course_ID\", foreignField: \"Course_ID\", as: \"course_details\" } }, { $unwind: \"$course_details\" }, { $project: { Name: 1, Course: \"$course_details.Course\" } } ])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $unwind: \"$arrangements\" }, { $lookup: { from: \"course\", localField: \"arrangements.Course_ID\", foreignField: \"Course_ID\", as: \"course_details\" } }, { $unwind: \"$course_details\" }, { $project: { Name: 1, Course: \"$course_details.Course\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 203,
        "spider_question_id": 401,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "query": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $lookup: { from: \"course\", localField: \"courses.Course_ID\", foreignField: \"Course_ID\", as: \"course\" } }, { $unwind: \"$course\" }, { $project: { Name: 1, Course: \"$course.Course\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 204,
        "spider_question_id": 402,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$course_info\" }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\", Course: \"$course_info.Course\" } }, { $sort: { Name: 1 } }])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $unwind: \"$arrangements\" }, { $lookup: { from: \"course\", localField: \"arrangements.Course_ID\", foreignField: \"Course_ID\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $sort: { \"Name\": 1 } }, { $project: { \"Name\": 1, \"Course\": \"$courses.Course\" } } ])",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$course_info\" }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\", Course: \"$course_info.Course\" } }, { $sort: { Name: 1 } }])"
    },
    {
        "question_id": 205,
        "spider_question_id": 403,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$course_info\" }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\", Course: \"$course_info.Course\" } }, { $sort: { Name: 1 } }])",
        "gpt4 answer": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $project: { \"Name\": \"$teacher_info.Name\", \"Course\": \"$course_info.Course\" } }, { $sort: { \"Name\": 1 } } ])",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$course_info\" }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\", Course: \"$course_info.Course\" } }, { $sort: { Name: 1 } }])"
    },
    {
        "question_id": 206,
        "spider_question_id": 404,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.Course\": \"Math\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.Course\": \"Math\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\" } }])"
    },
    {
        "question_id": 207,
        "spider_question_id": 405,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.Course\": \"Math\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\" } }])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $unwind: \"$arrangements\" }, { $lookup: { from: \"course\", localField: \"arrangements.Course_ID\", foreignField: \"Course_ID\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $match: { \"courses.Course\": \"Math\" } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"course\", localField: \"Course_ID\", foreignField: \"Course_ID\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.Course\": \"Math\" } }, { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $project: { Name: \"$teacher_info.Name\" } }])"
    },
    {
        "question_id": 208,
        "spider_question_id": 406,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of teachers and the number of courses they teach.",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", NumberOfCourses: \"$count\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", NumberOfCourses: \"$count\" } }])"
    },
    {
        "question_id": 209,
        "spider_question_id": 407,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Count: \"$count\" } }])",
        "gpt4 answer": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", courses_taught: { $sum: 1 } } }, { $project: { Name: \"$_id\", Course_Count: \"$courses_taught\" } } ])",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Count: \"$count\" } }])"
    },
    {
        "question_id": 210,
        "spider_question_id": 408,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
        "question": "Show names of teachers that teach at least two courses.",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } }])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"courses\" } }, { $match: { \"courses.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } }])"
    },
    {
        "question_id": 211,
        "spider_question_id": 409,
        "db_id": "course_teach",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "query": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } }])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"courses_taught\" } }, { $match: { \"courses_taught.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.course_arrange.aggregate([ { $lookup: { from: \"teacher\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"teacher_info\" } }, { $unwind: \"$teacher_info\" }, { $group: { _id: \"$teacher_info.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } }])"
    },
    {
        "question_id": 212,
        "spider_question_id": 410,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "query": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $match: { \"arrangements\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $match: { \"arrangements\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 213,
        "spider_question_id": 411,
        "db_id": "course_teach",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "query": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $match: { arrangements: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.teacher.aggregate([ { $lookup: { from: \"course_arrange\", localField: \"Teacher_ID\", foreignField: \"Teacher_ID\", as: \"arrangements\" } }, { $match: { arrangements: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 214,
        "spider_question_id": 413,
        "db_id": "museum_visit",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "query": "db.visitor.find( {Level_of_membership: {$gt: 4}}, { Name: 1}).sort({Level_of_membership: -1})",
        "gpt4 answer": "db.visitor.find({ Level_of_membership: { $gt: 4 } }, { Name: 1 }).sort({ Level_of_membership: -1 })",
        "deepseek answer": "db.visitor.find( {Level_of_membership: {$gt: 4}}, { Name: 1}).sort({Level_of_membership: -1})"
    },
    {
        "question_id": 215,
        "spider_question_id": 414,
        "db_id": "museum_visit",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "query": "db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { avg: \"$averageAge\" } }])",
        "gpt4 answer": "db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { avg: \"$averageAge\" } }])"
    },
    {
        "question_id": 216,
        "spider_question_id": 415,
        "db_id": "museum_visit",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "query": "db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 }).sort({ Age: -1 })",
        "gpt4 answer": "db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 } ).sort({ Age: -1 })",
        "deepseek answer": "db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 }).sort({ Age: -1 })"
    },
    {
        "question_id": 217,
        "spider_question_id": 416,
        "db_id": "museum_visit",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "query": "db.museum.find({}, { Museum_ID: 1, Name: 1 }).sort({ Num_of_Staff: -1 }).limit(1)",
        "gpt4 answer": "db.museum.find({}, { Museum_ID: 1, Name: 1 }).sort({ Num_of_Staff: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 218,
        "spider_question_id": 418,
        "db_id": "museum_visit",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "query": "db.museum.find( { Name: \"Plaza Museum\" }, { Num_of_Staff: 1, Open_Year: 1 })",
        "gpt4 answer": "db.museum.find({ Name: \"Plaza Museum\" }, { Num_of_Staff: 1, Open_Year: 1 })",
        "deepseek answer": "db.museum.find( { Name: \"Plaza Museum\" }, { Num_of_Staff: 1, Open_Year: 1 })"
    },
    {
        "question_id": 219,
        "spider_question_id": 422,
        "db_id": "museum_visit",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "query": "db.visit.aggregate([ { $group: { _id: \"$Museum_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $lookup: { from: \"museum\", localField: \"_id\", foreignField: \"Museum_ID\", as: \"museum\" } }, { $project: { _id: 1, name: { $arrayElemAt: [\"$museum.Name\", 0] } } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 220,
        "spider_question_id": 423,
        "db_id": "museum_visit",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "query": "db.museum.find( { Museum_ID: { $nin: db.visit.distinct(\"Museum_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.museum.aggregate([ { $lookup: { from: \"visit\", localField: \"Museum_ID\", foreignField: \"Museum_ID\", as: \"visitors\" } }, { $match: { visitors: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.museum.find( { Museum_ID: { $nin: db.visit.distinct(\"Museum_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 221,
        "spider_question_id": 425,
        "db_id": "museum_visit",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "query": "db.visit.aggregate([ { $group: { _id: null, avgNumOfTicket: { $avg: \"$Num_of_Ticket\" }, maxNumOfTicket: { $max: \"$Num_of_Ticket\" } } }, { $project: { avgNumOfTicket: 1, maxNumOfTicket: 1 } }])",
        "gpt4 answer": "db.visit.aggregate([ { $group: { _id: null, averageNumberOfTickets: { $avg: \"$Num_of_Ticket\" }, maxNumberOfTickets: { $max: \"$Num_of_Ticket\" } } }, { $project: { averageNumberOfTickets: 1, maxNumberOfTickets: 1 } } ])",
        "deepseek answer": "db.visit.aggregate([ { $group: { _id: null, avgNumOfTicket: { $avg: \"$Num_of_Ticket\" }, maxNumOfTicket: { $max: \"$Num_of_Ticket\" } } }, { $project: { avgNumOfTicket: 1, maxNumOfTicket: 1 } }])"
    },
    {
        "question_id": 222,
        "spider_question_id": 438,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all matches.",
        "query": "db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: \"$winner_rank\" } } }, { $project: { avg: \"$averageRank\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: \"$winner_rank\" } } }, { $project: { averageRank: 1 } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: \"$winner_rank\" } } }, { $project: { avg: \"$averageRank\" } }])"
    },
    {
        "question_id": 223,
        "spider_question_id": 439,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "query": "db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: \"$winner_rank\" } } }, { $project: { avg: \"$averageRank\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: null, averageWinnerRank: { $avg: \"$winner_rank\" } } }, { $project: { averageWinnerRank: 1 } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: \"$winner_rank\" } } }, { $project: { avg: \"$averageRank\" } }])"
    },
    {
        "question_id": 224,
        "spider_question_id": 440,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "query": "db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: \"$loser_rank\" } } }, { $project: { min: \"$min_loser_rank\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: null, highestRank: { $min: \"$loser_rank\" } } }, { $project: { highestRank: 1 } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: \"$loser_rank\" } } }, { $project: { min: \"$min_loser_rank\" } }])"
    },
    {
        "question_id": 225,
        "spider_question_id": 441,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all matches?",
        "query": "db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: \"$loser_rank\" } } }, { $project: { min: \"$min_loser_rank\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: null, bestRank: { $min: \"$loser_rank\" } } }, { $project: { bestRank: 1 } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: \"$loser_rank\" } } }, { $project: { min: \"$min_loser_rank\" } }])"
    },
    {
        "question_id": 226,
        "spider_question_id": 445,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "query": "db.matches.aggregate([ { $group: { _id: \"$loser_name\" } }, { $count: \"distinct_loser_names\" } ])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$loser_name\" } }, { $count: \"distinct_loser_names\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 227,
        "spider_question_id": 446,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "query": "db.matches.aggregate([ { $group: { _id: \"$tourney_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: \"$_id\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$tourney_name\", totalMatches: { $sum: 1 } } }, { $match: { totalMatches: { $gt: 10 } } }, { $project: { tourney_name: \"$_id\" } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: \"$tourney_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: \"$_id\" } }])"
    },
    {
        "question_id": 228,
        "spider_question_id": 447,
        "db_id": "wta_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "query": "db.matches.aggregate([ { $group: { _id: \"$tourney_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: \"$_id\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$tourney_name\", matchesCount: { $sum: 1 } } }, { $match: { matchesCount: { $gt: 10 } } }, { $project: { tourney_name: \"$_id\" } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: \"$tourney_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: \"$_id\" } }])"
    },
    {
        "question_id": 229,
        "spider_question_id": 448,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "query": "db.matches.aggregate([ { $match: { year: { $in: [2013, 2016] } } }, { $group: { _id: \"$winner_id\", years: { $addToSet: \"$year\" }, winner_name: { $first: \"$winner_name\" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: 1 } } ])",
        "gpt4 answer": "db.matches.aggregate([ { $match: { year: { $in: [2013, 2016] } } }, { $group: { _id: \"$winner_id\", years: { $addToSet: \"$year\" }, winner_name: { $first: \"$winner_name\" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 230,
        "spider_question_id": 449,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "query": "db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $group: { _id: \"$winner_id\", years: { $addToSet: \"$year\" }, names: { $first: \"$winner_name\" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: \"$names\" } } ])",
        "gpt4 answer": "db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $group: { _id: \"$winner_id\", years: { $addToSet: \"$year\" }, names: { $first: \"$winner_name\" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: \"$names\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 231,
        "spider_question_id": 451,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
        "question": "How many matches were played in 2013 or 2016?",
        "query": "db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $count: \"total_matches\" } ])",
        "gpt4 answer": "db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $count: \"total_matches\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 232,
        "spider_question_id": 453,
        "db_id": "wta_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "query": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"matches_won\" } }, { $match: { \"matches_won.tourney_name\": { $all: [\"WTA Championships\", \"Australian Open\"] } } }, { $project: { first_name: 1, country_code: 1 } } ])",
        "gpt4 answer": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"matches_won\" } }, { $match: { \"matches_won.tourney_name\": { $all: [\"WTA Championships\", \"Australian Open\"] } } }, { $project: { first_name: 1, country_code: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 233,
        "spider_question_id": 454,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "query": "db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1)",
        "gpt4 answer": "db.players.find({}, { first_name: 1, country_code: 1 }).sort({ birth_date: 1 }).limit(1)",
        "deepseek answer": "db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1)"
    },
    {
        "question_id": 234,
        "spider_question_id": 455,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "query": "db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1)",
        "gpt4 answer": "db.players.find({}, { first_name: 1, country_code: 1 }).sort({ birth_date: 1 }).limit(1)",
        "deepseek answer": "db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1)"
    },
    {
        "question_id": 235,
        "spider_question_id": 462,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "query": "db.matches.aggregate([ { $group: { _id: \"$year\", totalMatches: { $sum: 1 } } }, { $sort: { totalMatches: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$year\", totalMatches: { $sum: 1 } } }, { $sort: { totalMatches: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 236,
        "spider_question_id": 463,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "query": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } }])"
    },
    {
        "question_id": 237,
        "spider_question_id": 464,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "query": "db.matches.aggregate([ { $group: { _id: \"$winner_name\", count: { $sum: 1 }, winner_rank_points: { $first: \"$winner_rank_points\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: \"$_id\", winner_rank_points: 1 } } ])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$winner_name\", count: { $sum: 1 }, winner_rank_points: { $first: \"$winner_rank_points\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: \"$_id\", winner_rank_points: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 238,
        "spider_question_id": 465,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "query": "db.matches.aggregate([ { $group: { _id: \"$winner_name\", count: { $sum: 1 }, rank_points: { $first: \"$winner_rank_points\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: \"$_id\", winner_rank_points: \"$rank_points\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: \"$winner_name\", count: { $sum: 1 }, rank_points: { $first: \"$winner_rank_points\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: \"$_id\", winner_rank_points: \"$rank_points\" } }])"
    },
    {
        "question_id": 239,
        "spider_question_id": 466,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "query": "db.matches.aggregate([ { $match: { tourney_name: \"Australian Open\" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])",
        "gpt4 answer": "db.matches.find({ tourney_name: 'Australian Open' }, { winner_name: 1 }).sort({ winner_rank_points: -1 }).limit(1)",
        "deepseek answer": "db.matches.aggregate([ { $match: { tourney_name: \"Australian Open\" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])"
    },
    {
        "question_id": 240,
        "spider_question_id": 467,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "query": "db.matches.aggregate([ { $match: { tourney_name: \"Australian Open\" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])",
        "gpt4 answer": "db.matches.find({ tourney_name: 'Australian Open' }, { winner_name: 1 }).sort({ winner_rank_points: -1 }).limit(1)",
        "deepseek answer": "db.matches.aggregate([ { $match: { tourney_name: \"Australian Open\" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])"
    },
    {
        "question_id": 241,
        "spider_question_id": 468,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "query": "db.matches.find({}, { winner_name: 1, loser_name: 1 }).sort({ minutes: -1 }).limit(1)",
        "gpt4 answer": "db.matches.find({}, { winner_name: 1, loser_name: 1 }).sort({ minutes: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 242,
        "spider_question_id": 469,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "query": "db.matches.aggregate([ { $sort: { \"minutes\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"winner_name\": 1, \"loser_name\": 1 } }])",
        "gpt4 answer": "db.matches.find({}, {winner_name: 1, loser_name: 1}).sort({minutes: -1}).limit(1)",
        "deepseek answer": "db.matches.aggregate([ { $sort: { \"minutes\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"winner_name\": 1, \"loser_name\": 1 } }])"
    },
    {
        "question_id": 243,
        "spider_question_id": 476,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "query": "db.players.aggregate([ { $group: { _id: \"$country_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: \"$_id\" } }])",
        "gpt4 answer": "db.players.aggregate([ { $group: { _id: \"$country_code\", num_players: { $sum: 1 } } }, { $sort: { num_players: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.players.aggregate([ { $group: { _id: \"$country_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: \"$_id\" } }])"
    },
    {
        "question_id": 244,
        "spider_question_id": 477,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "query": "db.players.aggregate([ { $group: { _id: \"$country_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: \"$_id\" } }])",
        "gpt4 answer": "db.players.aggregate([ { $group: { _id: \"$country_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.players.aggregate([ { $group: { _id: \"$country_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: \"$_id\" } }])"
    },
    {
        "question_id": 245,
        "spider_question_id": 482,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "query": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$year\", totalMatches: { $sum: 1 } } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 246,
        "spider_question_id": 483,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "query": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $project: { year: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.matches.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 247,
        "spider_question_id": 484,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "query": "db.matches.aggregate([ { $sort: { winner_age: 1 } }, { $limit: 3 }, { $project: { winner_name: 1, winner_rank: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.matches.aggregate([ { $sort: { winner_age: 1 } }, { $limit: 3 }, { $project: { winner_name: 1, winner_rank: 1 } }])"
    },
    {
        "question_id": 248,
        "spider_question_id": 485,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "query": "db.matches.aggregate([ { $sort: { \"winner_age\": 1 } }, { $lookup: { from: \"players\", localField: \"winner_id\", foreignField: \"player_id\", as: \"winner\" } }, { $project: { \"winner_name\": { $concat: [ { $arrayElemAt: [ \"$winner.first_name\", 0 ] }, \" \", { $arrayElemAt: [ \"$winner.last_name\", 0 ] } ] }, \"winner_rank\": 1 } }, { $limit: 3 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 249,
        "spider_question_id": 486,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "query": "db.matches.aggregate([ { $match: { tourney_name: 'WTA Championships', winner_hand: 'L' } }, { $group: { _id: \"$winner_id\" } }, { $count: \"distinct_left_handed_winners\" } ])",
        "gpt4 answer": "db.matches.aggregate([ { $match: { tourney_name: 'WTA Championships', winner_hand: 'L' } }, { $group: { _id: \"$winner_id\" } }, { $count: \"distinct_left_handed_winners\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 250,
        "spider_question_id": 487,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "query": "db.matches.aggregate([ { $match: { tourney_name: \"WTA Championships\", winner_hand: \"L\" } }, { $group: { _id: \"$winner_name\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.matches.aggregate([ { $match: { tourney_name: 'WTA Championships', winner_hand: 'L' } }, { $group: { _id: \"$winner_id\" } }, { $count: \"num_left_handed_winners\" } ])",
        "deepseek answer": "db.matches.aggregate([ { $match: { tourney_name: \"WTA Championships\", winner_hand: \"L\" } }, { $group: { _id: \"$winner_name\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 251,
        "spider_question_id": 488,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "query": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $sort: { \"matches.winner_rank_points\": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])",
        "gpt4 answer": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"winning_matches\" } }, { $unwind: \"$winning_matches\" }, { $sort: { \"winning_matches.winner_rank_points\": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } } ])",
        "deepseek answer": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $sort: { \"matches.winner_rank_points\": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])"
    },
    {
        "question_id": 252,
        "spider_question_id": 489,
        "db_id": "wta_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "query": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $sort: { \"matches.winner_rank_points\": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])",
        "gpt4 answer": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"winning_matches\" } }, { $unwind: \"$winning_matches\" }, { $sort: { \"winning_matches.winner_rank_points\": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } } ])",
        "deepseek answer": "db.players.aggregate([ { $lookup: { from: \"matches\", localField: \"player_id\", foreignField: \"winner_id\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $sort: { \"matches.winner_rank_points\": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])"
    },
    {
        "question_id": 253,
        "spider_question_id": 490,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "query": "db.players.aggregate([ { $group: { _id: \"$hand\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.players.aggregate([ { $group: { _id: \"$hand\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.players.aggregate([ { $group: { _id: \"$hand\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 254,
        "spider_question_id": 491,
        "db_id": "wta_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "query": "db.players.aggregate([ { $group: { _id: \"$hand\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.players.aggregate([ { $group: { _id: \"$hand\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.players.aggregate([ { $group: { _id: \"$hand\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 255,
        "spider_question_id": 493,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "query": "db.ship.aggregate([ { $sort: { name: -1 } }, { $project: { name: 1, tonnage: 1 } }])",
        "gpt4 answer": "db.ship.find({}, { name: 1, tonnage: 1 }).sort({ name: -1 })",
        "deepseek answer": "db.ship.aggregate([ { $sort: { name: -1 } }, { $project: { name: 1, tonnage: 1 } }])"
    },
    {
        "question_id": 256,
        "spider_question_id": 494,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , date FROM battle",
        "question": "List the name, date and result of each battle.",
        "query": "db.battle.find({}, {name: 1, date: 1})",
        "gpt4 answer": "db.battle.find({}, { name: 1, date: 1 })",
        "deepseek answer": "db.battle.find({}, {name: 1, date: 1})"
    },
    {
        "question_id": 257,
        "spider_question_id": 495,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(killed) , min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "query": "db.death.aggregate([ { $group: { _id: null, max_killed: { $max: \"$killed\" }, min_killed: { $min: \"$killed\" } } }, { $project: { max_killed: 1, min_killed: 1 } }])",
        "gpt4 answer": "db.death.aggregate([ { $group: { _id: null, maxDeathToll: { $max: \"$killed\" }, minDeathToll: { $min: \"$killed\" } } }, { $project: { maxDeathToll: 1, minDeathToll: 1 } } ])",
        "deepseek answer": "db.death.aggregate([ { $group: { _id: null, max_killed: { $max: \"$killed\" }, min_killed: { $min: \"$killed\" } } }, { $project: { max_killed: 1, min_killed: 1 } }])"
    },
    {
        "question_id": 258,
        "spider_question_id": 496,
        "db_id": "battle_death",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "query": "db.death.aggregate([ { $group: { _id: null, avgInjured: { $avg: \"$injured\" } } }, { $project: { avgInjured:1 } }])",
        "gpt4 answer": "db.death.aggregate([ { $group: { _id: null, averageInjuries: { $avg: \"$injured\" } } }, { $project: { averageInjuries: 1 } } ])",
        "deepseek answer": "db.death.aggregate([ { $group: { _id: null, avgInjured: { $avg: \"$injured\" } } }, { $project: { avgInjured:1 } }])"
    },
    {
        "question_id": 259,
        "spider_question_id": 497,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "query": "db.death.aggregate([ { $lookup: { from: \"ship\", localField: \"caused_by_ship_id\", foreignField: \"id\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $match: { \"ship_info.tonnage\": \"t\" } }, { $project: { killed: 1, injured: 1 } }])",
        "gpt4 answer": "db.ship.aggregate([ { $match: { tonnage: 't' } }, { $lookup: { from: \"death\", localField: \"id\", foreignField: \"caused_by_ship_id\", as: \"death_info\" }}, { $unwind: \"$death_info\" }, { $project: { killed: \"$death_info.killed\", injured: \"$death_info.injured\" }} ])",
        "deepseek answer": "db.death.aggregate([ { $lookup: { from: \"ship\", localField: \"caused_by_ship_id\", foreignField: \"id\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $match: { \"ship_info.tonnage\": \"t\" } }, { $project: { killed: 1, injured: 1 } }])"
    },
    {
        "question_id": 260,
        "spider_question_id": 498,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "query": "db.battle.find( { bulgarian_commander: { $ne: 'Boril' } }, { name: 1, result: 1 })",
        "gpt4 answer": "db.battle.find({ bulgarian_commander: { $ne: \"Boril\" } }, { name: 1, result: 1 })",
        "deepseek answer": "db.battle.find( { bulgarian_commander: { $ne: 'Boril' } }, { name: 1, result: 1 })"
    },
    {
        "question_id": 261,
        "spider_question_id": 499,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "query": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"battle_ships\" } }, { $match: { \"battle_ships.ship_type\": \"Brig\" } }, { $project: { id: 1, name: 1 } }])",
        "gpt4 answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"lost_ships\" } }, { $unwind: \"$lost_ships\" }, { $match: { \"lost_ships.ship_type\": \"Brig\" } }, { $group: { _id: { id: \"$id\", name: \"$name\" } } }, { $project: { id: \"$_id.id\", name: \"$_id.name\" } } ])",
        "deepseek answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"battle_ships\" } }, { $match: { \"battle_ships.ship_type\": \"Brig\" } }, { $project: { id: 1, name: 1 } }])"
    },
    {
        "question_id": 262,
        "spider_question_id": 500,
        "db_id": "battle_death",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "query": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $lookup: { from: \"death\", localField: \"ship_info.id\", foreignField: \"caused_by_ship_id\", as: \"death_info\" } }, { $unwind: \"$death_info\" }, { $group: { _id: \"$id\", name: { $first: \"$name\" }, totalKilled: { $sum: \"$death_info.killed\" } } }, { $match: { totalKilled: { $gt: 10 } } }, { $project: { _id: 1, name: 1 } } ])",
        "gpt4 answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $lookup: { from: \"death\", localField: \"ship_info.id\", foreignField: \"caused_by_ship_id\", as: \"death_info\" } }, { $unwind: \"$death_info\" }, { $group: { _id: \"$id\", name: { $first: \"$name\" }, totalKilled: { $sum: \"$death_info.killed\" } } }, { $match: { totalKilled: { $gt: 10 } } }, { $project: { _id: 1, name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 263,
        "spider_question_id": 504,
        "db_id": "battle_death",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' )",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "query": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"related_ships\" } }, { $match: { \"related_ships.tonnage\": { $ne: \"225\" } } }, { $count: \"total_battles_without_225_tonnage_ships_lost\" } ])",
        "gpt4 answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"related_ships\" } }, { $match: { \"related_ships.tonnage\": { $ne: \"225\" } } }, { $count: \"total_battles_without_225_tonnage_ships_lost\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 264,
        "spider_question_id": 505,
        "db_id": "battle_death",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "query": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ships\" } }, { $match: { \"ships.name\": { $in: [\"Lettice\", \"HMS Atalanta\"] } } }, { $project: { name: 1, date: 1 } }])",
        "gpt4 answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ships\" } }, { $match: { \"ships.name\": { $all: [\"Lettice\", \"HMS Atalanta\"] } } }, { $project: { name: 1, date: 1 } } ])",
        "deepseek answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ships\" } }, { $match: { \"ships.name\": { $in: [\"Lettice\", \"HMS Atalanta\"] } } }, { $project: { name: 1, date: 1 } }])"
    },
    {
        "question_id": 265,
        "spider_question_id": 506,
        "db_id": "battle_death",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "query": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ships\" } }, { $match: { \"ships.location\": { $ne: \"English Channel\" } } }, { $project: { name: 1, result: 1, bulgarian_commander: 1 } }])",
        "gpt4 answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ship_info\" } }, { $match: { \"ship_info.location\": { $ne: \"English Channel\" } } }, { $project: { name: 1, result: 1, bulgarian_commander: 1 } } ])",
        "deepseek answer": "db.battle.aggregate([ { $lookup: { from: \"ship\", localField: \"id\", foreignField: \"lost_in_battle\", as: \"ships\" } }, { $match: { \"ships.location\": { $ne: \"English Channel\" } } }, { $project: { name: 1, result: 1, bulgarian_commander: 1 } }])"
    },
    {
        "question_id": 266,
        "spider_question_id": 507,
        "db_id": "battle_death",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "query": "db.death.find({note: {$regex: /East/}}, { note: 1})",
        "gpt4 answer": "db.death.find({ note: /East/ }, { note: 1 })",
        "deepseek answer": "db.death.find({note: {$regex: /East/}}, { note: 1})"
    },
    {
        "question_id": 267,
        "spider_question_id": 508,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT line_1 , line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "query": "db.Addresses.find({}, {line_1: 1, line_2: 1})",
        "gpt4 answer": "db.Addresses.find({}, { line_1: 1, line_2: 1 })",
        "deepseek answer": "db.Addresses.find({}, {line_1: 1, line_2: 1})"
    },
    {
        "question_id": 268,
        "spider_question_id": 509,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT line_1 , line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "query": "db.Addresses.find({}, {line_1: 1, line_2: 1})",
        "gpt4 answer": "db.Addresses.find({}, { line_1: 1, line_2: 1 })",
        "deepseek answer": "db.Addresses.find({}, {line_1: 1, line_2: 1})"
    },
    {
        "question_id": 269,
        "spider_question_id": 512,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "question": "How is the math course described?",
        "query": "db.Courses.findOne({course_name: 'math'}, {course_description: 1})",
        "gpt4 answer": "db.Courses.findOne({ course_name: 'math' }, { course_description: 1 })",
        "deepseek answer": "db.Courses.findOne({course_name: 'math'}, {course_description: 1})"
    },
    {
        "question_id": 270,
        "spider_question_id": 513,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "question": "What are the descriptions for all the math courses?",
        "query": "db.Courses.find({course_name: 'math'}, {course_description: 1})",
        "gpt4 answer": "db.Courses.find({ course_name: 'math' }, { course_description: 1 })",
        "deepseek answer": "db.Courses.find({course_name: 'math'}, {course_description: 1})"
    },
    {
        "question_id": 271,
        "spider_question_id": 514,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "query": "db.Addresses.find({city: 'Port Chelsea'}, {zip_postcode: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.find({city: 'Port Chelsea'}, {zip_postcode: 1})"
    },
    {
        "question_id": 272,
        "spider_question_id": 515,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "query": "db.Addresses.findOne({city: 'Port Chelsea'}, {zip_postcode: 1})",
        "gpt4 answer": "db.Addresses.find({ city: 'Port Chelsea' }, { zip_postcode: 1 })",
        "deepseek answer": "db.Addresses.findOne({city: 'Port Chelsea'}, {zip_postcode: 1})"
    },
    {
        "question_id": 273,
        "spider_question_id": 516,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "query": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Departments\", localField: \"department_id\", foreignField: \"department_id\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_id\", department_name: { $first: \"$department_info.department_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { department_name: 1, department_id: \"$_id\" } }])",
        "gpt4 answer": "db.Degree_Programs.aggregate([ { $group: { _id: \"$department_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Departments\", localField: \"_id\", foreignField: \"department_id\", as: \"department\" } }, { $project: { department_name: { $arrayElemAt: [\"$department.department_name\", 0] }, department_id: \"$_id\" } } ])",
        "deepseek answer": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Departments\", localField: \"department_id\", foreignField: \"department_id\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_id\", department_name: { $first: \"$department_info.department_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { department_name: 1, department_id: \"$_id\" } }])"
    },
    {
        "question_id": 274,
        "spider_question_id": 517,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "query": "db.Degree_Programs.aggregate([ { $group: { _id: \"$department_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Departments\", localField: \"_id\", foreignField: \"department_id\", as: \"departmentInfo\" } }, { $unwind: \"$departmentInfo\" }, { $project: { department_name: \"$departmentInfo.department_name\", department_id: \"$departmentInfo.department_id\" } } ])",
        "gpt4 answer": "db.Degree_Programs.aggregate([ { $group: { _id: \"$department_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Departments\", localField: \"_id\", foreignField: \"department_id\", as: \"departmentInfo\" } }, { $unwind: \"$departmentInfo\" }, { $project: { department_name: \"$departmentInfo.department_name\", department_id: \"$departmentInfo.department_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 275,
        "spider_question_id": 518,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "query": "db.Degree_Programs.aggregate([ { $group: { _id: \"$department_id\" } }, { $count: \"unique_department_count\" } ])",
        "gpt4 answer": "db.Degree_Programs.aggregate([ { $group: { _id: \"$department_id\" } }, { $count: \"unique_department_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 276,
        "spider_question_id": 520,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "query": "db.Degree_Programs.aggregate([ { $group: { _id: \"$degree_summary_name\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Degree_Programs.aggregate([ { $group: { _id: \"$degree_summary_name\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 277,
        "spider_question_id": 522,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
        "question": "How many degrees does the engineering department offer?",
        "query": "db.Departments.aggregate([ { $match: { department_name: \"engineer\" } }, { $lookup: { from: \"Degree_Programs\", localField: \"department_id\", foreignField: \"department_id\", as: \"degree_programs\" } }, { $project: { count: { $size: \"$degree_programs\" } } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Departments.aggregate([ { $match: { department_name: \"engineer\" } }, { $lookup: { from: \"Degree_Programs\", localField: \"department_id\", foreignField: \"department_id\", as: \"degree_programs\" } }, { $project: { count: { $size: \"$degree_programs\" } } }])"
    },
    {
        "question_id": 278,
        "spider_question_id": 523,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
        "question": "How many degrees does the engineering department have?",
        "query": "db.Departments.aggregate([ { $match: { department_name: \"engineer\" } }, { $lookup: { from: \"Degree_Programs\", localField: \"department_id\", foreignField: \"department_id\", as: \"degree_programs\" } }, { $project: { count: { $size: \"$degree_programs\" } } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Departments.aggregate([ { $match: { department_name: \"engineer\" } }, { $lookup: { from: \"Degree_Programs\", localField: \"department_id\", foreignField: \"department_id\", as: \"degree_programs\" } }, { $project: { count: { $size: \"$degree_programs\" } } }])"
    },
    {
        "question_id": 279,
        "spider_question_id": 524,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT section_name , section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "query": "db.Sections.find({}, {section_name: 1, section_description: 1})",
        "gpt4 answer": "db.Sections.find({}, { section_name: 1, section_description: 1 })",
        "deepseek answer": "db.Sections.find({}, {section_name: 1, section_description: 1})"
    },
    {
        "question_id": 280,
        "spider_question_id": 525,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT section_name , section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "query": "db.Sections.find({}, {section_name: 1, section_description: 1})",
        "gpt4 answer": "db.Sections.find({}, { section_name: 1, section_description: 1 })",
        "deepseek answer": "db.Sections.find({}, {section_name: 1, section_description: 1})"
    },
    {
        "question_id": 281,
        "spider_question_id": 526,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
        "question": "What are the names and id of courses having at most 2 sections?",
        "query": "db.Sections.aggregate([ { $group: { _id: \"$course_id\", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: \"Courses\", localField: \"_id\", foreignField: \"course_id\", as: \"courseInfo\" } }, { $unwind: \"$courseInfo\" }, { $project: { course_name: \"$courseInfo.course_name\", course_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Sections.aggregate([ { $group: { _id: \"$course_id\", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: \"Courses\", localField: \"_id\", foreignField: \"course_id\", as: \"courseInfo\" } }, { $unwind: \"$courseInfo\" }, { $project: { course_name: \"$courseInfo.course_name\", course_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 282,
        "spider_question_id": 528,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "query": "db.Sections.find({}, { section_name: 1}).sort({section_name: -1})",
        "gpt4 answer": "db.Sections.find({}, { section_name: 1 }).sort({ section_name: -1 })",
        "deepseek answer": "db.Sections.find({}, { section_name: 1}).sort({section_name: -1})"
    },
    {
        "question_id": 283,
        "spider_question_id": 529,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "query": "db.Sections.find({}, {section_name: 1}).sort({section_name: -1})",
        "gpt4 answer": "db.Sections.find({}, { section_name: 1 }).sort({ section_name: -1 })",
        "deepseek answer": "db.Sections.find({}, {section_name: 1}).sort({section_name: -1})"
    },
    {
        "question_id": 284,
        "spider_question_id": 530,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "query": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrollments\" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrolments\" } }, { $unwind: \"$enrolments\" }, { $group: { _id: { semester_id: \"$semester_id\", semester_name: \"$semester_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { semester_id: \"$_id.semester_id\", semester_name: \"$_id.semester_name\" } } ])",
        "deepseek answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrollments\" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 285,
        "spider_question_id": 531,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "query": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"student_enrolment\" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { student_count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrolments\" } }, { $project: { semester_id: 1, semester_name: 1, numOfStudents: { $size: \"$enrolments\" } } }, { $sort: { numOfStudents: -1 } }, { $limit: 1 }, { $project: { semester_id: 1, semester_name: 1 } } ])",
        "deepseek answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"student_enrolment\" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { student_count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 286,
        "spider_question_id": 532,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "query": "db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 })",
        "gpt4 answer": "db.Departments.find( { department_name: /computer/ }, { department_description: 1 } )",
        "deepseek answer": "db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 })"
    },
    {
        "question_id": 287,
        "spider_question_id": 533,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the department description for the one whose name has the word computer?",
        "query": "db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 })",
        "gpt4 answer": "db.Departments.find({ department_name: /computer/ }, { department_description: 1 })",
        "deepseek answer": "db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 })"
    },
    {
        "question_id": 288,
        "spider_question_id": 534,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1, num_enrolments: { $size: \"$enrolments\" } } }, { $match: { num_enrolments: 2 } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1 } } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1, num_enrolments: { $size: \"$enrolments\" } } }, { $match: { num_enrolments: 2 } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 289,
        "spider_question_id": 535,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollments\" } }, { $match: { \"enrollments\": { $exists: true } } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1} }, { $match: { enrollmentCount: 2 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollments\" } }, { $match: { \"enrollments\": { $exists: true } } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1} }, { $match: { enrollmentCount: 2 } }])"
    },
    {
        "question_id": 290,
        "spider_question_id": 536,
        "db_id": "student_transcripts_tracking",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolment\" } }, { $unwind: \"$enrolment\" }, { $lookup: { from: \"Degree_Programs\", localField: \"enrolment.degree_program_id\", foreignField: \"degree_program_id\", as: \"degreeProgram\" } }, { $unwind: \"$degreeProgram\" }, { $match: { \"degreeProgram.degree_summary_name\": \"Bachelor\" } }, { $group: { _id: { first_name: \"$first_name\", middle_name: \"$middle_name\", last_name: \"$last_name\" } } }, { $project: { first_name: \"$_id.first_name\", middle_name: \"$_id.middle_name\", last_name: \"$_id.last_name\" } } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolment\" } }, { $unwind: \"$enrolment\" }, { $lookup: { from: \"Degree_Programs\", localField: \"enrolment.degree_program_id\", foreignField: \"degree_program_id\", as: \"degreeProgram\" } }, { $unwind: \"$degreeProgram\" }, { $match: { \"degreeProgram.degree_summary_name\": \"Bachelor\" } }, { $group: { _id: { first_name: \"$first_name\", middle_name: \"$middle_name\", last_name: \"$last_name\" } } }, { $project: { first_name: \"$_id.first_name\", middle_name: \"$_id.middle_name\", last_name: \"$_id.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 291,
        "spider_question_id": 538,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "query": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollments\" } }, { $project: { degree_summary_name: 1 } }, { $sort: { enrollmentCount: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Student_Enrolment.aggregate([ { $group: { _id: \"$degree_program_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Degree_Programs\", localField: \"_id\", foreignField: \"degree_program_id\", as: \"program\" } }, { $unwind: \"$program\" }, { $project: { degree_summary_name: \"$program.degree_summary_name\" } } ])",
        "deepseek answer": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollments\" } }, { $project: { degree_summary_name: 1 } }, { $sort: { enrollmentCount: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 292,
        "spider_question_id": 539,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "query": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollments\" } }, { $project: { degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Student_Enrolment.aggregate([ { $group: { _id: \"$degree_program_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Degree_Programs\", localField: \"_id\", foreignField: \"degree_program_id\", as: \"program\" } }, { $unwind: \"$program\" }, { $project: { degree_summary_name: \"$program.degree_summary_name\" } } ])",
        "deepseek answer": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollments\" } }, { $project: { degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 293,
        "spider_question_id": 540,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "query": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollment\" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Student_Enrolment.aggregate([ { $group: { _id: \"$degree_program_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Degree_Programs\", localField: \"_id\", foreignField: \"degree_program_id\", as: \"program_info\" } }, { $unwind: \"$program_info\" }, { $project: { degree_program_id: \"$_id\", degree_summary_name: \"$program_info.degree_summary_name\" } } ])",
        "deepseek answer": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollment\" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 294,
        "spider_question_id": 541,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "query": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollment\" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Student_Enrolment.aggregate([ { $group: { _id: \"$degree_program_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Degree_Programs\", localField: \"_id\", foreignField: \"degree_program_id\", as: \"degreeProgram\" } }, { $unwind: \"$degreeProgram\" }, { $project: { degree_program_id: \"$_id\", degree_summary_name: \"$degreeProgram.degree_summary_name\" } } ])",
        "deepseek answer": "db.Degree_Programs.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrollment\" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 295,
        "spider_question_id": 542,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "query": "db.Student_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" }}, { $project: { _id: 1, first_name: { $arrayElemAt: [\"$student_info.first_name\", 0] }, middle_name: { $arrayElemAt: [\"$student_info.middle_name\", 0] }, last_name: { $arrayElemAt: [\"$student_info.last_name\", 0] }, count: 1 }} ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 296,
        "spider_question_id": 544,
        "db_id": "student_transcripts_tracking",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "query": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrollment\" } }, { $match: { \"enrollment\": { $size: 0 } } }, { $project: { semester_name: 1 } }])",
        "gpt4 answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrolments\" } }, { $match: { enrolments: { $size: 0 } } }, { $project: { semester_name: 1 } } ])",
        "deepseek answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrollment\" } }, { $match: { \"enrollment\": { $size: 0 } } }, { $project: { semester_name: 1 } }])"
    },
    {
        "question_id": 297,
        "spider_question_id": 545,
        "db_id": "student_transcripts_tracking",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "query": "db.Semesters.find( { semester_id: { $nin: db.Student_Enrolment.distinct(\"semester_id\") } }, { semester_name: 1 })",
        "gpt4 answer": "db.Semesters.aggregate([ { $lookup: { from: \"Student_Enrolment\", localField: \"semester_id\", foreignField: \"semester_id\", as: \"enrolment\" } }, { $match: { enrolment: { $size: 0 } } }, { $project: { semester_name: 1 } } ])",
        "deepseek answer": "db.Semesters.find( { semester_id: { $nin: db.Student_Enrolment.distinct(\"semester_id\") } }, { semester_name: 1 })"
    },
    {
        "question_id": 298,
        "spider_question_id": 546,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Student_Enrolment_Courses\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollment\" } }, { $match: { \"enrollment.0\": { $exists: true } } }, { $project: { course_name: 1 } }])",
        "gpt4 answer": "db.Student_Enrolment_Courses.aggregate([ { $lookup: { from: \"Courses\", localField: \"course_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.course_name\" } }, { $project: { course_name: \"$_id\" } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Student_Enrolment_Courses\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollment\" } }, { $match: { \"enrollment.0\": { $exists: true } } }, { $project: { course_name: 1 } }])"
    },
    {
        "question_id": 299,
        "spider_question_id": 554,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "query": "db.Students.findOne({first_name: 'Timmothy', last_name: 'Ward'}, {cell_mobile_number: 1})",
        "gpt4 answer": "db.Students.findOne({ first_name: 'Timmothy', last_name: 'Ward' }, { cell_mobile_number: 1 })",
        "deepseek answer": "db.Students.findOne({first_name: 'Timmothy', last_name: 'Ward'}, {cell_mobile_number: 1})"
    },
    {
        "question_id": 300,
        "spider_question_id": 556,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "query": "db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1)",
        "gpt4 answer": "db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_first_registered: 1 }).limit(1)",
        "deepseek answer": "db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1)"
    },
    {
        "question_id": 301,
        "spider_question_id": 557,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "query": "db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1)",
        "gpt4 answer": "db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_first_registered: 1 }).limit(1)",
        "deepseek answer": "db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1)"
    },
    {
        "question_id": 302,
        "spider_question_id": 558,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "query": "db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_left: 1 }).limit(1)",
        "gpt4 answer": "db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_left: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 303,
        "spider_question_id": 559,
        "db_id": "student_transcripts_tracking",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "query": "db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_left: 1}).limit(1)",
        "gpt4 answer": "db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_left: 1 }).limit(1)",
        "deepseek answer": "db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_left: 1}).limit(1)"
    },
    {
        "question_id": 304,
        "spider_question_id": 560,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Addresses\", let: { current_address_id: \"$current_address_id\", permanent_address_id: \"$permanent_address_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$address_id\", \"$$current_address_id\"] }, { $ne: [\"$address_id\", \"$$permanent_address_id\"] } ] } } }, { $project: { address_id: 1 } } ], as: \"addresses\" } }, { $match: { \"addresses.0\": { $exists: true } } }, { $project: { first_name: 1 } }])",
        "gpt4 answer": "db.Students.find({ $expr: { $ne: [\"$current_address_id\", \"$permanent_address_id\"] } }, { first_name: 1 })",
        "deepseek answer": "db.Students.aggregate([ { $lookup: { from: \"Addresses\", let: { current_address_id: \"$current_address_id\", permanent_address_id: \"$permanent_address_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$address_id\", \"$$current_address_id\"] }, { $ne: [\"$address_id\", \"$$permanent_address_id\"] } ] } } }, { $project: { address_id: 1 } } ], as: \"addresses\" } }, { $match: { \"addresses.0\": { $exists: true } } }, { $project: { first_name: 1 } }])"
    },
    {
        "question_id": 305,
        "spider_question_id": 561,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "query": "db.Students.find({ $expr: { $ne: [\"$current_address_id\", \"$permanent_address_id\"] } }, { first_name: 1 })",
        "gpt4 answer": "db.Students.find({ $expr: { $ne: [\"$current_address_id\", \"$permanent_address_id\"] } }, { first_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 306,
        "spider_question_id": 562,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"current_address_id\", as: \"students\" } }, { $project: { address_id: 1, line_1: 1, line_2: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Students.aggregate([ { $group: { _id: \"$current_address_id\", count: { $sum: 1 } } }, { $sort: { \"count\": -1 } }, { $limit: 1 }, { $lookup: { from: \"Addresses\", localField: \"_id\", foreignField: \"address_id\", as: \"addressDetails\" } }, { $unwind: \"$addressDetails\" }, { $project: { _id: \"$addressDetails.address_id\", line_1: \"$addressDetails.line_1\", line_2: \"$addressDetails.line_2\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"current_address_id\", as: \"students\" } }, { $project: { address_id: 1, line_1: 1, line_2: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 307,
        "spider_question_id": 563,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"current_address_id\", as: \"students\" } }, { $project: { address_id: 1, line_1: 1, line_2: 1} }, { $sort: { studentCount: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Students.aggregate([ { $group: { _id: \"$current_address_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Addresses\", localField: \"_id\", foreignField: \"address_id\", as: \"addressDetails\" } }, { $unwind: \"$addressDetails\" }, { $project: { address_id: \"$addressDetails.address_id\", line_1: \"$addressDetails.line_1\", line_2: \"$addressDetails.line_2\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"current_address_id\", as: \"students\" } }, { $project: { address_id: 1, line_1: 1, line_2: 1} }, { $sort: { studentCount: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 308,
        "spider_question_id": 572,
        "db_id": "student_transcripts_tracking",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "query": "db.Transcript_Contents.aggregate([ { $group: { _id: \"$student_course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Transcript_Contents.aggregate([ { $group: { _id: \"$student_course_id\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { student_course_id: \"$_id\", count: 1 }} ])",
        "deepseek answer": "db.Transcript_Contents.aggregate([ { $group: { _id: \"$student_course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 309,
        "spider_question_id": 573,
        "db_id": "student_transcripts_tracking",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "query": "db.Transcript_Contents.aggregate([ { $group: { _id: \"$student_course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Transcript_Contents.aggregate([ { $group: { _id: \"$student_course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { student_course_id: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Transcript_Contents.aggregate([ { $group: { _id: \"$student_course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 310,
        "spider_question_id": 576,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "query": "db.Student_Enrolment.aggregate([ { $lookup: { from: \"Degree_Programs\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"degree_info\" } }, { $unwind: \"$degree_info\" }, { $match: { \"degree_info.degree_summary_name\": { $in: [\"Master\", \"Bachelor\"] } } }, { $group: { _id: \"$semester_id\", degreeTypes: { $addToSet: \"$degree_info.degree_summary_name\" } } }, { $match: { degreeTypes: { $all: [\"Master\", \"Bachelor\"] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Student_Enrolment.aggregate([ { $lookup: { from: \"Degree_Programs\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"degree_info\" } }, { $unwind: \"$degree_info\" }, { $match: { \"degree_info.degree_summary_name\": { $in: [\"Master\", \"Bachelor\"] } } }, { $group: { _id: \"$semester_id\", degreeTypes: { $addToSet: \"$degree_info.degree_summary_name\" } } }, { $match: { degreeTypes: { $all: [\"Master\", \"Bachelor\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 311,
        "spider_question_id": 577,
        "db_id": "student_transcripts_tracking",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "query": "db.Degree_Programs.aggregate([ { $match: { $or: [{ degree_summary_name: 'Master' }, { degree_summary_name: 'Bachelor' }] } }, { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrolments\" } }, { $unwind: \"$enrolments\" }, { $group: { _id: \"$enrolments.semester_id\", degreeTypes: { $addToSet: \"$degree_summary_name\" } } }, { $match: { degreeTypes: { $all: ['Master', 'Bachelor'] } } }, { $project: { semester_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Degree_Programs.aggregate([ { $match: { $or: [{ degree_summary_name: 'Master' }, { degree_summary_name: 'Bachelor' }] } }, { $lookup: { from: \"Student_Enrolment\", localField: \"degree_program_id\", foreignField: \"degree_program_id\", as: \"enrolments\" } }, { $unwind: \"$enrolments\" }, { $group: { _id: \"$enrolments.semester_id\", degreeTypes: { $addToSet: \"$degree_summary_name\" } } }, { $match: { degreeTypes: { $all: ['Master', 'Bachelor'] } } }, { $project: { semester_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 312,
        "spider_question_id": 580,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "query": "db.Students.find({}, { other_student_details: 1}).sort({other_student_details: -1})",
        "gpt4 answer": "db.Students.find({}, { other_student_details: 1 }).sort({ other_student_details: -1 })",
        "deepseek answer": "db.Students.find({}, { other_student_details: 1}).sort({other_student_details: -1})"
    },
    {
        "question_id": 313,
        "spider_question_id": 581,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "query": "db.Students.find({}, {other_student_details: 1}).sort({other_student_details: -1})",
        "gpt4 answer": "db.Students.find({}, {other_student_details: 1}).sort({other_student_details: -1})",
        "deepseek answer": "db.Students.find({}, {other_student_details: 1}).sort({other_student_details: -1})"
    },
    {
        "question_id": 314,
        "spider_question_id": 582,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "question": "Describe the section h.",
        "query": "db.Sections.findOne({section_name: 'h'}, {section_description: 1})",
        "gpt4 answer": "db.Sections.find({ section_name: 'h' }, { section_description: 1 })",
        "deepseek answer": "db.Sections.findOne({section_name: 'h'}, {section_description: 1})"
    },
    {
        "question_id": 315,
        "spider_question_id": 583,
        "db_id": "student_transcripts_tracking",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "question": "What is the description for the section named h?",
        "query": "db.Sections.findOne({section_name: 'h'}, {section_description: 1})",
        "gpt4 answer": "db.Sections.find({ section_name: 'h' }, { section_description: 1 })",
        "deepseek answer": "db.Sections.findOne({section_name: 'h'}, {section_description: 1})"
    },
    {
        "question_id": 316,
        "spider_question_id": 584,
        "db_id": "student_transcripts_tracking",
        "difficulty": "hard",
        "spider_gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "query": "db.Students.find( { $or: [ {\"permanent_address_id.country\": \"Haiti\"}, {cell_mobile_number: \"09700166582\"} ] }, {first_name: 1} )",
        "gpt4 answer": "db.Students.find( { $or: [ {\"permanent_address_id.country\": \"Haiti\"}, {cell_mobile_number: \"09700166582\"} ] }, {first_name: 1} )",
        "deepseek answer": "."
    },
    {
        "question_id": 317,
        "spider_question_id": 586,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "query": "db.Cartoon.find({}, {Title: 1}).sort({Title: 1})",
        "gpt4 answer": "db.Cartoon.find({}, { Title: 1 }).sort({ Title: 1 })",
        "deepseek answer": "db.Cartoon.find({}, {Title: 1}).sort({Title: 1})"
    },
    {
        "question_id": 318,
        "spider_question_id": 587,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "query": "db.Cartoon.find({}, { Title: 1}).sort({Title: 1})",
        "gpt4 answer": "db.Cartoon.find({}, { Title: 1 }).sort({ Title: 1 })",
        "deepseek answer": "db.Cartoon.find({}, { Title: 1}).sort({Title: 1})"
    },
    {
        "question_id": 319,
        "spider_question_id": 588,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "question": "List all cartoon directed by 'Ben Jones'.",
        "query": "db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1})",
        "gpt4 answer": "db.Cartoon.find({ Directed_by: 'Ben Jones' }, { Title: 1 })",
        "deepseek answer": "db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1})"
    },
    {
        "question_id": 320,
        "spider_question_id": 589,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "query": "db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1})",
        "gpt4 answer": "db.Cartoon.find({ Directed_by: \"Ben Jones\" }, { Title: 1 })",
        "deepseek answer": "db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1})"
    },
    {
        "question_id": 321,
        "spider_question_id": 592,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "query": "db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 })",
        "gpt4 answer": "db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 322,
        "spider_question_id": 593,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "query": "db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 })",
        "gpt4 answer": "db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 323,
        "spider_question_id": 594,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "question": "List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.",
        "query": "db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })",
        "gpt4 answer": "db.Cartoon.find({ Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })",
        "deepseek answer": "db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })"
    },
    {
        "question_id": 324,
        "spider_question_id": 595,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "query": "db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })",
        "gpt4 answer": "db.Cartoon.find({ $or: [{ Directed_by: 'Ben Jones' }, { Directed_by: 'Brandon Vietti' }] }, { Title: 1 })",
        "deepseek answer": "db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })"
    },
    {
        "question_id": 325,
        "spider_question_id": 596,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 326,
        "spider_question_id": 597,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 327,
        "spider_question_id": 598,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: null, uniqueSeriesNames: { $addToSet: \"$series_name\" }, uniqueContents: { $addToSet: \"$Content\" } } }, { $project: { uniqueSeriesNamesCount: { $size: \"$uniqueSeriesNames\" }, uniqueContentsCount: { $size: \"$uniqueContents\" } } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: null, unique_series_names: { $addToSet: \"$series_name\" }, unique_contents: { $addToSet: \"$Content\" } } }, { $project: { number_of_different_series_names: { $size: \"$unique_series_names\" }, number_of_different_contents: { $size: \"$unique_contents\" } } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: null, uniqueSeriesNames: { $addToSet: \"$series_name\" }, uniqueContents: { $addToSet: \"$Content\" } } }, { $project: { uniqueSeriesNamesCount: { $size: \"$uniqueSeriesNames\" }, uniqueContentsCount: { $size: \"$uniqueContents\" } } }])"
    },
    {
        "question_id": 328,
        "spider_question_id": 599,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: null, series_count: { $addToSet: \"$series_name\" }, content_count: { $addToSet: \"$Content\" } } }, { $project: { series_count: { $size: \"$series_count\" }, content_count: { $size: \"$content_count\" } } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: null, unique_series: { $addToSet: \"$series_name\" }, unique_content: { $addToSet: \"$Content\" } } }, { $project: { different_series: { $size: \"$unique_series\" }, different_contents: { $size: \"$unique_content\" } } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: null, series_count: { $addToSet: \"$series_name\" }, content_count: { $addToSet: \"$Content\" } } }, { $project: { series_count: { $size: \"$series_count\" }, content_count: { $size: \"$content_count\" } } }])"
    },
    {
        "question_id": 329,
        "spider_question_id": 600,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "question": "What is the content of TV Channel with serial name 'Sky Radio'?",
        "query": "db.TV_Channel.find({series_name: 'Sky Radio'}, {Content: 1})",
        "gpt4 answer": "db.TV_Channel.find({ series_name: 'Sky Radio' }, { Content: 1 })",
        "deepseek answer": "db.TV_Channel.find({series_name: 'Sky Radio'}, {Content: 1})"
    },
    {
        "question_id": 330,
        "spider_question_id": 601,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "question": "What is the content of the series Sky Radio?",
        "query": "db.TV_Channel.find({series_name: 'Sky Radio'}, { Content: 1})",
        "gpt4 answer": "db.TV_Channel.findOne({ series_name: \"Sky Radio\" }, { Content: 1 })",
        "deepseek answer": "db.TV_Channel.find({series_name: 'Sky Radio'}, { Content: 1})"
    },
    {
        "question_id": 331,
        "spider_question_id": 602,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "question": "What is the Package Option of TV Channel with serial name 'Sky Radio'?",
        "query": "db.TV_Channel.find( {series_name: 'Sky Radio'}, { Package_Option: 1})",
        "gpt4 answer": "db.TV_Channel.findOne({ series_name: 'Sky Radio' }, { Package_Option: 1 })",
        "deepseek answer": "db.TV_Channel.find( {series_name: 'Sky Radio'}, { Package_Option: 1})"
    },
    {
        "question_id": 332,
        "spider_question_id": 603,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "query": "db.TV_Channel.find({series_name: 'Sky Radio'}, { Package_Option: 1})",
        "gpt4 answer": "db.TV_Channel.find({ series_name: 'Sky Radio' }, { Package_Option: 1 })",
        "deepseek answer": "db.TV_Channel.find({series_name: 'Sky Radio'}, { Package_Option: 1})"
    },
    {
        "question_id": 333,
        "spider_question_id": 606,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: \"$_id\", NumberOfTVChannels: \"$count\" } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 334,
        "spider_question_id": 607,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", numChannels: { $sum: 1 } } }, { $sort: { numChannels: 1 } }, { $limit: 1 }, { $project: { Language: \"$_id\", numChannels: 1 } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 335,
        "spider_question_id": 608,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $project: { Language: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } }}, { $project: { Language: \"$_id\", count: \"$count\" }} ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $project: { Language: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 336,
        "spider_question_id": 609,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "query": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $project: { Language: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", numberOfChannels: { $sum: 1 } } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $project: { Language: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 337,
        "spider_question_id": 610,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"",
        "question": "What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_info\" } }, { $match: { \"cartoon_info.Title\": \"The Rise of the Blue Beetle!\" } }, { $project: { series_name: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_info\" } }, { $match: { \"cartoon_info.Title\": \"The Rise of the Blue Beetle!\" } }, { $project: { series_name: 1 } }])"
    },
    {
        "question_id": 338,
        "spider_question_id": 611,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"",
        "question": "What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_info\" } }, { $match: { \"cartoon_info.Title\": \"The Rise of the Blue Beetle!\" } }, { $project: { series_name: 1 } }])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_info\" } }, { $unwind: \"$cartoon_info\" }, { $match: { \"cartoon_info.Title\": \"The Rise of the Blue Beetle!\" } }, { $project: { series_name: 1 } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_info\" } }, { $match: { \"cartoon_info.Title\": \"The Rise of the Blue Beetle!\" } }, { $project: { series_name: 1 } }])"
    },
    {
        "question_id": 339,
        "spider_question_id": 612,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "question": "List the title of all Cartoons showed on TV Channel with series name 'Sky Radio'.",
        "query": "db.TV_Channel.aggregate([ { $match: { series_name: 'Sky Radio' } }, { $lookup: { from: 'Cartoon', localField: 'id', foreignField: 'Channel', as: 'cartoons' } }, { $unwind: '$cartoons' }, { $project: { 'Title': '$cartoons.Title' } } ])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $match: { series_name: 'Sky Radio' } }, { $lookup: { from: 'Cartoon', localField: 'id', foreignField: 'Channel', as: 'cartoons' } }, { $unwind: '$cartoons' }, { $project: { 'Title': '$cartoons.Title' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 340,
        "spider_question_id": 613,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name 'Sky Radio'?",
        "query": "db.TV_Channel.aggregate([ { $match: { series_name: \"Sky Radio\" } }, { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_data\" } }, { $unwind: \"$cartoon_data\" }, { $project: { Title: \"$cartoon_data.Title\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.TV_Channel.aggregate([ { $match: { series_name: \"Sky Radio\" } }, { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon_data\" } }, { $unwind: \"$cartoon_data\" }, { $project: { Title: \"$cartoon_data.Title\" } }])"
    },
    {
        "question_id": 341,
        "spider_question_id": 614,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "query": "db.TV_series.aggregate([ { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { Episode: 1 }}, { $sort: { Rating: 1 } }])",
        "gpt4 answer": "db.TV_series.find({}, {Episode: 1}).sort({Rating: 1})",
        "deepseek answer": "db.TV_series.aggregate([ { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { Episode: 1 }}, { $sort: { Rating: 1 } }])"
    },
    {
        "question_id": 342,
        "spider_question_id": 615,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "query": "db.TV_series.find({}, {Episode: 1}).sort({Rating: 1})",
        "gpt4 answer": "db.TV_series.find({}, { Episode: 1 }).sort({ Rating: 1 })",
        "deepseek answer": "db.TV_series.find({}, {Episode: 1}).sort({Rating: 1})"
    },
    {
        "question_id": 343,
        "spider_question_id": 616,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "question": "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
        "query": "db.TV_series.aggregate([ { $sort: { Rating: -1 } }, { $project: { Episode: 1, Rating: 1 } }, { $limit: 3 }])",
        "gpt4 answer": "db.TV_series.find({}, { Episode: 1, Rating: 1 }).sort({ Rating: -1 }).limit(3)",
        "deepseek answer": "db.TV_series.aggregate([ { $sort: { Rating: -1 } }, { $project: { Episode: 1, Rating: 1 } }, { $limit: 3 }])"
    },
    {
        "question_id": 344,
        "spider_question_id": 617,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "query": "db.TV_series.find({}, {Episode: 1, Rating: 1}).sort({Rating: -1}).limit(3)",
        "gpt4 answer": "db.TV_series.find({}, { Episode: 1, Rating: 1 }).sort({ Rating: -1 }).limit(3)",
        "deepseek answer": "db.TV_series.find({}, {Episode: 1, Rating: 1}).sort({Rating: -1}).limit(3)"
    },
    {
        "question_id": 345,
        "spider_question_id": 618,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series",
        "question": "What is minimum and maximum share of TV series?",
        "query": "db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } }])",
        "gpt4 answer": "db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } } ])",
        "deepseek answer": "db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } }])"
    },
    {
        "question_id": 346,
        "spider_question_id": 619,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series",
        "question": "What is the maximum and minimum share for the TV series?",
        "query": "db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } }])",
        "gpt4 answer": "db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } } ])",
        "deepseek answer": "db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } }])"
    },
    {
        "question_id": 347,
        "spider_question_id": 620,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "question": "What is the air date of TV series with Episode 'A Love of a Lifetime'?",
        "query": "db.TV_series.find({Episode: 'A Love of a Lifetime'}, {Air_Date: 1})",
        "gpt4 answer": "db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Air_Date: 1 })",
        "deepseek answer": "db.TV_series.find({Episode: 'A Love of a Lifetime'}, {Air_Date: 1})"
    },
    {
        "question_id": 348,
        "spider_question_id": 621,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "question": "When did the episode 'A Love of a Lifetime' air?",
        "query": "db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Air_Date: 1})",
        "gpt4 answer": "db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Air_Date: 1 })",
        "deepseek answer": "db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Air_Date: 1})"
    },
    {
        "question_id": 349,
        "spider_question_id": 622,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "question": "What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?",
        "query": "db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1})",
        "gpt4 answer": "db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Weekly_Rank: 1 })",
        "deepseek answer": "db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1})"
    },
    {
        "question_id": 350,
        "spider_question_id": 623,
        "db_id": "tvshow",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "question": "What is the weekly rank for the episode 'A Love of a Lifetime'?",
        "query": "db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1})",
        "gpt4 answer": "db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Weekly_Rank: 1 })",
        "deepseek answer": "db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1})"
    },
    {
        "question_id": 351,
        "spider_question_id": 624,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"",
        "question": "What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.",
        "query": "db.TV_series.aggregate([ { $match: { Episode: 'A Love of a Lifetime' } }, { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { series_name: \"$channel_info.series_name\" } } ])",
        "gpt4 answer": "db.TV_series.aggregate([ { $match: { Episode: 'A Love of a Lifetime' } }, { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { series_name: \"$channel_info.series_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 352,
        "spider_question_id": 625,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"",
        "question": "What is the name of the series that has the episode 'A Love of a Lifetime'?",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"TV_series\", localField: \"id\", foreignField: \"Channel\", as: \"tv_series\" } }, { $match: { \"tv_series.Episode\": \"A Love of a Lifetime\" } }, { $project: { series_name: 1 }}])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"TV_series\", localField: \"id\", foreignField: \"Channel\", as: \"series\" } }, { $unwind: \"$series\" }, { $match: { \"series.Episode\": \"A Love of a Lifetime\" } }, { $project: { series_name: 1 } } ])",
        "deepseek answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"TV_series\", localField: \"id\", foreignField: \"Channel\", as: \"tv_series\" } }, { $match: { \"tv_series.Episode\": \"A Love of a Lifetime\" } }, { $project: { series_name: 1 }}])"
    },
    {
        "question_id": 353,
        "spider_question_id": 626,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "question": "List the Episode of all TV series showed on TV Channel with series name 'Sky Radio'.",
        "query": "db.TV_series.aggregate([ { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel\" } }, { $match: { \"channel.series_name\": \"Sky Radio\" } }, { $project: { Episode: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 354,
        "spider_question_id": 627,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "question": "What is the episode for the TV series named 'Sky Radio'?",
        "query": "db.TV_Channel.aggregate([ { $match: { series_name: \"Sky Radio\" } }, { $lookup: { from: \"TV_series\", localField: \"id\", foreignField: \"Channel\", as: \"tv_series\" } }, { $unwind: \"$tv_series\" }, { $project: { episode: \"$tv_series.Episode\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.TV_Channel.aggregate([ { $match: { series_name: \"Sky Radio\" } }, { $lookup: { from: \"TV_series\", localField: \"id\", foreignField: \"Channel\", as: \"tv_series\" } }, { $unwind: \"$tv_series\" }, { $project: { episode: \"$tv_series.Episode\" } }])"
    },
    {
        "question_id": 355,
        "spider_question_id": 628,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "query": "db.Cartoon.aggregate([ { $group: { _id: \"$Directed_by\", count: { $sum: 1 } }} ])",
        "gpt4 answer": "db.Cartoon.aggregate([ { $group: { _id: \"$Directed_by\", count: { $sum: 1 } }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 356,
        "spider_question_id": 629,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "query": "db.Cartoon.aggregate([ { $group: { _id: \"$Directed_by\", count: { $sum: 1 } }} ])",
        "gpt4 answer": "db.Cartoon.aggregate([ { $group: { _id: \"$Directed_by\", count: { $sum: 1 } }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 357,
        "spider_question_id": 632,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "query": "db.TV_Channel.find({ Hight_definition_TV: 'yes' }, { Package_Option: 1, series_name: 1 })",
        "gpt4 answer": "db.TV_Channel.find({ Hight_definition_TV: 'yes' }, { Package_Option: 1, series_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 358,
        "spider_question_id": 633,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "query": "db.TV_Channel.find({ Hight_definition_TV: \"yes\" }, { Package_Option: 1, series_name: 1 })",
        "gpt4 answer": "db.TV_Channel.find({ Hight_definition_TV: \"yes\" }, { Package_Option: 1, series_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 359,
        "spider_question_id": 635,
        "db_id": "tvshow",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "query": "db.Cartoon.aggregate([ { $match: { Written_by: 'Todd Casey' } }, { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { country: \"$channel_info.Country\" } }, { $group: { _id: \"$country\" } }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.Cartoon.aggregate([ { $match: { Written_by: 'Todd Casey' } }, { $lookup: { from: \"TV_Channel\", localField: \"Channel\", foreignField: \"id\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { country: \"$channel_info.Country\" } }, { $group: { _id: \"$country\" } }, { $project: { country: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 360,
        "spider_question_id": 639,
        "db_id": "tvshow",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoons\" } }, { $unwind: \"$cartoons\" }, { $match: { $or: [ { \"cartoons.Directed_by\": \"Ben Jones\" }, { \"cartoons.Directed_by\": \"Michael Chang\" } ] } }, { $group: { _id: { series_name: \"$series_name\", country: \"$Country\" }, directors: { $addToSet: \"$cartoons.Directed_by\" } } }, { $match: { directors: { $all: [\"Ben Jones\", \"Michael Chang\"] } } }, { $project: { series_name: \"$_id.series_name\", country: \"$_id.country\" } } ])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoons\" } }, { $unwind: \"$cartoons\" }, { $match: { $or: [ { \"cartoons.Directed_by\": \"Ben Jones\" }, { \"cartoons.Directed_by\": \"Michael Chang\" } ] } }, { $group: { _id: { series_name: \"$series_name\", country: \"$Country\" }, directors: { $addToSet: \"$cartoons.Directed_by\" } } }, { $match: { directors: { $all: [\"Ben Jones\", \"Michael Chang\"] } } }, { $project: { series_name: \"$_id.series_name\", country: \"$_id.country\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 361,
        "spider_question_id": 644,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon\" } }, { $match: { \"cartoon\": { $not: { $elemMatch: { \"Directed_by\": \"Ben Jones\" } } } } }, { $project: { id: 1 } } ])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoon\" } }, { $match: { \"cartoon\": { $not: { $elemMatch: { \"Directed_by\": \"Ben Jones\" } } } } }, { $project: { id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 362,
        "spider_question_id": 645,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"Cartoon\" } }, { $match: { \"Cartoon\": { $not: { $elemMatch: { Directed_by: \"Ben Jones\" } } } } }, { $project: { id: 1 } } ])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"Cartoon\" } }, { $match: { \"Cartoon\": { $not: { $elemMatch: { Directed_by: \"Ben Jones\" } } } } }, { $project: { id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 363,
        "spider_question_id": 646,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"Cartoons\" } }, { $match: { \"Cartoons.Directed_by\": { $ne: \"Ben Jones\" } } }, { $project: { Package_Option: 1 } } ])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"Cartoons\" } }, { $match: { \"Cartoons.Directed_by\": { $ne: \"Ben Jones\" } } }, { $project: { Package_Option: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 364,
        "spider_question_id": 647,
        "db_id": "tvshow",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "query": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoons\" } }, { $match: { \"cartoons\": { $not: { $elemMatch: { \"Directed_by\": \"Ben Jones\" } } } } }, { $project: { \"Package_Option\": 1 } } ])",
        "gpt4 answer": "db.TV_Channel.aggregate([ { $lookup: { from: \"Cartoon\", localField: \"id\", foreignField: \"Channel\", as: \"cartoons\" } }, { $match: { \"cartoons\": { $not: { $elemMatch: { \"Directed_by\": \"Ben Jones\" } } } } }, { $project: { \"Package_Option\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 365,
        "spider_question_id": 650,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "query": "db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1})",
        "gpt4 answer": "db.poker_player.find({}, { Earnings: 1 }).sort({ Earnings: -1 })",
        "deepseek answer": "db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1})"
    },
    {
        "question_id": 366,
        "spider_question_id": 651,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "query": "db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $project: { Earnings: 1 } }])",
        "gpt4 answer": "db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1})",
        "deepseek answer": "db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $project: { Earnings: 1 } }])"
    },
    {
        "question_id": 367,
        "spider_question_id": 652,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $project: { Final_Table_Made: 1, Best_Finish: 1 } }])",
        "gpt4 answer": "db.poker_player.find({}, { Final_Table_Made: 1, Best_Finish: 1 })",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $project: { Final_Table_Made: 1, Best_Finish: 1 } }])"
    },
    {
        "question_id": 368,
        "spider_question_id": 653,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "query": "db.poker_player.find({}, {Final_Table_Made: 1, Best_Finish: 1})",
        "gpt4 answer": "db.poker_player.find({}, { Final_Table_Made: 1, Best_Finish: 1 })",
        "deepseek answer": "db.poker_player.find({}, {Final_Table_Made: 1, Best_Finish: 1})"
    },
    {
        "question_id": 369,
        "spider_question_id": 654,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "query": "db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } }])",
        "gpt4 answer": "db.poker_player.aggregate([ { $group: { _id: null, avgEarnings: { $avg: \"$Earnings\" } } }, { $project: { avgEarnings: 1} } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } }])"
    },
    {
        "question_id": 370,
        "spider_question_id": 655,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "query": "db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } }])",
        "gpt4 answer": "db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } }])"
    },
    {
        "question_id": 371,
        "spider_question_id": 656,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "query": "db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }])",
        "gpt4 answer": "db.poker_player.find({}, { Money_Rank: 1 }).sort({ Earnings: -1 }).limit(1)",
        "deepseek answer": "db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }])"
    },
    {
        "question_id": 372,
        "spider_question_id": 657,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "query": "db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }])",
        "gpt4 answer": "db.poker_player.find({}, { Money_Rank: 1 }).sort({ Earnings: -1 }).limit(1)",
        "deepseek answer": "db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }])"
    },
    {
        "question_id": 373,
        "spider_question_id": 658,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "query": "db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTables: { $max: \"$Final_Table_Made\" } } }, { $project: { maxFinalTables: 1 } }])",
        "gpt4 answer": "db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTables: { $max: \"$Final_Table_Made\" } } }, { $project: { maxFinalTables: 1 } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTables: { $max: \"$Final_Table_Made\" } } }, { $project: { maxFinalTables: 1 } }])"
    },
    {
        "question_id": 374,
        "spider_question_id": 659,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "query": "db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTableMade: { $max: \"$Final_Table_Made\" } } }, { $project: { maxFinalTableMade: 1 } }])",
        "gpt4 answer": "db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 }}}, { $group: { _id: null, maxFinalTableMade: { $max: \"$Final_Table_Made\" }}}, { $project: { maxFinalTableMade: 1 }} ])",
        "deepseek answer": "db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTableMade: { $max: \"$Final_Table_Made\" } } }, { $project: { maxFinalTableMade: 1 } }])"
    },
    {
        "question_id": 375,
        "spider_question_id": 660,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
        "question": "What are the names of poker players?",
        "query": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $match: { \"player_info\": { $ne: [] } } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $match: { \"player_info\": { $ne: [] } } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 376,
        "spider_question_id": 661,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
        "question": "Return the names of all the poker players.",
        "query": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_player_info\" } }, { $unwind: \"$poker_player_info\" }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $match: { \"poker_info\": { $ne: [] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_player_info\" } }, { $unwind: \"$poker_player_info\" }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 377,
        "spider_question_id": 662,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: \"$player_info.Name\" } }])",
        "gpt4 answer": "db.poker_player.aggregate([ { $match: { Earnings: {$gt: 300000} } }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { \"Name\": \"$people_info.Name\" } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: \"$player_info.Name\" } }])"
    },
    {
        "question_id": 378,
        "spider_question_id": 663,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: \"$player_info.Name\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: \"$player_info.Name\" } }])"
    },
    {
        "question_id": 379,
        "spider_question_id": 664,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Name: \"$player_info.Name\"} }, { $sort: { Final_Table_Made: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Name: \"$player_info.Name\"} }, { $sort: { Final_Table_Made: 1 } }])"
    },
    {
        "question_id": 380,
        "spider_question_id": 665,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "query": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_player_info\" } }, { $unwind: \"$poker_player_info\" }, { $sort: { \"poker_player_info.Final_Table_Made\": 1 } }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $unwind: \"$poker_info\" }, { $sort: { \"poker_info.Final_Table_Made\": 1 } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_player_info\" } }, { $unwind: \"$poker_player_info\" }, { $sort: { \"poker_player_info.Final_Table_Made\": 1 } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 381,
        "spider_question_id": 667,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $sort: { \"Earnings\": 1 } }, { $limit: 1 }, { $project: { \"Birth_Date\": \"$player_info.Birth_Date\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $sort: { \"Earnings\": 1 } }, { $limit: 1 }, { $project: { \"Birth_Date\": \"$player_info.Birth_Date\" } }])"
    },
    {
        "question_id": 382,
        "spider_question_id": 668,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "query": "db.people.aggregate([ { $sort: { Height: -1 } }, { $limit: 1 }, { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $unwind: \"$poker_info\" }, { $project: { Money_Rank: \"$poker_info.Money_Rank\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $sort: { Height: -1 } }, { $limit: 1 }, { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $unwind: \"$poker_info\" }, { $project: { Money_Rank: \"$poker_info.Money_Rank\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 383,
        "spider_question_id": 669,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_details\" } }, { $sort: { \"player_details.Height\": -1} }, { $limit: 1 }, { $project: { \"Money_Rank\": 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 384,
        "spider_question_id": 670,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.Height\": { $gt: 200 } } }, { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } }])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"pokerDetails\" } }, { $unwind: \"$pokerDetails\" }, { $group: { _id: null, averageEarnings: { $avg: \"$pokerDetails.Earnings\" } } }, { $project: { averageEarnings: 1 } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.Height\": { $gt: 200 } } }, { $group: { _id: null, averageEarnings: { $avg: \"$Earnings\" } } }, { $project: { averageEarnings: 1 } }])"
    },
    {
        "question_id": 385,
        "spider_question_id": 671,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
        "question": "Give average earnings of poker players who are taller than 200.",
        "query": "db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_player_data\" } }, { $unwind: \"$poker_player_data\" }, { $group: { _id: null, avgEarnings: { $avg: \"$poker_player_data.Earnings\" } } }, { $project: { avgEarnings: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $group: { _id: null, avgEarnings: { $avg: \"$player_info.Earnings\" } } }, { $project: { avgEarnings: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_player_data\" } }, { $unwind: \"$poker_player_data\" }, { $group: { _id: null, avgEarnings: { $avg: \"$poker_player_data.Earnings\" } } }, { $project: { avgEarnings: 1 } } ])"
    },
    {
        "question_id": 386,
        "spider_question_id": 672,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Name: \"$player_info.Name\" } }, { $sort: { Earnings: -1 } }])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $sort: { \"player_info.Earnings\": -1 } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Name: \"$player_info.Name\" } }, { $sort: { Earnings: -1 } }])"
    },
    {
        "question_id": 387,
        "spider_question_id": 673,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Name: \"$player_info.Name\" } }, { $sort: { Earnings: -1 } }])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $unwind: \"$poker_info\" }, { $sort: { \"poker_info.Earnings\": -1 } }, { $project: { \"Name\": 1 } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Name: \"$player_info.Name\" } }, { $sort: { Earnings: -1 } }])"
    },
    {
        "question_id": 388,
        "spider_question_id": 674,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "query": "db.people.aggregate([ { $group: { _id: \"$Nationality\", NumberOfPeople: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", NumberOfPeople: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", NumberOfPeople: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", NumberOfPeople: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 389,
        "spider_question_id": 675,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "query": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 390,
        "spider_question_id": 676,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "query": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $group: { _id: \"$people_info.Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } }])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])",
        "deepseek answer": "db.poker_player.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $group: { _id: \"$people_info.Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } }])"
    },
    {
        "question_id": 391,
        "spider_question_id": 677,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } }])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } }])"
    },
    {
        "question_id": 392,
        "spider_question_id": 678,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "question": "What are the nationalities that are shared by at least two people?",
        "query": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: \"$_id\" } }])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: \"$_id\" } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: \"$_id\" } }])"
    },
    {
        "question_id": 393,
        "spider_question_id": 679,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "question": "Return the nationalities for which there are two or more people.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: \"$_id\" } }])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: \"$_id\" } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: \"$_id\" } }])"
    },
    {
        "question_id": 394,
        "spider_question_id": 680,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "query": "db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1})",
        "gpt4 answer": "db.people.find({}, { Name: 1, Birth_Date: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1})"
    },
    {
        "question_id": 395,
        "spider_question_id": 681,
        "db_id": "poker_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "query": "db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1})",
        "gpt4 answer": "db.people.find({}, { Name: 1, Birth_Date: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1})"
    },
    {
        "question_id": 396,
        "spider_question_id": 682,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not 'Russia'.",
        "query": "db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 })",
        "gpt4 answer": "db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 397,
        "spider_question_id": 683,
        "db_id": "poker_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "query": "db.people.find( { Nationality: { $ne: 'Russia' } }, { Name: 1 })",
        "gpt4 answer": "db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 })",
        "deepseek answer": "db.people.find( { Nationality: { $ne: 'Russia' } }, { Name: 1 })"
    },
    {
        "question_id": 398,
        "spider_question_id": 684,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "query": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $match: { \"poker_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $match: { \"poker_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 399,
        "spider_question_id": 685,
        "db_id": "poker_player",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "query": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $match: { \"poker_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"poker_player\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"poker_info\" } }, { $match: { \"poker_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 400,
        "spider_question_id": 689,
        "db_id": "voter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "query": "db.CONTESTANTS.find({}, { contestant_number: 1, contestant_name: 1 }).sort({ contestant_name: -1 })",
        "gpt4 answer": "db.CONTESTANTS.find({}, { contestant_number: 1, contestant_name: 1 }).sort({ contestant_name: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 401,
        "spider_question_id": 690,
        "db_id": "voter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT vote_id , phone_number , state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "query": "db.VOTES.find({}, { vote_id: 1, phone_number: 1, state: 1 })",
        "gpt4 answer": "db.VOTES.find({}, { vote_id: 1, phone_number: 1, state: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 402,
        "spider_question_id": 691,
        "db_id": "voter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(area_code) , min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "query": "db.AREA_CODE_STATE.aggregate([ { $group: { _id: null, maxAreaCode: { $max: \"$area_code\" }, minAreaCode: { $min: \"$area_code\" } } }, { $project: { maxAreaCode: 1, minAreaCode: 1 } }])",
        "gpt4 answer": "db.AREA_CODE_STATE.aggregate([ { $group: { _id: null, maxAreaCode: { $max: \"$area_code\" }, minAreaCode: { $min: \"$area_code\" } } }, { $project: { maxAreaCode: 1, minAreaCode: 1 } } ])",
        "deepseek answer": "db.AREA_CODE_STATE.aggregate([ { $group: { _id: null, maxAreaCode: { $max: \"$area_code\" }, minAreaCode: { $min: \"$area_code\" } } }, { $project: { maxAreaCode: 1, minAreaCode: 1 } }])"
    },
    {
        "question_id": 403,
        "spider_question_id": 693,
        "db_id": "voter_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "query": "db.CONTESTANTS.find({ contestant_name: {$ne: 'Jessie Alloway'} }, { contestant_name: 1 })",
        "gpt4 answer": "db.CONTESTANTS.find({ contestant_name: {$ne: 'Jessie Alloway'} }, { contestant_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 404,
        "spider_question_id": 695,
        "db_id": "voter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "query": "db.VOTES.aggregate([ { $group: { _id: \"$contestant_number\", voteCount: { $sum: 1 } }}, { $match: { voteCount: { $gte: 2 } }}, { $lookup: { from: \"CONTESTANTS\", localField: \"_id\", foreignField: \"contestant_number\", as: \"contestant_info\" }}, { $unwind: \"$contestant_info\" }, { $project: { contestant_number: \"$_id\", contestant_name: \"$contestant_info.contestant_name\" }} ])",
        "gpt4 answer": "db.VOTES.aggregate([ { $group: { _id: \"$contestant_number\", voteCount: { $sum: 1 } }}, { $match: { voteCount: { $gte: 2 } }}, { $lookup: { from: \"CONTESTANTS\", localField: \"_id\", foreignField: \"contestant_number\", as: \"contestant_info\" }}, { $unwind: \"$contestant_info\" }, { $project: { contestant_number: \"$_id\", contestant_name: \"$contestant_info.contestant_name\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 405,
        "spider_question_id": 696,
        "db_id": "voter_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "query": "db.VOTES.aggregate([ { $group: { _id: \"$contestant_number\", voteCount: { $sum: 1 } } }, { $sort: { voteCount: 1 } }, { $limit: 1 }, { $lookup: { from: \"CONTESTANTS\", localField: \"_id\", foreignField: \"contestant_number\", as: \"contestantInfo\" } }, { $project: { contestant_number: \"$_id\", contestant_name: { $arrayElemAt: [\"$contestantInfo.contestant_name\", 0] } } } ])",
        "gpt4 answer": "db.VOTES.aggregate([ { $group: { _id: \"$contestant_number\", voteCount: { $sum: 1 } } }, { $sort: { voteCount: 1 } }, { $limit: 1 }, { $lookup: { from: \"CONTESTANTS\", localField: \"_id\", foreignField: \"contestant_number\", as: \"contestantInfo\" } }, { $project: { contestant_number: \"$_id\", contestant_name: { $arrayElemAt: [\"$contestantInfo.contestant_name\", 0] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 406,
        "spider_question_id": 697,
        "db_id": "voter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "query": "db.VOTES.aggregate([ { $match: { state: { $in: ['NY', 'CA'] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 407,
        "spider_question_id": 698,
        "db_id": "voter_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "query": "db.CONTESTANTS.aggregate([ { $lookup: { from: \"VOTES\", localField: \"contestant_number\", foreignField: \"contestant_number\", as: \"contestant_votes\" } }, { $match: { contestant_votes: { $size: 0 } } }, { $count: \"contestants_without_votes\" } ])",
        "gpt4 answer": "db.CONTESTANTS.aggregate([ { $lookup: { from: \"VOTES\", localField: \"contestant_number\", foreignField: \"contestant_number\", as: \"contestant_votes\" } }, { $match: { contestant_votes: { $size: 0 } } }, { $count: \"contestants_without_votes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 408,
        "spider_question_id": 699,
        "db_id": "voter_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "query": "db.VOTES.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"AREA_CODE_STATE\", localField: \"_id\", foreignField: \"state\", as: \"area_code_info\" } }, { $project: { area_code: { $arrayElemAt: [ \"$area_code_info.area_code\", 0 ] } } } ])",
        "gpt4 answer": "db.VOTES.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"AREA_CODE_STATE\", localField: \"_id\", foreignField: \"state\", as: \"area_code_info\" } }, { $project: { area_code: { $arrayElemAt: [ \"$area_code_info.area_code\", 0 ] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 409,
        "spider_question_id": 702,
        "db_id": "voter_1",
        "difficulty": "medium",
        "spider_gold_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "query": "db.CONTESTANTS.find({ contestant_name: /Al/i }, { contestant_name: 1 })",
        "gpt4 answer": "db.CONTESTANTS.find({ contestant_name: /Al/i }, { contestant_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 410,
        "spider_question_id": 707,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "query": "db.country.aggregate([ { $match: { Region: \"Caribbean\" } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Region: 'Caribbean' } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Region: \"Caribbean\" } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])"
    },
    {
        "question_id": 411,
        "spider_question_id": 708,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "query": "db.country.aggregate([ { $match: { Region: \"Caribbean\" } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Region: 'Caribbean' } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Region: \"Caribbean\" } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])"
    },
    {
        "question_id": 412,
        "spider_question_id": 709,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "query": "db.country.find({Name: 'Anguilla'}, {Continent: 1})",
        "gpt4 answer": "db.country.find({ Name: 'Anguilla' }, { Continent: 1 })",
        "deepseek answer": "db.country.find({Name: 'Anguilla'}, {Continent: 1})"
    },
    {
        "question_id": 413,
        "spider_question_id": 710,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "query": "db.country.find({Name: 'Anguilla'}, {Continent: 1})",
        "gpt4 answer": "db.country.find({ Name: 'Anguilla' }, { Continent: 1 })",
        "deepseek answer": "db.country.find({Name: 'Anguilla'}, {Continent: 1})"
    },
    {
        "question_id": 414,
        "spider_question_id": 711,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "query": "db.country.aggregate([ { $lookup: { from: \"city\", localField: \"Code\", foreignField: \"CountryCode\", as: \"city_info\" } }, { $match: { \"city_info.Name\": \"Kabul\" } }, { $project: { \"_id\": 0, \"Region\": 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"city\", localField: \"Code\", foreignField: \"CountryCode\", as: \"city_info\" } }, { $match: { \"city_info.Name\": \"Kabul\" } }, { $project: { \"_id\": 0, \"Region\": 1 } }])"
    },
    {
        "question_id": 415,
        "spider_question_id": 713,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "query": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $sort: { \"languages.Percentage\": -1 } }, { $limit: 1 }, { $project: { Language: \"$languages.Language\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $sort: { \"languages.Percentage\": -1 } }, { $limit: 1 }, { $project: { Language: \"$languages.Language\" } }])"
    },
    {
        "question_id": 416,
        "spider_question_id": 714,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "query": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $sort: { \"languages.Percentage\": -1 } }, { $limit: 1 }, { $project: { Language: \"$languages.Language\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $sort: { \"languages.Percentage\": -1 } }, { $limit: 1 }, { $project: { Language: \"$languages.Language\" } }])"
    },
    {
        "question_id": 417,
        "spider_question_id": 715,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "question": "What are the population and life expectancies in Brazil?",
        "query": "db.country.find( { Name: 'Brazil' }, { Population: 1, LifeExpectancy: 1 })",
        "gpt4 answer": "db.country.find({ Name: \"Brazil\" }, { Population: 1, LifeExpectancy: 1 })",
        "deepseek answer": "db.country.find( { Name: 'Brazil' }, { Population: 1, LifeExpectancy: 1 })"
    },
    {
        "question_id": 418,
        "spider_question_id": 716,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "query": "db.country.find({Name: 'Brazil'}, {Population: 1, LifeExpectancy: 1})",
        "gpt4 answer": "db.country.find({ Name: \"Brazil\" }, { Population: 1, LifeExpectancy: 1 })",
        "deepseek answer": "db.country.find({Name: 'Brazil'}, {Population: 1, LifeExpectancy: 1})"
    },
    {
        "question_id": 419,
        "spider_question_id": 717,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
        "question": "What are the region and population of Angola?",
        "query": "db.country.find( { Name: 'Angola' }, { Population: 1, Region: 1 })",
        "gpt4 answer": "db.country.find({ Name: 'Angola' }, { Region: 1, Population: 1 })",
        "deepseek answer": "db.country.find( { Name: 'Angola' }, { Population: 1, Region: 1 })"
    },
    {
        "question_id": 420,
        "spider_question_id": 718,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
        "question": "What region does Angola belong to and what is its population?",
        "query": "db.country.find({Name: 'Angola'}, {Population: 1, Region: 1})",
        "gpt4 answer": "db.country.find({ Name: 'Angola' }, { Population: 1, Region: 1 })",
        "deepseek answer": "db.country.find({Name: 'Angola'}, {Population: 1, Region: 1})"
    },
    {
        "question_id": 421,
        "spider_question_id": 719,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "query": "db.country.aggregate([ { $match: { Region: \"Central Africa\" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $project: { avgLifeExpectancy: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Region: \"Central Africa\" } }, { $group: { _id: null, AvgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $project: { AvgLifeExpectancy: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Region: \"Central Africa\" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $project: { avgLifeExpectancy: 1 } }])"
    },
    {
        "question_id": 422,
        "spider_question_id": 720,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "query": "db.country.aggregate([ { $match: { Region: \"Central Africa\" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $project: { avgLifeExpectancy: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Region: 'Central Africa' } }, { $group: { _id: null, AverageLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $project: { AverageLifeExpectancy: 1 }} ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Region: \"Central Africa\" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $project: { avgLifeExpectancy: 1 } }])"
    },
    {
        "question_id": 423,
        "spider_question_id": 721,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "query": "db.country.find( { Continent: 'Asia' }, { Name: 1 }).sort({ LifeExpectancy: 1 }).limit(1)",
        "gpt4 answer": "db.country.find({Continent: 'Asia'}, { Name: 1}).sort({LifeExpectancy: 1}).limit(1)",
        "deepseek answer": "db.country.find( { Continent: 'Asia' }, { Name: 1 }).sort({ LifeExpectancy: 1 }).limit(1)"
    },
    {
        "question_id": 424,
        "spider_question_id": 722,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "query": "db.country.find({Continent: 'Asia'}, {Name: 1}).sort({LifeExpectancy: 1}).limit(1)",
        "gpt4 answer": "db.country.find({Continent: 'Asia'}, {Name: 1}).sort({LifeExpectancy: 1}).limit(1)",
        "deepseek answer": "db.country.find({Continent: 'Asia'}, {Name: 1}).sort({LifeExpectancy: 1}).limit(1)"
    },
    {
        "question_id": 425,
        "spider_question_id": 723,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
        "question": "What is the total population and maximum GNP in Asia?",
        "query": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" }, maxGNP: { $max: \"$GNP\" } }}, { $project: { totalPopulation: 1, maxGNP:1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, TotalPopulation: { $sum: \"$Population\" }, MaxGNP: { $max: \"$GNP\" } } }, { $project: { TotalPopulation: 1, MaxGNP: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" }, maxGNP: { $max: \"$GNP\" } }}, { $project: { totalPopulation: 1, maxGNP:1 } }])"
    },
    {
        "question_id": 426,
        "spider_question_id": 724,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "query": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" }, maxGNP: { $max: \"$GNP\" } } }, { $project: { totalPopulation: 1, maxGNP: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" }, largestGNP: { $max: \"$GNP\" } } }, { $project: { totalPopulation: 1, largestGNP: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" }, maxGNP: { $max: \"$GNP\" } } }, { $project: { totalPopulation: 1, maxGNP: 1 } }])"
    },
    {
        "question_id": 427,
        "spider_question_id": 727,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "query": "db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: { $in: ['Asia', 'Europe'] } } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])"
    },
    {
        "question_id": 428,
        "spider_question_id": 728,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "query": "db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: { $in: [\"Asia\", \"Europe\"] } } }, { $group: { _id: null, TotalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { TotalSurfaceArea: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: \"$SurfaceArea\" } } }, { $project: { totalSurfaceArea: 1 } }])"
    },
    {
        "question_id": 429,
        "spider_question_id": 729,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "query": "db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }])",
        "gpt4 answer": "db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 }} ])",
        "deepseek answer": "db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }])"
    },
    {
        "question_id": 430,
        "spider_question_id": 730,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
        "question": "What is the total population of Gelderland district?",
        "query": "db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }])",
        "gpt4 answer": "db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 }} ])",
        "deepseek answer": "db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }])"
    },
    {
        "question_id": 431,
        "spider_question_id": 731,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "query": "db.country.aggregate([ { $match: { GovernmentForm: \"US Territory\" } }, { $group: { _id: null, avgGNP: { $avg: \"$GNP\" }, totalPopulation: { $sum: \"$Population\" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { GovernmentForm: 'US Territory' } }, { $group: { _id: null, avgGNP: { $avg: \"$GNP\" }, totalPopulation: { $sum: \"$Population\" } } }, { $project: { avgGNP: 1, totalPopulation: 1 }} ])",
        "deepseek answer": "db.country.aggregate([ { $match: { GovernmentForm: \"US Territory\" } }, { $group: { _id: null, avgGNP: { $avg: \"$GNP\" }, totalPopulation: { $sum: \"$Population\" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])"
    },
    {
        "question_id": 432,
        "spider_question_id": 732,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "query": "db.country.aggregate([ { $match: { GovernmentForm: \"US Territory\" } }, { $group: { _id: null, avgGNP: { $avg: \"$GNP\" }, totalPopulation: { $sum: \"$Population\" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { GovernmentForm: 'US Territory' } }, { $group: { _id: null, avgGNP: { $avg: \"$GNP\" }, totalPopulation: { $sum: \"$Population\" } } }, { $project: { avgGNP: 1, totalPopulation: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { GovernmentForm: \"US Territory\" } }, { $group: { _id: null, avgGNP: { $avg: \"$GNP\" }, totalPopulation: { $sum: \"$Population\" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])"
    },
    {
        "question_id": 433,
        "spider_question_id": 735,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "query": "db.country.aggregate([ { $match: { Continent: \"Africa\" } }, { $group: { _id: \"$GovernmentForm\" } }, { $count: \"distinct_government_forms\" } ])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: \"Africa\" } }, { $group: { _id: \"$GovernmentForm\" } }, { $count: \"distinct_government_forms\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 434,
        "spider_question_id": 736,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "query": "db.country.aggregate([ { $match: { Continent: \"Africa\" } }, { $group: { _id: \"$GovernmentForm\" } }, { $count: \"distinctGovernmentForms\" } ])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: \"Africa\" } }, { $group: { _id: \"$GovernmentForm\" } }, { $count: \"distinctGovernmentForms\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 435,
        "spider_question_id": 737,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "query": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $project: { languages: { $size: \"$languages\" } } }])",
        "gpt4 answer": "db.countrylanguage.aggregate([ { $lookup: { from: \"country\", localField: \"CountryCode\", foreignField: \"Code\", as: \"country\" } }, { $match: { \"country.Name\": \"Aruba\" } }, { $count: \"TotalLanguages\" } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $project: { languages: { $size: \"$languages\" } } }])"
    },
    {
        "question_id": 436,
        "spider_question_id": 738,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "query": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $project: { languages: { $size: \"$languages\" } } }])",
        "gpt4 answer": "db.countrylanguage.aggregate([ { $lookup: { from: \"country\", localField: \"CountryCode\", foreignField: \"Code\", as: \"country_info\" } }, { $match: { \"country_info.Name\": \"Aruba\" } }, { $group: { _id: \"$Language\" } }, { $count: \"num_languages\" } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Name: \"Aruba\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $project: { languages: { $size: \"$languages\" } } }])"
    },
    {
        "question_id": 437,
        "spider_question_id": 739,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "query": "db.country.aggregate([ { $match: { Name: \"Afghanistan\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $match: { Name: \"Afghanistan\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 438,
        "spider_question_id": 740,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "query": "db.country.aggregate([ { $match: { Name: \"Afghanistan\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Name: 'Afghanistan' } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"official_languages\" } }, { $unwind: \"$official_languages\" }, { $match: { \"official_languages.IsOfficial\": \"T\" } }, { $count: \"num_official_languages\" } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Name: \"Afghanistan\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 439,
        "spider_question_id": 743,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $group: { _id: \"$Continent\", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: \"$_id\"} }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $group: { _id: \"$Continent\", distinctLanguages: { $addToSet: \"$languages.Language\" } } }, { $project: { _id: 1, numberOfLanguages: { $size: \"$distinctLanguages\" } } }, { $sort: { numberOfLanguages: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $group: { _id: \"$Continent\", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: \"$_id\"} }])"
    },
    {
        "question_id": 440,
        "spider_question_id": 744,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $group: { _id: \"$Continent\", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: \"$_id\"} }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $group: { _id: \"$Continent\", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $group: { _id: \"$Continent\", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: \"$_id\"} }])"
    },
    {
        "question_id": 441,
        "spider_question_id": 745,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
        "question": "How many countries speak both English and Dutch?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"Dutch\"] } } }, { $count: \"count\" }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"Dutch\"] } } }, { $count: \"count\" }])"
    },
    {
        "question_id": 442,
        "spider_question_id": 746,
        "db_id": "world_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
        "question": "What is the number of nations that use English and Dutch?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"Dutch\"] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"Dutch\"] } } }, { $count: \"NumberOfNations\" } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"Dutch\"] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 443,
        "spider_question_id": 747,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
        "question": "What are the names of nations speak both English and French?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"French\"] } } }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"French\"] } } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"French\"] } } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 444,
        "spider_question_id": 748,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
        "question": "Give the names of nations that speak both English and French.",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"French\"] } } }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages\": { $all: [ { $elemMatch: { Language: \"English\" } }, { $elemMatch: { Language: \"French\" } } ] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $all: [\"English\", \"French\"] } } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 445,
        "spider_question_id": 750,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
        "question": "Give the names of countries with English and French as official languages.",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages\": { $elemMatch: { \"Language\": \"English\", \"IsOfficial\": \"T\" } } } }, { $match: { \"languages\": { $elemMatch: { \"Language\": \"French\", \"IsOfficial\": \"T\" } } } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages\": { $elemMatch: { \"Language\": \"English\", \"IsOfficial\": \"T\" } } } }, { $match: { \"languages\": { $elemMatch: { \"Language\": \"French\", \"IsOfficial\": \"T\" } } } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 446,
        "spider_question_id": 751,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": \"Chinese\" } }, { $group: { _id: \"$Continent\" } }, { $count: \"distinct_continents\" } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": \"Chinese\" } }, { $group: { _id: \"$Continent\" } }, { $count: \"distinct_continents\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 447,
        "spider_question_id": 752,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": \"Chinese\" } }, { $group: { _id: \"$Continent\" } }, { $count: \"distinct_continents\" } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": \"Chinese\" } }, { $group: { _id: \"$Continent\" } }, { $count: \"distinct_continents\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 448,
        "spider_question_id": 753,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "query": "db.country.aggregate([ { $match: { \"Code\": { $in: db.countrylanguage.distinct(\"CountryCode\", { Language: { $in: [\"English\", \"Dutch\"] } }) } } }, { $group: { _id: \"$Region\" } }, { $project: { Region: \"$_id\" } }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $in: [\"English\", \"Dutch\"] } } }, { $group: { _id: \"$Region\" } }, { $project: { Region: \"$_id\" } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { \"Code\": { $in: db.countrylanguage.distinct(\"CountryCode\", { Language: { $in: [\"English\", \"Dutch\"] } }) } } }, { $group: { _id: \"$Region\" } }, { $project: { Region: \"$_id\" } }])"
    },
    {
        "question_id": 449,
        "spider_question_id": 754,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $in: [\"Dutch\", \"English\"] } } }, { $group: { _id: \"$Region\" } }, { $project: { Region: \"$_id\" } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $in: [\"Dutch\", \"English\"] } } }, { $group: { _id: \"$Region\" } }, { $project: { Region: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 450,
        "spider_question_id": 757,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "query": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $group: { _id: \"$languages.Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" }}, { $unwind: \"$languages\" }, { $group: { _id: \"$languages.Language\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $group: { _id: \"$languages.Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])"
    },
    {
        "question_id": 451,
        "spider_question_id": 758,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "query": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $group: { _id: \"$languages.Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" }}, { $unwind: \"$languages\" }, { $group: { _id: \"$languages.Language\", numberOfCountries: { $sum: 1 } }}, { $sort: { numberOfCountries: -1 } }, { $limit: 1 }, { $project: { _id: 1, numberOfCountries: 0 } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $group: { _id: \"$languages.Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])"
    },
    {
        "question_id": 452,
        "spider_question_id": 761,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "query": "db.city.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"CountryCode\", foreignField: \"CountryCode\", as: \"country_language\" } }, { $match: { \"country_language.Language\": \"English\" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"CountryCode\", foreignField: \"CountryCode\", as: \"language\" } }, { $match: { \"language.Language\": \"English\" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"CountryCode\", foreignField: \"CountryCode\", as: \"country_language\" } }, { $match: { \"country_language.Language\": \"English\" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])"
    },
    {
        "question_id": 453,
        "spider_question_id": 762,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "query": "db.city.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"CountryCode\", foreignField: \"CountryCode\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $match: { \"country_info.Language\": \"English\" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"CountryCode\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": \"English\" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"CountryCode\", foreignField: \"CountryCode\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $match: { \"country_info.Language\": \"English\" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])"
    },
    {
        "question_id": 454,
        "spider_question_id": 763,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "query": "db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)",
        "gpt4 answer": "db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 } ).sort({ SurfaceArea: -1 }).limit(1)",
        "deepseek answer": "db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)"
    },
    {
        "question_id": 455,
        "spider_question_id": 764,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "query": "db.country.find( { Continent: \"Asia\" }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)",
        "gpt4 answer": "db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 } ).sort({ SurfaceArea: -1 }).limit(1)",
        "deepseek answer": "db.country.find( { Continent: \"Asia\" }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)"
    },
    {
        "question_id": 456,
        "spider_question_id": 767,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $ne: \"English\" } } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages\": { $not: { $elemMatch: { \"Language\": \"English\" } } } } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $ne: \"English\" } } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 } }])"
    },
    {
        "question_id": 457,
        "spider_question_id": 768,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $ne: \"English\" } } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages\": { $not: { $elemMatch: { Language: \"English\" } } } } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"languages.Language\": { $ne: \"English\" } } }, { $group: { _id: null, totalPopulation: { $sum: \"$Population\" } } }, { $project: { totalPopulation: 1 } }])"
    },
    {
        "question_id": 458,
        "spider_question_id": 769,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "query": "db.country.aggregate([ { $match: { HeadOfState: \"Beatrix\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $project: { Language: \"$languages.Language\" } }])",
        "gpt4 answer": "db.country.aggregate([ { $match: { HeadOfState: 'Beatrix' } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $project: { Language: \"$languages.Language\" } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { HeadOfState: \"Beatrix\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $project: { Language: \"$languages.Language\" } }])"
    },
    {
        "question_id": 459,
        "spider_question_id": 770,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "query": "db.country.aggregate([ { $match: { HeadOfState: \"Beatrix\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"country_language\" } }, { $unwind: \"$country_language\" }, { $match: { \"country_language.IsOfficial\": \"T\" } }, { $project: { Language: \"$country_language.Language\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $match: { HeadOfState: \"Beatrix\" } }, { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"country_language\" } }, { $unwind: \"$country_language\" }, { $match: { \"country_language.IsOfficial\": \"T\" } }, { $project: { Language: \"$country_language.Language\" } }])"
    },
    {
        "question_id": 460,
        "spider_question_id": 772,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "query": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"IndepYear\": { $lt: 1930 } } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $group: { _id: null, distinctLanguages: { $addToSet: \"$languages.Language\" } } }, { $project: { totalDistinctLanguages: { $size: \"$distinctLanguages\" } } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"countrylanguage\", localField: \"Code\", foreignField: \"CountryCode\", as: \"languages\" } }, { $match: { \"IndepYear\": { $lt: 1930 } } }, { $unwind: \"$languages\" }, { $match: { \"languages.IsOfficial\": \"T\" } }, { $group: { _id: null, distinctLanguages: { $addToSet: \"$languages.Language\" } } }, { $project: { totalDistinctLanguages: { $size: \"$distinctLanguages\" } } }])"
    },
    {
        "question_id": 461,
        "spider_question_id": 776,
        "db_id": "world_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "query": "db.country.find( { Continent: 'Africa', Population: { $lt: db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, minPopulation: { $min: '$Population' } } } ]).toArray()[0].minPopulation } }, { Name: 1 })",
        "gpt4 answer": "db.country.aggregate([ { $match: { Continent: \"Asia\" } }, { $group: { _id: null, minPopulation: { $min: \"$Population\" } } }, { $lookup: { from: \"country\", let: { minAsiaPop: \"$minPopulation\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$Continent\", \"Africa\"] }, { $lt: [\"$Population\", \"$$minAsiaPop\"] } ] } } }, { $project: { Name: 1 } } ], as: \"africanCountries\" } }, { $unwind: \"$africanCountries\" }, { $replaceRoot: { newRoot: \"$africanCountries\" } } ])",
        "deepseek answer": "db.country.find( { Continent: 'Africa', Population: { $lt: db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, minPopulation: { $min: '$Population' } } } ]).toArray()[0].minPopulation } }, { Name: 1 })"
    },
    {
        "question_id": 462,
        "spider_question_id": 791,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "query": "db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1)",
        "gpt4 answer": "db.country.find({}, { Name: 1, Population: 1, HeadOfState: 1 }).sort({ SurfaceArea: -1 }).limit(1)",
        "deepseek answer": "db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1)"
    },
    {
        "question_id": 463,
        "spider_question_id": 792,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "query": "db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1)",
        "gpt4 answer": "db.country.find({}, { Name: 1, Population: 1, HeadOfState: 1 }).sort({ SurfaceArea: -1 }).limit(1)",
        "deepseek answer": "db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1)"
    },
    {
        "question_id": 464,
        "spider_question_id": 797,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "query": "db.country.aggregate([ { $group: { _id: \"$GovernmentForm\", totalPopulation: { $sum: \"$Population\" }, avgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $match: { avgLifeExpectancy: { $gt: 72 } } }, { $project: { GovernmentForm: \"$_id\", totalPopulation: 1 } }])",
        "gpt4 answer": "db.country.aggregate([ { $group: { _id: \"$GovernmentForm\", TotalPopulation: { $sum: \"$Population\" }, AverageLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $match: { AverageLifeExpectancy: { $gt: 72 } } }, { $project: { GovernmentForm: \"$_id\", TotalPopulation: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $group: { _id: \"$GovernmentForm\", totalPopulation: { $sum: \"$Population\" }, avgLifeExpectancy: { $avg: \"$LifeExpectancy\" } } }, { $match: { avgLifeExpectancy: { $gt: 72 } } }, { $project: { GovernmentForm: \"$_id\", totalPopulation: 1 } }])"
    },
    {
        "question_id": 465,
        "spider_question_id": 801,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "query": "db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5)",
        "gpt4 answer": "db.country.find({}, { Name: 1, SurfaceArea: 1 }).sort({ SurfaceArea: -1 }).limit(5)",
        "deepseek answer": "db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5)"
    },
    {
        "question_id": 466,
        "spider_question_id": 802,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "query": "db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5)",
        "gpt4 answer": "db.country.find({}, { Name: 1, SurfaceArea: 1 }).sort({ SurfaceArea: -1 }).limit(5)",
        "deepseek answer": "db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5)"
    },
    {
        "question_id": 467,
        "spider_question_id": 803,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "query": "db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)",
        "gpt4 answer": "db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)",
        "deepseek answer": "db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)"
    },
    {
        "question_id": 468,
        "spider_question_id": 804,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "query": "db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)",
        "gpt4 answer": "db.country.find({}, { Name: 1 }).sort({ Population: -1 }).limit(3)",
        "deepseek answer": "db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)"
    },
    {
        "question_id": 469,
        "spider_question_id": 805,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "query": "db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3)",
        "gpt4 answer": "db.country.find({}, {Name: 1}).sort({Population: 1}).limit(3)",
        "deepseek answer": "db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3)"
    },
    {
        "question_id": 470,
        "spider_question_id": 806,
        "db_id": "world_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 countries with the fewest people.",
        "query": "db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3)",
        "gpt4 answer": "db.country.find({}, { \"Name\": 1, \"_id\": 0 }).sort({ \"Population\": 1 }).limit(3)",
        "deepseek answer": "db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3)"
    },
    {
        "question_id": 471,
        "spider_question_id": 815,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "query": "db.countrylanguage.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: \"$_id\" } }])",
        "gpt4 answer": "db.countrylanguage.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.countrylanguage.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: \"$_id\" } }])"
    },
    {
        "question_id": 472,
        "spider_question_id": 816,
        "db_id": "world_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "query": "db.countrylanguage.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: \"$_id\" } }])",
        "gpt4 answer": "db.countrylanguage.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.countrylanguage.aggregate([ { $group: { _id: \"$Language\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: \"$_id\" } }])"
    },
    {
        "question_id": 473,
        "spider_question_id": 825,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "query": "db.conductor.find({}, {Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.conductor.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.conductor.find({}, {Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 474,
        "spider_question_id": 826,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "query": "db.conductor.find({}, {Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.conductor.find({}, { Name: 1}).sort({Age: 1})",
        "deepseek answer": "db.conductor.find({}, {Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 475,
        "spider_question_id": 827,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not 'USA'?",
        "query": "db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1})",
        "gpt4 answer": "db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1})",
        "deepseek answer": "db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1})"
    },
    {
        "question_id": 476,
        "spider_question_id": 828,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality 'USA'.",
        "query": "db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 })",
        "gpt4 answer": "db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 })",
        "deepseek answer": "db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 })"
    },
    {
        "question_id": 477,
        "spider_question_id": 829,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "query": "db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1})",
        "gpt4 answer": "db.orchestra.find({}, { Record_Company: 1 }).sort({ Year_of_Founded: -1 })",
        "deepseek answer": "db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1})"
    },
    {
        "question_id": 478,
        "spider_question_id": 830,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "query": "db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1})",
        "gpt4 answer": "db.orchestra.find({}, { Record_Company: 1 }).sort({ Year_of_Founded: -1 })",
        "deepseek answer": "db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1})"
    },
    {
        "question_id": 479,
        "spider_question_id": 831,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "query": "db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } }])",
        "gpt4 answer": "db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } } ])",
        "deepseek answer": "db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } }])"
    },
    {
        "question_id": 480,
        "spider_question_id": 832,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "query": "db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } }])",
        "gpt4 answer": "db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } } ])",
        "deepseek answer": "db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } }])"
    },
    {
        "question_id": 481,
        "spider_question_id": 833,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not 'Live final'.",
        "query": "db.performance.aggregate([ { $match: { Type: { $ne: \"Live final\" } } }, { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } } ])",
        "gpt4 answer": "db.performance.aggregate([ { $match: { Type: { $ne: \"Live final\" } } }, { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 482,
        "spider_question_id": 834,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type 'Live final'.",
        "query": "db.performance.aggregate([ { $match: { Type: { $ne: 'Live final' } } }, { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } } ])",
        "gpt4 answer": "db.performance.aggregate([ { $match: { Type: { $ne: 'Live final' } } }, { $group: { _id: null, maxShare: { $max: \"$Share\" }, minShare: { $min: \"$Share\" } } }, { $project: { maxShare: 1, minShare: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 483,
        "spider_question_id": 837,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "query": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1})",
        "gpt4 answer": "db.conductor.find({}, { Name: 1 }).sort({ Year_of_Work: -1 })",
        "deepseek answer": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1})"
    },
    {
        "question_id": 484,
        "spider_question_id": 838,
        "db_id": "orchestra",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "query": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1})",
        "gpt4 answer": "db.conductor.find({}, { Name: 1 }).sort({ Year_of_Work: -1 })",
        "deepseek answer": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1})"
    },
    {
        "question_id": 485,
        "spider_question_id": 839,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "query": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)",
        "gpt4 answer": "db.conductor.find({}, { Name: 1 }).sort({ Year_of_Work: -1 }).limit(1)",
        "deepseek answer": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)"
    },
    {
        "question_id": 486,
        "spider_question_id": 840,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "query": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)",
        "gpt4 answer": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)",
        "deepseek answer": "db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)"
    },
    {
        "question_id": 487,
        "spider_question_id": 841,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "query": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestras\" } }, { $unwind: \"$orchestras\" }, { $project: { Name: 1, Orchestra: \"$orchestras.Orchestra\" } } ])",
        "gpt4 answer": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestras\" } }, { $unwind: \"$orchestras\" }, { $project: { Name: 1, Orchestra: \"$orchestras.Orchestra\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 488,
        "spider_question_id": 842,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "query": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestras\" } }, { $unwind: \"$orchestras\" }, { $project: { \"Name\": 1, \"Orchestra\": \"$orchestras.Orchestra\" } } ])",
        "gpt4 answer": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestras\" } }, { $unwind: \"$orchestras\" }, { $project: { \"Name\": 1, \"Orchestra\": \"$orchestras.Orchestra\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 489,
        "spider_question_id": 847,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "query": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestra_info\" } }, { $match: { \"orchestra_info.Year_of_Founded\": { $gt: 2008 } } }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestras\" } }, { $match: { \"orchestras.Year_of_Founded\": { $gt: 2008 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestra_info\" } }, { $match: { \"orchestra_info.Year_of_Founded\": { $gt: 2008 } } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 490,
        "spider_question_id": 848,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "query": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestra_info\" } }, { $unwind: \"$orchestra_info\" }, { $match: { \"orchestra_info.Year_of_Founded\": { $gt: 2008 } } }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestra_info\" } }, { $unwind: \"$orchestra_info\" }, { $match: { \"orchestra_info.Year_of_Founded\": { $gt: 2008 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.conductor.aggregate([ { $lookup: { from: \"orchestra\", localField: \"Conductor_ID\", foreignField: \"Conductor_ID\", as: \"orchestra_info\" } }, { $unwind: \"$orchestra_info\" }, { $match: { \"orchestra_info.Year_of_Founded\": { $gt: 2008 } } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 491,
        "spider_question_id": 849,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "query": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", NumberOfOrchestras: { $sum: 1 } } }, { $project: { Record_Company: \"$_id\", NumberOfOrchestras: 1 } } ])",
        "deepseek answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 492,
        "spider_question_id": 850,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "query": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", NumberOfOrchestras: { $sum: 1 } } }, { $project: { Record_Company: \"$_id\", NumberOfOrchestras: 1 } } ])",
        "deepseek answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 493,
        "spider_question_id": 851,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "query": "db.orchestra.aggregate([ { $group: { _id: \"$Major_Record_Format\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: \"$_id\"} }])",
        "gpt4 answer": "db.orchestra.aggregate([ { $group: { _id: '$Major_Record_Format', count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: '$_id' } } ])",
        "deepseek answer": "db.orchestra.aggregate([ { $group: { _id: \"$Major_Record_Format\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: \"$_id\"} }])"
    },
    {
        "question_id": 494,
        "spider_question_id": 852,
        "db_id": "orchestra",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "query": "db.orchestra.aggregate([ { $group: { _id: \"$Major_Record_Format\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: \"$_id\"} }])",
        "gpt4 answer": "db.orchestra.aggregate([ { $group: { _id: \"$Major_Record_Format\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: \"$_id\" } } ])",
        "deepseek answer": "db.orchestra.aggregate([ { $group: { _id: \"$Major_Record_Format\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: \"$_id\"} }])"
    },
    {
        "question_id": 495,
        "spider_question_id": 853,
        "db_id": "orchestra",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "query": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: \"$_id\" } }])",
        "gpt4 answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: \"$_id\" } } ])",
        "deepseek answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: \"$_id\" } }])"
    },
    {
        "question_id": 496,
        "spider_question_id": 854,
        "db_id": "orchestra",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "query": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: \"$_id\" } }])",
        "gpt4 answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.orchestra.aggregate([ { $group: { _id: \"$Record_Company\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: \"$_id\" } }])"
    },
    {
        "question_id": 497,
        "spider_question_id": 855,
        "db_id": "orchestra",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "query": "db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(\"Orchestra_ID\") } }, { Orchestra: 1 })",
        "gpt4 answer": "db.orchestra.aggregate([ { $lookup: { from: \"performance\", localField: \"Orchestra_ID\", foreignField: \"Orchestra_ID\", as: \"performance_info\" } }, { $match: { \"performance_info\": { $size: 0 } } }, { $project: { Orchestra: 1 } } ])",
        "deepseek answer": "db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(\"Orchestra_ID\") } }, { Orchestra: 1 })"
    },
    {
        "question_id": 498,
        "spider_question_id": 856,
        "db_id": "orchestra",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "query": "db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(\"Orchestra_ID\") } }, { Orchestra: 1 })",
        "gpt4 answer": "db.orchestra.aggregate([ { $lookup: { from: \"performance\", localField: \"Orchestra_ID\", foreignField: \"Orchestra_ID\", as: \"performances\" } }, { $match: { performances: { $size: 0 } } }, { $project: { Orchestra: 1 } } ])",
        "deepseek answer": "db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(\"Orchestra_ID\") } }, { Orchestra: 1 })"
    },
    {
        "question_id": 499,
        "spider_question_id": 857,
        "db_id": "orchestra",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "query": "db.orchestra.aggregate([ { $facet: { \"before2003\": [ { $match: { Year_of_Founded: { $lt: 2003 } } }, { $group: { _id: \"$Record_Company\" } } ], \"after2003\": [ { $match: { Year_of_Founded: { $gt: 2003 } } }, { $group: { _id: \"$Record_Company\" } } ] } }, { $project: { commonRecordCompanies: { $setIntersection: [\"$before2003._id\", \"$after2003._id\"] } } }, { $unwind: \"$commonRecordCompanies\" }, { $replaceRoot: { newRoot: { $arrayToObject: [[{ k: \"Record_Company\", v: \"$commonRecordCompanies\" }]] } } } ])",
        "gpt4 answer": "db.orchestra.aggregate([ { $facet: { \"before2003\": [ { $match: { Year_of_Founded: { $lt: 2003 } } }, { $group: { _id: \"$Record_Company\" } } ], \"after2003\": [ { $match: { Year_of_Founded: { $gt: 2003 } } }, { $group: { _id: \"$Record_Company\" } } ] } }, { $project: { commonRecordCompanies: { $setIntersection: [\"$before2003._id\", \"$after2003._id\"] } } }, { $unwind: \"$commonRecordCompanies\" }, { $replaceRoot: { newRoot: { $arrayToObject: [[{ k: \"Record_Company\", v: \"$commonRecordCompanies\" }]] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 500,
        "spider_question_id": 865,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "query": "db.Highschooler.find({}, { name: 1, grade: 1})",
        "gpt4 answer": "db.Highschooler.find({}, { name: 1, grade: 1 })",
        "deepseek answer": "db.Highschooler.find({}, { name: 1, grade: 1})"
    },
    {
        "question_id": 501,
        "spider_question_id": 866,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "query": "db.Highschooler.find({}, {name: 1, grade: 1})",
        "gpt4 answer": "db.Highschooler.find({}, { name: 1, grade: 1 })",
        "deepseek answer": "db.Highschooler.find({}, {name: 1, grade: 1})"
    },
    {
        "question_id": 502,
        "spider_question_id": 867,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "query": "db.Highschooler.find({}, {grade: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Highschooler.find({}, {grade: 1})"
    },
    {
        "question_id": 503,
        "spider_question_id": 868,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "query": "db.Highschooler.find({}, {grade: 1})",
        "gpt4 answer": "db.Highschooler.find({}, { grade: 1 })",
        "deepseek answer": "db.Highschooler.find({}, {grade: 1})"
    },
    {
        "question_id": 504,
        "spider_question_id": 869,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
        "question": "What grade is Kyle in?",
        "query": "db.Highschooler.find({name: 'Kyle'}, { grade: 1})",
        "gpt4 answer": "db.Highschooler.find({ name: 'Kyle' }, { grade: 1 })",
        "deepseek answer": "db.Highschooler.find({name: 'Kyle'}, { grade: 1})"
    },
    {
        "question_id": 505,
        "spider_question_id": 870,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "query": "db.Highschooler.findOne({name: 'Kyle'}, {grade: 1})",
        "gpt4 answer": "db.Highschooler.find({ name: 'Kyle' }, { grade: 1 })",
        "deepseek answer": "db.Highschooler.findOne({name: 'Kyle'}, {grade: 1})"
    },
    {
        "question_id": 506,
        "spider_question_id": 871,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "question": "Show the names of all high schoolers in grade 10.",
        "query": "db.Highschooler.find({grade: 10}, {name: 1})",
        "gpt4 answer": "db.Highschooler.find({ grade: 10 }, { name: 1 })",
        "deepseek answer": "db.Highschooler.find({grade: 10}, {name: 1})"
    },
    {
        "question_id": 507,
        "spider_question_id": 872,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "question": "What are the names of all high schoolers in grade 10?",
        "query": "db.Highschooler.find({grade: 10}, {name: 1})",
        "gpt4 answer": "db.Highschooler.find({ grade: 10 }, { name: 1 })",
        "deepseek answer": "db.Highschooler.find({grade: 10}, {name: 1})"
    },
    {
        "question_id": 508,
        "spider_question_id": 873,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "query": "db.Highschooler.find({name: 'Kyle'}, { ID: 1})",
        "gpt4 answer": "db.Highschooler.find({name: 'Kyle'}, { ID: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 509,
        "spider_question_id": 874,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "question": "What is Kyle's id?",
        "query": "db.Highschooler.find({name: 'Kyle'}, { ID: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Highschooler.find({name: 'Kyle'}, { ID: 1})"
    },
    {
        "question_id": 510,
        "spider_question_id": 877,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "query": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $project: { grade: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $project: { grade: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 511,
        "spider_question_id": 878,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "query": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 512,
        "spider_question_id": 881,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "question": "Show me all grades that have at least 4 students.",
        "query": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: \"$_id\" } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: \"$_id\" } }])"
    },
    {
        "question_id": 513,
        "spider_question_id": 882,
        "db_id": "network_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "question": "Which grades have 4 or more high schoolers?",
        "query": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: \"$_id\" } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $group: { _id: \"$grade\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: \"$_id\" } }])"
    },
    {
        "question_id": 514,
        "spider_question_id": 883,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "query": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", numberOfFriends: {$sum: 1} }}, { $project: { student_id: \"$_id\", numberOfFriends: 1 }} ])",
        "deepseek answer": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 515,
        "spider_question_id": 884,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "query": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $project: { student_id: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $project: { student_id: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $project: { student_id: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 516,
        "spider_question_id": 887,
        "db_id": "network_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"Friends\" } }, { $project: { name: 1, numberOfFriends: { $size: \"$Friends\" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"Friends\" } }, { $project: { name: 1, numberOfFriends: { $size: \"$Friends\" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 517,
        "spider_question_id": 888,
        "db_id": "network_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"Friends\" } }, { $project: { name: 1, numberOfFriends: { $size: \"$Friends\" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"Friends\" } }, { $project: { name: 1, numberOfFriends: { $size: \"$Friends\" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 518,
        "spider_question_id": 890,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $exists: true, $ne: [] } } }, { $addFields: { friendCount: { $size: \"$friends\" } } }, { $match: { friendCount: { $gte: 3 } } }, { $project: { name: 1 } }])",
        "gpt4 answer": "db.Friend.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $lookup: { from: \"Highschooler\", localField: \"_id\", foreignField: \"ID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { name: \"$student_info.name\" } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $exists: true, $ne: [] } } }, { $addFields: { friendCount: { $size: \"$friends\" } } }, { $match: { friendCount: { $gte: 3 } } }, { $project: { name: 1 } }])"
    },
    {
        "question_id": 519,
        "spider_question_id": 891,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "query": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $lookup: { from: \"Highschooler\", localField: \"friends.friend_id\", foreignField: \"ID\", as: \"friend_info\" } }, { $unwind: \"$friend_info\" }, { $project: { name: \"$friend_info.name\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $lookup: { from: \"Highschooler\", localField: \"friends.friend_id\", foreignField: \"ID\", as: \"friend_info\" } }, { $unwind: \"$friend_info\" }, { $project: { name: \"$friend_info.name\" } }])"
    },
    {
        "question_id": 520,
        "spider_question_id": 892,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "query": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $lookup: { from: \"Highschooler\", localField: \"friends.friend_id\", foreignField: \"ID\", as: \"friend_names\" } }, { $unwind: \"$friend_names\" }, { $project: { name: \"$friend_names.name\" } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $lookup: { from: \"Highschooler\", localField: \"friends.friend_id\", foreignField: \"ID\", as: \"friend_names\" } }, { $unwind: \"$friend_names\" }, { $project: { name: \"$friend_names.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 521,
        "spider_question_id": 893,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "question": "How many friends does the high school student Kyle have?",
        "query": "db.Friend.aggregate([ { $lookup: { from: \"Highschooler\", localField: \"student_id\", foreignField: \"ID\", as: \"student_info\" } }, { $match: { \"student_info.name\": \"Kyle\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $project: { numberOfFriends: { $size: \"$friends\" } } } ])",
        "deepseek answer": "db.Friend.aggregate([ { $lookup: { from: \"Highschooler\", localField: \"student_id\", foreignField: \"ID\", as: \"student_info\" } }, { $match: { \"student_info.name\": \"Kyle\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 522,
        "spider_question_id": 894,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "query": "db.Friend.aggregate([ { $lookup: { from: \"Highschooler\", localField: \"student_id\", foreignField: \"ID\", as: \"student_info\" } }, { $match: { \"student_info.name\": \"Kyle\" } }, { $count: \"total\" }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $project: { numberOfFriends: { $size: \"$friends\" } } } ])",
        "deepseek answer": "db.Friend.aggregate([ { $lookup: { from: \"Highschooler\", localField: \"student_id\", foreignField: \"ID\", as: \"student_info\" } }, { $match: { \"student_info.name\": \"Kyle\" } }, { $count: \"total\" }])"
    },
    {
        "question_id": 523,
        "spider_question_id": 895,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { ID: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { ID: 1 } }])"
    },
    {
        "question_id": 524,
        "spider_question_id": 896,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of high school students who do not have friends?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $project: { ID: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { \"ID\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $project: { ID: 1 } }])"
    },
    {
        "question_id": 525,
        "spider_question_id": 897,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
        "question": "Show names of all high school students who do not have any friends.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } }])"
    },
    {
        "question_id": 526,
        "spider_question_id": 898,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
        "question": "What are the names of students who have no friends?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } }])"
    },
    {
        "question_id": 527,
        "spider_question_id": 899,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"liked_by\" } }, { $match: { $and: [ { \"friends.0\": { $exists: true } }, { \"liked_by.0\": { $exists: true } } ] } }, { $project: { ID: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"liked_by\" } }, { $match: { $and: [ { \"friends.0\": { $exists: true } }, { \"liked_by.0\": { $exists: true } } ] } }, { $project: { ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 528,
        "spider_question_id": 900,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"likedBy\" } }, { $match: { $expr: { $and: [ { $ne: [ { $size: \"$friends\" }, 0 ] }, { $ne: [ { $size: \"$likedBy\" }, 0 ] } ] } } }, { $project: { ID: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"likedBy\" } }, { $match: { $expr: { $and: [ { $ne: [ { $size: \"$friends\" }, 0 ] }, { $ne: [ { $size: \"$likedBy\" }, 0 ] } ] } } }, { $project: { ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 529,
        "spider_question_id": 901,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"liked_by\" } }, { $match: { \"friends.0\": { $exists: true }, \"liked_by.0\": { $exists: true } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"liked_by\" } }, { $match: { \"friends.0\": { $exists: true }, \"liked_by.0\": { $exists: true } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 530,
        "spider_question_id": 902,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"has_friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"is_liked\" } }, { $match: { $and: [ { \"has_friends.0\": { $exists: true } }, { \"is_liked.0\": { $exists: true } } ] } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"has_friends\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"liked_id\", as: \"is_liked\" } }, { $match: { $and: [ { \"has_friends.0\": { $exists: true } }, { \"is_liked.0\": { $exists: true } } ] } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 531,
        "spider_question_id": 903,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "query": "db.Likes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Likes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Likes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 532,
        "spider_question_id": 904,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "query": "db.Likes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.Likes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Likes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 533,
        "spider_question_id": 905,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes_info\" } }, { $match: { \"likes_info\": { $ne: [] } } }, { $project: { name: 1, number_of_likes: { $size: \"$likes_info\" } } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes_info\" } }, { $match: { \"likes_info\": { $ne: [] } } }, { $project: { name: 1, number_of_likes: { $size: \"$likes_info\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 534,
        "spider_question_id": 906,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes_info\" } }, { $match: { \"likes_info\": { $ne: [] } } }, { $project: { name: 1, likesCount: { $size: \"$likes_info\" } } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes_info\" } }, { $match: { \"likes_info\": { $ne: [] } } }, { $project: { name: 1, likesCount: { $size: \"$likes_info\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 535,
        "spider_question_id": 911,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { grade: { $gt: 5 } } }, { $addFields: { friendCount: { $size: \"$friends\" } } }, { $match: { friendCount: { $gte: 2 } } }, { $project: { name: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { grade: { $gt: 5 } } }, { $addFields: { friendCount: { $size: \"$friends\" } } }, { $match: { friendCount: { $gte: 2 } } }, { $project: { name: 1 } }])"
    },
    {
        "question_id": 536,
        "spider_question_id": 912,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "query": "db.Highschooler.aggregate([ { $match: { grade: { $gt: 5 } } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $project: { name: 1, numberOfFriends: { $size: \"$friends\" } } }, { $match: { numberOfFriends: { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $match: { grade: { $gt: 5 } } }, { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $project: { name: 1, numberOfFriends: { $size: \"$friends\" } } }, { $match: { numberOfFriends: { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 537,
        "spider_question_id": 913,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "query": "db.Likes.aggregate([ { $lookup: { from: \"Highschooler\", localField: \"student_id\", foreignField: \"ID\", as: \"student\" } }, { $match: { \"student.name\": \"Kyle\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes\" } }, { $project: { num_likes: { $size: \"$likes\" } } } ])",
        "deepseek answer": "db.Likes.aggregate([ { $lookup: { from: \"Highschooler\", localField: \"student_id\", foreignField: \"ID\", as: \"student\" } }, { $match: { \"student.name\": \"Kyle\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
    },
    {
        "question_id": 538,
        "spider_question_id": 914,
        "db_id": "network_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "query": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes\" }}, { $unwind: \"$likes\" }, { $count: \"likes_count\" } ])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $match: { name: \"Kyle\" } }, { $lookup: { from: \"Likes\", localField: \"ID\", foreignField: \"student_id\", as: \"likes\" }}, { $unwind: \"$likes\" }, { $count: \"likes_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 539,
        "spider_question_id": 915,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends.0\": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: \"$grade\" } } }, { $project: { averageGrade: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends.0\": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: \"$grade\" } } }, { $project: { averageGrade: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends.0\": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: \"$grade\" } } }, { $project: { averageGrade: 1 } }])"
    },
    {
        "question_id": 540,
        "spider_question_id": 916,
        "db_id": "network_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "question": "What is the average grade of students who have friends?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends.0\": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: \"$grade\" } } }, { $project: { averageGrade: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" }}, { $match: { \"friends\": { $ne: [] } }}, { $group: { _id: null, averageGrade: { $avg: \"$grade\" } }}, { $project: { averageGrade: 1 }} ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { \"friends.0\": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: \"$grade\" } } }, { $project: { averageGrade: 1 } }])"
    },
    {
        "question_id": 541,
        "spider_question_id": 917,
        "db_id": "network_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: \"$grade\" } } }, { $project: { minGrade: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: 'Friend', localField: 'ID', foreignField: 'student_id', as: 'friends' } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: '$grade' } } }, { $project: { minGrade: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: \"$grade\" } } }, { $project: { minGrade: 1 } }])"
    },
    {
        "question_id": 542,
        "spider_question_id": 918,
        "db_id": "network_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "query": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: \"$grade\" } } }, { $project: { minGrade: 1 } }])",
        "gpt4 answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, lowestGrade: { $min: \"$grade\" } } }, { $project: { lowestGrade: 1 } } ])",
        "deepseek answer": "db.Highschooler.aggregate([ { $lookup: { from: \"Friend\", localField: \"ID\", foreignField: \"student_id\", as: \"friends\" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: \"$grade\" } } }, { $project: { minGrade: 1 } }])"
    },
    {
        "question_id": 543,
        "spider_question_id": 919,
        "db_id": "dog_kennels",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "query": "db.Owners.aggregate([ { $group: { _id: \"$state\" } }, { $lookup: { from: \"Professionals\", localField: \"_id\", foreignField: \"state\", as: \"professionals\" } }, { $match: { professionals: { $ne: [] } } }, { $project: { state: \"$_id\" } }])",
        "gpt4 answer": "db.Owners.aggregate([ { $lookup: { from: \"Professionals\", localField: \"state\", foreignField: \"state\", as: \"professionals\" } }, { $match: { \"professionals\": { $ne: [] } } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "deepseek answer": "db.Owners.aggregate([ { $group: { _id: \"$state\" } }, { $lookup: { from: \"Professionals\", localField: \"_id\", foreignField: \"state\", as: \"professionals\" } }, { $match: { professionals: { $ne: [] } } }, { $project: { state: \"$_id\" } }])"
    },
    {
        "question_id": 544,
        "spider_question_id": 920,
        "db_id": "dog_kennels",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Professionals\", localField: \"state\", foreignField: \"state\", as: \"common_states\" } }, { $match: { \"common_states\": { $ne: [] } } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.Owners.aggregate([ { $lookup: { from: \"Professionals\", localField: \"state\", foreignField: \"state\", as: \"common_states\" } }, { $match: { \"common_states\": { $ne: [] } } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 545,
        "spider_question_id": 923,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "query": "db.Professionals.aggregate([ { $match: { state: 'Indiana' } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1 } }, { $unionWith: { coll: \"Professionals\", pipeline: [ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1, treatmentCount: { $size: \"$treatments\" } } }, { $match: { treatmentCount: { $gt: 2 } } } ] } }, { $group: { _id: { professional_id: \"$professional_id\", last_name: \"$last_name\", cell_number: \"$cell_number\" } } }, { $project: { professional_id: \"$_id.professional_id\", last_name: \"$_id.last_name\", cell_number: \"$_id.cell_number\" } } ])",
        "gpt4 answer": "db.Professionals.aggregate([ { $match: { state: 'Indiana' } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1 } }, { $unionWith: { coll: \"Professionals\", pipeline: [ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1, treatmentCount: { $size: \"$treatments\" } } }, { $match: { treatmentCount: { $gt: 2 } } } ] } }, { $group: { _id: { professional_id: \"$professional_id\", last_name: \"$last_name\", cell_number: \"$cell_number\" } } }, { $project: { professional_id: \"$_id.professional_id\", last_name: \"$_id.last_name\", cell_number: \"$_id.cell_number\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 546,
        "spider_question_id": 925,
        "db_id": "dog_kennels",
        "difficulty": "hard",
        "spider_gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $addFields: { totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])",
        "gpt4 answer": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatments_info\" } }, { $project: { name: 1, total_cost: { $sum: \"$treatments_info.cost_of_treatment\" } } }, { $match: { total_cost: { $lte: 1000 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $addFields: { totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])"
    },
    {
        "question_id": 547,
        "spider_question_id": 926,
        "db_id": "dog_kennels",
        "difficulty": "hard",
        "spider_gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $addFields: { totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])",
        "gpt4 answer": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"dog_treatments\" } }, { $project: { name: 1, totalCost: { $sum: \"$dog_treatments.cost_of_treatment\" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $addFields: { totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])"
    },
    {
        "question_id": 548,
        "spider_question_id": 929,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments\": { $size: 0 } } }, { $project: { \"_id\": 0, \"professional_id\": 1, \"role_code\": 1, \"email_address\": 1 } }])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments\": { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } } ])",
        "deepseek answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments\": { $size: 0 } } }, { $project: { \"_id\": 0, \"professional_id\": 1, \"role_code\": 1, \"email_address\": 1 } }])"
    },
    {
        "question_id": 549,
        "spider_question_id": 930,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments\": { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } }])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatmentInfo\" } }, { $match: { treatmentInfo: { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } } ])",
        "deepseek answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments\": { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } }])"
    },
    {
        "question_id": 550,
        "spider_question_id": 931,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Owners\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"owner_info\" } }, { $unwind: \"$owner_info\" }, { $group: { _id: \"$owner_id\", first_name: { $first: \"$owner_info.first_name\" }, last_name: { $first: \"$owner_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", first_name: 1, last_name: 1 } }])",
        "gpt4 answer": "db.Dogs.aggregate([ { $group: { _id: \"$owner_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Owners\", localField: \"_id\", foreignField: \"owner_id\", as: \"ownerDetails\" }}, { $unwind: \"$ownerDetails\" }, { $project: { owner_id: \"$_id\", first_name: \"$ownerDetails.first_name\", last_name: \"$ownerDetails.last_name\" }} ])",
        "deepseek answer": "db.Dogs.aggregate([ { $lookup: { from: \"Owners\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"owner_info\" } }, { $unwind: \"$owner_info\" }, { $group: { _id: \"$owner_id\", first_name: { $first: \"$owner_info.first_name\" }, last_name: { $first: \"$owner_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", first_name: 1, last_name: 1 } }])"
    },
    {
        "question_id": 551,
        "spider_question_id": 932,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Owners\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"owner_info\" } }, { $unwind: \"$owner_info\" }, { $group: { _id: \"$owner_id\", first_name: { $first: \"$owner_info.first_name\" }, last_name: { $first: \"$owner_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", first_name: 1, last_name: 1 } }])",
        "gpt4 answer": "db.Dogs.aggregate([ { $group: { _id: \"$owner_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Owners\", localField: \"_id\", foreignField: \"owner_id\", as: \"ownerDetails\" } }, { $unwind: \"$ownerDetails\" }, { $project: { owner_id: \"$_id\", first_name: \"$ownerDetails.first_name\", last_name: \"$ownerDetails.last_name\" } } ])",
        "deepseek answer": "db.Dogs.aggregate([ { $lookup: { from: \"Owners\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"owner_info\" } }, { $unwind: \"$owner_info\" }, { $group: { _id: \"$owner_id\", first_name: { $first: \"$owner_info.first_name\" }, last_name: { $first: \"$owner_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", first_name: 1, last_name: 1 } }])"
    },
    {
        "question_id": 552,
        "spider_question_id": 933,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: \"$treatments\" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: \"$treatments\" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 553,
        "spider_question_id": 934,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: \"$treatments\" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: \"$treatments\" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 554,
        "spider_question_id": 935,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "query": "db.Breeds.aggregate([ { $lookup: { from: \"Dogs\", localField: \"breed_code\", foreignField: \"breed_code\", as: \"dogs\" } }, { $project: { breed_name: 1} }, { $sort: { dogCount: -1 } }, { $limit: 1 }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Breeds.aggregate([ { $lookup: { from: \"Dogs\", localField: \"breed_code\", foreignField: \"breed_code\", as: \"dogs\" } }, { $project: { breed_name: 1} }, { $sort: { dogCount: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 555,
        "spider_question_id": 936,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "query": "db.Breeds.aggregate([ { $lookup: { from: \"Dogs\", localField: \"breed_code\", foreignField: \"breed_code\", as: \"dogs\" } }, { $project: { breed_name: 1 } }, { $sort: { dogCount: -1 } }, { $limit: 1 }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Breeds.aggregate([ { $lookup: { from: \"Dogs\", localField: \"breed_code\", foreignField: \"breed_code\", as: \"dogs\" } }, { $project: { breed_name: 1 } }, { $sort: { dogCount: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 556,
        "spider_question_id": 937,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", last_name: { $first: \"$last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", last_name: 1 } }])",
        "gpt4 answer": "db.Treatments.aggregate([ { $lookup: { from: \"Dogs\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"dog_info\" } }, { $unwind: \"$dog_info\" }, { $group: { _id: \"$dog_info.owner_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Owners\", localField: \"_id\", foreignField: \"owner_id\", as: \"owner_info\" } }, { $unwind: \"$owner_info\" }, { $project: { owner_id: \"$_id\", last_name: \"$owner_info.last_name\" } } ])",
        "deepseek answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", last_name: { $first: \"$last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", last_name: 1 } }])"
    },
    {
        "question_id": 557,
        "spider_question_id": 939,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "query": "db.Treatment_Types.aggregate([ { $lookup: { from: \"Treatments\", localField: \"treatment_type_code\", foreignField: \"treatment_type_code\", as: \"treatments\" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])",
        "gpt4 answer": "db.Treatments.aggregate([ { $group: { _id: \"$treatment_type_code\", totalCost: { $sum: \"$cost_of_treatment\" } } }, { $sort: { totalCost: 1 } }, { $limit: 1 }, { $lookup: { from: \"Treatment_Types\", localField: \"_id\", foreignField: \"treatment_type_code\", as: \"treatmentType\" } }, { $unwind: \"$treatmentType\" }, { $project: { treatment_type_description: \"$treatmentType.treatment_type_description\" } } ])",
        "deepseek answer": "db.Treatment_Types.aggregate([ { $lookup: { from: \"Treatments\", localField: \"treatment_type_code\", foreignField: \"treatment_type_code\", as: \"treatments\" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 558,
        "spider_question_id": 940,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "query": "db.Treatment_Types.aggregate([ { $lookup: { from: \"Treatments\", localField: \"treatment_type_code\", foreignField: \"treatment_type_code\", as: \"treatments\" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Treatment_Types.aggregate([ { $lookup: { from: \"Treatments\", localField: \"treatment_type_code\", foreignField: \"treatment_type_code\", as: \"treatments\" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 559,
        "spider_question_id": 941,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", zip_code: { $first: \"$zip_code\" }, totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", zip_code: 1 } }])",
        "gpt4 answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dog_info\" } }, { $unwind: \"$dog_info\" }, { $lookup: { from: \"Treatments\", localField: \"dog_info.dog_id\", foreignField: \"dog_id\", as: \"treatment_info\" } }, { $unwind: \"$treatment_info\" }, { $group: { _id: { owner_id: \"$owner_id\", zip_code: \"$zip_code\" }, total_cost: { $sum: \"$treatment_info.cost_of_treatment\" } } }, { $sort: { total_cost: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id.owner_id\", zip_code: \"$_id.zip_code\" } } ])",
        "deepseek answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", zip_code: { $first: \"$zip_code\" }, totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", zip_code: 1 } }])"
    },
    {
        "question_id": 560,
        "spider_question_id": 942,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", zip_code: { $first: \"$zip_code\" }, totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", zip_code: 1 } }])",
        "gpt4 answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", totalSpent: { $sum: \"$treatments.cost_of_treatment\" }, zip_code: { $first: \"$zip_code\" } } }, { $sort: { totalSpent: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", zip_code: 1 } } ])",
        "deepseek answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $lookup: { from: \"Treatments\", localField: \"dogs.dog_id\", foreignField: \"dog_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $group: { _id: \"$owner_id\", zip_code: { $first: \"$zip_code\" }, totalCost: { $sum: \"$treatments.cost_of_treatment\" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: \"$_id\", zip_code: 1 } }])"
    },
    {
        "question_id": 561,
        "spider_question_id": 943,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments.1\": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments.1\": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])"
    },
    {
        "question_id": 562,
        "spider_question_id": 944,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments.1\": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments.1\": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])"
    },
    {
        "question_id": 563,
        "spider_question_id": 951,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $project: { first_name: 1, last_name: 1, size_code: \"$dogs.size_code\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $project: { first_name: 1, last_name: 1, size_code: \"$dogs.size_code\" } }])"
    },
    {
        "question_id": 564,
        "spider_question_id": 953,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $project: { first_name: 1, dog_name: \"$dogs.name\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $project: { first_name: 1, dog_name: \"$dogs.name\" } }])"
    },
    {
        "question_id": 565,
        "spider_question_id": 957,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "query": "db.Owners.aggregate([ { $match: { state: \"Virginia\" } }, { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $project: { first_name: 1, \"dog_name\": \"$dogs.name\" } } ])",
        "gpt4 answer": "db.Owners.aggregate([ { $match: { state: \"Virginia\" } }, { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dogs\" } }, { $unwind: \"$dogs\" }, { $project: { first_name: 1, \"dog_name\": \"$dogs.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 566,
        "spider_question_id": 963,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "query": "db.Professionals.find({ $or: [ { state: 'Hawaii' }, { state: 'Wisconsin' } ]}, { email_address: 1 })",
        "gpt4 answer": "db.Professionals.find( { state: { $in: [\"Hawaii\", \"Wisconsin\"] } }, { email_address: 1 } )",
        "deepseek answer": "db.Professionals.find({ $or: [ { state: 'Hawaii' }, { state: 'Wisconsin' } ]}, { email_address: 1 })"
    },
    {
        "question_id": 567,
        "spider_question_id": 964,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "query": "db.Professionals.find( { state: { $in: ['Hawaii', 'Wisconsin'] } }, { email_address: 1 })",
        "gpt4 answer": "db.Professionals.find( { state: { $in: [\"Hawaii\", \"Wisconsin\"] } }, { email_address: 1 } )",
        "deepseek answer": "db.Professionals.find( { state: { $in: ['Hawaii', 'Wisconsin'] } }, { email_address: 1 })"
    },
    {
        "question_id": 568,
        "spider_question_id": 967,
        "db_id": "dog_kennels",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "query": "db.Treatments.aggregate([ { $group: { _id: \"$dog_id\" } }, { $count: \"unique_dogs_treated\" } ])",
        "gpt4 answer": "db.Treatments.aggregate([ { $group: { _id: \"$dog_id\" } }, { $count: \"unique_dogs_treated\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 569,
        "spider_question_id": 969,
        "db_id": "dog_kennels",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { \"treatments\": { $exists: true, $ne: [] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "."
    },
    {
        "question_id": 570,
        "spider_question_id": 971,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "query": "db.Professionals.find( { city: /West/ }, { role_code: 1, street: 1, city: 1, state: 1 } )",
        "gpt4 answer": "db.Professionals.find( { city: /West/ }, { role_code: 1, street: 1, city: 1, state: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 571,
        "spider_question_id": 972,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "query": "db.Professionals.find( { city: { $regex: /West/ } }, { role_code: 1, street: 1, city: 1, state: 1 })",
        "gpt4 answer": "db.Professionals.find({ city: /West/ }, { role_code: 1, street: 1, city: 1, state: 1 })",
        "deepseek answer": "db.Professionals.find( { city: { $regex: /West/ } }, { role_code: 1, street: 1, city: 1, state: 1 })"
    },
    {
        "question_id": 572,
        "spider_question_id": 973,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "query": "db.Owners.find({state: {$regex: /North/}}, {first_name: 1, last_name: 1, email_address: 1})",
        "gpt4 answer": "db.Owners.find({ state: /North/ }, { first_name: 1, last_name: 1, email_address: 1 })",
        "deepseek answer": "db.Owners.find({state: {$regex: /North/}}, {first_name: 1, last_name: 1, email_address: 1})"
    },
    {
        "question_id": 573,
        "spider_question_id": 974,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "query": "db.Owners.find({ state: { $regex: /North/ } }, { first_name: 1, last_name: 1, email_address: 1 })",
        "gpt4 answer": "db.Owners.find({ state: /North/ }, { first_name: 1, last_name: 1, email_address: 1 })",
        "deepseek answer": "db.Owners.find({ state: { $regex: /North/ } }, { first_name: 1, last_name: 1, email_address: 1 })"
    },
    {
        "question_id": 574,
        "spider_question_id": 977,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "query": "db.Treatments.find({}, { cost_of_treatment: 1 }).sort({ date_of_treatment: -1 }).limit(1)",
        "gpt4 answer": "db.Treatments.find({}, { cost_of_treatment: 1 }).sort({ date_of_treatment: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 575,
        "spider_question_id": 978,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "query": "db.Treatments.find({}, {cost_of_treatment: 1}).sort({date_of_treatment: -1}).limit(1)",
        "gpt4 answer": "db.Treatments.find({}, {cost_of_treatment: 1}).sort({date_of_treatment: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 576,
        "spider_question_id": 979,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"dog_treatments\" } }, { $match: { \"dog_treatments\": { $size: 0 } } }, { $count: \"untreated_dogs_count\" } ])",
        "gpt4 answer": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"dog_treatments\" } }, { $match: { \"dog_treatments\": { $size: 0 } } }, { $count: \"untreated_dogs_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 577,
        "spider_question_id": 980,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatment_info\" } }, { $match: { \"treatment_info\": { $size: 0 } } }, { $count: \"number_of_dogs_without_treatment\" } ])",
        "gpt4 answer": "db.Dogs.aggregate([ { $lookup: { from: \"Treatments\", localField: \"dog_id\", foreignField: \"dog_id\", as: \"treatment_info\" } }, { $match: { \"treatment_info\": { $size: 0 } } }, { $count: \"number_of_dogs_without_treatment\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 578,
        "spider_question_id": 981,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"owner_dogs\" } }, { $match: { \"owner_dogs\": { $size: 0 } } }, { $count: \"owners_without_dogs\" } ])",
        "gpt4 answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"owner_dogs\" } }, { $match: { \"owner_dogs\": { $size: 0 } } }, { $count: \"owners_without_dogs\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 579,
        "spider_question_id": 982,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "query": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dog_owner\" } }, { $match: { dog_owner: { $size: 0 } } }, { $count: \"number_of_owners_without_dogs\" } ])",
        "gpt4 answer": "db.Owners.aggregate([ { $lookup: { from: \"Dogs\", localField: \"owner_id\", foreignField: \"owner_id\", as: \"dog_owner\" } }, { $match: { dog_owner: { $size: 0 } } }, { $count: \"number_of_owners_without_dogs\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 580,
        "spider_question_id": 983,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { treatments: { $size: 0 } } }, { $count: \"no_treatment_count\" } ])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { treatments: { $size: 0 } } }, { $count: \"no_treatment_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 581,
        "spider_question_id": 984,
        "db_id": "dog_kennels",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { treatments: [] } }, { $count: \"numberOfProfessionals\" } ])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $match: { treatments: [] } }, { $count: \"numberOfProfessionals\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 582,
        "spider_question_id": 989,
        "db_id": "dog_kennels",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "query": "db.Dogs.find({}, {age: 1}).sort({age: -1}).limit(1)",
        "gpt4 answer": "db.Dogs.aggregate([ { $group: { _id: null, oldestAge: { $max: \"$age\" } }}, { $project: { oldestAge: 1 }} ])",
        "deepseek answer": "db.Dogs.find({}, {age: 1}).sort({age: -1}).limit(1)"
    },
    {
        "question_id": 583,
        "spider_question_id": 990,
        "db_id": "dog_kennels",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "query": "db.Dogs.aggregate([ { $group: { _id: null, maxAge: { $max: \"$age\" } } }, { $project: { maxAge: 1 } }])",
        "gpt4 answer": "db.Dogs.find({}, {age: 1}).sort({age: -1}).limit(1)",
        "deepseek answer": "db.Dogs.aggregate([ { $group: { _id: null, maxAge: { $max: \"$age\" } } }, { $project: { maxAge: 1 } }])"
    },
    {
        "question_id": 584,
        "spider_question_id": 991,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT charge_type , charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "query": "db.Charges.aggregate([ { $project: { charge_type: 1, charge_amount: 1 } }])",
        "gpt4 answer": "db.Charges.find({}, { charge_type: 1, charge_amount: 1 })",
        "deepseek answer": "db.Charges.aggregate([ { $project: { charge_type: 1, charge_amount: 1 } }])"
    },
    {
        "question_id": 585,
        "spider_question_id": 992,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT charge_type , charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "query": "db.Charges.find({}, { charge_type: 1, charge_amount: 1})",
        "gpt4 answer": "db.Charges.find({}, { charge_type: 1, charge_amount: 1 })",
        "deepseek answer": "db.Charges.find({}, { charge_type: 1, charge_amount: 1})"
    },
    {
        "question_id": 586,
        "spider_question_id": 993,
        "db_id": "dog_kennels",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "query": "db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: \"$charge_amount\" } } }, { $project: { \u00f6axChargeAmount: 1 } }])",
        "gpt4 answer": "db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: \"$charge_amount\" } } }, { $project: { maxChargeAmount: 1 } } ])",
        "deepseek answer": "db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: \"$charge_amount\" } } }, { $project: { \u00f6axChargeAmount: 1 } }])"
    },
    {
        "question_id": 587,
        "spider_question_id": 994,
        "db_id": "dog_kennels",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "query": "db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: \"$charge_amount\" } } }, { $project: { \u00f6axChargeAmount: 1 } }])",
        "gpt4 answer": "db.Charges.find({}, { charge_amount: 1 }).sort({ charge_amount: -1 }).limit(1)",
        "deepseek answer": "db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: \"$charge_amount\" } } }, { $project: { \u00f6axChargeAmount: 1 } }])"
    },
    {
        "question_id": 588,
        "spider_question_id": 995,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address , cell_number , home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "query": "db.Professionals.find({}, {email_address: 1, cell_number: 1, home_phone: 1})",
        "gpt4 answer": "db.Professionals.find({}, { email_address: 1, cell_number: 1, home_phone: 1 })",
        "deepseek answer": "db.Professionals.find({}, {email_address: 1, cell_number: 1, home_phone: 1})"
    },
    {
        "question_id": 589,
        "spider_question_id": 996,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address , cell_number , home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "query": "db.Professionals.find({}, { email_address: 1, cell_number: 1, home_phone: 1 })",
        "gpt4 answer": "db.Professionals.find({}, { email_address: 1, cell_number: 1, home_phone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 590,
        "spider_question_id": 997,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "query": "db.Dogs.aggregate([ { $lookup: { from: \"Breeds\", localField: \"breed_code\", foreignField: \"breed_code\", as: \"breed_info\" } }, { $lookup: { from: \"Sizes\", localField: \"size_code\", foreignField: \"size_code\", as: \"size_info\" } }, { $unwind: \"$breed_info\" }, { $unwind: \"$size_info\" }, { $group: { _id: { breed_code: \"$breed_code\", size_code: \"$size_code\" } } }, { $project: { breed_code: \"$_id.breed_code\", size_code: \"$_id.size_code\" } } ])",
        "gpt4 answer": "db.Dogs.aggregate([ { $lookup: { from: \"Breeds\", localField: \"breed_code\", foreignField: \"breed_code\", as: \"breed_info\" } }, { $lookup: { from: \"Sizes\", localField: \"size_code\", foreignField: \"size_code\", as: \"size_info\" } }, { $unwind: \"$breed_info\" }, { $unwind: \"$size_info\" }, { $group: { _id: { breed_code: \"$breed_code\", size_code: \"$size_code\" } } }, { $project: { breed_code: \"$_id.breed_code\", size_code: \"$_id.size_code\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 591,
        "spider_question_id": 998,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "query": "db.Dogs.aggregate([ { $group: { _id: { breed_code: \"$breed_code\", size_code: \"$size_code\" } } }, { $project: { breed_code: \"$_id.breed_code\", size_code: \"$_id.size_code\" } } ])",
        "gpt4 answer": "db.Dogs.aggregate([ { $group: { _id: { breed_code: \"$breed_code\", size_code: \"$size_code\" } } }, { $project: { breed_code: \"$_id.breed_code\", size_code: \"$_id.size_code\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 592,
        "spider_question_id": 999,
        "db_id": "dog_kennels",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "query": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $lookup: { from: \"Treatment_Types\", localField: \"treatments.treatment_type_code\", foreignField: \"treatment_type_code\", as: \"treatment_description\" } }, { $unwind: \"$treatment_description\" }, { $group: { _id: { first_name: \"$first_name\", treatment_type_description: \"$treatment_description.treatment_type_description\" } } }, { $project: { first_name: \"$_id.first_name\", treatment_type_description: \"$_id.treatment_type_description\" } } ])",
        "gpt4 answer": "db.Professionals.aggregate([ { $lookup: { from: \"Treatments\", localField: \"professional_id\", foreignField: \"professional_id\", as: \"treatments\" } }, { $unwind: \"$treatments\" }, { $lookup: { from: \"Treatment_Types\", localField: \"treatments.treatment_type_code\", foreignField: \"treatment_type_code\", as: \"treatment_description\" } }, { $unwind: \"$treatment_description\" }, { $group: { _id: { first_name: \"$first_name\", treatment_type_description: \"$treatment_description.treatment_type_description\" } } }, { $project: { first_name: \"$_id.first_name\", treatment_type_description: \"$_id.treatment_type_description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 593,
        "spider_question_id": 1003,
        "db_id": "singer",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "query": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1})",
        "gpt4 answer": "db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: 1 })",
        "deepseek answer": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1})"
    },
    {
        "question_id": 594,
        "spider_question_id": 1004,
        "db_id": "singer",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "query": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1})",
        "gpt4 answer": "db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: 1 })",
        "deepseek answer": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1})"
    },
    {
        "question_id": 595,
        "spider_question_id": 1005,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Birth_Year , Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "query": "db.singer.find({}, {Birth_Year: 1, Citizenship: 1})",
        "gpt4 answer": "db.singer.find({}, { Birth_Year: 1, Citizenship: 1 })",
        "deepseek answer": "db.singer.find({}, {Birth_Year: 1, Citizenship: 1})"
    },
    {
        "question_id": 596,
        "spider_question_id": 1006,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Birth_Year , Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "query": "db.singer.find({}, {Birth_Year: 1, Citizenship: 1})",
        "gpt4 answer": "db.singer.find({}, { Birth_Year: 1, Citizenship: 1 })",
        "deepseek answer": "db.singer.find({}, {Birth_Year: 1, Citizenship: 1})"
    },
    {
        "question_id": 597,
        "spider_question_id": 1007,
        "db_id": "singer",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not 'France'.",
        "query": "db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })",
        "gpt4 answer": "db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })",
        "deepseek answer": "db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })"
    },
    {
        "question_id": 598,
        "spider_question_id": 1008,
        "db_id": "singer",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French citizens?",
        "query": "db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })",
        "gpt4 answer": "db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })",
        "deepseek answer": "db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })"
    },
    {
        "question_id": 599,
        "spider_question_id": 1009,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "query": "db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })",
        "gpt4 answer": "db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })",
        "deepseek answer": "db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })"
    },
    {
        "question_id": 600,
        "spider_question_id": 1010,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "query": "db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })",
        "gpt4 answer": "db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })",
        "deepseek answer": "db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })"
    },
    {
        "question_id": 601,
        "spider_question_id": 1011,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "query": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1)",
        "gpt4 answer": "db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: -1 }).limit(1)",
        "deepseek answer": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1)"
    },
    {
        "question_id": 602,
        "spider_question_id": 1012,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "query": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1)",
        "gpt4 answer": "db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: -1 }).limit(1)",
        "deepseek answer": "db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1)"
    },
    {
        "question_id": 603,
        "spider_question_id": 1013,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $project: { Citizenship: \"$_id\", count: 1 } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", NumberOfSingers: { $sum: 1 } } }, { $project: { Citizenship: \"$_id\", NumberOfSingers: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $project: { Citizenship: \"$_id\", count: 1 } }])"
    },
    {
        "question_id": 604,
        "spider_question_id": 1014,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }])"
    },
    {
        "question_id": 605,
        "spider_question_id": 1015,
        "db_id": "singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: \"$_id\"} }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: \"$_id\" } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: \"$_id\"} }])"
    },
    {
        "question_id": 606,
        "spider_question_id": 1016,
        "db_id": "singer",
        "difficulty": "hard",
        "spider_gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: \"$_id\"} }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: \"$_id\"} }])"
    },
    {
        "question_id": 607,
        "spider_question_id": 1017,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", max_net_worth: { $max: \"$Net_Worth_Millions\" } } }, { $project: { Citizenship: \"$_id\", max_net_worth: 1 } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", MaxNetWorth: { $max: \"$Net_Worth_Millions\" } } }, { $project: { Citizenship: \"$_id\", MaxNetWorth: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", max_net_worth: { $max: \"$Net_Worth_Millions\" } } }, { $project: { Citizenship: \"$_id\", max_net_worth: 1 } }])"
    },
    {
        "question_id": 608,
        "spider_question_id": 1018,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the maximum net worth?",
        "query": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", maxNetWorth: { $max: \"$Net_Worth_Millions\" } } }])",
        "gpt4 answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", maxNetWorth: { $max: \"$Net_Worth_Millions\" } } }, { $project: { Citizenship: \"$_id\", maxNetWorth: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $group: { _id: \"$Citizenship\", maxNetWorth: { $max: \"$Net_Worth_Millions\" } } }])"
    },
    {
        "question_id": 609,
        "spider_question_id": 1019,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $project: { Title: \"$song_info.Title\", Name: \"$Name\" } }])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $project: { \"Title\": \"$song_info.Title\", \"Name\": 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $project: { Title: \"$song_info.Title\", Name: \"$Name\" } }])"
    },
    {
        "question_id": 610,
        "spider_question_id": 1020,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $project: { Title: \"$song_info.Title\", Name: \"$Name\" } }])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"singer\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"singer_info\" } }, { $unwind: \"$singer_info\" }, { $project: { Title: 1, Name: \"$singer_info.Name\" } } ])",
        "deepseek answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $project: { Title: \"$song_info.Title\", Name: \"$Name\" } }])"
    },
    {
        "question_id": 611,
        "spider_question_id": 1021,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.Sales\": { $gt: 300000 } } }, { $group: { _id: \"$Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.Sales\": { $gt: 300000 } } }, { $group: { _id: \"$Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 612,
        "spider_question_id": 1022,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.Sales\": { $gt: 300000 } } }, { $group: { _id: \"$Name\" } } ])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.Sales\": { $gt: 300000 } } }, { $group: { _id: \"$Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 613,
        "spider_question_id": 1023,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "question": "Show the names of singers that have more than one song.",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { \"songs.1\": { $exists: true } } }, { $project: { Name: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { \"songs.1\": { $exists: true } } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 614,
        "spider_question_id": 1024,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "question": "What are the names of the singers that have more than one songs?",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { \"songs.1\": { $exists: true } } }, { $project: { Name: 1 } }])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { \"songs.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { \"songs.1\": { $exists: true } } }, { $project: { Name: 1 } }])"
    },
    {
        "question_id": 615,
        "spider_question_id": 1025,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: \"$Name\", totalSales: { $sum: \"$songs.Sales\" } } }, { $project: { Name: \"$_id\", totalSales: 1 } } ])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: \"$Name\", totalSales: { $sum: \"$songs.Sales\" } } }, { $project: { Name: \"$_id\", totalSales: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 616,
        "spider_question_id": 1026,
        "db_id": "singer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: \"$Name\", totalSales: { $sum: \"$songs.Sales\" } } }, { $project: { Name: \"$_id\", totalSales: 1 } } ])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: \"$Name\", totalSales: { $sum: \"$songs.Sales\" } } }, { $project: { Name: \"$_id\", totalSales: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 617,
        "spider_question_id": 1027,
        "db_id": "singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "query": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { songs: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { songs: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 618,
        "spider_question_id": 1028,
        "db_id": "singer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "query": "db.singer.find( { Singer_ID: { $nin: db.song.distinct(\"Singer_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.singer.aggregate([ { $lookup: { from: \"song\", localField: \"Singer_ID\", foreignField: \"Singer_ID\", as: \"songs\" } }, { $match: { songs: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.singer.find( { Singer_ID: { $nin: db.song.distinct(\"Singer_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 619,
        "spider_question_id": 1033,
        "db_id": "real_estate_properties",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "query": "db.Properties.aggregate([ { $lookup: { from: \"Ref_Property_Types\", localField: \"property_type_code\", foreignField: \"property_type_code\", as: \"property_type_info\" } }, { $unwind: \"$property_type_info\" }, { $group: { _id: \"$property_type_info.property_type_description\" } }, { $project: { property_type_description: \"$_id\" } } ])",
        "gpt4 answer": "db.Properties.aggregate([ { $lookup: { from: \"Ref_Property_Types\", localField: \"property_type_code\", foreignField: \"property_type_code\", as: \"property_type_info\" } }, { $unwind: \"$property_type_info\" }, { $group: { _id: \"$property_type_info.property_type_description\" } }, { $project: { property_type_description: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 620,
        "spider_question_id": 1034,
        "db_id": "real_estate_properties",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "query": "db.Properties.find( { $or: [ { property_type_code: 'House' }, { property_type_code: 'Apartment', room_count: { $gt: 1 } } ] }, { property_name: 1 })",
        "gpt4 answer": "db.Properties.find( { $or: [ { property_type_code: 'House' }, { property_type_code: 'Apartment', room_count: { $gt: 1 } } ] }, { property_name: 1 } )",
        "deepseek answer": "db.Properties.find( { $or: [ { property_type_code: 'House' }, { property_type_code: 'Apartment', room_count: { $gt: 1 } } ] }, { property_name: 1 })"
    }
]