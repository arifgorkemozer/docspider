query_id;hardness;database;gold_sql;gpt4 answer;gpt3.5 answer;deepseek answer;Query;Prompt;target
3;medium;concert_singer;SELECT name , country , age FROM singer ORDER BY age DESC;db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 });db.singer.find({}, {Name: 1, Country: 1, Age: 1}).sort({Age: -1});.;Show name, country, age for all singers ordered by age from the oldest to the youngest.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
Show name, country, age for all singers ordered by age from the oldest to the youngest.
";db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 })
4;medium;concert_singer;SELECT name , country , age FROM singer ORDER BY age DESC;db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 });db.singer.aggregate([ { $sort: { Age: -1 } }, { $project: { Name: 1, Country: 1, Age: 1 } } ]);.;What are the names, countries, and ages for every singer in descending order of age?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What are the names, countries, and ages for every singer in descending order of age?
";db.singer.find({}, { Name: 1, Country: 1, Age: 1 }).sort({ Age: -1 })
5;medium;concert_singer;SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France';"db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, average_age: { $avg: ""$Age"" }, min_age: { $min: ""$Age"" }, max_age: { $max: ""$Age"" } } }, { $project: { average_age: 1, min_age: 1, max_age: 1 } } ])";"db.singer.aggregate([ { $match: { Country: ""France"" } }, { $group: { _id: null, avgAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } } } ])";"db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } }}, { $project: { avg: ""$avgAge"", min: ""$minAge"", max: ""$maxAge"" } }])";What is the average, minimum, and maximum age of all singers from France?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the average, minimum, and maximum age of all singers from France?
";"db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } }}, { $project: { avg: ""$avgAge"", min: ""$minAge"", max: ""$maxAge"" } }])"
6;medium;concert_singer;SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France';"db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } } }, { $project: { averageAge: 1, minAge: 1, maxAge: 1 } } ])";"db.singer.aggregate([ { $match: { Country: ""France"" } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } } }, { $project: { averageAge: 1, minAge: 1, maxAge: 1 } } ])";"db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } }}, { $project: { avg: ""$avgAge"", min: ""$minAge"", max: ""$maxAge"" } }])";What is the average, minimum, and maximum age for all French singers?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the average, minimum, and maximum age for all French singers?
";"db.singer.aggregate([ { $match: { Country: 'France' } }, { $group: { _id: null, avgAge: { $avg: ""$Age"" }, minAge: { $min: ""$Age"" }, maxAge: { $max: ""$Age"" } }}, { $project: { avg: ""$avgAge"", min: ""$minAge"", max: ""$maxAge"" } }])"
7;medium;concert_singer;SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1;db.singer.find({}, {Song_Name: 1, Song_release_year: 1}).sort({Age: 1}).limit(1);db.singer.aggregate([ { $sort: { Age: 1 } }, { $limit: 1 }, { $project: { Song_Name: 1, Song_release_year: 1 } } ]);.;Show the name and the release year of the song by the youngest singer.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
Show the name and the release year of the song by the youngest singer.
";db.singer.find({}, {Song_Name: 1, Song_release_year: 1}).sort({Age: 1}).limit(1)
8;medium;concert_singer;SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1;db.singer.find({}, { Song_Name: 1, Song_release_year: 1 }).sort({ Age: 1 }).limit(1);.;.;What are the names and release years for all the songs of the youngest singer?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What are the names and release years for all the songs of the youngest singer?
";db.singer.find({}, { Song_Name: 1, Song_release_year: 1 }).sort({ Age: 1 }).limit(1)
11;medium;concert_singer;SELECT country , count(*) FROM singer GROUP BY country;"db.singer.aggregate([ { $group: { _id: ""$Country"", numberOfSingers: { $sum: 1 } } }, { $project: { country: ""$_id"", numberOfSingers: 1 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $project: { country: ""$_id"", count: 1 } }])";Show all countries and the number of singers in each country.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
Show all countries and the number of singers in each country.
";"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $project: { country: ""$_id"", count: 1 } }])"
12;medium;concert_singer;SELECT country , count(*) FROM singer GROUP BY country;"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }])";How many singers are from each country?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
How many singers are from each country?
";"db.singer.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }])"
13;hard;concert_singer;SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer);"db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $lookup: { from: ""singer"", let: { averageAge: ""$averageAge"" }, pipeline: [ { $match: { $expr: { $gt: [""$Age"", ""$$averageAge""] } } }, { $project: { Song_Name: 1 } } ], as: ""songsAboveAverageAge"" } }, { $unwind: ""$songsAboveAverageAge"" }, { $replaceRoot: { newRoot: ""$songsAboveAverageAge"" } } ])";.;"db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $lookup: { from: ""singer"", let: { avgAge: ""$averageAge"" }, pipeline: [ { $match: { $expr: { $gt: [ ""$Age"", ""$$avgAge"" ] } } }, { $project: { Song_Name: 1 } } ], as: ""songNames"" } }, { $unwind: ""$songNames"" }, { $replaceRoot: { newRoot: ""$songNames"" } }])";List all song names by singers above the average age.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
List all song names by singers above the average age.
";"db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $lookup: { from: ""singer"", let: { avgAge: ""$averageAge"" }, pipeline: [ { $match: { $expr: { $gt: [ ""$Age"", ""$$avgAge"" ] } } }, { $project: { Song_Name: 1 } } ], as: ""songNames"" } }, { $unwind: ""$songNames"" }, { $replaceRoot: { newRoot: ""$songNames"" } }])"
14;hard;concert_singer;SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer);"db.singer.aggregate([ { $group: { _id: null, avgAge: { $avg: ""$Age"" } } }, { $addFields: { avgAge: ""$avgAge"" } }, { $lookup: { from: ""singer"", let: { avgAgeVar: ""$avgAge"" }, pipeline: [ { $match: { $expr: { $gt: [""$Age"", ""$$avgAgeVar""] } } }, { $project: { Song_Name: 1 } } ], as: ""songs_by_older_singers"" } }, { $unwind: ""$songs_by_older_singers"" }, { $replaceRoot: { newRoot: ""$songs_by_older_singers"" } }, { $project: { Song_Name: 1 } } ])";.;"db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $lookup: { from: ""singer"", let: { averageAge: ""$averageAge"" }, pipeline: [ { $match: { $expr: { $gt: [ ""$Age"", ""$$averageAge"" ] } } }, { $project: { Song_Name: 1 } } ], as: ""olderSingers"" } }, { $unwind: ""$olderSingers"" }, { $replaceRoot: { newRoot: ""$olderSingers"" } }])";What are all the song names by singers who are older than average?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What are all the song names by singers who are older than average?
";"db.singer.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $lookup: { from: ""singer"", let: { averageAge: ""$averageAge"" }, pipeline: [ { $match: { $expr: { $gt: [ ""$Age"", ""$$averageAge"" ] } } }, { $project: { Song_Name: 1 } } ], as: ""olderSingers"" } }, { $unwind: ""$olderSingers"" }, { $replaceRoot: { newRoot: ""$olderSingers"" } }])"
18;medium;concert_singer;select avg(capacity) , max(capacity) from stadium;"db.stadium.aggregate([ { $group: { _id: null, AverageCapacity: { $avg: ""$Capacity"" }, MaximumCapacity: { $max: ""$Capacity"" } } }, { $project: { AverageCapacity: 1, MaximumCapacity: 1 } } ])";"db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: ""$Capacity"" }, maxCapacity: { $max: ""$Capacity"" } } } ])";"db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: ""$Capacity"" }, maxCapacity: { $max: ""$Capacity"" } } }, { $project: { avg: ""$averageCapacity"", max: ""$maxCapacity"" } }])";What is the average and maximum capacities for all stadiums ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the average and maximum capacities for all stadiums ?
";"db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: ""$Capacity"" }, maxCapacity: { $max: ""$Capacity"" } } }, { $project: { avg: ""$averageCapacity"", max: ""$maxCapacity"" } }])"
19;medium;concert_singer;SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1;db.stadium.find({}, { Name: 1, Capacity: 1 }).sort({ Average: -1 }).limit(1);.;db.stadium.aggregate([ { $sort: { Average: -1 } }, { $limit: 1 }, { $project: { Name: 1, Capacity: 1 } }]);What is the name and capacity for the stadium with highest average attendance?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the name and capacity for the stadium with highest average attendance?
";db.stadium.aggregate([ { $sort: { Average: -1 } }, { $limit: 1 }, { $project: { Name: 1, Capacity: 1 } }])
20;medium;concert_singer;SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1;db.stadium.find({}, { Name: 1, Capacity: 1 }).sort({ Average: -1 }).limit(1);.;.;What is the name and capacity for the stadium with the highest average attendance?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the name and capacity for the stadium with the highest average attendance?
";db.stadium.find({}, { Name: 1, Capacity: 1 }).sort({ Average: -1 }).limit(1)
27;hard;concert_singer;SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"db.concert.aggregate([ { $group: { _id: ""$Year"", numConcerts: { $sum: 1 } } }, { $sort: { numConcerts: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;.;Which year has most number of concerts?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
Which year has most number of concerts?
";"db.concert.aggregate([ { $group: { _id: ""$Year"", numConcerts: { $sum: 1 } } }, { $sort: { numConcerts: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])"
28;hard;concert_singer;SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"db.concert.aggregate([ { $group: { _id: ""$Year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.concert.aggregate([ { $group: { _id: ""$Year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 }} ])";"db.concert.aggregate([ { $group: { _id: ""$Year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Year: ""$_id"" } }])";What is the year that had the most concerts?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the year that had the most concerts?
";"db.concert.aggregate([ { $group: { _id: ""$Year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Year: ""$_id"" } }])"
31;hard;concert_singer;SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30;.;"db.singer.aggregate([ { $group: { _id: ""$Country"", above_40: { $sum: { $cond: [{ $gt: [""$Age"", 40] }, 1, 0] } }, below_30: { $sum: { $cond: [{ $lt: [""$Age"", 30] }, 1, 0] } } } }, { $match: { $and: [ { above_40: { $gt: 0 } }, { below_30: { $gt: 0 } } ] } }, { $project: { Country: ""$_id"" } } ])";.;Show countries where a singer above age 40 and a singer below 30 are from.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
Show countries where a singer above age 40 and a singer below 30 are from.
";"db.singer.aggregate([ { $group: { _id: ""$Country"", above_40: { $sum: { $cond: [{ $gt: [""$Age"", 40] }, 1, 0] } }, below_30: { $sum: { $cond: [{ $lt: [""$Age"", 30] }, 1, 0] } } } }, { $match: { $and: [ { above_40: { $gt: 0 } }, { below_30: { $gt: 0 } } ] } }, { $project: { Country: ""$_id"" } } ])"
34;medium;concert_singer;SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id;.;"db.concert.aggregate([ { $lookup: { from: ""singer_in_concert"", localField: ""concert_ID"", foreignField: ""concert_ID"", as: ""singers"" } }, { $project: { concert_Name: 1, Theme: 1, numSingers: { $size: ""$singers"" } } } ])";.;Show the name and theme for all concerts and the number of singers in each concert.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
Show the name and theme for all concerts and the number of singers in each concert.
";"db.concert.aggregate([ { $lookup: { from: ""singer_in_concert"", localField: ""concert_ID"", foreignField: ""concert_ID"", as: ""singers"" } }, { $project: { concert_Name: 1, Theme: 1, numSingers: { $size: ""$singers"" } } } ])"
35;medium;concert_singer;select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id;"db.concert.aggregate([ { $lookup: { from: ""singer_in_concert"", localField: ""concert_ID"", foreignField: ""concert_ID"", as: ""singer_count"" } }, { $project: { concert_Name: 1, Theme: 1, number_of_singers: { $size: ""$singer_count"" } } } ])";"db.concert.aggregate([ { $lookup: { from: ""singer_in_concert"", localField: ""concert_ID"", foreignField: ""concert_ID"", as: ""singers"" } }, { $project: { concert_Name: 1, Theme: 1, numberOfSingers: { $size: ""$singers"" } } } ])";.;What are the names , themes , and number of singers for every concert ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What are the names , themes , and number of singers for every concert ?
";"db.concert.aggregate([ { $lookup: { from: ""singer_in_concert"", localField: ""concert_ID"", foreignField: ""concert_ID"", as: ""singer_count"" } }, { $project: { concert_Name: 1, Theme: 1, number_of_singers: { $size: ""$singer_count"" } } } ])"
40;medium;concert_singer;SELECT name , country FROM singer WHERE song_name LIKE '%Hey%';"db.singer.find( { ""Song_Name"": { ""$regex"": ""Hey"", ""$options"": ""i"" } }, { ""Name"": 1, ""Country"": 1, ""_id"": 0 } )";db.singer.aggregate([ { $match: { Song_Name: /Hey/ } }, { $project: { Name: 1, Country: 1 } } ]);.;what is the name and nation of the singer who have a song having 'Hey' in its name?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
what is the name and nation of the singer who have a song having 'Hey' in its name?
";"db.singer.find( { ""Song_Name"": { ""$regex"": ""Hey"", ""$options"": ""i"" } }, { ""Name"": 1, ""Country"": 1, ""_id"": 0 } )"
41;medium;concert_singer;SELECT name , country FROM singer WHERE song_name LIKE '%Hey%';db.singer.find( { Song_Name: /Hey/ }, { Name: 1, Country: 1 } );"db.singer.aggregate([ { $match: { Song_Name: { $regex: ""Hey"", $options: ""i"" } } }, { $project: { Name: 1, Country: 1 } } ])";.;What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)
singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male)
concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)
singer_in_concert(concert_ID, Singer_ID)
Foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID
Question:
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
";db.singer.find( { Song_Name: /Hey/ }, { Name: 1, Country: 1 } )
50;medium;pets_1;SELECT max(weight) , petType FROM pets GROUP BY petType;"db.Pets.aggregate([ { $group: { _id: ""$PetType"", maxWeight: { $max: ""$weight"" } } }, { $project: { petType: ""$_id"", maxWeight: 1 } } ])";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", maxWeight: { $max: ""$weight"" } } }, { $project: { petType: ""$_id"", maxWeight: 1 } } ])";.;Find the maximum weight for each type of pet. List the maximum weight and pet type.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the maximum weight for each type of pet. List the maximum weight and pet type.
";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", maxWeight: { $max: ""$weight"" } } }, { $project: { petType: ""$_id"", maxWeight: 1 } } ])"
51;medium;pets_1;SELECT max(weight) , petType FROM pets GROUP BY petType;"db.Pets.aggregate([ { $group: { _id: ""$PetType"", maxWeight: { $max: ""$weight"" } } }, { $project: { PetType: ""$_id"", maxWeight: 1 } } ])";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", maxWeight: { $max: ""$weight"" }, petType: { $first: ""$PetType"" } } }, { $project: { petType: 1, maxWeight: 1 } } ])";.;List the maximum weight and type for each type of pet.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
List the maximum weight and type for each type of pet.
";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", maxWeight: { $max: ""$weight"" } } }, { $project: { PetType: ""$_id"", maxWeight: 1 } } ])"
54;hard;pets_1;SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog';"db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""StudentPets"" } }, { $unwind: ""$StudentPets"" }, { $lookup: { from: ""Pets"", localField: ""StudentPets.PetID"", foreignField: ""PetID"", as: ""StudentPetsDetails"" } }, { $match: { ""StudentPetsDetails.PetType"": 'dog' } }, { $count: ""NumberOfDogPets"" } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pets"" } }, { $unwind: ""$pets"" }, { $lookup: { from: ""Pets"", localField: ""pets.PetID"", foreignField: ""PetID"", as: ""petInfo"" } }, { $unwind: ""$petInfo"" }, { $match: { ""Sex"": ""F"", ""petInfo.PetType"": ""dog"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])";.;Find the number of dog pets that are raised by female students (with sex F).;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the number of dog pets that are raised by female students (with sex F).
";"db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""StudentPets"" } }, { $unwind: ""$StudentPets"" }, { $lookup: { from: ""Pets"", localField: ""StudentPets.PetID"", foreignField: ""PetID"", as: ""StudentPetsDetails"" } }, { $match: { ""StudentPetsDetails.PetType"": 'dog' } }, { $count: ""NumberOfDogPets"" } ])"
55;hard;pets_1;SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog';"db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetInfo"" } }, { $unwind: ""$PetInfo"" }, { $lookup: { from: ""Pets"", localField: ""PetInfo.PetID"", foreignField: ""PetID"", as: ""PetDetails"" } }, { $unwind: ""$PetDetails"" }, { $match: { ""PetDetails.PetType"": ""dog"" } }, { $count: ""NumberOfDogs"" } ])";.;.;How many dog pets are raised by female students?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
How many dog pets are raised by female students?
";"db.Student.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetInfo"" } }, { $unwind: ""$PetInfo"" }, { $lookup: { from: ""Pets"", localField: ""PetInfo.PetID"", foreignField: ""PetID"", as: ""PetDetails"" } }, { $unwind: ""$PetDetails"" }, { $match: { ""PetDetails.PetType"": ""dog"" } }, { $count: ""NumberOfDogs"" } ])"
58;extra;pets_1;SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog';"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pets_info"" } }, { $unwind: ""$pets_info"" }, { $lookup: { from: ""Pets"", localField: ""pets_info.PetID"", foreignField: ""PetID"", as: ""pet_details"" } }, { $unwind: ""$pet_details"" }, { $match: { $or: [ { ""pet_details.PetType"": ""cat"" }, { ""pet_details.PetType"": ""dog"" } ] } }, { $group: { _id: ""$Fname"" } }, { $project: { Fname: ""$_id"" } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pet_ids"" } }, { $lookup: { from: ""Pets"", localField: ""pet_ids.PetID"", foreignField: ""PetID"", as: ""pets"" } }, { $match: { $or: [ { ""pets.PetType"": ""cat"" }, { ""pets.PetType"": ""dog"" } ] } }, { $project: { Fname: 1 } } ])";.;Find the first name of students who have cat or dog pet.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the first name of students who have cat or dog pet.
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pets_info"" } }, { $unwind: ""$pets_info"" }, { $lookup: { from: ""Pets"", localField: ""pets_info.PetID"", foreignField: ""PetID"", as: ""pet_details"" } }, { $unwind: ""$pet_details"" }, { $match: { $or: [ { ""pet_details.PetType"": ""cat"" }, { ""pet_details.PetType"": ""dog"" } ] } }, { $group: { _id: ""$Fname"" } }, { $project: { Fname: ""$_id"" } } ])"
59;extra;pets_1;SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog';"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""student_pets"" } }, { $unwind: ""$student_pets"" }, { $lookup: { from: ""Pets"", localField: ""student_pets.PetID"", foreignField: ""PetID"", as: ""pet_details"" } }, { $unwind: ""$pet_details"" }, { $match: { $or: [ { ""pet_details.PetType"": ""cat"" }, { ""pet_details.PetType"": ""dog"" } ] } }, { $group: { _id: ""$Fname"" } }, { $project: { Fname: ""$_id"" } } ])";.;.;What are the first names of every student who has a cat or dog as a pet?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What are the first names of every student who has a cat or dog as a pet?
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""student_pets"" } }, { $unwind: ""$student_pets"" }, { $lookup: { from: ""Pets"", localField: ""student_pets.PetID"", foreignField: ""PetID"", as: ""pet_details"" } }, { $unwind: ""$pet_details"" }, { $match: { $or: [ { ""pet_details.PetType"": ""cat"" }, { ""pet_details.PetType"": ""dog"" } ] } }, { $group: { _id: ""$Fname"" } }, { $project: { Fname: ""$_id"" } } ])"
68;medium;pets_1;SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1;db.Pets.find({}, { PetType: 1, weight: 1 }).sort({ pet_age: 1 }).limit(1);db.Pets.aggregate([ { $sort: { pet_age: 1 } }, { $limit: 1 }, { $project: { PetType: 1, weight: 1 } } ]);db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1);Find the type and weight of the youngest pet.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the type and weight of the youngest pet.
";db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1)
69;medium;pets_1;SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1;db.Pets.find({}, { PetType: 1, weight: 1 }).sort({ pet_age: 1 }).limit(1);db.Pets.aggregate([ { $sort: { pet_age: 1 } }, { $limit: 1 }, { $project: { PetType: 1, weight: 1 } } ]);db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1);What type of pet is the youngest animal, and how much does it weigh?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What type of pet is the youngest animal, and how much does it weigh?
";db.Pets.find({}, { PetType: 1, weight: 1}).sort({pet_age: 1}).limit(1)
70;medium;pets_1;SELECT petid , weight FROM pets WHERE pet_age > 1;db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 });db.Pets.find({pet_age: {$gt: 1}}, {PetID: 1, weight: 1});.;Find the id and weight of all pets whose age is older than 1.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the id and weight of all pets whose age is older than 1.
";db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 })
71;medium;pets_1;SELECT petid , weight FROM pets WHERE pet_age > 1;db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 });db.Pets.find({pet_age: {$gt: 1}}, {PetID: 1, weight: 1});.;What is the id and weight of every pet who is older than 1?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What is the id and weight of every pet who is older than 1?
";db.Pets.find({ pet_age: { $gt: 1 } }, { PetID: 1, weight: 1 })
72;medium;pets_1;SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype;"db.Pets.aggregate([ { $group: { _id: ""$PetType"", averageAge: { $avg: ""$pet_age"" }, maximumAge: { $max: ""$pet_age"" } } } ])";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", average_age: { $avg: ""$pet_age"" }, max_age: { $max: ""$pet_age"" } } } ])";.;Find the average and maximum age for each type of pet.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the average and maximum age for each type of pet.
";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", averageAge: { $avg: ""$pet_age"" }, maximumAge: { $max: ""$pet_age"" } } } ])"
73;medium;pets_1;SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype;"db.Pets.aggregate([ { $group: { _id: ""$PetType"", average_age: { $avg: ""$pet_age"" }, maximum_age: { $max: ""$pet_age"" } } } ])";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", avgAge: { $avg: ""$pet_age"" }, maxAge: { $max: ""$pet_age"" } } } ])";.;What is the average and maximum age for each pet type?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What is the average and maximum age for each pet type?
";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", average_age: { $avg: ""$pet_age"" }, maximum_age: { $max: ""$pet_age"" } } } ])"
74;medium;pets_1;SELECT avg(weight) , pettype FROM pets GROUP BY pettype;"db.Pets.aggregate([ { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } } ])";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } } ])";"db.Pets.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } }, { $project: { pettype: ""$_id"", averageWeight: 1 } }])";Find the average weight for each pet type.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the average weight for each pet type.
";"db.Pets.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } }, { $project: { pettype: ""$_id"", averageWeight: 1 } }])"
75;medium;pets_1;SELECT avg(weight) , pettype FROM pets GROUP BY pettype;"db.Pets.aggregate([ { $group: { _id: ""$PetType"", avgWeight: { $avg: ""$weight"" } } }, { $project: { PetType: ""$_id"", AverageWeight: ""$avgWeight"" } } ])";"db.Pets.aggregate([ { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } } ])";"db.Pets.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } }])";What is the average weight for each type of pet?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What is the average weight for each type of pet?
";"db.Pets.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $group: { _id: ""$PetType"", averageWeight: { $avg: ""$weight"" } } }])"
76;medium;pets_1;SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid;"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""hasPet"" } }, { $match: { hasPet: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } } ])";.;Find the first name and age of students who have a pet.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the first name and age of students who have a pet.
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } } ])"
77;medium;pets_1;SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid;"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } }, { $group: { _id: { Fname: ""$Fname"", Age: ""$Age"" } } }, { $project: { Fname: ""$_id.Fname"", Age: ""$_id.Age"" } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""has_pet"" } }, { $match: { ""has_pet"": { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } } ])";.;What are the different first names and ages of the students who do have pets?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What are the different first names and ages of the students who do have pets?
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { PetOwners: { $ne: [] } } }, { $project: { Fname: 1, Age: 1 } }, { $group: { _id: { Fname: ""$Fname"", Age: ""$Age"" } } }, { $project: { Fname: ""$_id.Fname"", Age: ""$_id.Age"" } } ])"
78;medium;pets_1;SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith';.;"db.Has_Pet.aggregate([ { $lookup: { from: ""Student"", localField: ""StuID"", foreignField: ""StuID"", as: ""student"" }}, { $match: { ""student.LName"": ""Smith"" }}, { $project: { ""PetID"": 1, ""_id"": 0 }} ])";"db.Student.aggregate([ { $match: { LName: ""Smith"" } }, { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $project: { petid: ""$pet_info.PetID"" } }])";Find the id of the pet owned by student whose last name is ‘Smith’.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the id of the pet owned by student whose last name is ‘Smith’.
";"db.Student.aggregate([ { $match: { LName: ""Smith"" } }, { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $project: { petid: ""$pet_info.PetID"" } }])"
80;medium;pets_1;SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid;"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""Pets"" } }, { $match: { ""Pets.0"": { $exists: true } } }, { $project: { StuID: 1, NumberOfPets: { $size: ""$Pets"" } } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""hasPets"" } }, { $unwind: ""$hasPets"" }, { $group: { _id: ""$StuID"", numberOfPets: { $sum: 1 } } }, { $project: { StuID: ""$_id"", numberOfPets: 1 } } ])";.;Find the number of pets for each student who has any pet and student id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the number of pets for each student who has any pet and student id.
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""Pets"" } }, { $match: { ""Pets.0"": { $exists: true } } }, { $project: { StuID: 1, NumberOfPets: { $size: ""$Pets"" } } } ])"
81;medium;pets_1;select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid;"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""StudentPets"" }}, { $unwind: ""$StudentPets"" }, { $group: { _id: ""$StuID"", NumberOfPets: { $sum: 1 } }}, { $project: { StuID: ""$_id"", NumberOfPets: 1 }} ])";.;.;For students who have pets , how many pets does each student have ? list their ids instead of names .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
For students who have pets , how many pets does each student have ? list their ids instead of names .
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""StudentPets"" }}, { $unwind: ""$StudentPets"" }, { $group: { _id: ""$StuID"", NumberOfPets: { $sum: 1 } }}, { $project: { StuID: ""$_id"", NumberOfPets: 1 }} ])"
82;medium;pets_1;SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1;"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetsDetails"" } }, { $match: { $expr: { $gt: [{ $size: ""$PetsDetails"" }, 1] } } }, { $project: { Fname: 1, Sex: 1 } } ])";.;.;Find the first name and gender of student who have more than one pet.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the first name and gender of student who have more than one pet.
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetsDetails"" } }, { $match: { $expr: { $gt: [{ $size: ""$PetsDetails"" }, 1] } } }, { $project: { Fname: 1, Sex: 1 } } ])"
83;medium;pets_1;SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1;"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { ""PetOwners"": { $size: 2 } } }, { $project: { Fname: 1, Sex: 1 } } ])";.;.;What is the first name and gender of the all the students who have more than one pet?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What is the first name and gender of the all the students who have more than one pet?
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { ""PetOwners"": { $size: 2 } } }, { $project: { Fname: 1, Sex: 1 } } ])"
84;hard;pets_1;SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat';"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""student_pets"" } }, { $unwind: ""$student_pets"" }, { $lookup: { from: ""Pets"", localField: ""student_pets.PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $match: { ""pet_info.pet_age"": 3, ""pet_info.PetType"": ""cat"" } }, { $project: { LName: 1 } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""join1"" } }, { $unwind: ""$join1"" }, { $lookup: { from: ""Pets"", localField: ""join1.PetID"", foreignField: ""PetID"", as: ""join2"" } }, { $unwind: ""$join2"" }, { $match: { ""join2.PetType"": ""cat"", ""join2.pet_age"": 3 } }, { $project: { LName: 1 } } ])";.;Find the last name of the student who has a cat that is age 3.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the last name of the student who has a cat that is age 3.
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""student_pets"" } }, { $unwind: ""$student_pets"" }, { $lookup: { from: ""Pets"", localField: ""student_pets.PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $match: { ""pet_info.pet_age"": 3, ""pet_info.PetType"": ""cat"" } }, { $project: { LName: 1 } } ])"
85;hard;pets_1;SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat';"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetsInfo"" } }, { $unwind: ""$PetsInfo"" }, { $lookup: { from: ""Pets"", localField: ""PetsInfo.PetID"", foreignField: ""PetID"", as: ""PetsDetails"" } }, { $unwind: ""$PetsDetails"" }, { $match: { ""PetsDetails.pet_age"": 3, ""PetsDetails.PetType"": ""cat"" } }, { $project: { LName: 1 } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""pets"" } }, { $unwind: ""$pets"" }, { $lookup: { from: ""Pets"", localField: ""pets.PetID"", foreignField: ""PetID"", as: ""pet_details"" } }, { $unwind: ""$pet_details"" }, { $match: { ""pet_details.PetType"": ""cat"", ""pet_details.pet_age"": 3 } }, { $project: { LName: ""$LName"" } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""student_pets"" } }, { $unwind: ""$student_pets"" }, { $lookup: { from: ""Pets"", localField: ""student_pets.PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $match: { ""pet_info.pet_age"": 3, ""pet_info.PetType"": ""cat"" } }, { $project: { LName: 1 } }])";What is the last name of the student who has a cat that is 3 years old?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What is the last name of the student who has a cat that is 3 years old?
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""student_pets"" } }, { $unwind: ""$student_pets"" }, { $lookup: { from: ""Pets"", localField: ""student_pets.PetID"", foreignField: ""PetID"", as: ""pet_info"" } }, { $unwind: ""$pet_info"" }, { $match: { ""pet_info.pet_age"": 3, ""pet_info.PetType"": ""cat"" } }, { $project: { LName: 1 } }])"
86;extra;pets_1;select avg(age) from student where stuid not in (select stuid from has_pet);"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""Pets"" } }, { $match: { ""Pets"": { $size: 0 } } }, { $group: { _id: null, AverageAge: { $avg: ""$Age"" } } }, { $project: { AverageAge: 1 } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""HasPet"" }}, { $match: { ""HasPet"": [] }}, { $group: { _id: null, averageAge: { $avg: ""$Age"" } }}, { $project: { averageAge: 1 } } ])";.;Find the average age of students who do not have any pet .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
Find the average age of students who do not have any pet .
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""Pets"" } }, { $match: { ""Pets"": { $size: 0 } } }, { $group: { _id: null, AverageAge: { $avg: ""$Age"" } } }, { $project: { AverageAge: 1 } } ])"
87;extra;pets_1;select avg(age) from student where stuid not in (select stuid from has_pet);"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { PetOwners: { $size: 0 } } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $project: { averageAge: 1 } } ])";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""HasPet"" }}, { $match: { ""HasPet"": [] }}, { $group: { _id: null, averageAge: { $avg: ""$Age"" } }}, { $project: { averageAge: 1 } } ])";.;What is the average age for all students who do not own any pets ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Student(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)
Has_Pet(StuID, PetID)
Pets(PetID, PetType, pet_age, weight)
Foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID
Question:
What is the average age for all students who do not own any pets ?
";"db.Student.aggregate([ { $lookup: { from: ""Has_Pet"", localField: ""StuID"", foreignField: ""StuID"", as: ""PetOwners"" } }, { $match: { PetOwners: { $size: 0 } } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $project: { averageAge: 1 } } ])"
90;medium;car_1;SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;.;"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countries"" } }, { $project: { ContId: 1, Continent: 1, numOfCountries: { $size: ""$countries"" } } } ])";"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countries"" } }, { $project: { ContId: 1, Continent: 1, countryCount: { $size: ""$countries"" } } }])";How many countries does each continent have? List the continent id, continent name and the number of countries.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
How many countries does each continent have? List the continent id, continent name and the number of countries.
";"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countries"" } }, { $project: { ContId: 1, Continent: 1, countryCount: { $size: ""$countries"" } } }])"
91;medium;car_1;SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countriesList"" } }, { $project: { ContId: ""$ContId"", Continent: ""$Continent"", NumberOfCountries: { $size: ""$countriesList"" } } } ])";"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countries"" } }, { $project: { ""ContId"": 1, ""Continent"": 1, ""NumCountries"": { $size: ""$countries"" } } } ])";"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countries"" } }, { $project: { ""_id"": 0, ""ContId"": 1, ""Continent"": 1, ""countriesCount"": { $size: ""$countries"" } } }])";For each continent, list its id, name, and how many countries it has?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
For each continent, list its id, name, and how many countries it has?
";"db.continents.aggregate([ { $lookup: { from: ""countries"", localField: ""ContId"", foreignField: ""Continent"", as: ""countries"" } }, { $project: { ""_id"": 0, ""ContId"": 1, ""Continent"": 1, ""countriesCount"": { $size: ""$countries"" } } }])"
96;hard;car_1;SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"db.cars_data.aggregate([ { $sort: { Horsepower: 1 } }, { $limit: 1 }, { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_info"" }}, { $unwind: ""$car_info"" }, { $project: { Model: ""$car_info.Model"" } } ])";.;"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $sort: { ""car_data.Horsepower"": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])";Which model of the car has the minimum horsepower?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
Which model of the car has the minimum horsepower?
";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $sort: { ""car_data.Horsepower"": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
97;hard;car_1;SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"db.cars_data.aggregate([ { $sort: { Horsepower: 1 } }, { $limit: 1 }, { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""carName"" }}, { $unwind: ""$carName"" }, { $project: { Model: ""$carName.Model"" } } ])";.;"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $sort: { ""car_data.Horsepower"": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])";What is the model of the car with the smallest amount of horsepower?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the model of the car with the smallest amount of horsepower?
";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $sort: { ""car_data.Horsepower"": 1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
100;extra;car_1;SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $lookup: { from: ""car_names"", localField: ""models.Model"", foreignField: ""Model"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $lookup: { from: ""cars_data"", localField: ""car_names.MakeId"", foreignField: ""Id"", as: ""cars_data"" } }, { $unwind: ""$cars_data"" }, { $match: { ""cars_data.Year"": 1970 } }, { $group: { _id: ""$Maker"" } }, { $project: { Maker: ""$_id"" } } ])";.;.;Find the name of the makers that produced some cars in the year of 1970?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
Find the name of the makers that produced some cars in the year of 1970?
";"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $lookup: { from: ""car_names"", localField: ""models.Model"", foreignField: ""Model"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $lookup: { from: ""cars_data"", localField: ""car_names.MakeId"", foreignField: ""Id"", as: ""cars_data"" } }, { $unwind: ""$cars_data"" }, { $match: { ""cars_data.Year"": 1970 } }, { $group: { _id: ""$Maker"" } }, { $project: { Maker: ""$_id"" } } ])"
101;extra;car_1;SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $lookup: { from: ""car_names"", localField: ""models.Model"", foreignField: ""Model"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $lookup: { from: ""cars_data"", localField: ""car_names.MakeId"", foreignField: ""Id"", as: ""cars_data"" } }, { $unwind: ""$cars_data"" }, { $match: { ""cars_data.Year"": 1970 } }, { $project: { ""Maker"": 1 } }, { $group: { _id: ""$Maker"" }}, { $project: { Maker: ""$_id"" } } ])";.;"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $lookup: { from: ""car_names"", localField: ""models.Model"", foreignField: ""Model"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $lookup: { from: ""cars_data"", localField: ""car_names.MakeId"", foreignField: ""Id"", as: ""cars_data"" } }, { $unwind: ""$cars_data"" }, { $match: { ""cars_data.Year"": 1970 } }, { $group: { _id: ""$Maker"" } }])";What is the name of the different car makers who produced a car in 1970?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the name of the different car makers who produced a car in 1970?
";"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $lookup: { from: ""car_names"", localField: ""models.Model"", foreignField: ""Model"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $lookup: { from: ""cars_data"", localField: ""car_names.MakeId"", foreignField: ""Id"", as: ""cars_data"" } }, { $unwind: ""$cars_data"" }, { $match: { ""cars_data.Year"": 1970 } }, { $group: { _id: ""$Maker"" } }])"
112;medium;car_1;SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_details"" } }, { $match: { ""car_details.Make"": ""amc hornet sportabout (sw)"" } }, { $project: { Accelerate: 1 } } ])";.;"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names_data"" } }, { $match: { ""car_names_data.Make"": ""amc hornet sportabout (sw)"" } }, { $project: { Accelerate: 1 } }])";What is the accelerate of the car make amc hornet sportabout (sw)?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the accelerate of the car make amc hornet sportabout (sw)?
";"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names_data"" } }, { $match: { ""car_names_data.Make"": ""amc hornet sportabout (sw)"" } }, { $project: { Accelerate: 1 } }])"
113;medium;car_1;SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_name_info"" } }, { $match: { ""car_name_info.Make"": ""amc hornet sportabout (sw)"" } }, { $project: { Accelerate: 1 } } ])";.;.;How much does the car accelerate that makes amc hornet sportabout (sw)?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
How much does the car accelerate that makes amc hornet sportabout (sw)?
";"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_name_info"" } }, { $match: { ""car_name_info.Make"": ""amc hornet sportabout (sw)"" } }, { $project: { Accelerate: 1 } } ])"
120;medium;car_1;select min(weight) from cars_data where cylinders = 8 and year = 1974;db.cars_data.find({ Cylinders: 8, Year: 1974 }, { Weight: 1 }).sort({ Weight: 1 }).limit(1);db.cars_data.find({Cylinders: 8, Year: 1974}, { Weight: 1 }).sort({Weight: 1}).limit(1);"db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: ""$Weight"" } } }, { $project: { minWeight: 1 } }])";What is the smallest weight of the car produced with 8 cylinders on 1974 ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
";"db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: ""$Weight"" } } }, { $project: { minWeight: 1 } }])"
121;medium;car_1;select min(weight) from cars_data where cylinders = 8 and year = 1974;"db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: ""$Weight"" } } }, { $project: { minWeight: 1 } } ])";db.cars_data.find({Cylinders: 8, Year: 1974}, { Weight: 1 }).sort({Weight: 1}).limit(1);"db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: ""$Weight"" } } }, { $project: { minWeight: 1 } }])";What is the minimum weight of the car with 8 cylinders produced in 1974 ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
";"db.cars_data.aggregate([ { $match: { Cylinders: 8, Year: 1974 } }, { $group: { _id: null, minWeight: { $min: ""$Weight"" } } }, { $project: { minWeight: 1 } }])"
128;medium;car_1;SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" } } }, { $project: { Year: ""$_id"", AverageWeight: ""$averageWeight"" } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Year"", average_weight: { $avg: ""$Weight"" } } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" } } }])";What is the average weight of cars each year?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the average weight of cars each year?
";"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" } } }])"
129;medium;car_1;SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" } } }, { $project: { Year: ""$_id"", averageWeight: 1 } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" }, averageYear: { $avg: ""$Year"" } } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" } } }])";What is the average weight and year for each year?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the average weight and year for each year?
";"db.cars_data.aggregate([ { $group: { _id: ""$Year"", averageWeight: { $avg: ""$Weight"" } } }])"
132;extra;car_1;SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;"db.cars_data.aggregate([ { $match: { Cylinders: 3 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""carName"" } }, { $unwind: ""$carName"" }, { $project: { Horsepower: 1, Make: ""$carName.Make"" } } ])";.;.;What is the maximum horsepower and the make of the car models with 3 cylinders?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the maximum horsepower and the make of the car models with 3 cylinders?
";"db.cars_data.aggregate([ { $match: { Cylinders: 3 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""carName"" } }, { $unwind: ""$carName"" }, { $project: { Horsepower: 1, Make: ""$carName.Make"" } } ])"
133;extra;car_1;SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;"db.cars_data.aggregate([ { $match: { Cylinders: 3 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_make_info"" } }, { $unwind: ""$car_make_info"" }, { $project: { Horsepower: ""$Horsepower"", Make: ""$car_make_info.Make"" } } ])";.;"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { ""car_data.Cylinders"": 3 } }, { $sort: { ""car_data.Horsepower"": -1 } }, { $limit: 1 }, { $project: { Horsepower: ""$car_data.Horsepower"", Make: 1 } }])";What is the largest amount of horsepower for the models with 3 cylinders and what make is it?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { ""car_data.Cylinders"": 3 } }, { $sort: { ""car_data.Horsepower"": -1 } }, { $limit: 1 }, { $project: { Horsepower: ""$car_data.Horsepower"", Make: 1 } }])"
135;hard;car_1;select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;.;.;"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $sort: { ""car_data.MPG"": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])";What is the car model with the highest mpg ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the car model with the highest mpg ?
";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $sort: { ""car_data.MPG"": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
138;medium;car_1;SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';"db.car_names.aggregate([ { $match: { Model: ""volvo"" } }, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $group: { _id: null, avgEdispl: { $avg: ""$car_data.Edispl"" } } }, { $project: { avgEdispl: 1 } } ])";.;.;What is the average edispl of the cars of model volvo?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the average edispl of the cars of model volvo?
";"db.car_names.aggregate([ { $match: { Model: ""volvo"" } }, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $group: { _id: null, avgEdispl: { $avg: ""$car_data.Edispl"" } } }, { $project: { avgEdispl: 1 } } ])"
139;medium;car_1;SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';"db.car_names.aggregate([ { $match: { Model: ""volvo"" }}, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""carsData"" }}, { $unwind: ""$carsData"" }, { $group: { _id: null, averageEdispl: { $avg: ""$carsData.Edispl"" } }}, { $project: { averageEdispl: 1 }} ])";.;.;What is the average edispl for all volvos?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the average edispl for all volvos?
";"db.car_names.aggregate([ { $match: { Model: ""volvo"" }}, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""carsData"" }}, { $unwind: ""$carsData"" }, { $group: { _id: null, averageEdispl: { $avg: ""$carsData.Edispl"" } }}, { $project: { averageEdispl: 1 }} ])"
140;medium;car_1;SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } }, { $project: { Cylinders: ""$_id"", maxAccelerate: 1 } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } }])";What is the maximum accelerate for different number of cylinders?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the maximum accelerate for different number of cylinders?
";"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } }])"
141;medium;car_1;SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } }, { $project: { Cylinders: ""$_id"", maxAccelerate: 1 } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", max_accelerate: { $max: ""$Accelerate"" } } } ])";"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } }])";What is the maximum accelerate for all the different cylinders?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the maximum accelerate for all the different cylinders?
";"db.cars_data.aggregate([ { $group: { _id: ""$Cylinders"", maxAccelerate: { $max: ""$Accelerate"" } } }])"
142;hard;car_1;SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"db.car_names.aggregate([ { $group: { _id: ""$Model"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;"db.car_names.aggregate([ { $group: { _id: ""$Model"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: ""$_id"" } }])";Which model has the most version(make) of cars?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
Which model has the most version(make) of cars?
";"db.car_names.aggregate([ { $group: { _id: ""$Model"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: ""$_id"" } }])"
143;hard;car_1;SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"db.car_names.aggregate([ { $group: { _id: ""$Model"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: ""$_id"" } } ])";.;"db.car_names.aggregate([ { $group: { _id: ""$Model"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: ""$_id"" } }])";What model has the most different versions?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What model has the most different versions?
";"db.car_names.aggregate([ { $group: { _id: ""$Model"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Model: ""$_id"" } }])"
148;medium;car_1;SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';"db.car_makers.aggregate([ { $match: { FullName: ""American Motor Company"" } }, { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $count: ""numberOfModels"" } ])";.;"db.car_makers.aggregate([ { $match: { FullName: ""American Motor Company"" } }, { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many car models were produced by the maker with full name American Motor Company?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
How many car models were produced by the maker with full name American Motor Company?
";"db.car_makers.aggregate([ { $match: { FullName: ""American Motor Company"" } }, { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $unwind: ""$models"" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
149;medium;car_1;SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';"db.model_list.aggregate([ { $lookup: { from: ""car_makers"", localField: ""Maker"", foreignField: ""Id"", as: ""maker_info"" } }, { $match: { ""maker_info.FullName"": ""American Motor Company"" } }, { $count: ""num_models"" } ])";.;"db.car_makers.aggregate([ { $match: { FullName: ""American Motor Company"" } }, { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $project: { modelCount: { $size: ""$models"" } } }])";What is the number of car models created by the car maker American Motor Company?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the number of car models created by the car maker American Motor Company?
";"db.car_makers.aggregate([ { $match: { FullName: ""American Motor Company"" } }, { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $project: { modelCount: { $size: ""$models"" } } }])"
150;medium;car_1;SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $project: { FullName: 1, _id: ""$Id"", modelsCount: { $size: ""$models"" } } }, { $match: { modelsCount: { $gt: 3 } } }, { $project: { Id: ""$_id"", FullName: 1 } } ])";.;.;Which makers designed more than 3 car models? List full name and the id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
Which makers designed more than 3 car models? List full name and the id.
";"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $project: { FullName: 1, _id: ""$Id"", modelsCount: { $size: ""$models"" } } }, { $match: { modelsCount: { $gt: 3 } } }, { $project: { Id: ""$_id"", FullName: 1 } } ])"
151;medium;car_1;SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $match: { ""models.3"": { $exists: true } } }, { $project: { FullName: 1, Id: 1 } } ])";.;"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $match: { ""models.0"": { $exists: true } } }, { $addFields: { modelCount: { $size: ""$models"" } } }, { $match: { modelCount: { $gt: 3 } } }, { $project: { Id: 1, FullName: 1 } }])";What are the names and ids of all makers with more than 3 models?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What are the names and ids of all makers with more than 3 models?
";"db.car_makers.aggregate([ { $lookup: { from: ""model_list"", localField: ""Id"", foreignField: ""Maker"", as: ""models"" } }, { $match: { ""models.0"": { $exists: true } } }, { $addFields: { modelCount: { $size: ""$models"" } } }, { $match: { modelCount: { $gt: 3 } } }, { $project: { Id: 1, FullName: 1 } }])"
152;extra;car_1;SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;"db.car_names.aggregate([ { $lookup: { from: ""model_list"", localField: ""Model"", foreignField: ""Model"", as: ""model_info"" } }, { $unwind: ""$model_info"" }, { $lookup: { from: ""car_makers"", localField: ""model_info.Maker"", foreignField: ""Id"", as: ""maker_info"" } }, { $unwind: ""$maker_info"" }, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { $or: [ { ""maker_info.FullName"": ""General Motors"" }, { ""car_data.Weight"": { $gt: 3500 } } ] } }, { $group: { _id: ""$model_info.Model"" } }, { $project: { Model: ""$_id"" } } ])";.;.;Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
";"db.car_names.aggregate([ { $lookup: { from: ""model_list"", localField: ""Model"", foreignField: ""Model"", as: ""model_info"" } }, { $unwind: ""$model_info"" }, { $lookup: { from: ""car_makers"", localField: ""model_info.Maker"", foreignField: ""Id"", as: ""maker_info"" } }, { $unwind: ""$maker_info"" }, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { $or: [ { ""maker_info.FullName"": ""General Motors"" }, { ""car_data.Weight"": { $gt: 3500 } } ] } }, { $group: { _id: ""$model_info.Model"" } }, { $project: { Model: ""$_id"" } } ])"
153;extra;car_1;SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;"db.car_names.aggregate([ { $lookup: { from: ""model_list"", localField: ""Model"", foreignField: ""Model"", as: ""model_info"" } }, { $unwind: ""$model_info"" }, { $lookup: { from: ""car_makers"", localField: ""model_info.Maker"", foreignField: ""Id"", as: ""maker_info"" } }, { $unwind: ""$maker_info"" }, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { $or: [ { ""maker_info.FullName"": ""General Motors"" }, { ""car_data.Weight"": { $gt: 3500 } } ] } }, { $group: { _id: ""$model_info.Model"" } } ])";.;.;What are the different models created by either the car maker General Motors or weighed more than 3500?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What are the different models created by either the car maker General Motors or weighed more than 3500?
";"db.car_names.aggregate([ { $lookup: { from: ""model_list"", localField: ""Model"", foreignField: ""Model"", as: ""model_info"" } }, { $unwind: ""$model_info"" }, { $lookup: { from: ""car_makers"", localField: ""model_info.Maker"", foreignField: ""Id"", as: ""maker_info"" } }, { $unwind: ""$maker_info"" }, { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { $or: [ { ""maker_info.FullName"": ""General Motors"" }, { ""car_data.Weight"": { $gt: 3500 } } ] } }, { $group: { _id: ""$model_info.Model"" } } ])"
154;easy;car_1;select distinct year from cars_data where weight between 3000 and 4000;"db.cars_data.aggregate([ { $match: { Weight: { $gte: 3000, $lte: 4000 } } }, { $group: { _id: ""$Year"" } } ])";.;.;In which years cars were produced weighing no less than 3000 and no more than 4000 ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
";"db.cars_data.aggregate([ { $match: { Weight: { $gte: 3000, $lte: 4000 } } }, { $group: { _id: ""$Year"" } } ])"
155;easy;car_1;select distinct year from cars_data where weight between 3000 and 4000;"db.cars_data.aggregate([ { $match: { Weight: { $lt: 4000, $gt: 3000 } } }, { $group: { _id: ""$Year"" } }, { $project: { Year: ""$_id"" } } ])";.;.;What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
";"db.cars_data.aggregate([ { $match: { Weight: { $lt: 4000, $gt: 3000 } } }, { $group: { _id: ""$Year"" } }, { $project: { Year: ""$_id"" } } ])"
156;medium;car_1;SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;db.cars_data.find({}, {Horsepower: 1}).sort({Accelerate: -1}).limit(1);.;.;What is the horsepower of the car with the largest accelerate?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the horsepower of the car with the largest accelerate?
";db.cars_data.find({}, {Horsepower: 1}).sort({Accelerate: -1}).limit(1)
157;medium;car_1;SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;db.cars_data.find({}, { Horsepower: 1 }).sort({ Accelerate: -1 }).limit(1);.;.;What is the horsepower of the car with the greatest accelerate?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the horsepower of the car with the greatest accelerate?
";db.cars_data.find({}, { Horsepower: 1 }).sort({ Accelerate: -1 }).limit(1)
158;extra;car_1;SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""carNameData"" } }, { $unwind: ""$carNameData"" }, { $match: { ""carNameData.Model"": ""volvo"" } }, { $sort: { Accelerate: 1 } }, { $limit: 1 }, { $project: { Cylinders: 1 } } ])";.;"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $match: { ""car_names.Model"": ""volvo"" } }, { $sort: { ""Accelerate"": 1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""Cylinders"": 1 } }])";For model volvo, how many cylinders does the car with the least accelerate have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
For model volvo, how many cylinders does the car with the least accelerate have?
";"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names"" } }, { $unwind: ""$car_names"" }, { $match: { ""car_names.Model"": ""volvo"" } }, { $sort: { ""Accelerate"": 1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""Cylinders"": 1 } }])"
159;extra;car_1;SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names_info"" } }, { $match: { ""car_names_info.Model"": ""volvo"" } }, { $sort: { ""Accelerate"": 1 } }, { $limit: 1 }, { $project: { ""Cylinders"": 1 } } ])";.;"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names_data"" } }, { $unwind: ""$car_names_data"" }, { $match: { ""car_names_data.Model"": ""volvo"" } }, { $sort: { ""Accelerate"": 1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""Cylinders"": 1 } }])";For a volvo model, how many cylinders does the version with least accelerate have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
For a volvo model, how many cylinders does the version with least accelerate have?
";"db.cars_data.aggregate([ { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_names_data"" } }, { $unwind: ""$car_names_data"" }, { $match: { ""car_names_data.Model"": ""volvo"" } }, { $sort: { ""Accelerate"": 1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""Cylinders"": 1 } }])"
160;hard;car_1;SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"db.cars_data.aggregate([ { $sort: { ""Horsepower"": -1 } }, { $limit: 1 }, { $project: { ""Accelerate"": 1 } }, { $lookup: { from: ""cars_data"", let: { maxAcc: ""$Accelerate"" }, pipeline: [ { $match: { $expr: { $gt: [""$Accelerate"", ""$$maxAcc""] } } }, { $count: ""count"" } ], as: ""carsWithGreaterAcc"" } }, { $unwind: ""$carsWithGreaterAcc"" }, { $replaceRoot: { newRoot: ""$carsWithGreaterAcc"" } } ])";.;.;How many cars have a larger accelerate than the car with the largest horsepower?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
How many cars have a larger accelerate than the car with the largest horsepower?
";"db.cars_data.aggregate([ { $sort: { ""Horsepower"": -1 } }, { $limit: 1 }, { $project: { ""Accelerate"": 1 } }, { $lookup: { from: ""cars_data"", let: { maxAcc: ""$Accelerate"" }, pipeline: [ { $match: { $expr: { $gt: [""$Accelerate"", ""$$maxAcc""] } } }, { $count: ""count"" } ], as: ""carsWithGreaterAcc"" } }, { $unwind: ""$carsWithGreaterAcc"" }, { $replaceRoot: { newRoot: ""$carsWithGreaterAcc"" } } ])"
161;hard;car_1;SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"db.cars_data.aggregate([ { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $group: { _id: null, maxAccelerate: { $first: ""$Accelerate"" } } }, { $lookup: { from: ""cars_data"", let: { maxAccel: ""$maxAccelerate"" }, pipeline: [ { $match: { $expr: { $gt: [""$Accelerate"", ""$$maxAccel""] } } }, { $count: ""count"" } ], as: ""carCount"" } }, { $unwind: ""$carCount"" }, { $replaceRoot: { newRoot: ""$carCount"" } } ])";.;.;What is the number of cars with a greater accelerate than the one with the most horsepower?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the number of cars with a greater accelerate than the one with the most horsepower?
";"db.cars_data.aggregate([ { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $group: { _id: null, maxAccelerate: { $first: ""$Accelerate"" } } }, { $lookup: { from: ""cars_data"", let: { maxAccel: ""$maxAccelerate"" }, pipeline: [ { $match: { $expr: { $gt: [""$Accelerate"", ""$$maxAccel""] } } }, { $count: ""count"" } ], as: ""carCount"" } }, { $unwind: ""$carCount"" }, { $replaceRoot: { newRoot: ""$carCount"" } } ])"
164;easy;car_1;SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;"db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: ""total"" } ])";.;"db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: ""total"" }])";How many cars has over 6 cylinders?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
How many cars has over 6 cylinders?
";"db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: ""total"" }])"
165;easy;car_1;SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;.;.;"db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: ""total"" }])";What is the number of carsw ith over 6 cylinders?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
What is the number of carsw ith over 6 cylinders?
";"db.cars_data.aggregate([ { $match: { Cylinders: { $gt: 6 } } }, { $count: ""total"" }])"
166;extra;car_1;SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;.;.;"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { ""car_data.Cylinders"": 4 } }, { $sort: { ""car_data.Horsepower"": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])";For the cars with 4 cylinders, which model has the largest horsepower?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
For the cars with 4 cylinders, which model has the largest horsepower?
";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { ""car_data.Cylinders"": 4 } }, { $sort: { ""car_data.Horsepower"": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
167;extra;car_1;SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;.;"db.cars_data.aggregate([ { $match: { Cylinders: 4 } }, { $sort: { Horsepower: -1 } }, { $limit: 1 }, { $lookup: { from: ""car_names"", localField: ""Id"", foreignField: ""MakeId"", as: ""car_name"" } }, { $unwind: ""$car_name"" }, { $project: { Model: ""$car_name.Model"", Horsepower: 1 }}, { $project: { Model: 1 } } ])";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { ""car_data.Cylinders"": 4 } }, { $sort: { ""car_data.Horsepower"": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])";For all of the 4 cylinder cars, which model has the most horsepower?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
continents(ContId, Continent)
countries(CountryId, CountryName, Continent)
car_makers(Id, Maker, FullName, Country)
model_list(ModelId, Maker, Model)
car_names(MakeId, Model, Make)
cars_data(Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year)
Foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId
Question:
For all of the 4 cylinder cars, which model has the most horsepower?
";"db.car_names.aggregate([ { $lookup: { from: ""cars_data"", localField: ""MakeId"", foreignField: ""Id"", as: ""car_data"" } }, { $unwind: ""$car_data"" }, { $match: { ""car_data.Cylinders"": 4 } }, { $sort: { ""car_data.Horsepower"": -1 } }, { $limit: 1 }, { $project: { Model: 1 } }])"
180;easy;flight_2;"SELECT Country FROM AIRLINES WHERE Airline = ""JetBlue Airways""";db.airlines.findOne({ Airline: 'JetBlue Airways' }, { Country: 1 });"db.airlines.find({""Airline"": ""JetBlue Airways""}, {""Country"": 1, ""_id"": 0})";db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1});Which country does Airline 'JetBlue Airways' belong to?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Which country does Airline 'JetBlue Airways' belong to?
";db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1})
181;easy;flight_2;"SELECT Country FROM AIRLINES WHERE Airline = ""JetBlue Airways""";"db.airlines.findOne({ Airline: ""JetBlue Airways"" }, { Country: 1 })";.;db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1});What country is Jetblue Airways affiliated with?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
What country is Jetblue Airways affiliated with?
";db.airlines.findOne({Airline: 'JetBlue Airways'}, {Country: 1})
182;easy;flight_2;"SELECT Abbreviation FROM AIRLINES WHERE Airline = ""JetBlue Airways""";db.airlines.findOne({ Airline: 'JetBlue Airways' }, { Abbreviation: 1 });"db.airlines.find({Airline: ""JetBlue Airways""}, {Abbreviation: 1})";db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1});What is the abbreviation of Airline 'JetBlue Airways'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
What is the abbreviation of Airline 'JetBlue Airways'?
";db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1})
183;easy;flight_2;"SELECT Abbreviation FROM AIRLINES WHERE Airline = ""JetBlue Airways""";db.airlines.findOne({ Airline: 'JetBlue Airways' }, { Abbreviation: 1 });.;db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1});Which abbreviation corresponds to Jetblue Airways?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Which abbreviation corresponds to Jetblue Airways?
";db.airlines.find({Airline: 'JetBlue Airways'}, {Abbreviation: 1})
184;medium;flight_2;"SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = ""USA""";db.airlines.find({ Country: 'USA' }, { Airline: 1, Abbreviation: 1 });db.airlines.find({Country: 'USA'}, { Airline: 1, Abbreviation: 1});db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1});List all airline names and their abbreviations in 'USA'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
List all airline names and their abbreviations in 'USA'.
";db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1})
185;medium;flight_2;"SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = ""USA""";db.airlines.find({ Country: 'USA' }, { Airline: 1, Abbreviation: 1 });"db.airlines.find({Country: ""USA""}, {Airline: 1, Abbreviation: 1})";db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1});What are the airline names and abbreviations for airlines in the USA?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
What are the airline names and abbreviations for airlines in the USA?
";db.airlines.find({Country: 'USA'}, {Airline: 1, Abbreviation: 1})
194;easy;flight_2;"SELECT Airline FROM AIRLINES WHERE Abbreviation = ""UAL""";db.airlines.findOne({ Abbreviation: 'UAL' }, { Airline: 1 });db.airlines.find({Abbreviation: 'UAL'}, { Airline: 1 });db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1});Which airline has abbreviation 'UAL'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Which airline has abbreviation 'UAL'?
";db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1})
195;easy;flight_2;"SELECT Airline FROM AIRLINES WHERE Abbreviation = ""UAL""";db.airlines.find({ Abbreviation: 'UAL' }, { Airline: 1 });db.airlines.find({Abbreviation: 'UAL'}, { Airline: 1 });db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1});Give the airline with abbreviation 'UAL'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Give the airline with abbreviation 'UAL'.
";db.airlines.find({Abbreviation: 'UAL'}, {Airline: 1})
200;easy;flight_2;"SELECT AirportName FROM AIRPORTS WHERE AirportCode = ""AKO""";db.airports.findOne({ AirportCode: 'AKO' }, { AirportName: 1 });db.airports.find({AirportCode: 'AKO'}, {AirportName: 1});db.airports.find({AirportCode: 'AKO'}, {AirportName: 1});What is the airport name for airport 'AKO'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
What is the airport name for airport 'AKO'?
";db.airports.find({AirportCode: 'AKO'}, {AirportName: 1})
201;easy;flight_2;"SELECT AirportName FROM AIRPORTS WHERE AirportCode = ""AKO""";db.airports.findOne({ AirportCode: 'AKO' }, { AirportName: 1 });"db.airports.findOne({""AirportCode"": ""AKO""}, {""AirportName"": 1, ""_id"": 0})";db.airports.find({AirportCode: 'AKO'}, {AirportName: 1});Return the name of the airport with code 'AKO'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Return the name of the airport with code 'AKO'.
";db.airports.find({AirportCode: 'AKO'}, {AirportName: 1})
214;medium;flight_2;"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = ""JetBlue Airways""";"db.flights.aggregate([ { $lookup: { from: ""airlines"", localField: ""Airline"", foreignField: ""uid"", as: ""airline_info"" } }, { $match: { ""airline_info.Airline"": ""JetBlue Airways"" } }, { $count: ""total_flights"" } ])";.;.;How many flights does airline 'JetBlue Airways' have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
How many flights does airline 'JetBlue Airways' have?
";"db.flights.aggregate([ { $lookup: { from: ""airlines"", localField: ""Airline"", foreignField: ""uid"", as: ""airline_info"" } }, { $match: { ""airline_info.Airline"": ""JetBlue Airways"" } }, { $count: ""total_flights"" } ])"
215;medium;flight_2;"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = ""JetBlue Airways""";"db.flights.aggregate([ { $lookup: { from: ""airlines"", localField: ""Airline"", foreignField: ""uid"", as: ""airline_info"" } }, { $match: { ""airline_info.Airline"": ""JetBlue Airways"" } }, { $count: ""JetBlue_Flights"" } ])";.;.;Give the number of Jetblue Airways flights.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Give the number of Jetblue Airways flights.
";"db.flights.aggregate([ { $lookup: { from: ""airlines"", localField: ""Airline"", foreignField: ""uid"", as: ""airline_info"" } }, { $match: { ""airline_info.Airline"": ""JetBlue Airways"" } }, { $count: ""JetBlue_Flights"" } ])"
244;medium;flight_2;SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200;.;"db.airlines.aggregate([ { $lookup: { from: ""flights"", localField: ""uid"", foreignField: ""Airline"", as: ""flights"" } }, { $match: { $expr: { $lt: [ { $size: ""$flights"" }, 200 ] } } }, { $project: { Airline: 1 } }])";"db.airlines.aggregate([ { $lookup: { from: ""flights"", localField: ""uid"", foreignField: ""Airline"", as: ""flights"" } }, { $match: { ""flights.Airline"": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: ""$Airline"", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])";Find all airlines that have fewer than 200 flights.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Find all airlines that have fewer than 200 flights.
";"db.airlines.aggregate([ { $lookup: { from: ""flights"", localField: ""uid"", foreignField: ""Airline"", as: ""flights"" } }, { $match: { ""flights.Airline"": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: ""$Airline"", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])"
245;medium;flight_2;SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200;"db.flights.aggregate([ { $group: { _id: ""$Airline"", totalFlights: { $sum: 1 } } }, { $match: { totalFlights: { $lt: 200 } } }, { $lookup: { from: ""airlines"", localField: ""_id"", foreignField: ""uid"", as: ""airline_info"" } }, { $unwind: ""$airline_info"" }, { $project: { Airline: ""$airline_info.Airline"" } } ])";"db.airlines.aggregate([ { $lookup: { from: ""flights"", localField: ""uid"", foreignField: ""Airline"", as: ""flights"" } }, { $match: { $expr: { $lt: [ { $size: ""$flights"" }, 200 ] } } }, { $project: { Airline: 1 } }])";"db.airlines.aggregate([ { $lookup: { from: ""flights"", localField: ""uid"", foreignField: ""Airline"", as: ""flights"" } }, { $match: { ""flights.Airline"": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: ""$Airline"", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])";Which airlines have less than 200 flights?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
airlines(uid, Airline, Abbreviation, Country)
airports(City, AirportCode, AirportName, Country, CountryAbbrev)
flights(Airline, FlightNo, SourceAirport, DestAirport)
Foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode
Question:
Which airlines have less than 200 flights?
";"db.airlines.aggregate([ { $lookup: { from: ""flights"", localField: ""uid"", foreignField: ""Airline"", as: ""flights"" } }, { $match: { ""flights.Airline"": { $exists: true } } }, { $project: { Airline: 1 } }, { $group: { _id: ""$Airline"", count: { $sum: 1 } } }, { $match: { count: { $lt: 200 } } }, { $project: { _id: 1, count: 0 } }])"
262;easy;employee_hire_evaluation;SELECT name FROM employee ORDER BY age;db.employee.find({}, { Name: 1 }).sort({ Age: 1 });db.employee.aggregate([{ $sort: { Age: 1, Name: 1} }, { $project: { Name: 1 } } ]);db.employee.find({}, { Name: 1}).sort({Age: 1});Sort employee names by their age in ascending order.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Sort employee names by their age in ascending order.
";db.employee.find({}, { Name: 1}).sort({Age: 1})
263;easy;employee_hire_evaluation;SELECT name FROM employee ORDER BY age;db.employee.find({}, { Name: 1 }).sort({ Age: 1 });db.employee.find({}, {Name: 1}).sort({Age: 1});db.employee.find({}, { Name: 1}).sort({Age: 1});List the names of employees and sort in ascending order of age.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
List the names of employees and sort in ascending order of age.
";db.employee.find({}, { Name: 1}).sort({Age: 1})
264;medium;employee_hire_evaluation;SELECT count(*) , city FROM employee GROUP BY city;"db.employee.aggregate([ { $group: { _id: ""$City"", numberOfEmployees: { $sum: 1 } } }, { $project: { City: ""$_id"", numberOfEmployees: 1 } } ])";"db.employee.aggregate([ { $group: { _id: ""$City"", count: { $sum: 1 } } } ])";"db.employee.aggregate([ { $group: { _id: ""$City"", count: { $sum: 1 } } }])";What is the number of employees from each city?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
What is the number of employees from each city?
";"db.employee.aggregate([ { $group: { _id: ""$City"", count: { $sum: 1 } } }])"
265;medium;employee_hire_evaluation;SELECT count(*) , city FROM employee GROUP BY city;"db.employee.aggregate([ { $group: { _id: ""$City"", numberOfEmployees: { $sum: 1 } } }, { $project: { city: ""$_id"", count: ""$numberOfEmployees"" } } ])";"db.employee.aggregate([ { $group: { _id: ""$City"", count: { $sum: 1 } } } ])";"db.employee.aggregate([ { $group: { _id: ""$City"", count: { $sum: 1 } } }])";Count the number of employees for each city.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Count the number of employees for each city.
";"db.employee.aggregate([ { $group: { _id: ""$City"", count: { $sum: 1 } } }])"
266;medium;employee_hire_evaluation;SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1;"db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: ""$City"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { City: ""$_id"" } } ])";"db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: ""$City"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { City: ""$_id"" } } ])";.;Which cities do more than one employee under age 30 come from?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Which cities do more than one employee under age 30 come from?
";"db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: ""$City"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { City: ""$_id"" } } ])"
267;medium;employee_hire_evaluation;SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1;"db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: ""$City"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { _id: 1, count: 0 } } ])";"db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: ""$City"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { City: ""$_id"", count: 1 } }, { $project: { count: 0 } } ])";.;Find the cities that have more than one employee under age 30.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Find the cities that have more than one employee under age 30.
";"db.employee.aggregate([ { $match: { Age: { $lt: 30 } } }, { $group: { _id: ""$City"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { _id: 1, count: 0 } } ])"
268;medium;employee_hire_evaluation;SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION;"db.shop.aggregate([ { $group: { _id: ""$Location"", NumberOfShops: { $sum: 1 } } } ])";"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } } } ])";"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } } }])";Find the number of shops in each location.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Find the number of shops in each location.
";"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } } }])"
269;medium;employee_hire_evaluation;SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION;"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } }} ])";"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } } } ])";"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } } }])";How many shops are there in each location?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
How many shops are there in each location?
";"db.shop.aggregate([ { $group: { _id: ""$Location"", count: { $sum: 1 } } }])"
272;medium;employee_hire_evaluation;SELECT min(Number_products) , max(Number_products) FROM shop;"db.shop.aggregate([ { $group: { _id: null, minNumber_products: { $min: ""$Number_products"" }, maxNumber_products: { $max: ""$Number_products"" } } }, { $project: { minNumber_products: 1, maxNumber_products: 1 } } ])";"db.shop.aggregate([ { $group: { _id: null, min_products: { $min: ""$Number_products"" }, max_products: { $max: ""$Number_products"" } } } ])";"db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: ""$Number_products"" }, maxProducts: { $max: ""$Number_products"" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])";find the minimum and maximum number of products of all stores.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
find the minimum and maximum number of products of all stores.
";"db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: ""$Number_products"" }, maxProducts: { $max: ""$Number_products"" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])"
273;medium;employee_hire_evaluation;SELECT min(Number_products) , max(Number_products) FROM shop;"db.shop.aggregate([ { $group: { _id: null, minNumber_products: { $min: ""$Number_products"" }, maxNumber_products: { $max: ""$Number_products"" } } }, { $project: { minNumber_products: 1, maxNumber_products: 1 } } ])";"db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: ""$Number_products"" }, maxProducts: { $max: ""$Number_products"" } } }, { $project: { minProducts: 1, maxProducts: 1 } } ])";"db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: ""$Number_products"" }, maxProducts: { $max: ""$Number_products"" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])";What are the minimum and maximum number of products across all the shops?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
What are the minimum and maximum number of products across all the shops?
";"db.shop.aggregate([ { $group: { _id: null, minProducts: { $min: ""$Number_products"" }, maxProducts: { $max: ""$Number_products"" } } }, { $project: { minProducts: 1, maxProducts: 1 } }])"
274;medium;employee_hire_evaluation;SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC;db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 });db.shop.find({}, {Name: 1, Location: 1, District: 1}).sort({Number_products: -1});.;Return the name, location and district of all shops in descending order of number of products.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Return the name, location and district of all shops in descending order of number of products.
";db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 })
275;medium;employee_hire_evaluation;SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC;db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 });db.shop.aggregate([ { $sort: { Number_products: -1 } }, { $project: { Name: 1, Location: 1, District: 1 } } ]);.;Sort all the shops by number products in descending order, and return the name, location and district of each shop.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
";db.shop.find({}, { Name: 1, Location: 1, District: 1 }).sort({ Number_products: -1 })
278;extra;employee_hire_evaluation;SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;.;.;"db.employee.aggregate([ { $lookup: { from: ""evaluation"", localField: ""Employee_ID"", foreignField: ""Employee_ID"", as: ""evaluation_data"" } }, { $project: { Name: 1, evaluation_count: { $size: ""$evaluation_data"" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])";find the name of employee who was awarded the most times in the evaluation.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
find the name of employee who was awarded the most times in the evaluation.
";"db.employee.aggregate([ { $lookup: { from: ""evaluation"", localField: ""Employee_ID"", foreignField: ""Employee_ID"", as: ""evaluation_data"" } }, { $project: { Name: 1, evaluation_count: { $size: ""$evaluation_data"" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])"
279;extra;employee_hire_evaluation;SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;.;.;"db.employee.aggregate([ { $lookup: { from: ""evaluation"", localField: ""Employee_ID"", foreignField: ""Employee_ID"", as: ""evaluation_data"" } }, { $project: { Name: 1, evaluation_count: { $size: ""$evaluation_data"" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])";Which employee received the most awards in evaluations? Give me the employee name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Which employee received the most awards in evaluations? Give me the employee name.
";"db.employee.aggregate([ { $lookup: { from: ""evaluation"", localField: ""Employee_ID"", foreignField: ""Employee_ID"", as: ""evaluation_data"" } }, { $project: { Name: 1, evaluation_count: { $size: ""$evaluation_data"" } } }, { $sort: { evaluation_count: -1 } }, { $limit: 1 }, { $project: { Name: 1 }} ])"
284;extra;employee_hire_evaluation;SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;.;"db.shop.aggregate([ { $lookup: { from: ""hiring"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""hires"" } }, { $project: { Name: 1, hiresCount: { $size: ""$hires"" } } }, { $sort: { hiresCount: -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])";.;What is the name of the shop that is hiring the largest number of employees?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
What is the name of the shop that is hiring the largest number of employees?
";"db.shop.aggregate([ { $lookup: { from: ""hiring"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""hires"" } }, { $project: { Name: 1, hiresCount: { $size: ""$hires"" } } }, { $sort: { hiresCount: -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])"
286;hard;employee_hire_evaluation;SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);"db.shop.aggregate([ { $lookup: { from: ""hiring"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""hiring_info"" } }, { $match: { ""hiring_info"": { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.shop.find({Shop_ID: {$nin: db.hiring.distinct(""Shop_ID"")}}, {Name: 1})";.;Find the name of the shops that do not hire any employee.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Find the name of the shops that do not hire any employee.
";"db.shop.aggregate([ { $lookup: { from: ""hiring"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""hiring_info"" } }, { $match: { ""hiring_info"": { $size: 0 } } }, { $project: { Name: 1 } } ])"
287;hard;employee_hire_evaluation;SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);"db.shop.aggregate([ { $lookup: { from: ""hiring"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""hiring_info"" } }, { $match: { hiring_info: { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.shop.find({Shop_ID: {$nin: db.hiring.distinct(""Shop_ID"")}}, {Name: 1}).pretty()";.;Which shops run with no employees? Find the shop names;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Which shops run with no employees? Find the shop names
";"db.shop.aggregate([ { $lookup: { from: ""hiring"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""hiring_info"" } }, { $match: { hiring_info: { $size: 0 } } }, { $project: { Name: 1 } } ])"
288;medium;employee_hire_evaluation;SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name;"db.hiring.aggregate([ { $group: { _id: ""$Shop_ID"", numEmployees: { $sum: 1 } } }, { $lookup: { from: ""shop"", localField: ""_id"", foreignField: ""Shop_ID"", as: ""shopInfo"" } }, { $project: { shopName: ""$shopInfo.Name"", numEmployees: 1 } }, { $unwind: ""$shopName"" } ])";.;"db.hiring.aggregate([ { $lookup: { from: ""shop"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""shop_info"" } }, { $unwind: ""$shop_info"" }, { $group: { _id: ""$shop_info.Name"", count: { $sum: 1 } } }, { $project: { ShopName: ""$_id"", EmployeeCount: ""$count"" } }])";"Find the number of employees hired in each shop; show the shop name as well.";"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Find the number of employees hired in each shop; show the shop name as well.
";"db.hiring.aggregate([ { $lookup: { from: ""shop"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""shop_info"" } }, { $unwind: ""$shop_info"" }, { $group: { _id: ""$shop_info.Name"", count: { $sum: 1 } } }, { $project: { ShopName: ""$_id"", EmployeeCount: ""$count"" } }])"
289;medium;employee_hire_evaluation;SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name;"db.hiring.aggregate([ { $group: { _id: ""$Shop_ID"", numberOfEmployees: { $sum: 1 } } }, { $lookup: { from: ""shop"", localField: ""_id"", foreignField: ""Shop_ID"", as: ""shop_info"" } }, { $unwind: ""$shop_info"" }, { $project: { numberOfEmployees: 1, shopName: ""$shop_info.Name"" } } ])";.;"db.hiring.aggregate([ { $lookup: { from: ""shop"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""shop_info"" } }, { $unwind: ""$shop_info"" }, { $group: { _id: ""$shop_info.Name"", count: { $sum: 1 } } }, { $project: { name: ""$_id"", count: 1 } }])";For each shop, return the number of employees working there and the name of the shop.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
For each shop, return the number of employees working there and the name of the shop.
";"db.hiring.aggregate([ { $lookup: { from: ""shop"", localField: ""Shop_ID"", foreignField: ""Shop_ID"", as: ""shop_info"" } }, { $unwind: ""$shop_info"" }, { $group: { _id: ""$shop_info.Name"", count: { $sum: 1 } } }, { $project: { name: ""$_id"", count: 1 } }])"
290;easy;employee_hire_evaluation;SELECT sum(bonus) FROM evaluation;"db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: ""$Bonus"" } } }, { $project: { totalBonus: 1 } } ])";"db.evaluation.aggregate([ { $group: { _id: null, total_bonus: { $sum: ""$Bonus"" } } }, { $project: { total_bonus: 1 } } ])";"db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: ""$Bonus"" } } }, { $project: { sum: ""$totalBonus"" } }])";What is total bonus given in all evaluations?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
What is total bonus given in all evaluations?
";"db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: ""$Bonus"" } } }, { $project: { sum: ""$totalBonus"" } }])"
291;easy;employee_hire_evaluation;SELECT sum(bonus) FROM evaluation;"db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: ""$Bonus"" } } }, { $project: { totalBonus: 1 } } ])";"db.evaluation.aggregate([ { $group: { _id: null, total_bonus: { $sum: ""$Bonus"" } } }, { $project: { total_bonus: 1 } } ])";"db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: ""$Bonus"" } } }, { $project: { sum: ""$totalBonus"" } }])";Find the total amount of bonus given in all the evaluations.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Find the total amount of bonus given in all the evaluations.
";"db.evaluation.aggregate([ { $group: { _id: null, totalBonus: { $sum: ""$Bonus"" } } }, { $project: { sum: ""$totalBonus"" } }])"
292;easy;employee_hire_evaluation;SELECT * FROM hiring;db.hiring.find({});db.hiring.find({});db.hiring.find({});Give me all the information about hiring.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Give me all the information about hiring.
";db.hiring.find({})
293;easy;employee_hire_evaluation;SELECT * FROM hiring;db.hiring.find({});db.hiring.find();db.hiring.find({});What is all the information about hiring?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
What is all the information about hiring?
";db.hiring.find({})
297;easy;employee_hire_evaluation;SELECT count(DISTINCT LOCATION) FROM shop;"db.shop.aggregate([ { $group: { _id: ""$Location"" } }, { $count: ""distinctLocations"" } ])";.;.;Count the number of distinct store locations.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
employee(Employee_ID, Name, Age, City)
shop(Shop_ID, Name, Location, District, Number_products, Manager_name)
hiring(Shop_ID, Employee_ID, Start_from, Is_full_time)
evaluation(Employee_ID, Year_awarded, Bonus)
Foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID
Question:
Count the number of distinct store locations.
";"db.shop.aggregate([ { $group: { _id: ""$Location"" } }, { $count: ""distinctLocations"" } ])"
300;medium;cre_Doc_Template_Mgt;SELECT document_id , document_name , document_description FROM Documents;db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 });db.Documents.find({}, {Document_ID: 1, Document_Name: 1, Document_Description: 1});.;List document IDs, document names, and document descriptions for all documents.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
List document IDs, document names, and document descriptions for all documents.
";db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 })
301;medium;cre_Doc_Template_Mgt;SELECT document_id , document_name , document_description FROM Documents;db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 });.;.;What are the ids, names, and descriptions for all documents?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids, names, and descriptions for all documents?
";db.Documents.find({}, { Document_ID: 1, Document_Name: 1, Document_Description: 1 })
302;medium;cre_Doc_Template_Mgt;"SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE ""%w%""";db.Documents.find( { Document_Description: /w/ }, { Document_Name: 1, Template_ID: 1 } );"db.Documents.find({ ""Document_Description"": { ""$regex"": /w/i } }, { ""Document_Name"": 1, ""Template_ID"": 1 })";db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 });What is the document name and template id for document with description with the letter 'w' in it?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the document name and template id for document with description with the letter 'w' in it?
";db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 })
303;medium;cre_Doc_Template_Mgt;"SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE ""%w%""";db.Documents.find( { Document_Description: /w/ }, { Document_Name: 1, Template_ID: 1 } );db.Documents.find({Document_Description: /w/i}, {Document_Name: 1, Template_ID:1});db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 });Return the names and template ids for documents that contain the letter w in their description.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the names and template ids for documents that contain the letter w in their description.
";db.Documents.find( { Document_Description: { $regex: /w/ } }, { Document_Name: 1, Template_ID: 1 })
304;medium;cre_Doc_Template_Mgt;"SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = ""Robbin CV""";db.Documents.find( { Document_Name: 'Robbin CV' }, { Document_ID: 1, Template_ID: 1, Document_Description: 1 } );.;"db.Documents.find( { ""Document_Name"": ""Robbin CV"" }, { ""_id"": 0, ""Document_ID"": 1, ""Template_ID"": 1, ""Document_Description"": 1 })";What is the document id, template id and description for document named 'Robbin CV'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the document id, template id and description for document named 'Robbin CV'?
";"db.Documents.find( { ""Document_Name"": ""Robbin CV"" }, { ""_id"": 0, ""Document_ID"": 1, ""Template_ID"": 1, ""Document_Description"": 1 })"
305;medium;cre_Doc_Template_Mgt;"SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = ""Robbin CV""";db.Documents.find( { Document_Name: 'Robbin CV' }, { Document_ID: 1, Template_ID: 1, Document_Description: 1 } );.;.;Return the document id, template id, and description for the document with the name Robbin CV.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the document id, template id, and description for the document with the name Robbin CV.
";db.Documents.find( { Document_Name: 'Robbin CV' }, { Document_ID: 1, Template_ID: 1, Document_Description: 1 } )
306;easy;cre_Doc_Template_Mgt;SELECT count(DISTINCT template_id) FROM Documents;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])";"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template"" } }, { $group: { _id: ""$template.Template_ID"", count: { $sum: 1 } } }, { $count: ""total_templates"" } ])";.;How many different templates do all document use?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
How many different templates do all document use?
";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
307;easy;cre_Doc_Template_Mgt;SELECT count(DISTINCT template_id) FROM Documents;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"" } }, { $count: ""unique_templates"" } ])";.;.;Count the number of different templates used for documents.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Count the number of different templates used for documents.
";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"" } }, { $count: ""unique_templates"" } ])"
308;medium;cre_Doc_Template_Mgt;SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT';"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template_info"" } }, { $unwind: ""$template_info"" }, { $match: { ""template_info.Template_Type_Code"": ""PPT"" } }, { $count: ""total_documents_using_PPT_template"" } ])";.;"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template_data"" } }, { $unwind: ""$template_data"" }, { $match: { ""template_data.Template_Type_Code"": ""PPT"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many documents are using the template with type code 'PPT'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
How many documents are using the template with type code 'PPT'?
";"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template_data"" } }, { $unwind: ""$template_data"" }, { $match: { ""template_data.Template_Type_Code"": ""PPT"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
309;medium;cre_Doc_Template_Mgt;SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT';"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""TemplateDetails"" } }, { $unwind: ""$TemplateDetails"" }, { $match: { ""TemplateDetails.Template_Type_Code"": ""PPT"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])";.;"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template_info"" } }, { $unwind: ""$template_info"" }, { $match: { ""template_info.Template_Type_Code"": ""PPT"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";Count the number of documents that use the PPT template type.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Count the number of documents that use the PPT template type.
";"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template_info"" } }, { $unwind: ""$template_info"" }, { $match: { ""template_info.Template_Type_Code"": ""PPT"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
310;medium;cre_Doc_Template_Mgt;SELECT template_id , count(*) FROM Documents GROUP BY template_id;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", NumberOfDocuments: { $sum: 1 } } }, { $project: { Template_ID: ""$_id"", NumberOfDocuments: ""$NumberOfDocuments"" } } ])";.;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }])";Show all template ids and number of documents using each template.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all template ids and number of documents using each template.
";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }])"
311;medium;cre_Doc_Template_Mgt;SELECT template_id , count(*) FROM Documents GROUP BY template_id;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } } ])";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $project: { Template_ID: ""$_id"", count: 1 } } ])";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }])";What are all different template ids used for documents, and how many times were each of them used?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are all different template ids used for documents, and how many times were each of them used?
";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }])"
314;easy;cre_Doc_Template_Mgt;SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } }}, { $match: { count: { $gt: 1 } }}, { $project: { template_id: ""$_id"" }} ])";.;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: ""$_id"" } }])";Show ids for all templates that are used by more than one document.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show ids for all templates that are used by more than one document.
";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: ""$_id"" } }])"
315;easy;cre_Doc_Template_Mgt;SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { template_id: ""$_id"" } } ])";.;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: ""$_id"" } }])";What are the template ids of any templates used in more than a single document?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the template ids of any templates used in more than a single document?
";"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Template_ID: ""$_id"" } }])"
316;hard;cre_Doc_Template_Mgt;SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""DocumentUsage"" } }, { $match: { DocumentUsage: { $size: 0 } } }, { $project: { Template_ID: 1 } } ])";.;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents"": { $size: 0 } } }, { $project: { Template_ID: 1 } }])";Show ids for all templates not used by any document.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show ids for all templates not used by any document.
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents"": { $size: 0 } } }, { $project: { Template_ID: 1 } }])"
317;hard;cre_Doc_Template_Mgt;SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""Template_Documents"" } }, { $match: { Template_Documents: { $size: 0 } } }, { $project: { Template_ID: 1 } } ])";.;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents"": { $size: 0 } } }, { $project: { Template_ID: 1 } }])";What are the ids for templates that are not used in any documents?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids for templates that are not used in any documents?
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents"": { $size: 0 } } }, { $project: { Template_ID: 1 } }])"
320;medium;cre_Doc_Template_Mgt;SELECT template_id , version_number , template_type_code FROM Templates;.;db.Templates.find({}, {Template_ID: 1, Version_Number: 1, Template_Type_Code: 1});.;Show template ids, version numbers, and template type codes for all templates.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show template ids, version numbers, and template type codes for all templates.
";db.Templates.find({}, {Template_ID: 1, Version_Number: 1, Template_Type_Code: 1})
321;medium;cre_Doc_Template_Mgt;SELECT template_id , version_number , template_type_code FROM Templates;db.Templates.find({}, { Template_ID: 1, Version_Number: 1, Template_Type_Code: 1 });"db.Templates.aggregate([ { $lookup: { from: ""Ref_Template_Types"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""template_type"" } }, { $project: { _id: ""$Template_ID"", version_number: ""$Version_Number"", type_code: { $arrayElemAt: [""$template_type.Template_Type_Code"", 0] } } } ])";.;What are the ids, version numbers, and type codes for each template?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids, version numbers, and type codes for each template?
";db.Templates.find({}, { Template_ID: 1, Version_Number: 1, Template_Type_Code: 1 })
322;easy;cre_Doc_Template_Mgt;SELECT DISTINCT template_type_code FROM Templates;.;.;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"" } }])";Show all distinct template type codes for all templates.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all distinct template type codes for all templates.
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"" } }])"
324;medium;cre_Doc_Template_Mgt;"SELECT template_id FROM Templates WHERE template_type_code = ""PP"" OR template_type_code = ""PPT""";.;.;"db.Templates.find( { ""Template_Type_Code"": { ""$in"": [""PP"", ""PPT""] } }, { ""_id"": 0, ""Template_ID"": 1 })";What are the ids of templates with template type code PP or PPT?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids of templates with template type code PP or PPT?
";"db.Templates.find( { ""Template_Type_Code"": { ""$in"": [""PP"", ""PPT""] } }, { ""_id"": 0, ""Template_ID"": 1 })"
325;medium;cre_Doc_Template_Mgt;"SELECT template_id FROM Templates WHERE template_type_code = ""PP"" OR template_type_code = ""PPT""";.;.;"db.Templates.find( { ""Template_Type_Code"": { $in: [""PP"", ""PPT""] } }, { ""_id"": 0, ""Template_ID"": 1 })";Return the ids of templates that have the code PP or PPT.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the ids of templates that have the code PP or PPT.
";"db.Templates.find( { ""Template_Type_Code"": { $in: [""PP"", ""PPT""] } }, { ""_id"": 0, ""Template_ID"": 1 })"
327;easy;cre_Doc_Template_Mgt;"SELECT count(*) FROM Templates WHERE template_type_code = ""CV""";"db.Templates.aggregate([ { $match: { Template_Type_Code: ""CV"" } }, { $count: ""TotalCVTemplates"" } ])";.;.;Count the number of templates of the type CV.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Count the number of templates of the type CV.
";"db.Templates.aggregate([ { $match: { Template_Type_Code: ""CV"" } }, { $count: ""TotalCVTemplates"" } ])"
328;medium;cre_Doc_Template_Mgt;SELECT version_number , template_type_code FROM Templates WHERE version_number > 5;db.Templates.find({ Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 });db.Templates.find({Version_Number: {$gt: 5}}, {Version_Number: 1, Template_Type_Code: 1});.;What is the version number and template type code for the template with version number later than 5?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the version number and template type code for the template with version number later than 5?
";db.Templates.find({ Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 })
329;medium;cre_Doc_Template_Mgt;SELECT version_number , template_type_code FROM Templates WHERE version_number > 5;db.Templates.find( { Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 } );db.Templates.find({Version_Number: {$gt: 5}}, {Version_Number: 1, Template_Type_Code: 1});.;Return the version numbers and template type codes of templates with a version number greater than 5.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the version numbers and template type codes of templates with a version number greater than 5.
";db.Templates.find( { Version_Number: { $gt: 5 } }, { Version_Number: 1, Template_Type_Code: 1 } )
330;medium;cre_Doc_Template_Mgt;SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", NumberOfTemplates: { $sum: 1 } } }, { $project: { Template_Type_Code: ""$_id"", NumberOfTemplates: 1 } } ])";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } } ])";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }])";Show all template type codes and number of templates for each.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all template type codes and number of templates for each.
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }])"
331;medium;cre_Doc_Template_Mgt;SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $project: { template_type_code: ""$_id"", count: 1 } } ])";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } } ])";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }])";What are the different template type codes, and how many templates correspond to each?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the different template type codes, and how many templates correspond to each?
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }])"
332;hard;cre_Doc_Template_Mgt;SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;.;Which template type code has most number of templates?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Which template type code has most number of templates?
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])"
333;hard;cre_Doc_Template_Mgt;SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;.;Return the type code of the template type that the most templates belong to.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the type code of the template type that the most templates belong to.
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])"
334;easy;cre_Doc_Template_Mgt;SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { template_type_code: ""$_id"" } } ])";.;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: ""$_id"" } }])";Show all template type codes with less than three templates.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all template type codes with less than three templates.
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: ""$_id"" } }])"
335;easy;cre_Doc_Template_Mgt;SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { template_type_code: ""$_id"" } } ])";.;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: ""$_id"" } }])";What are the codes of template types that have fewer than 3 templates?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the codes of template types that have fewer than 3 templates?
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Template_Type_Code: ""$_id"" } }])"
336;medium;cre_Doc_Template_Mgt;SELECT min(Version_Number) , template_type_code FROM Templates;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", MinVersion: { $min: ""$Version_Number"" } } }, { $sort: { MinVersion: 1 } }, { $limit: 1 }, { $project: { MinVersion: 1, Template_Type_Code: ""$_id"" } } ])";db.Templates.aggregate([ { $sort: { Version_Number: 1 } }, { $limit: 1 }, { $project: { Version_Number: 1, Template_Type_Code: 1 } } ]);"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", minVersion: { $min: ""$Version_Number"" } } }, { $sort: { minVersion: 1 } }, { $limit: 1 }, { $project: { template_type_code: ""$_id"", minVersion: 1 } }])";What the smallest version number and its template type code?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What the smallest version number and its template type code?
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", minVersion: { $min: ""$Version_Number"" } } }, { $sort: { minVersion: 1 } }, { $limit: 1 }, { $project: { template_type_code: ""$_id"", minVersion: 1 } }])"
337;medium;cre_Doc_Template_Mgt;SELECT min(Version_Number) , template_type_code FROM Templates;"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", minVersion: { $min: ""$Version_Number"" } }}, { $project: { Version_Number: ""$minVersion"", Template_Type_Code: ""$_id"" }}, { $sort: { Version_Number: 1 } }, { $limit: 1 } ])";.;.;Return the lowest version number, along with its corresponding template type code.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the lowest version number, along with its corresponding template type code.
";"db.Templates.aggregate([ { $group: { _id: ""$Template_Type_Code"", minVersion: { $min: ""$Version_Number"" } }}, { $project: { Version_Number: ""$minVersion"", Template_Type_Code: ""$_id"" }}, { $sort: { Version_Number: 1 } }, { $limit: 1 } ])"
338;medium;cre_Doc_Template_Mgt;"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = ""Data base""";db.Documents.aggregate([ { $match: { Document_Name: 'Data base' } }, { $lookup: { from: 'Templates', localField: 'Template_ID', foreignField: 'Template_ID', as: 'templateInfo' } }, { $unwind: '$templateInfo' }, { $project: { template_type_code: '$templateInfo.Template_Type_Code' } } ]);db.Documents.aggregate([ { $match: { Document_Name: 'Data base' } }, { $lookup: { from: 'Templates', localField: 'Template_ID', foreignField: 'Template_ID', as: 'template' } }, { $unwind: '$template' }, { $lookup: { from: 'Ref_Template_Types', localField: 'template.Template_Type_Code', foreignField: 'Template_Type_Code', as: 'templateType' } }, { $unwind: '$templateType' }, { $project: { Template_Type_Code: '$templateType.Template_Type_Code' } } ]);"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Data base"" } }, { $project: { ""Template_Type_Code"": 1 } }])";What is the template type code of the template used by document with the name 'Data base'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the template type code of the template used by document with the name 'Data base'?
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Data base"" } }, { $project: { ""Template_Type_Code"": 1 } }])"
339;medium;cre_Doc_Template_Mgt;"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = ""Data base""";"db.Documents.aggregate([ { $match: { Document_Name: ""Data base"" } }, { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template"" } }, { $unwind: ""$template"" }, { $project: { template_type_code: ""$template.Template_Type_Code"" } } ])";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""document"" } }, { $match: { ""document.Document_Name"": ""Data base"" } }, { $project: { Template_Type_Code: 1 } } ])";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Data base"" } }, { $project: { ""_id"": 0, ""Template_Type_Code"": 1 } }])";Return the template type code of the template that is used by a document named Data base.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the template type code of the template that is used by a document named Data base.
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Data base"" } }, { $project: { ""_id"": 0, ""Template_Type_Code"": 1 } }])"
340;medium;cre_Doc_Template_Mgt;"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = ""BK""";.;"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template"" } }, { $unwind: ""$template"" }, { $lookup: { from: ""Ref_Template_Types"", localField: ""template.Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""templateType"" } }, { $unwind: ""$templateType"" }, { $match: { ""templateType.Template_Type_Code"": ""BK"" } }, { $project: { Document_Name: 1 } } ])";.;Show all document names using templates with template type code BK.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all document names using templates with template type code BK.
";"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template"" } }, { $unwind: ""$template"" }, { $lookup: { from: ""Ref_Template_Types"", localField: ""template.Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""templateType"" } }, { $unwind: ""$templateType"" }, { $match: { ""templateType.Template_Type_Code"": ""BK"" } }, { $project: { Document_Name: 1 } } ])"
341;medium;cre_Doc_Template_Mgt;"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = ""BK""";.;"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template"" } }, { $match: { ""template.Template_Type_Code"": ""BK"" } }, { $project: { Document_Name: 1 } } ])";"db.Templates.aggregate([ { $match: { ""Template_Type_Code"": ""BK"" } }, { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $project: { ""_id"": 0, ""Document_Name"": ""$documents.Document_Name"" } }])";What are the names of documents that use templates with the code BK?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the names of documents that use templates with the code BK?
";"db.Templates.aggregate([ { $match: { ""Template_Type_Code"": ""BK"" } }, { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $project: { ""_id"": 0, ""Document_Name"": ""$documents.Document_Name"" } }])"
342;medium;cre_Doc_Template_Mgt;SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code;.;.;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $project: { Template_Type_Code: ""$_id"", count: 1 } }])";Show all template type codes and the number of documents using each type.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all template type codes and the number of documents using each type.
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $project: { Template_Type_Code: ""$_id"", count: 1 } }])"
343;medium;cre_Doc_Template_Mgt;SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code;.;.;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $project: { Template_Type_Code: ""$_id"", count: 1 } }])";What are the different template type codes, and how many documents use each type?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the different template type codes, and how many documents use each type?
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $project: { Template_Type_Code: ""$_id"", count: 1 } }])"
344;extra;cre_Doc_Template_Mgt;SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;.;"db.Documents.aggregate([ {$group: {_id: ""$Template_ID"", count: {$sum: 1}}}, {$lookup: { from: ""Templates"", localField: ""_id"", foreignField: ""Template_ID"", as: ""template"" }}, {$unwind: ""$template""}, {$lookup: { from: ""Ref_Template_Types"", localField: ""template.Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""templateType"" }}, {$unwind: ""$templateType""}, {$group: {_id: ""$templateType.Template_Type_Code"", count: {$sum: 1}}}, {$sort: {count: -1}}, {$limit: 1}, {$project: { Template_Type_Code: ""$_id""}} ])";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: ""$_id"" } }])";Which template type code is used by most number of documents?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Which template type code is used by most number of documents?
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: ""$_id"" } }])"
345;extra;cre_Doc_Template_Mgt;SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;"db.Documents.aggregate([ { $group: { _id: ""$Template_ID"", count: { $sum: 1 } } }, { $lookup: { from: ""Templates"", localField: ""_id"", foreignField: ""Template_ID"", as: ""template_info"" } }, { $unwind: ""$template_info"" }, { $group: { _id: ""$template_info.Template_Type_Code"", totalCount: { $sum: ""$count"" } } }, { $sort: { totalCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.Documents.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""template"" } }, { $unwind: ""$template"" }, { $lookup: { from: ""Ref_Template_Types"", localField: ""template.Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""templateType"" } }, { $unwind: ""$templateType"" }, { $group: { _id: ""$templateType.Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Template_Type_Code: ""$_id"" } } ])";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: ""$_id"" } }])";Return the code of the template type that is most commonly used in documents.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the code of the template type that is most commonly used in documents.
";"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { template_type_code: ""$_id"" } }])"
348;medium;cre_Doc_Template_Mgt;SELECT template_type_code , template_type_description FROM Ref_template_types;db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1 });db.Ref_Template_Types.find({}, {Template_Type_Code: 1, Template_Type_Description: 1});db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1});Show all template type codes and descriptions.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all template type codes and descriptions.
";db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1})
349;medium;cre_Doc_Template_Mgt;SELECT template_type_code , template_type_description FROM Ref_template_types;db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1 });db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1 });db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1});What are the type codes and descriptions for all template types?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the type codes and descriptions for all template types?
";db.Ref_Template_Types.find({}, { Template_Type_Code: 1, Template_Type_Description: 1})
350;easy;cre_Doc_Template_Mgt;"SELECT template_type_description FROM Ref_template_types WHERE template_type_code = ""AD""";db.Ref_Template_Types.find({ Template_Type_Code: 'AD' }, { Template_Type_Description: 1 });db.Ref_Template_Types.find({Template_Type_Code: 'AD'}, {Template_Type_Description: 1});db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 });What is the template type descriptions for template type code 'AD'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the template type descriptions for template type code 'AD'.
";db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })
351;easy;cre_Doc_Template_Mgt;"SELECT template_type_description FROM Ref_template_types WHERE template_type_code = ""AD""";db.Ref_Template_Types.find({ Template_Type_Code: 'AD' }, { Template_Type_Description: 1 });"db.Ref_Template_Types.find({ Template_Type_Code: ""AD"" },{ Template_Type_Description: 1 })";db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 });Return the template type description of the template type with the code AD.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the template type description of the template type with the code AD.
";db.Ref_Template_Types.find( { Template_Type_Code: 'AD' }, { Template_Type_Description: 1 })
352;easy;cre_Doc_Template_Mgt;"SELECT template_type_code FROM Ref_template_types WHERE template_type_description = ""Book""";db.Ref_Template_Types.find({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 });db.Ref_Template_Types.find({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 });db.Ref_Template_Types.findOne({Template_Type_Description: 'Book'}, {Template_Type_Code: 1});What is the template type code for template type description 'Book'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the template type code for template type description 'Book'.
";db.Ref_Template_Types.findOne({Template_Type_Description: 'Book'}, {Template_Type_Code: 1})
353;easy;cre_Doc_Template_Mgt;"SELECT template_type_code FROM Ref_template_types WHERE template_type_description = ""Book""";db.Ref_Template_Types.find({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 });.;db.Ref_Template_Types.findOne({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 });Return the type code of the template type with the description 'Book'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the type code of the template type with the description 'Book'.
";db.Ref_Template_Types.findOne({ Template_Type_Description: 'Book' }, { Template_Type_Code: 1 })
354;medium;cre_Doc_Template_Mgt;SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID;"db.Ref_Template_Types.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""Templates"" } }, { $unwind: ""$Templates"" }, { $lookup: { from: ""Documents"", localField: ""Templates.Template_ID"", foreignField: ""Template_ID"", as: ""Documents"" } }, { $match: { ""Documents"": { $exists: true, $not: {$size: 0} } } }, { $group: { _id: ""$Template_Type_Description"" } }, { $project: { Template_Type_Description: ""$_id"" } } ])";.;.;What are the distinct template type descriptions for the templates ever used by any document?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the distinct template type descriptions for the templates ever used by any document?
";"db.Ref_Template_Types.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""Templates"" } }, { $unwind: ""$Templates"" }, { $lookup: { from: ""Documents"", localField: ""Templates.Template_ID"", foreignField: ""Template_ID"", as: ""Documents"" } }, { $match: { ""Documents"": { $exists: true, $not: {$size: 0} } } }, { $group: { _id: ""$Template_Type_Description"" } }, { $project: { Template_Type_Description: ""$_id"" } } ])"
355;medium;cre_Doc_Template_Mgt;SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID;"db.Templates.aggregate([ { $lookup: { from: ""Documents"", localField: ""Template_ID"", foreignField: ""Template_ID"", as: ""Documents"" } }, { $match: { ""Documents"": { $ne: [] } } }, { $lookup: { from: ""Ref_Template_Types"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""TemplateTypes"" } }, { $unwind: ""$TemplateTypes"" }, { $group: { _id: ""$TemplateTypes.Template_Type_Description"" } }, { $project: { template_type_description: ""$_id"" } } ])";.;"db.Ref_Template_Types.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""templates"" } }, { $unwind: ""$templates"" }, { $lookup: { from: ""Documents"", localField: ""templates.Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Description"" } }, { $project: { Template_Type_Description: ""$_id"" } }])";Return the different descriptions for templates that have been used in a document.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the different descriptions for templates that have been used in a document.
";"db.Ref_Template_Types.aggregate([ { $lookup: { from: ""Templates"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""templates"" } }, { $unwind: ""$templates"" }, { $lookup: { from: ""Documents"", localField: ""templates.Template_ID"", foreignField: ""Template_ID"", as: ""documents"" } }, { $unwind: ""$documents"" }, { $group: { _id: ""$Template_Type_Description"" } }, { $project: { Template_Type_Description: ""$_id"" } }])"
356;medium;cre_Doc_Template_Mgt;"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = ""Presentation""";.;"db.Templates.find({""Template_Type_Code"": db.Ref_Template_Types.findOne({""Template_Type_Description"": ""Presentation""})[""Template_Type_Code""]}, { Template_ID: 1 })";"db.Templates.find( { ""Template_Type_Code"": { ""$in"": db.Ref_Template_Types.find( { ""Template_Type_Description"": ""Presentation"" }, { ""Template_Type_Code"": 1, ""_id"": 0 } ).toArray().map(function(doc) { return doc.Template_Type_Code }) } }, { ""Template_ID"": 1, ""_id"": 0 })";What are the template ids with template type description 'Presentation'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the template ids with template type description 'Presentation'.
";"db.Templates.find( { ""Template_Type_Code"": { ""$in"": db.Ref_Template_Types.find( { ""Template_Type_Description"": ""Presentation"" }, { ""Template_Type_Code"": 1, ""_id"": 0 } ).toArray().map(function(doc) { return doc.Template_Type_Code }) } }, { ""Template_ID"": 1, ""_id"": 0 })"
357;medium;cre_Doc_Template_Mgt;"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = ""Presentation""";"db.Templates.aggregate([ { $lookup: { from: ""Ref_Template_Types"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""ref_type"" } }, { $match: { ""ref_type.Template_Type_Description"": ""Presentation"" } }, { $project: { Template_ID: 1 } } ])";.;.;Return the ids corresponding to templates with the description 'Presentation'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the ids corresponding to templates with the description 'Presentation'.
";"db.Templates.aggregate([ { $lookup: { from: ""Ref_Template_Types"", localField: ""Template_Type_Code"", foreignField: ""Template_Type_Code"", as: ""ref_type"" } }, { $match: { ""ref_type.Template_Type_Description"": ""Presentation"" } }, { $project: { Template_ID: 1 } } ])"
360;medium;cre_Doc_Template_Mgt;SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show';"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document"" } }, { $match: { ""document.Document_Name"": ""Summer Show"" } }, { $count: ""paragraph_count"" } ])";.;"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Summer Show"" } }, { $count: ""total"" }])";How many paragraphs for the document with name 'Summer Show'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
How many paragraphs for the document with name 'Summer Show'?
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Summer Show"" } }, { $count: ""total"" }])"
361;medium;cre_Doc_Template_Mgt;SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show';"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document_info"" } }, { $match: { ""document_info.Document_Name"": ""Summer Show"" } }, { $count: ""paragraph_count"" } ])";.;"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Summer Show"" } }, { $count: ""total"" }])";Count the number of paragraphs in the document named 'Summer Show'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Count the number of paragraphs in the document named 'Summer Show'.
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Summer Show"" } }, { $count: ""total"" }])"
364;medium;cre_Doc_Template_Mgt;SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY';db.Paragraphs.aggregate([ { $lookup: { from: 'Documents', localField: 'Document_ID', foreignField: 'Document_ID', as: 'document_info' } }, { $match: { 'document_info.Document_Name': 'Welcome to NY' } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } } ]);"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document"" } }, { $match: { ""document.Document_Name"": ""Welcome to NY"" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } } ])";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Welcome to NY"" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])";Show all paragraph ids and texts for the document with name 'Welcome to NY'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Welcome to NY"" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])"
365;medium;cre_Doc_Template_Mgt;SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY';"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document"" } }, { $match: { ""document.Document_Name"": ""Welcome to NY"" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } } ])";.;"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Welcome to NY"" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])";What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Welcome to NY"" } }, { $project: { Paragraph_ID: 1, Paragraph_Text: 1 } }])"
366;medium;cre_Doc_Template_Mgt;"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = ""Customer reviews""";db.Documents.aggregate([ { $match: { Document_Name: 'Customer reviews' } }, { $lookup: { from: 'Paragraphs', localField: 'Document_ID', foreignField: 'Document_ID', as: 'Paragraphs' } }, { $unwind: '$Paragraphs' }, { $project: { paragraph_text: '$Paragraphs.Paragraph_Text' } } ]);"db.Paragraphs.find( { ""Document_ID"": db.Documents.findOne( { ""Document_Name"": ""Customer reviews"" } ).Document_ID } , { ""Paragraph_Text"": 1 } )";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Customer reviews"" } }, { $project: { Paragraph_Text: 1 } }])";Show all paragraph texts for the document 'Customer reviews'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all paragraph texts for the document 'Customer reviews'.
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Customer reviews"" } }, { $project: { Paragraph_Text: 1 } }])"
367;medium;cre_Doc_Template_Mgt;"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = ""Customer reviews""";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document_info"" } }, { $unwind: ""$document_info"" }, { $match: { ""document_info.Document_Name"": ""Customer reviews"" } }, { $project: { Paragraph_Text: 1 } } ])";db.Paragraphs.find({ Document_ID: (db.Documents.findOne({ Document_Name: 'Customer reviews' })).Document_ID }, { Paragraph_Text: 1 });"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Customer reviews"" } }, { $project: { Paragraph_Text: 1 } }])";What are the paragraph texts for the document with the name 'Customer reviews'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the paragraph texts for the document with the name 'Customer reviews'?
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""documents"" } }, { $match: { ""documents.Document_Name"": ""Customer reviews"" } }, { $project: { Paragraph_Text: 1 } }])"
368;medium;cre_Doc_Template_Mgt;SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", paragraphCount: { $sum: 1 } } }, { $sort: { _id: 1 } }, { $project: { Document_ID: ""$_id"", Paragraph_Count: ""$paragraphCount"" } } ])";.;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $sort: { _id: 1 } }, { $project: { document_id: ""$_id"", count: 1 } }])";Show all document ids and the number of paragraphs in each document. Order by document id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all document ids and the number of paragraphs in each document. Order by document id.
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $sort: { _id: 1 } }, { $project: { document_id: ""$_id"", count: 1 } }])"
369;medium;cre_Doc_Template_Mgt;SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", numberOfParagraphs: { $sum: 1 } } }, { $sort: { _id: 1 } } ])";.;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $sort: { _id: 1 } }])";Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $sort: { _id: 1 } }])"
370;medium;cre_Doc_Template_Mgt;SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id;"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document_info"" } }, { $unwind: ""$document_info"" }, { $group: { _id: ""$Document_ID"", document_name: { $first: ""$document_info.Document_Name"" }, number_of_paragraphs: { $sum: 1 } } }, { $project: { document_id: ""$_id"", document_name: 1, number_of_paragraphs: 1 } } ])";.;.;Show all document ids, names and the number of paragraphs in each document.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show all document ids, names and the number of paragraphs in each document.
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""document_info"" } }, { $unwind: ""$document_info"" }, { $group: { _id: ""$Document_ID"", document_name: { $first: ""$document_info.Document_Name"" }, number_of_paragraphs: { $sum: 1 } } }, { $project: { document_id: ""$_id"", document_name: 1, number_of_paragraphs: 1 } } ])"
371;medium;cre_Doc_Template_Mgt;SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id;"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""DocumentInfo"" } }, { $unwind: ""$DocumentInfo"" }, { $group: { _id: ""$Document_ID"", Document_Name: { $first: ""$DocumentInfo.Document_Name"" }, NumberOfParagraphs: { $count: {} } } }, { $project: { Document_ID: ""$_id"", Document_Name: 1, NumberOfParagraphs: 1 } } ])";.;.;What are the ids and names of each document, as well as the number of paragraphs in each?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids and names of each document, as well as the number of paragraphs in each?
";"db.Paragraphs.aggregate([ { $lookup: { from: ""Documents"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""DocumentInfo"" } }, { $unwind: ""$DocumentInfo"" }, { $group: { _id: ""$Document_ID"", Document_Name: { $first: ""$DocumentInfo.Document_Name"" }, NumberOfParagraphs: { $count: {} } } }, { $project: { Document_ID: ""$_id"", Document_Name: 1, NumberOfParagraphs: 1 } } ])"
372;easy;cre_Doc_Template_Mgt;SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $project: { Document_ID: ""$_id"" }} ])";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: ""$_id"" } } ])";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])";List all document ids with at least two paragraphs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
List all document ids with at least two paragraphs.
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])"
373;easy;cre_Doc_Template_Mgt;SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", paragraphCount: { $sum: 1 } } }, { $match: { paragraphCount: { $gte: 2 } } }, { $project: { document_id: ""$_id"" } } ])";.;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])";What are the ids of documents that have 2 or more paragraphs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids of documents that have 2 or more paragraphs?
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])"
374;extra;cre_Doc_Template_Mgt;SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: ""Documents"", localField: ""_id"", foreignField: ""Document_ID"", as: ""document_details"" }}, { $unwind: ""$document_details""}, { $project: { document_id: ""$_id"", document_name: ""$document_details.Document_Name"" }} ])";"db.Documents.aggregate([ { $lookup: { from: ""Paragraphs"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""paragraphs"" } }, { $project: { Document_ID: 1, Document_Name: 1, Num_Paragraphs: { $size: ""$paragraphs"" } } }, { $sort: { Num_Paragraphs: -1 } }, { $limit: 1 }, { $project: { Document_ID: 1, Document_Name: 1 } } ])";.;What is the document id and name with greatest number of paragraphs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the document id and name with greatest number of paragraphs?
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: ""Documents"", localField: ""_id"", foreignField: ""Document_ID"", as: ""document_details"" }}, { $unwind: ""$document_details""}, { $project: { document_id: ""$_id"", document_name: ""$document_details.Document_Name"" }} ])"
375;extra;cre_Doc_Template_Mgt;SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Documents"", localField: ""_id"", foreignField: ""Document_ID"", as: ""documentDetails"" } }, { $unwind: ""$documentDetails"" }, { $project: { document_id: ""$_id"", document_name: ""$documentDetails.Document_Name"" } } ])";"db.Documents.aggregate([ { $lookup: { from: ""Paragraphs"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""paragraphs"" } }, { $project: { Document_ID: 1, Document_Name: 1, Paragraph_Count: { $size: ""$paragraphs"" } } }, { $sort: { Paragraph_Count: -1 } }, { $limit: 1 }, { $project: { _id: ""$Document_ID"", Document_Name: 1 } } ])";.;Return the id and name of the document with the most paragraphs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Return the id and name of the document with the most paragraphs.
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Documents"", localField: ""_id"", foreignField: ""Document_ID"", as: ""documentDetails"" } }, { $unwind: ""$documentDetails"" }, { $project: { document_id: ""$_id"", document_name: ""$documentDetails.Document_Name"" } } ])"
378;easy;cre_Doc_Template_Mgt;SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", paragraphCount: { $sum: 1 } } }, { $match: { paragraphCount: { $gte: 1, $lte: 2 } } }, { $project: { document_id: ""$_id"" } } ])";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { _id: 1 } } ])";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])";What is the document id with 1 to 2 paragraphs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What is the document id with 1 to 2 paragraphs?
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])"
379;easy;cre_Doc_Template_Mgt;SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: '$_id' } } ])";.;"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])";Give the ids of documents that have between one and two paragraphs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Give the ids of documents that have between one and two paragraphs.
";"db.Paragraphs.aggregate([ { $group: { _id: ""$Document_ID"", count: { $sum: 1 } } }, { $match: { count: { $gte: 1, $lte: 2 } } }, { $project: { Document_ID: ""$_id"" } }])"
380;hard;cre_Doc_Template_Mgt;SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland';"db.Paragraphs.aggregate([ { $match: { $or: [{ Paragraph_Text: 'Brazil' }, { Paragraph_Text: 'Ireland' }] } }, { $group: { _id: ""$Document_ID"", countries: { $addToSet: ""$Paragraph_Text"" } } }, { $match: { countries: { $all: ['Brazil', 'Ireland'] } } }, { $project: { Document_ID: ""$_id"" } } ])";.;.;Show the document id with paragraph text 'Brazil' and 'Ireland'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
Show the document id with paragraph text 'Brazil' and 'Ireland'.
";"db.Paragraphs.aggregate([ { $match: { $or: [{ Paragraph_Text: 'Brazil' }, { Paragraph_Text: 'Ireland' }] } }, { $group: { _id: ""$Document_ID"", countries: { $addToSet: ""$Paragraph_Text"" } } }, { $match: { countries: { $all: ['Brazil', 'Ireland'] } } }, { $project: { Document_ID: ""$_id"" } } ])"
381;hard;cre_Doc_Template_Mgt;SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland';.;"db.Documents.aggregate([ { $lookup: { from: ""Paragraphs"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""paragraphs"" } }, { $match: { ""paragraphs.Paragraph_Text"": { $all: [""Brazil"", ""Ireland""]} } }, { $project: { _id: ""$Document_ID"" } } ])";.;What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Template_Types(Template_Type_Code, Template_Type_Description)
Templates(Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)
Documents(Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)
Paragraphs(Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)
Foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID
Question:
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
";"db.Documents.aggregate([ { $lookup: { from: ""Paragraphs"", localField: ""Document_ID"", foreignField: ""Document_ID"", as: ""paragraphs"" } }, { $match: { ""paragraphs.Paragraph_Text"": { $all: [""Brazil"", ""Ireland""]} } }, { $project: { _id: ""$Document_ID"" } } ])"
384;easy;course_teach;SELECT Name FROM teacher ORDER BY Age ASC;db.teacher.find({}, { Name: 1 }).sort({ Age: 1 });db.teacher.find({}, {Name: 1}).sort({Age: 1});db.teacher.find({}, {Name: 1}).sort({Age: 1});List the names of teachers in ascending order of age.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
List the names of teachers in ascending order of age.
";db.teacher.find({}, {Name: 1}).sort({Age: 1})
385;easy;course_teach;SELECT Name FROM teacher ORDER BY Age ASC;db.teacher.find({}, { Name: 1 }).sort({ Age: 1 });db.teacher.aggregate([ { $sort: { Age: 1 } }, { $project: { Name: 1 }} ]);db.teacher.find({}, {Name: 1}).sort({Age: 1});What are the names of the teachers ordered by ascending age?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the teachers ordered by ascending age?
";db.teacher.find({}, {Name: 1}).sort({Age: 1})
386;medium;course_teach;SELECT Age , Hometown FROM teacher;db.teacher.find({}, {Age: 1, Hometown: 1});db.teacher.aggregate([ { $project: { Age: 1, Hometown: 1 } } ]);db.teacher.find({}, {Age: 1, Hometown: 1});What are the age and hometown of teachers?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the age and hometown of teachers?
";db.teacher.find({}, {Age: 1, Hometown: 1})
387;medium;course_teach;SELECT Age , Hometown FROM teacher;db.teacher.find({}, { Age: 1, Hometown: 1 });db.teacher.find({}, {Age: 1, Hometown: 1});db.teacher.aggregate([ { $project: { Age: 1, Hometown: 1 } }]);What is the age and hometown of every teacher?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What is the age and hometown of every teacher?
";db.teacher.aggregate([ { $project: { Age: 1, Hometown: 1 } }])
388;easy;course_teach;"select name from teacher where hometown != ""little lever urban district""";.;.;db.teacher.find({ hometown: { $ne: 'Little Lever Urban District' } }, { Name: 1 });List the name of teachers whose hometown is not `` Little Lever Urban District '' .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
";db.teacher.find({ hometown: { $ne: 'Little Lever Urban District' } }, { Name: 1 })
389;easy;course_teach;"select name from teacher where hometown != ""little lever urban district""";"db.teacher.find({hometown: {$ne: ""Little Lever Urban District""}}, {Name: 1})";.;db.teacher.find({hometown: {$ne: 'Little Lever Urban District'}}, { Name: 1});What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
";db.teacher.find({hometown: {$ne: 'Little Lever Urban District'}}, { Name: 1})
392;medium;course_teach;SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;db.teacher.find({}, { Hometown: 1 }).sort({ Age: 1 }).limit(1);.;db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1);What is the hometown of the youngest teacher?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What is the hometown of the youngest teacher?
";db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1)
393;medium;course_teach;SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;db.teacher.find({}, { Hometown: 1 }).sort({ Age: 1 }).limit(1);.;db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1);Where is the youngest teacher from?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Where is the youngest teacher from?
";db.teacher.find({}, {Hometown: 1}).sort({Age: 1}).limit(1)
394;medium;course_teach;SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown;"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } }} ])";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } }} ])";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } }, { $project: { Hometown: ""$_id"", count: 1 } }])";Show different hometown of teachers and the number of teachers from each hometown.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Show different hometown of teachers and the number of teachers from each hometown.
";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } }, { $project: { Hometown: ""$_id"", count: 1 } }])"
395;medium;course_teach;SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown;"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } } ])";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } } ])";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } }])";For each hometown, how many teachers are there?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
For each hometown, how many teachers are there?
";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } }])"
397;hard;course_teach;SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;.;What is the most commmon hometowns for teachers?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What is the most commmon hometowns for teachers?
";"db.teacher.aggregate([ { $group: { _id: ""$Hometown"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])"
400;medium;course_teach;SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID;"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $unwind: ""$arrangements"" }, { $lookup: { from: ""course"", localField: ""arrangements.Course_ID"", foreignField: ""Course_ID"", as: ""course_details"" } }, { $unwind: ""$course_details"" }, { $project: { Name: 1, Course: ""$course_details.Course"" } } ])";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arranged_courses"" } }, { $unwind: ""$arranged_courses"" }, { $lookup: { from: ""course"", localField: ""arranged_courses.Course_ID"", foreignField: ""Course_ID"", as: ""course"" } }, { $project: { Teacher_Name: ""$Name"", Course: { $arrayElemAt: [""$course.Course"", 0] } } } ])";.;Show names of teachers and the courses they are arranged to teach.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Show names of teachers and the courses they are arranged to teach.
";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $unwind: ""$arrangements"" }, { $lookup: { from: ""course"", localField: ""arrangements.Course_ID"", foreignField: ""Course_ID"", as: ""course_details"" } }, { $unwind: ""$course_details"" }, { $project: { Name: 1, Course: ""$course_details.Course"" } } ])"
401;medium;course_teach;SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID;.;"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""courses"" } }, { $unwind: ""$courses"" }, { $lookup: { from: ""course"", localField: ""courses.Course_ID"", foreignField: ""Course_ID"", as: ""course"" } }, { $unwind: ""$course"" }, { $project: { Name: 1, Course: ""$course.Course"" } } ])";.;What is the name of each teacher and what course they teach?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What is the name of each teacher and what course they teach?
";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""courses"" } }, { $unwind: ""$courses"" }, { $lookup: { from: ""course"", localField: ""courses.Course_ID"", foreignField: ""Course_ID"", as: ""course"" } }, { $unwind: ""$course"" }, { $project: { Name: 1, Course: ""$course.Course"" } } ])"
402;hard;course_teach;SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name;"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $unwind: ""$arrangements"" }, { $lookup: { from: ""course"", localField: ""arrangements.Course_ID"", foreignField: ""Course_ID"", as: ""courses"" } }, { $unwind: ""$courses"" }, { $sort: { ""Name"": 1 } }, { $project: { ""Name"": 1, ""Course"": ""$courses.Course"" } } ])";.;"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$course_info"" }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"", Course: ""$course_info.Course"" } }, { $sort: { Name: 1 } }])";Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
";"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$course_info"" }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"", Course: ""$course_info.Course"" } }, { $sort: { Name: 1 } }])"
403;hard;course_teach;SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name;"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $unwind: ""$course_info"" }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $project: { ""Name"": ""$teacher_info.Name"", ""Course"": ""$course_info.Course"" } }, { $sort: { ""Name"": 1 } } ])";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arranged_courses"" } }, { $unwind: ""$arranged_courses"" }, { $lookup: { from: ""course"", localField: ""arranged_courses.Course_ID"", foreignField: ""Course_ID"", as: ""course_details"" } }, { $unwind: ""$course_details"" }, { $project: { Name: 1, Course: ""$course_details.Course"" } }, { $sort: { Name: 1 } } ])";"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$course_info"" }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"", Course: ""$course_info.Course"" } }, { $sort: { Name: 1 } }])";What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
";"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$course_info"" }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"", Course: ""$course_info.Course"" } }, { $sort: { Name: 1 } }])"
404;hard;course_teach;"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = ""Math""";.;.;"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $unwind: ""$course_info"" }, { $match: { ""course_info.Course"": ""Math"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"" } }])";Show the name of the teacher for the math course.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Show the name of the teacher for the math course.
";"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $unwind: ""$course_info"" }, { $match: { ""course_info.Course"": ""Math"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"" } }])"
405;hard;course_teach;"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = ""Math""";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $unwind: ""$arrangements"" }, { $lookup: { from: ""course"", localField: ""arrangements.Course_ID"", foreignField: ""Course_ID"", as: ""courses"" } }, { $unwind: ""$courses"" }, { $match: { ""courses.Course"": ""Math"" } }, { $project: { Name: 1 } } ])";.;"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $unwind: ""$course_info"" }, { $match: { ""course_info.Course"": ""Math"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"" } }])";What are the names of the people who teach math courses?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the people who teach math courses?
";"db.course_arrange.aggregate([ { $lookup: { from: ""course"", localField: ""Course_ID"", foreignField: ""Course_ID"", as: ""course_info"" } }, { $unwind: ""$course_info"" }, { $match: { ""course_info.Course"": ""Math"" } }, { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $project: { Name: ""$teacher_info.Name"" } }])"
406;medium;course_teach;SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;.;.;"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $project: { Name: ""$_id"", NumberOfCourses: ""$count"" } }])";Show names of teachers and the number of courses they teach.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Show names of teachers and the number of courses they teach.
";"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $project: { Name: ""$_id"", NumberOfCourses: ""$count"" } }])"
407;medium;course_teach;SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", courses_taught: { $sum: 1 } } }, { $project: { Name: ""$_id"", Course_Count: ""$courses_taught"" } } ])";.;"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $project: { Name: ""$_id"", Count: ""$count"" } }])";What are the names of the teachers and how many courses do they teach?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the teachers and how many courses do they teach?
";"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $project: { Name: ""$_id"", Count: ""$count"" } }])"
408;medium;course_teach;SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2;"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""courses"" } }, { $match: { ""courses.1"": { $exists: true } } }, { $project: { Name: 1 } } ])";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""courses"" } }, { $match: { ""courses.Course_ID"": { $exists: true } } }, { $group: { _id: ""$Teacher_ID"", Name: { $first: ""$Name"" }, numCourses: { $sum: { $size: ""$courses"" } } } }, { $match: { numCourses: { $gte: 2 } } }, { $project: { Name: 1 } } ])";"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: ""$_id"" } }])";Show names of teachers that teach at least two courses.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
Show names of teachers that teach at least two courses.
";"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: ""$_id"" } }])"
409;medium;course_teach;SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2;"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""courses_taught"" } }, { $match: { ""courses_taught.1"": { $exists: true } } }, { $project: { Name: 1 } } ])";.;"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: ""$_id"" } }])";What are the names of the teachers who teach at least two courses?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the teachers who teach at least two courses?
";"db.course_arrange.aggregate([ { $lookup: { from: ""teacher"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""teacher_info"" } }, { $unwind: ""$teacher_info"" }, { $group: { _id: ""$teacher_info.Name"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: ""$_id"" } }])"
410;hard;course_teach;SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $match: { ""arrangements"": { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.teacher.find({Teacher_ID: {$nin: db.course_arrange.distinct(""Teacher_ID"")}}, {Name: 1})";.;List the names of teachers who have not been arranged to teach courses.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
List the names of teachers who have not been arranged to teach courses.
";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $match: { ""arrangements"": { $size: 0 } } }, { $project: { Name: 1 } } ])"
411;hard;course_teach;SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $match: { arrangements: { $size: 0 } } }, { $project: { Name: 1 } } ])";.;.;What are the names of the teachers whose courses have not been arranged?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
course(Course_ID, Staring_Date, Course)
teacher(Teacher_ID, Name, Age, Hometown)
course_arrange(Course_ID, Teacher_ID, Grade)
Foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID
Question:
What are the names of the teachers whose courses have not been arranged?
";"db.teacher.aggregate([ { $lookup: { from: ""course_arrange"", localField: ""Teacher_ID"", foreignField: ""Teacher_ID"", as: ""arrangements"" } }, { $match: { arrangements: { $size: 0 } } }, { $project: { Name: 1 } } ])"
413;medium;museum_visit;SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;db.visitor.find({ Level_of_membership: { $gt: 4 } }, { Name: 1 }).sort({ Level_of_membership: -1 });"db.visitor.aggregate([ { $match: { Level_of_membership: {""$gt"": 4} } }, { $sort : {""Level_of_membership"": -1} }, { $project: { ""Name"": 1} } ])";db.visitor.find( {Level_of_membership: {$gt: 4}}, { Name: 1}).sort({Level_of_membership: -1});Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
";db.visitor.find( {Level_of_membership: {$gt: 4}}, { Name: 1}).sort({Level_of_membership: -1})
414;easy;museum_visit;SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4;"db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $project: { averageAge: 1 } } ])";"db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, avgAge: { $avg: ""$Age"" } } }, { $project: { avgAge: 1 } } ])";"db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $project: { avg: ""$averageAge"" } }])";What is the average age of the visitors whose membership level is not higher than 4?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
What is the average age of the visitors whose membership level is not higher than 4?
";"db.visitor.aggregate([ { $match: { Level_of_membership: { $lte: 4 } } }, { $group: { _id: null, averageAge: { $avg: ""$Age"" } } }, { $project: { avg: ""$averageAge"" } }])"
415;medium;museum_visit;SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC;db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 } ).sort({ Age: -1 });db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 }, ).sort({ Age: -1 });db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 }).sort({ Age: -1 });Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
";db.visitor.find( { Level_of_membership: { $gt: 4 } }, { Name: 1, Level_of_membership: 1 }).sort({ Age: -1 })
416;medium;museum_visit;SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1;db.museum.find({}, { Museum_ID: 1, Name: 1 }).sort({ Num_of_Staff: -1 }).limit(1);.;.;Find the id and name of the museum that has the most staff members?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
Find the id and name of the museum that has the most staff members?
";db.museum.find({}, { Museum_ID: 1, Name: 1 }).sort({ Num_of_Staff: -1 }).limit(1)
418;medium;museum_visit;SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum';"db.museum.find({ Name: ""Plaza Museum"" }, { Num_of_Staff: 1, Open_Year: 1 })";"db.museum.find({Name: ""Plaza Museum""}, {Open_Year: 1, Num_of_Staff: 1})";"db.museum.find( { Name: ""Plaza Museum"" }, { Num_of_Staff: 1, Open_Year: 1 })";What are the opening year and staff number of the museum named Plaza Museum?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
What are the opening year and staff number of the museum named Plaza Museum?
";"db.museum.find( { Name: ""Plaza Museum"" }, { Num_of_Staff: 1, Open_Year: 1 })"
422;extra;museum_visit;SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1;.;"db.visit.aggregate([ { $group: { _id: ""$Museum_ID"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $lookup: { from: ""museum"", localField: ""_id"", foreignField: ""Museum_ID"", as: ""museum"" } }, { $project: { _id: 1, name: { $arrayElemAt: [""$museum.Name"", 0] } } }, { $limit: 1 } ])";.;What are the id and name of the museum visited most times?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
What are the id and name of the museum visited most times?
";"db.visit.aggregate([ { $group: { _id: ""$Museum_ID"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $lookup: { from: ""museum"", localField: ""_id"", foreignField: ""Museum_ID"", as: ""museum"" } }, { $project: { _id: 1, name: { $arrayElemAt: [""$museum.Name"", 0] } } }, { $limit: 1 } ])"
423;hard;museum_visit;SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit);"db.museum.aggregate([ { $lookup: { from: ""visit"", localField: ""Museum_ID"", foreignField: ""Museum_ID"", as: ""visitors"" } }, { $match: { visitors: { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.museum.find({ ""Museum_ID"": { $nin: db.visit.distinct(""Museum_ID"") } }, { ""Name"": 1, ""_id"": 0 })";"db.museum.find( { Museum_ID: { $nin: db.visit.distinct(""Museum_ID"") } }, { Name: 1 })";What is the name of the museum that had no visitor yet?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
What is the name of the museum that had no visitor yet?
";"db.museum.find( { Museum_ID: { $nin: db.visit.distinct(""Museum_ID"") } }, { Name: 1 })"
425;medium;museum_visit;SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit;"db.visit.aggregate([ { $group: { _id: null, averageNumberOfTickets: { $avg: ""$Num_of_Ticket"" }, maxNumberOfTickets: { $max: ""$Num_of_Ticket"" } } }, { $project: { averageNumberOfTickets: 1, maxNumberOfTickets: 1 } } ])";"db.visit.aggregate([ { $group: { _id: null, avgNumOfTickets: { $avg: ""$Num_of_Ticket"" }, maxNumOfTickets: { $max: ""$Num_of_Ticket"" } } }, { $project: { avgNumOfTickets: 1, maxNumOfTickets: 1 } } ])";"db.visit.aggregate([ { $group: { _id: null, avgNumOfTicket: { $avg: ""$Num_of_Ticket"" }, maxNumOfTicket: { $max: ""$Num_of_Ticket"" } } }, { $project: { avgNumOfTicket: 1, maxNumOfTicket: 1 } }])";What are the average and maximum number of tickets bought in all visits?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
museum(Museum_ID, Name, Num_of_Staff, Open_Year)
visitor(ID, Name, Level_of_membership, Age)
visit(Museum_ID, visitor_ID, Num_of_Ticket, Total_spent)
Foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID
Question:
What are the average and maximum number of tickets bought in all visits?
";"db.visit.aggregate([ { $group: { _id: null, avgNumOfTicket: { $avg: ""$Num_of_Ticket"" }, maxNumOfTicket: { $max: ""$Num_of_Ticket"" } } }, { $project: { avgNumOfTicket: 1, maxNumOfTicket: 1 } }])"
438;easy;wta_1;SELECT avg(winner_rank) FROM matches;"db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: ""$winner_rank"" } } }, { $project: { averageRank: 1 } } ])";.;"db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: ""$winner_rank"" } } }, { $project: { avg: ""$averageRank"" } }])";Find the average rank of winners in all matches.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the average rank of winners in all matches.
";"db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: ""$winner_rank"" } } }, { $project: { avg: ""$averageRank"" } }])"
439;easy;wta_1;SELECT avg(winner_rank) FROM matches;"db.matches.aggregate([ { $group: { _id: null, averageWinnerRank: { $avg: ""$winner_rank"" } } }, { $project: { averageWinnerRank: 1 } } ])";.;"db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: ""$winner_rank"" } } }, { $project: { avg: ""$averageRank"" } }])";What is the average rank for winners in all matches?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the average rank for winners in all matches?
";"db.matches.aggregate([ { $group: { _id: null, averageRank: { $avg: ""$winner_rank"" } } }, { $project: { avg: ""$averageRank"" } }])"
440;easy;wta_1;SELECT min(loser_rank) FROM matches;"db.matches.aggregate([ { $group: { _id: null, highestRank: { $min: ""$loser_rank"" } } }, { $project: { highestRank: 1 } } ])";.;"db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: ""$loser_rank"" } } }, { $project: { min: ""$min_loser_rank"" } }])";Find the highest rank of losers in all matches.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the highest rank of losers in all matches.
";"db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: ""$loser_rank"" } } }, { $project: { min: ""$min_loser_rank"" } }])"
441;easy;wta_1;SELECT min(loser_rank) FROM matches;"db.matches.aggregate([ { $group: { _id: null, bestRank: { $min: ""$loser_rank"" } } }, { $project: { bestRank: 1 } } ])";"db.matches.aggregate([ { $group: { _id: ""$loser_id"", best_rank: { $min: ""$loser_rank"" } } }, { $match: { _id: { $ne: null } } }, { $sort: { best_rank: 1 } }, { $limit: 1 }, { $project: { best_rank: 1 } } ])";"db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: ""$loser_rank"" } } }, { $project: { min: ""$min_loser_rank"" } }])";What is the best rank of losers across all matches?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the best rank of losers across all matches?
";"db.matches.aggregate([ { $group: { _id: null, min_loser_rank: { $min: ""$loser_rank"" } } }, { $project: { min: ""$min_loser_rank"" } }])"
445;easy;wta_1;SELECT count(DISTINCT loser_name) FROM matches;"db.matches.aggregate([ { $group: { _id: ""$loser_name"" } }, { $count: ""distinct_loser_names"" } ])";.;.;How many different loser names are there?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
How many different loser names are there?
";"db.matches.aggregate([ { $group: { _id: ""$loser_name"" } }, { $count: ""distinct_loser_names"" } ])"
446;easy;wta_1;SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;"db.matches.aggregate([ { $group: { _id: ""$tourney_name"", totalMatches: { $sum: 1 } } }, { $match: { totalMatches: { $gt: 10 } } }, { $project: { tourney_name: ""$_id"" } } ])";.;"db.matches.aggregate([ { $group: { _id: ""$tourney_name"", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: ""$_id"" } }])";Find the name of tourney that has more than 10 matches.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the name of tourney that has more than 10 matches.
";"db.matches.aggregate([ { $group: { _id: ""$tourney_name"", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: ""$_id"" } }])"
447;easy;wta_1;SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;"db.matches.aggregate([ { $group: { _id: ""$tourney_name"", matchesCount: { $sum: 1 } } }, { $match: { matchesCount: { $gt: 10 } } }, { $project: { tourney_name: ""$_id"" } } ])";"db.matches.aggregate([ {$group: {_id: ""$tourney_name"", count: {$sum: 1}}}, {$match: {count: {$gt: 10}}}, {$project: { tourney_name: ""$_id""}} ])";"db.matches.aggregate([ { $group: { _id: ""$tourney_name"", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: ""$_id"" } }])";What are the names of tournaments that have more than 10 matches?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What are the names of tournaments that have more than 10 matches?
";"db.matches.aggregate([ { $group: { _id: ""$tourney_name"", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { tourney_name: ""$_id"" } }])"
448;hard;wta_1;SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016;"db.matches.aggregate([ { $match: { year: { $in: [2013, 2016] } } }, { $group: { _id: ""$winner_id"", years: { $addToSet: ""$year"" }, winner_name: { $first: ""$winner_name"" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: 1 } } ])";"db.matches.aggregate([ { $match: { $or: [{year: 2013}, {year: 2016}] } }, { $group: { _id: ""$winner_id"", years: { $addToSet: ""$year"" } } }, { $match: { years: { $size: 2 } } }, { $lookup: { from: ""players"", localField: ""_id"", foreignField: ""player_id"", as: ""player"" } }, { $unwind: ""$player"" }, { $project: { winner_name: { $concat: [""$player.first_name"", "" "", ""$player.last_name""] } } } ])";.;List the names of all winners who played in both 2013 and 2016.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
List the names of all winners who played in both 2013 and 2016.
";"db.matches.aggregate([ { $match: { year: { $in: [2013, 2016] } } }, { $group: { _id: ""$winner_id"", years: { $addToSet: ""$year"" }, winner_name: { $first: ""$winner_name"" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: 1 } } ])"
449;hard;wta_1;SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016;"db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $group: { _id: ""$winner_id"", years: { $addToSet: ""$year"" }, names: { $first: ""$winner_name"" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: ""$names"" } } ])";"db.matches.aggregate([ { $match: { year: { $in: [2013, 2016] } } }, { $group: { _id: ""$winner_name"", years: { $addToSet: ""$year"" } } }, { $match: { years: { $size: 2 } } }, { $project: { winner_name: ""$_id"" } } ])";.;What are the names of players who won in both 2013 and 2016?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What are the names of players who won in both 2013 and 2016?
";"db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $group: { _id: ""$winner_id"", years: { $addToSet: ""$year"" }, names: { $first: ""$winner_name"" } } }, { $match: { years: { $all: [2013, 2016] } } }, { $project: { winner_name: ""$names"" } } ])"
451;medium;wta_1;SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;"db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $count: ""total_matches"" } ])";.;.;How many matches were played in 2013 or 2016?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
How many matches were played in 2013 or 2016?
";"db.matches.aggregate([ { $match: { $or: [{ year: 2013 }, { year: 2016 }] } }, { $count: ""total_matches"" } ])"
453;extra;wta_1;SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open';"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""matches_won"" } }, { $match: { ""matches_won.tourney_name"": { $all: [""WTA Championships"", ""Australian Open""] } } }, { $project: { first_name: 1, country_code: 1 } } ])";.;.;What are the first names and country codes for players who won both the WTA Championships and the Australian Open?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
";"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""matches_won"" } }, { $match: { ""matches_won.tourney_name"": { $all: [""WTA Championships"", ""Australian Open""] } } }, { $project: { first_name: 1, country_code: 1 } } ])"
454;medium;wta_1;SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1;db.players.find({}, { first_name: 1, country_code: 1 }).sort({ birth_date: 1 }).limit(1);.;db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1);Find the first name and country code of the oldest player.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the first name and country code of the oldest player.
";db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1)
455;medium;wta_1;SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1;db.players.find({}, { first_name: 1, country_code: 1 }).sort({ birth_date: 1 }).limit(1);db.players.aggregate([ { $sort: { birth_date: 1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1 } } ]);db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1);What is the first name and country code of the oldest player?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the first name and country code of the oldest player?
";db.players.find({}, {first_name: 1, country_code: 1}).sort({birth_date: 1}).limit(1)
462;hard;wta_1;SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"db.matches.aggregate([ { $group: { _id: ""$year"", totalMatches: { $sum: 1 } } }, { $sort: { totalMatches: -1 } }, { $limit: 1 }, { $project: { year: ""$_id"" } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { count: 0 } } ])";.;Find the year that has the most number of matches.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the year that has the most number of matches.
";"db.matches.aggregate([ { $group: { _id: ""$year"", totalMatches: { $sum: 1 } } }, { $sort: { totalMatches: -1 } }, { $limit: 1 }, { $project: { year: ""$_id"" } } ])"
463;hard;wta_1;SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: ""$_id"" } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { count: 0 } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: ""$_id"" } }])";Which year had the most matches?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Which year had the most matches?
";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: ""$_id"" } }])"
464;hard;wta_1;SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;"db.matches.aggregate([ { $group: { _id: ""$winner_name"", count: { $sum: 1 }, winner_rank_points: { $first: ""$winner_rank_points"" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: ""$_id"", winner_rank_points: 1 } } ])";.;.;Find the name and rank points of the winner who won the most times.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the name and rank points of the winner who won the most times.
";"db.matches.aggregate([ { $group: { _id: ""$winner_name"", count: { $sum: 1 }, winner_rank_points: { $first: ""$winner_rank_points"" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: ""$_id"", winner_rank_points: 1 } } ])"
465;hard;wta_1;SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;.;.;"db.matches.aggregate([ { $group: { _id: ""$winner_name"", count: { $sum: 1 }, rank_points: { $first: ""$winner_rank_points"" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: ""$_id"", winner_rank_points: ""$rank_points"" } }])";What is the name of the winner who has won the most matches, and how many rank points does this player have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the name of the winner who has won the most matches, and how many rank points does this player have?
";"db.matches.aggregate([ { $group: { _id: ""$winner_name"", count: { $sum: 1 }, rank_points: { $first: ""$winner_rank_points"" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { winner_name: ""$_id"", winner_rank_points: ""$rank_points"" } }])"
466;hard;wta_1;SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;db.matches.find({ tourney_name: 'Australian Open' }, { winner_name: 1 }).sort({ winner_rank_points: -1 }).limit(1);"db.matches.aggregate([ { $match: { tourney_name: ""Australian Open"" } }, { $lookup: { from: ""rankings"", localField: ""winner_id"", foreignField: ""player_id"", as: ""winner_rankings"" } }, { $unwind: ""$winner_rankings"" }, { $sort: { ""winner_rankings.ranking_points"": -1 } }, { $limit: 1 }, { $lookup: { from: ""players"", localField: ""winner_id"", foreignField: ""player_id"", as: ""winner_info"" } }, { $unwind: ""$winner_info"" }, { $project: { ""winner_name"": { $concat: [ ""$winner_info.first_name"", "" "", ""$winner_info.last_name"" ] } } } ])";"db.matches.aggregate([ { $match: { tourney_name: ""Australian Open"" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])";Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
";"db.matches.aggregate([ { $match: { tourney_name: ""Australian Open"" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])"
467;hard;wta_1;SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;db.matches.find({ tourney_name: 'Australian Open' }, { winner_name: 1 }).sort({ winner_rank_points: -1 }).limit(1);.;"db.matches.aggregate([ { $match: { tourney_name: ""Australian Open"" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])";What is the name of the winner with the most rank points who participated in the Australian Open tournament?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
";"db.matches.aggregate([ { $match: { tourney_name: ""Australian Open"" } }, { $sort: { winner_rank_points: -1 } }, { $limit: 1 }, { $project: { winner_name: 1 } }])"
468;medium;wta_1;SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1;db.matches.find({}, { winner_name: 1, loser_name: 1 }).sort({ minutes: -1 }).limit(1);.;.;find the names of loser and winner who played in the match with greatest number of minutes.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
find the names of loser and winner who played in the match with greatest number of minutes.
";db.matches.find({}, { winner_name: 1, loser_name: 1 }).sort({ minutes: -1 }).limit(1)
469;medium;wta_1;SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1;db.matches.find({}, {winner_name: 1, loser_name: 1}).sort({minutes: -1}).limit(1);"db.matches.aggregate([ { $sort: { ""minutes"": -1 } }, { $limit: 1 }, { $project: { ""winner_name"": 1, ""loser_name"": 1 } } ])";"db.matches.aggregate([ { $sort: { ""minutes"": -1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""winner_name"": 1, ""loser_name"": 1 } }])";What are the names of the winner and loser who played in the longest match?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What are the names of the winner and loser who played in the longest match?
";"db.matches.aggregate([ { $sort: { ""minutes"": -1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""winner_name"": 1, ""loser_name"": 1 } }])"
476;hard;wta_1;SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;"db.players.aggregate([ { $group: { _id: ""$country_code"", num_players: { $sum: 1 } } }, { $sort: { num_players: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: ""$_id"" } } ])";"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: ""$_id"" } }])";find the code of the country where has the greatest number of players.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
find the code of the country where has the greatest number of players.
";"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: ""$_id"" } }])"
477;hard;wta_1;SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: ""$_id"" } } ])";"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: ""$_id"" } }])";What is the code of the country with the most players?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the code of the country with the most players?
";"db.players.aggregate([ { $group: { _id: ""$country_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country_code: ""$_id"" } }])"
482;medium;wta_1;SELECT count(*) , YEAR FROM matches GROUP BY YEAR;"db.matches.aggregate([ { $group: { _id: ""$year"", totalMatches: { $sum: 1 } } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }])";Find the number of matches happened in each year.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the number of matches happened in each year.
";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }])"
483;medium;wta_1;SELECT count(*) , YEAR FROM matches GROUP BY YEAR;"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $project: { year: ""$_id"", count: 1 } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", num_matches: { $sum: 1 } } }, { $project: { year: ""$_id"", num_matches: 1 } } ])";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }])";How many matches were played in each year?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
How many matches were played in each year?
";"db.matches.aggregate([ { $group: { _id: ""$year"", count: { $sum: 1 } } }])"
484;medium;wta_1;SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3;.;.;db.matches.aggregate([ { $sort: { winner_age: 1 } }, { $limit: 3 }, { $project: { winner_name: 1, winner_rank: 1 } }]);Find the name and rank of the 3 youngest winners across all matches.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the name and rank of the 3 youngest winners across all matches.
";db.matches.aggregate([ { $sort: { winner_age: 1 } }, { $limit: 3 }, { $project: { winner_name: 1, winner_rank: 1 } }])
485;medium;wta_1;SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3;.;"db.matches.aggregate([ { $sort: { ""winner_age"": 1 } }, { $lookup: { from: ""players"", localField: ""winner_id"", foreignField: ""player_id"", as: ""winner"" } }, { $project: { ""winner_name"": { $concat: [ { $arrayElemAt: [ ""$winner.first_name"", 0 ] }, "" "", { $arrayElemAt: [ ""$winner.last_name"", 0 ] } ] }, ""winner_rank"": 1 } }, { $limit: 3 } ])";.;What are the names and ranks of the three youngest winners across all matches?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What are the names and ranks of the three youngest winners across all matches?
";"db.matches.aggregate([ { $sort: { ""winner_age"": 1 } }, { $lookup: { from: ""players"", localField: ""winner_id"", foreignField: ""player_id"", as: ""winner"" } }, { $project: { ""winner_name"": { $concat: [ { $arrayElemAt: [ ""$winner.first_name"", 0 ] }, "" "", { $arrayElemAt: [ ""$winner.last_name"", 0 ] } ] }, ""winner_rank"": 1 } }, { $limit: 3 } ])"
486;medium;wta_1;SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';"db.matches.aggregate([ { $match: { tourney_name: 'WTA Championships', winner_hand: 'L' } }, { $group: { _id: ""$winner_id"" } }, { $count: ""distinct_left_handed_winners"" } ])";.;.;How many different winners both participated in the WTA Championships and were left handed?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
How many different winners both participated in the WTA Championships and were left handed?
";"db.matches.aggregate([ { $match: { tourney_name: 'WTA Championships', winner_hand: 'L' } }, { $group: { _id: ""$winner_id"" } }, { $count: ""distinct_left_handed_winners"" } ])"
487;medium;wta_1;SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';"db.matches.aggregate([ { $match: { tourney_name: 'WTA Championships', winner_hand: 'L' } }, { $group: { _id: ""$winner_id"" } }, { $count: ""num_left_handed_winners"" } ])";.;"db.matches.aggregate([ { $match: { tourney_name: ""WTA Championships"", winner_hand: ""L"" } }, { $group: { _id: ""$winner_name"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";Find the number of left handed winners who participated in the WTA Championships.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the number of left handed winners who participated in the WTA Championships.
";"db.matches.aggregate([ { $match: { tourney_name: ""WTA Championships"", winner_hand: ""L"" } }, { $group: { _id: ""$winner_name"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
488;hard;wta_1;SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""winning_matches"" } }, { $unwind: ""$winning_matches"" }, { $sort: { ""winning_matches.winner_rank_points"": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } } ])";"db.matches.aggregate([ { $lookup: { from: ""players"", localField: ""winner_id"", foreignField: ""player_id"", as: ""winner"" } }, { $unwind: ""$winner"" }, { $lookup: { from: ""rankings"", localField: ""winner_id"", foreignField: ""player_id"", as: ""rankings"" } }, { $unwind: ""$rankings"" }, { $group: { _id: ""$winner_id"", first_name: { $first: ""$winner.first_name"" }, country_code: { $first: ""$winner.country_code"" }, birth_date: { $first: ""$winner.birth_date"" }, max_rank_points: { $max: ""$rankings.ranking_points"" } } }, { $sort: { max_rank_points: -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } } ])";"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""matches"" } }, { $unwind: ""$matches"" }, { $sort: { ""matches.winner_rank_points"": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])";Find the first name, country code and birth date of the winner who has the highest rank points in all matches.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
";"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""matches"" } }, { $unwind: ""$matches"" }, { $sort: { ""matches.winner_rank_points"": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])"
489;hard;wta_1;SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""winning_matches"" } }, { $unwind: ""$winning_matches"" }, { $sort: { ""winning_matches.winner_rank_points"": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } } ])";.;"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""matches"" } }, { $unwind: ""$matches"" }, { $sort: { ""matches.winner_rank_points"": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])";What is the first name, country code, and birth date of the player with the most winner rank points across all matches?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
";"db.players.aggregate([ { $lookup: { from: ""matches"", localField: ""player_id"", foreignField: ""winner_id"", as: ""matches"" } }, { $unwind: ""$matches"" }, { $sort: { ""matches.winner_rank_points"": -1 } }, { $limit: 1 }, { $project: { first_name: 1, country_code: 1, birth_date: 1 } }])"
490;medium;wta_1;SELECT count(*) , hand FROM players GROUP BY hand;"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } } ])";"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } } ])";"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } }])";Find the number of players for each hand type.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
Find the number of players for each hand type.
";"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } }])"
491;medium;wta_1;SELECT count(*) , hand FROM players GROUP BY hand;"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } } ])";"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } } ])";"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } }])";How many players are there for each hand type?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
players(player_id, first_name, last_name, hand, birth_date, country_code)
matches(best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year)
rankings(ranking_date, ranking, player_id, ranking_points, tours)
Foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id
Question:
How many players are there for each hand type?
";"db.players.aggregate([ { $group: { _id: ""$hand"", count: { $sum: 1 } } }])"
493;medium;battle_death;SELECT name , tonnage FROM ship ORDER BY name DESC;db.ship.find({}, { name: 1, tonnage: 1 }).sort({ name: -1 });db.ship.find({}, {name: 1, tonnage: 1}).sort({name: -1});db.ship.aggregate([ { $sort: { name: -1 } }, { $project: { name: 1, tonnage: 1 } }]);List the name and tonnage ordered by in descending alphaetical order for the names.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
List the name and tonnage ordered by in descending alphaetical order for the names.
";db.ship.aggregate([ { $sort: { name: -1 } }, { $project: { name: 1, tonnage: 1 } }])
494;medium;battle_death;SELECT name , date FROM battle;db.battle.find({}, { name: 1, date: 1 });db.battle.find({}, { name: 1, date: 1});db.battle.find({}, {name: 1, date: 1});List the name, date and result of each battle.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
List the name, date and result of each battle.
";db.battle.find({}, {name: 1, date: 1})
495;medium;battle_death;SELECT max(killed) , min(killed) FROM death;"db.death.aggregate([ { $group: { _id: null, maxDeathToll: { $max: ""$killed"" }, minDeathToll: { $min: ""$killed"" } } }, { $project: { maxDeathToll: 1, minDeathToll: 1 } } ])";.;"db.death.aggregate([ { $group: { _id: null, max_killed: { $max: ""$killed"" }, min_killed: { $min: ""$killed"" } } }, { $project: { max_killed: 1, min_killed: 1 } }])";What is maximum and minimum death toll caused each time?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What is maximum and minimum death toll caused each time?
";"db.death.aggregate([ { $group: { _id: null, max_killed: { $max: ""$killed"" }, min_killed: { $min: ""$killed"" } } }, { $project: { max_killed: 1, min_killed: 1 } }])"
496;easy;battle_death;SELECT avg(injured) FROM death;"db.death.aggregate([ { $group: { _id: null, averageInjuries: { $avg: ""$injured"" } } }, { $project: { averageInjuries: 1 } } ])";"db.death.aggregate([ { $group: { _id: null, avgInjuries: { $avg: ""$injured"" } } }, { $project: { avgInjuries: 1 } } ])";"db.death.aggregate([ { $group: { _id: null, avgInjured: { $avg: ""$injured"" } } }, { $project: { avgInjured:1 } }])";What is the average number of injuries caused each time?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What is the average number of injuries caused each time?
";"db.death.aggregate([ { $group: { _id: null, avgInjured: { $avg: ""$injured"" } } }, { $project: { avgInjured:1 } }])"
497;medium;battle_death;SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't';"db.ship.aggregate([ { $match: { tonnage: 't' } }, { $lookup: { from: ""death"", localField: ""id"", foreignField: ""caused_by_ship_id"", as: ""death_info"" }}, { $unwind: ""$death_info"" }, { $project: { killed: ""$death_info.killed"", injured: ""$death_info.injured"" }} ])";.;"db.death.aggregate([ { $lookup: { from: ""ship"", localField: ""caused_by_ship_id"", foreignField: ""id"", as: ""ship_info"" } }, { $unwind: ""$ship_info"" }, { $match: { ""ship_info.tonnage"": ""t"" } }, { $project: { killed: 1, injured: 1 } }])";What are the death and injury situations caused by the ship with tonnage 't'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What are the death and injury situations caused by the ship with tonnage 't'?
";"db.death.aggregate([ { $lookup: { from: ""ship"", localField: ""caused_by_ship_id"", foreignField: ""id"", as: ""ship_info"" } }, { $unwind: ""$ship_info"" }, { $match: { ""ship_info.tonnage"": ""t"" } }, { $project: { killed: 1, injured: 1 } }])"
498;medium;battle_death;SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril';"db.battle.find({ bulgarian_commander: { $ne: ""Boril"" } }, { name: 1, result: 1 })";db.battle.find({ bulgarian_commander: { $ne: 'Boril' } }, { name: 1, result: 1 });db.battle.find( { bulgarian_commander: { $ne: 'Boril' } }, { name: 1, result: 1 });What are the name and results of the battles when the bulgarian commander is not 'Boril';"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What are the name and results of the battles when the bulgarian commander is not 'Boril'
";db.battle.find( { bulgarian_commander: { $ne: 'Boril' } }, { name: 1, result: 1 })
499;medium;battle_death;SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig';"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""lost_ships"" } }, { $unwind: ""$lost_ships"" }, { $match: { ""lost_ships.ship_type"": ""Brig"" } }, { $group: { _id: { id: ""$id"", name: ""$name"" } } }, { $project: { id: ""$_id.id"", name: ""$_id.name"" } } ])";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""lost_ships"" } }, { $unwind: ""$lost_ships"" }, { $match: { ""lost_ships.ship_type"": ""Brig"" } }, { $project: { id: 1, name: 1 } } ])";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""battle_ships"" } }, { $match: { ""battle_ships.ship_type"": ""Brig"" } }, { $project: { id: 1, name: 1 } }])";What are the different ids and names of the battles that lost any 'Brig' type shipes?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What are the different ids and names of the battles that lost any 'Brig' type shipes?
";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""battle_ships"" } }, { $match: { ""battle_ships.ship_type"": ""Brig"" } }, { $project: { id: 1, name: 1 } }])"
500;hard;battle_death;SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10;"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ship_info"" } }, { $unwind: ""$ship_info"" }, { $lookup: { from: ""death"", localField: ""ship_info.id"", foreignField: ""caused_by_ship_id"", as: ""death_info"" } }, { $unwind: ""$death_info"" }, { $group: { _id: ""$id"", name: { $first: ""$name"" }, totalKilled: { $sum: ""$death_info.killed"" } } }, { $match: { totalKilled: { $gt: 10 } } }, { $project: { _id: 1, name: 1 } } ])";"db.death.aggregate([ { $group: { _id: ""$caused_by_ship_id"", total_killed: { $sum: ""$killed"" } } }, { $match: { total_killed: { $gt: 10 } } }, { $lookup: { from: ""ship"", localField: ""_id"", foreignField: ""id"", as: ""ship"" } }, { $unwind: ""$ship"" }, { $lookup: { from: ""battle"", localField: ""ship.lost_in_battle"", foreignField: ""id"", as: ""battle"" } }, { $unwind: ""$battle"" }, { $project: { _id: ""$battle.id"", name: ""$battle.name"" } } ])";.;What are the ids and names of the battles that led to more than 10 people killed in total.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What are the ids and names of the battles that led to more than 10 people killed in total.
";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ship_info"" } }, { $unwind: ""$ship_info"" }, { $lookup: { from: ""death"", localField: ""ship_info.id"", foreignField: ""caused_by_ship_id"", as: ""death_info"" } }, { $unwind: ""$death_info"" }, { $group: { _id: ""$id"", name: { $first: ""$name"" }, totalKilled: { $sum: ""$death_info.killed"" } } }, { $match: { totalKilled: { $gt: 10 } } }, { $project: { _id: 1, name: 1 } } ])"
504;extra;battle_death;SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""related_ships"" } }, { $match: { ""related_ships.tonnage"": { $ne: ""225"" } } }, { $count: ""total_battles_without_225_tonnage_ships_lost"" } ])";.;.;How many battles did not lose any ship with tonnage '225'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
How many battles did not lose any ship with tonnage '225'?
";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""related_ships"" } }, { $match: { ""related_ships.tonnage"": { $ne: ""225"" } } }, { $count: ""total_battles_without_225_tonnage_ships_lost"" } ])"
505;extra;battle_death;SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta';"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ships"" } }, { $match: { ""ships.name"": { $all: [""Lettice"", ""HMS Atalanta""] } } }, { $project: { name: 1, date: 1 } } ])";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""lost_ships"" } }, { $match: { ""lost_ships.name"": { $in: [""Lettice"", ""HMS Atalanta""] } } }, { $project: { name: 1, date: 1 } } ])";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ships"" } }, { $match: { ""ships.name"": { $in: [""Lettice"", ""HMS Atalanta""] } } }, { $project: { name: 1, date: 1 } }])";List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta';"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ships"" } }, { $match: { ""ships.name"": { $in: [""Lettice"", ""HMS Atalanta""] } } }, { $project: { name: 1, date: 1 } }])"
506;extra;battle_death;SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel';"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ship_info"" } }, { $match: { ""ship_info.location"": { $ne: ""English Channel"" } } }, { $project: { name: 1, result: 1, bulgarian_commander: 1 } } ])";"db.battle.find({ ""id"": { $nin: db.ship.distinct(""lost_in_battle"", { ""location"": ""English Channel"" }) }, ""bulgarian_commander"": { $exists: true } }, { ""name"": 1, ""result"": 1, ""bulgarian_commander"": 1 })";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ships"" } }, { $match: { ""ships.location"": { $ne: ""English Channel"" } } }, { $project: { name: 1, result: 1, bulgarian_commander: 1 } }])";Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
";"db.battle.aggregate([ { $lookup: { from: ""ship"", localField: ""id"", foreignField: ""lost_in_battle"", as: ""ships"" } }, { $match: { ""ships.location"": { $ne: ""English Channel"" } } }, { $project: { name: 1, result: 1, bulgarian_commander: 1 } }])"
507;medium;battle_death;SELECT note FROM death WHERE note LIKE '%East%';db.death.find({ note: /East/ }, { note: 1 });db.death.find({note: /East/ }, { note: 1 });db.death.find({note: {$regex: /East/}}, { note: 1});What are the notes of the death events which has substring 'East'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
battle(id, name, date, bulgarian_commander, latin_commander, result)
ship(lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship)
death(caused_by_ship_id, id, note, killed, injured)
Foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id
Question:
What are the notes of the death events which has substring 'East'?
";db.death.find({note: {$regex: /East/}}, { note: 1})
508;medium;student_transcripts_tracking;SELECT line_1 , line_2 FROM addresses;db.Addresses.find({}, { line_1: 1, line_2: 1 });db.Addresses.find({}, {line_1: 1, line_2: 1});db.Addresses.find({}, {line_1: 1, line_2: 1});what are all the addresses including line 1 and line 2?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
what are all the addresses including line 1 and line 2?
";db.Addresses.find({}, {line_1: 1, line_2: 1})
509;medium;student_transcripts_tracking;SELECT line_1 , line_2 FROM addresses;db.Addresses.find({}, { line_1: 1, line_2: 1 });db.Addresses.find({}, {line_1: 1, line_2: 1});db.Addresses.find({}, {line_1: 1, line_2: 1});What is the first and second line for all addresses?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the first and second line for all addresses?
";db.Addresses.find({}, {line_1: 1, line_2: 1})
512;easy;student_transcripts_tracking;SELECT course_description FROM Courses WHERE course_name = 'math';db.Courses.findOne({ course_name: 'math' }, { course_description: 1 });.;db.Courses.findOne({course_name: 'math'}, {course_description: 1});How is the math course described?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
How is the math course described?
";db.Courses.findOne({course_name: 'math'}, {course_description: 1})
513;easy;student_transcripts_tracking;SELECT course_description FROM Courses WHERE course_name = 'math';db.Courses.find({ course_name: 'math' }, { course_description: 1 });.;db.Courses.find({course_name: 'math'}, {course_description: 1});What are the descriptions for all the math courses?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are the descriptions for all the math courses?
";db.Courses.find({course_name: 'math'}, {course_description: 1})
514;easy;student_transcripts_tracking;SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';.;"db.Addresses.find({city: ""Port Chelsea""}, {zip_postcode: 1})";db.Addresses.find({city: 'Port Chelsea'}, {zip_postcode: 1});What is the zip code of the address in the city Port Chelsea?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the zip code of the address in the city Port Chelsea?
";db.Addresses.find({city: 'Port Chelsea'}, {zip_postcode: 1})
515;easy;student_transcripts_tracking;SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';db.Addresses.find({ city: 'Port Chelsea' }, { zip_postcode: 1 });"db.Addresses.findOne({city: ""Port Chelsea""}, {zip_postcode: 1})";db.Addresses.findOne({city: 'Port Chelsea'}, {zip_postcode: 1});What is the zip code for Port Chelsea?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the zip code for Port Chelsea?
";db.Addresses.findOne({city: 'Port Chelsea'}, {zip_postcode: 1})
516;extra;student_transcripts_tracking;SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;"db.Degree_Programs.aggregate([ { $group: { _id: ""$department_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Departments"", localField: ""_id"", foreignField: ""department_id"", as: ""department"" } }, { $project: { department_name: { $arrayElemAt: [""$department.department_name"", 0] }, department_id: ""$_id"" } } ])";"db.Degree_Programs.aggregate([ { $group: { _id: ""$department_id"", count: { $sum: 1 } } }, { $lookup: { from: ""Departments"", localField: ""_id"", foreignField: ""department_id"", as: ""department"" } }, { $unwind: ""$department"" }, { $sort: { count: -1 } }, { $project: { department_name: ""$department.department_name"", department_id: ""$department.department_id"" } }, { $limit: 1 } ])";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Departments"", localField: ""department_id"", foreignField: ""department_id"", as: ""department_info"" } }, { $unwind: ""$department_info"" }, { $group: { _id: ""$department_id"", department_name: { $first: ""$department_info.department_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { department_name: 1, department_id: ""$_id"" } }])";Which department offers the most number of degrees? List department name and id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Which department offers the most number of degrees? List department name and id.
";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Departments"", localField: ""department_id"", foreignField: ""department_id"", as: ""department_info"" } }, { $unwind: ""$department_info"" }, { $group: { _id: ""$department_id"", department_name: { $first: ""$department_info.department_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { department_name: 1, department_id: ""$_id"" } }])"
517;extra;student_transcripts_tracking;select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1;"db.Degree_Programs.aggregate([ { $group: { _id: ""$department_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Departments"", localField: ""_id"", foreignField: ""department_id"", as: ""departmentInfo"" } }, { $unwind: ""$departmentInfo"" }, { $project: { department_name: ""$departmentInfo.department_name"", department_id: ""$departmentInfo.department_id"" } } ])";"db.Departments.aggregate([ { $lookup: { from: ""Degree_Programs"", localField: ""department_id"", foreignField: ""department_id"", as: ""degrees"" } }, { $project: { department_id: 1, department_name: 1, num_degrees: { $size: ""$degrees"" } } }, { $sort: { num_degrees: -1 } }, { $limit: 1 }, { $project: { department_id: 1, department_name: 1 } } ])";.;What is the name and id of the department with the most number of degrees ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the name and id of the department with the most number of degrees ?
";"db.Degree_Programs.aggregate([ { $group: { _id: ""$department_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Departments"", localField: ""_id"", foreignField: ""department_id"", as: ""departmentInfo"" } }, { $unwind: ""$departmentInfo"" }, { $project: { department_name: ""$departmentInfo.department_name"", department_id: ""$departmentInfo.department_id"" } } ])"
518;easy;student_transcripts_tracking;SELECT count(DISTINCT department_id) FROM Degree_Programs;"db.Degree_Programs.aggregate([ { $group: { _id: ""$department_id"" } }, { $count: ""unique_department_count"" } ])";.;.;How many departments offer any degree?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
How many departments offer any degree?
";"db.Degree_Programs.aggregate([ { $group: { _id: ""$department_id"" } }, { $count: ""unique_department_count"" } ])"
520;easy;student_transcripts_tracking;SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;.;.;"db.Degree_Programs.aggregate([ { $group: { _id: ""$degree_summary_name"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many different degree names are offered?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
How many different degree names are offered?
";"db.Degree_Programs.aggregate([ { $group: { _id: ""$degree_summary_name"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
522;medium;student_transcripts_tracking;SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer';.;.;"db.Departments.aggregate([ { $match: { department_name: ""engineer"" } }, { $lookup: { from: ""Degree_Programs"", localField: ""department_id"", foreignField: ""department_id"", as: ""degree_programs"" } }, { $project: { count: { $size: ""$degree_programs"" } } }])";How many degrees does the engineering department offer?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
How many degrees does the engineering department offer?
";"db.Departments.aggregate([ { $match: { department_name: ""engineer"" } }, { $lookup: { from: ""Degree_Programs"", localField: ""department_id"", foreignField: ""department_id"", as: ""degree_programs"" } }, { $project: { count: { $size: ""$degree_programs"" } } }])"
523;medium;student_transcripts_tracking;SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer';.;.;"db.Departments.aggregate([ { $match: { department_name: ""engineer"" } }, { $lookup: { from: ""Degree_Programs"", localField: ""department_id"", foreignField: ""department_id"", as: ""degree_programs"" } }, { $project: { count: { $size: ""$degree_programs"" } } }])";How many degrees does the engineering department have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
How many degrees does the engineering department have?
";"db.Departments.aggregate([ { $match: { department_name: ""engineer"" } }, { $lookup: { from: ""Degree_Programs"", localField: ""department_id"", foreignField: ""department_id"", as: ""degree_programs"" } }, { $project: { count: { $size: ""$degree_programs"" } } }])"
524;medium;student_transcripts_tracking;SELECT section_name , section_description FROM Sections;db.Sections.find({}, { section_name: 1, section_description: 1 });db.Sections.find({}, {section_name: 1, section_description: 1});db.Sections.find({}, {section_name: 1, section_description: 1});What are the names and descriptions of all the sections?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are the names and descriptions of all the sections?
";db.Sections.find({}, {section_name: 1, section_description: 1})
525;medium;student_transcripts_tracking;SELECT section_name , section_description FROM Sections;db.Sections.find({}, { section_name: 1, section_description: 1 });db.Sections.find({}, {section_name: 1, section_description: 1});db.Sections.find({}, {section_name: 1, section_description: 1});What are the names and descriptions for all the sections?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are the names and descriptions for all the sections?
";db.Sections.find({}, {section_name: 1, section_description: 1})
526;medium;student_transcripts_tracking;SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2;"db.Sections.aggregate([ { $group: { _id: ""$course_id"", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: ""Courses"", localField: ""_id"", foreignField: ""course_id"", as: ""courseInfo"" } }, { $unwind: ""$courseInfo"" }, { $project: { course_name: ""$courseInfo.course_name"", course_id: ""$_id"" } } ])";.;.;What are the names and id of courses having at most 2 sections?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are the names and id of courses having at most 2 sections?
";"db.Sections.aggregate([ { $group: { _id: ""$course_id"", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: ""Courses"", localField: ""_id"", foreignField: ""course_id"", as: ""courseInfo"" } }, { $unwind: ""$courseInfo"" }, { $project: { course_name: ""$courseInfo.course_name"", course_id: ""$_id"" } } ])"
528;easy;student_transcripts_tracking;SELECT section_name FROM Sections ORDER BY section_name DESC;db.Sections.find({}, { section_name: 1 }).sort({ section_name: -1 });db.Sections.aggregate([ { $sort: {section_name: -1} }, { $project: { section_name: 1 } } ]);db.Sections.find({}, { section_name: 1}).sort({section_name: -1});List the section_name in reversed lexicographical order.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
List the section_name in reversed lexicographical order.
";db.Sections.find({}, { section_name: 1}).sort({section_name: -1})
529;easy;student_transcripts_tracking;SELECT section_name FROM Sections ORDER BY section_name DESC;db.Sections.find({}, { section_name: 1 }).sort({ section_name: -1 });db.Sections.aggregate([ { $sort: {section_name: -1} }, { $project: { section_name: 1 } } ]);db.Sections.find({}, {section_name: 1}).sort({section_name: -1});What are the names of the sections in reverse alphabetical order?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are the names of the sections in reverse alphabetical order?
";db.Sections.find({}, {section_name: 1}).sort({section_name: -1})
530;extra;student_transcripts_tracking;SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrolments"" } }, { $unwind: ""$enrolments"" }, { $group: { _id: { semester_id: ""$semester_id"", semester_name: ""$semester_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { semester_id: ""$_id.semester_id"", semester_name: ""$_id.semester_name"" } } ])";.;"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrollments"" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])";What is the semester which most student registered in? Show both the name and the id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the semester which most student registered in? Show both the name and the id.
";"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrollments"" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
531;extra;student_transcripts_tracking;SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrolments"" } }, { $project: { semester_id: 1, semester_name: 1, numOfStudents: { $size: ""$enrolments"" } } }, { $sort: { numOfStudents: -1 } }, { $limit: 1 }, { $project: { semester_id: 1, semester_name: 1 } } ])";.;"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""student_enrolment"" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { student_count: -1 } }, { $limit: 1 }])";For each semester, what is the name and id of the one with the most students registered?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
For each semester, what is the name and id of the one with the most students registered?
";"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""student_enrolment"" } }, { $project: { semester_name: 1, semester_id: 1 } }, { $sort: { student_count: -1 } }, { $limit: 1 }])"
532;medium;student_transcripts_tracking;SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';db.Departments.find( { department_name: /computer/ }, { department_description: 1 } );.;db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 });What is the description of the department whose name has the substring the computer?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the description of the department whose name has the substring the computer?
";db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 })
533;medium;student_transcripts_tracking;SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';db.Departments.find({ department_name: /computer/ }, { department_description: 1 });db.Departments.find({department_name: /computer/i}, {department_description: 1});db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 });What is the department description for the one whose name has the word computer?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the department description for the one whose name has the word computer?
";db.Departments.find( { department_name: { $regex: /computer/ } }, { department_description: 1 })
534;medium;student_transcripts_tracking;SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2;"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrolments"" } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1, num_enrolments: { $size: ""$enrolments"" } } }, { $match: { num_enrolments: 2 } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1 } } ])";.;.;Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
";"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrolments"" } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1, num_enrolments: { $size: ""$enrolments"" } } }, { $match: { num_enrolments: 2 } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1 } } ])"
535;medium;student_transcripts_tracking;SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2;.;.;"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrollments"" } }, { $match: { ""enrollments"": { $exists: true } } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1} }, { $match: { enrollmentCount: 2 } }])";What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
";"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrollments"" } }, { $match: { ""enrollments"": { $exists: true } } }, { $project: { first_name: 1, middle_name: 1, last_name: 1, student_id: 1} }, { $match: { enrollmentCount: 2 } }])"
536;hard;student_transcripts_tracking;SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrolment"" } }, { $unwind: ""$enrolment"" }, { $lookup: { from: ""Degree_Programs"", localField: ""enrolment.degree_program_id"", foreignField: ""degree_program_id"", as: ""degreeProgram"" } }, { $unwind: ""$degreeProgram"" }, { $match: { ""degreeProgram.degree_summary_name"": ""Bachelor"" } }, { $group: { _id: { first_name: ""$first_name"", middle_name: ""$middle_name"", last_name: ""$last_name"" } } }, { $project: { first_name: ""$_id.first_name"", middle_name: ""$_id.middle_name"", last_name: ""$_id.last_name"" } } ])";"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrollments"" } }, { $lookup: { from: ""Degree_Programs"", localField: ""enrollments.degree_program_id"", foreignField: ""degree_program_id"", as: ""programs"" } }, { $match: { ""programs.degree_summary_name"": ""Bachelor"" } }, { $project: { first_name: 1, middle_name: 1, last_name: 1 } } ])";.;Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
";"db.Students.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""student_id"", foreignField: ""student_id"", as: ""enrolment"" } }, { $unwind: ""$enrolment"" }, { $lookup: { from: ""Degree_Programs"", localField: ""enrolment.degree_program_id"", foreignField: ""degree_program_id"", as: ""degreeProgram"" } }, { $unwind: ""$degreeProgram"" }, { $match: { ""degreeProgram.degree_summary_name"": ""Bachelor"" } }, { $group: { _id: { first_name: ""$first_name"", middle_name: ""$middle_name"", last_name: ""$last_name"" } } }, { $project: { first_name: ""$_id.first_name"", middle_name: ""$_id.middle_name"", last_name: ""$_id.last_name"" } } ])"
538;extra;student_transcripts_tracking;SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;"db.Student_Enrolment.aggregate([ { $group: { _id: ""$degree_program_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Degree_Programs"", localField: ""_id"", foreignField: ""degree_program_id"", as: ""program"" } }, { $unwind: ""$program"" }, { $project: { degree_summary_name: ""$program.degree_summary_name"" } } ])";.;"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollments"" } }, { $project: { degree_summary_name: 1 } }, { $sort: { enrollmentCount: -1 } }, { $limit: 1 }])";Find the kind of program which most number of students are enrolled in?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Find the kind of program which most number of students are enrolled in?
";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollments"" } }, { $project: { degree_summary_name: 1 } }, { $sort: { enrollmentCount: -1 } }, { $limit: 1 }])"
539;extra;student_transcripts_tracking;SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;"db.Student_Enrolment.aggregate([ { $group: { _id: ""$degree_program_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Degree_Programs"", localField: ""_id"", foreignField: ""degree_program_id"", as: ""program"" } }, { $unwind: ""$program"" }, { $project: { degree_summary_name: ""$program.degree_summary_name"" } } ])";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollments"" }}, { $project: { degree_summary_name: 1, num_students: { $size: ""$enrollments"" } }}, { $sort: { num_students: -1 }}, { $limit: 1 }, { $project: { degree_summary_name: 1 } } ])";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollments"" } }, { $project: { degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])";What is the degree summary name that has the most number of students enrolled?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the degree summary name that has the most number of students enrolled?
";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollments"" } }, { $project: { degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
540;extra;student_transcripts_tracking;SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;"db.Student_Enrolment.aggregate([ { $group: { _id: ""$degree_program_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Degree_Programs"", localField: ""_id"", foreignField: ""degree_program_id"", as: ""program_info"" } }, { $unwind: ""$program_info"" }, { $project: { degree_program_id: ""$_id"", degree_summary_name: ""$program_info.degree_summary_name"" } } ])";.;"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollment"" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])";Find the program which most number of students are enrolled in. List both the id and the summary.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Find the program which most number of students are enrolled in. List both the id and the summary.
";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollment"" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
541;extra;student_transcripts_tracking;SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;"db.Student_Enrolment.aggregate([ { $group: { _id: ""$degree_program_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Degree_Programs"", localField: ""_id"", foreignField: ""degree_program_id"", as: ""degreeProgram"" } }, { $unwind: ""$degreeProgram"" }, { $project: { degree_program_id: ""$_id"", degree_summary_name: ""$degreeProgram.degree_summary_name"" } } ])";.;"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollment"" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])";What is the program id and the summary of the degree that has the most students enrolled?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the program id and the summary of the degree that has the most students enrolled?
";"db.Degree_Programs.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrollment"" } }, { $project: { degree_program_id: 1, degree_summary_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
542;extra;student_transcripts_tracking;SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;.;"db.Student_Enrolment.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: ""Students"", localField: ""_id"", foreignField: ""student_id"", as: ""student_info"" }}, { $project: { _id: 1, first_name: { $arrayElemAt: [""$student_info.first_name"", 0] }, middle_name: { $arrayElemAt: [""$student_info.middle_name"", 0] }, last_name: { $arrayElemAt: [""$student_info.last_name"", 0] }, count: 1 }} ])";.;Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
";"db.Student_Enrolment.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: ""Students"", localField: ""_id"", foreignField: ""student_id"", as: ""student_info"" }}, { $project: { _id: 1, first_name: { $arrayElemAt: [""$student_info.first_name"", 0] }, middle_name: { $arrayElemAt: [""$student_info.middle_name"", 0] }, last_name: { $arrayElemAt: [""$student_info.last_name"", 0] }, count: 1 }} ])"
544;hard;student_transcripts_tracking;SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrolments"" } }, { $match: { enrolments: { $size: 0 } } }, { $project: { semester_name: 1 } } ])";"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrolments"" } }, { $match: { enrolments: { $size: 0 } } }, { $project: { semester_name: 1 } } ])";"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrollment"" } }, { $match: { ""enrollment"": { $size: 0 } } }, { $project: { semester_name: 1 } }])";Which semesters do not have any student enrolled? List the semester name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Which semesters do not have any student enrolled? List the semester name.
";"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrollment"" } }, { $match: { ""enrollment"": { $size: 0 } } }, { $project: { semester_name: 1 } }])"
545;hard;student_transcripts_tracking;SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrolment"" } }, { $match: { enrolment: { $size: 0 } } }, { $project: { semester_name: 1 } } ])";"db.Semesters.aggregate([ { $lookup: { from: ""Student_Enrolment"", localField: ""semester_id"", foreignField: ""semester_id"", as: ""enrollment"" } }, { $match: { ""enrollment"": { $size: 0 } } }, { $project: { semester_name: 1 } } ])";"db.Semesters.find( { semester_id: { $nin: db.Student_Enrolment.distinct(""semester_id"") } }, { semester_name: 1 })";What is the name of the semester with no students enrolled?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the name of the semester with no students enrolled?
";"db.Semesters.find( { semester_id: { $nin: db.Student_Enrolment.distinct(""semester_id"") } }, { semester_name: 1 })"
546;easy;student_transcripts_tracking;SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;"db.Student_Enrolment_Courses.aggregate([ { $lookup: { from: ""Courses"", localField: ""course_id"", foreignField: ""course_id"", as: ""course_info"" } }, { $unwind: ""$course_info"" }, { $group: { _id: ""$course_info.course_name"" } }, { $project: { course_name: ""$_id"" } } ])";"db.Courses.find({ ""course_id"": { $in: db.Student_Enrolment_Courses.distinct(""course_id"") } }, { ""course_name"": 1 })";"db.Courses.aggregate([ { $lookup: { from: ""Student_Enrolment_Courses"", localField: ""course_id"", foreignField: ""course_id"", as: ""enrollment"" } }, { $match: { ""enrollment.0"": { $exists: true } } }, { $project: { course_name: 1 } }])";What are all the course names of the courses which ever have students enrolled in?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What are all the course names of the courses which ever have students enrolled in?
";"db.Courses.aggregate([ { $lookup: { from: ""Student_Enrolment_Courses"", localField: ""course_id"", foreignField: ""course_id"", as: ""enrollment"" } }, { $match: { ""enrollment.0"": { $exists: true } } }, { $project: { course_name: 1 } }])"
554;medium;student_transcripts_tracking;SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';db.Students.findOne({ first_name: 'Timmothy', last_name: 'Ward' }, { cell_mobile_number: 1 });"db.Students.find({first_name: ""Timmothy"", last_name: ""Ward""}, {cell_mobile_number: 1})";db.Students.findOne({first_name: 'Timmothy', last_name: 'Ward'}, {cell_mobile_number: 1});What is the phone number of the man with the first name Timmothy and the last name Ward?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the phone number of the man with the first name Timmothy and the last name Ward?
";db.Students.findOne({first_name: 'Timmothy', last_name: 'Ward'}, {cell_mobile_number: 1})
556;medium;student_transcripts_tracking;SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_first_registered: 1 }).limit(1);db.Students.findOne({}, {first_name: 1, middle_name: 1, last_name: 1});db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1);Who is the first student to register? List the first name, middle name and last name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Who is the first student to register? List the first name, middle name and last name.
";db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1)
557;medium;student_transcripts_tracking;SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_first_registered: 1 }).limit(1);db.Students.findOne({}, {first_name: 1, middle_name: 1, last_name: 1});db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1);What is the first, middle, and last name of the first student to register?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the first, middle, and last name of the first student to register?
";db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_first_registered: 1}).limit(1)
558;medium;student_transcripts_tracking;SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1;db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_left: 1 }).limit(1);.;.;Who is the earliest graduate of the school? List the first name, middle name and last name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Who is the earliest graduate of the school? List the first name, middle name and last name.
";db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_left: 1 }).limit(1)
559;medium;student_transcripts_tracking;SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1;db.Students.find({}, { first_name: 1, middle_name: 1, last_name: 1 }).sort({ date_left: 1 }).limit(1);"db.Students.aggregate([ { $lookup: { from: ""Transcript_Contents"", localField: ""_id"", foreignField: ""student_course_id"", as: ""transcript_contents"" } }, { $lookup: { from: ""Transcripts"", localField: ""transcript_contents.transcript_id"", foreignField: ""_id"", as: ""transcripts"" } }, { $sort: { ""transcripts.transcript_date"": 1 } }, { $limit: 1 }, { $project: { first_name: 1, middle_name: 1, last_name: 1 } } ])";db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_left: 1}).limit(1);What is the first, middle, and last name of the earliest school graduate?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the first, middle, and last name of the earliest school graduate?
";db.Students.find({}, {first_name: 1, middle_name: 1, last_name: 1}).sort({date_left: 1}).limit(1)
560;easy;student_transcripts_tracking;SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;"db.Students.find({ $expr: { $ne: [""$current_address_id"", ""$permanent_address_id""] } }, { first_name: 1 })";"db.Students.aggregate([ { $lookup: { from: ""Addresses"", localField: ""permanent_address_id"", foreignField: ""address_id"", as: ""permanent_address"" }}, { $lookup: { from: ""Addresses"", localField: ""current_address_id"", foreignField: ""address_id"", as: ""current_address"" }}, { $match: { $expr: { $ne: [ { $arrayElemAt: [ ""$permanent_address"", 0 ] }, { $arrayElemAt: [ ""$current_address"", 0 ] } ] } }}, { $project: { first_name: 1 } } ])";"db.Students.aggregate([ { $lookup: { from: ""Addresses"", let: { current_address_id: ""$current_address_id"", permanent_address_id: ""$permanent_address_id"" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [""$address_id"", ""$$current_address_id""] }, { $ne: [""$address_id"", ""$$permanent_address_id""] } ] } } }, { $project: { address_id: 1 } } ], as: ""addresses"" } }, { $match: { ""addresses.0"": { $exists: true } } }, { $project: { first_name: 1 } }])";Whose permanent address is different from his or her current address? List his or her first name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Whose permanent address is different from his or her current address? List his or her first name.
";"db.Students.aggregate([ { $lookup: { from: ""Addresses"", let: { current_address_id: ""$current_address_id"", permanent_address_id: ""$permanent_address_id"" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [""$address_id"", ""$$current_address_id""] }, { $ne: [""$address_id"", ""$$permanent_address_id""] } ] } } }, { $project: { address_id: 1 } } ], as: ""addresses"" } }, { $match: { ""addresses.0"": { $exists: true } } }, { $project: { first_name: 1 } }])"
561;easy;student_transcripts_tracking;SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;"db.Students.find({ $expr: { $ne: [""$current_address_id"", ""$permanent_address_id""] } }, { first_name: 1 })";"db.Students.aggregate([ { $lookup: { from: ""Addresses"", localField: ""permanent_address_id"", foreignField: ""address_id"", as: ""permanent_address"" } }, { $lookup: { from: ""Addresses"", localField: ""current_address_id"", foreignField: ""address_id"", as: ""current_address"" } }, { $match: { $expr: { $ne: [ { $arrayElemAt: [ ""$permanent_address.address_id"", 0 ] }, { $arrayElemAt: [ ""$current_address.address_id"", 0 ] } ] } } }, { $project: { first_name: 1 } } ])";.;What is the first name of the student whose permanent address is different from his or her current one?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the first name of the student whose permanent address is different from his or her current one?
";"db.Students.find({ $expr: { $ne: [""$current_address_id"", ""$permanent_address_id""] } }, { first_name: 1 })"
562;extra;student_transcripts_tracking;SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;"db.Students.aggregate([ { $group: { _id: ""$current_address_id"", count: { $sum: 1 } } }, { $sort: { ""count"": -1 } }, { $limit: 1 }, { $lookup: { from: ""Addresses"", localField: ""_id"", foreignField: ""address_id"", as: ""addressDetails"" } }, { $unwind: ""$addressDetails"" }, { $project: { _id: ""$addressDetails.address_id"", line_1: ""$addressDetails.line_1"", line_2: ""$addressDetails.line_2"" } } ])";.;"db.Addresses.aggregate([ { $lookup: { from: ""Students"", localField: ""address_id"", foreignField: ""current_address_id"", as: ""students"" } }, { $project: { address_id: 1, line_1: 1, line_2: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])";Which address holds the most number of students currently? List the address id and all lines.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Which address holds the most number of students currently? List the address id and all lines.
";"db.Addresses.aggregate([ { $lookup: { from: ""Students"", localField: ""address_id"", foreignField: ""current_address_id"", as: ""students"" } }, { $project: { address_id: 1, line_1: 1, line_2: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }])"
563;extra;student_transcripts_tracking;SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;"db.Students.aggregate([ { $group: { _id: ""$current_address_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Addresses"", localField: ""_id"", foreignField: ""address_id"", as: ""addressDetails"" } }, { $unwind: ""$addressDetails"" }, { $project: { address_id: ""$addressDetails.address_id"", line_1: ""$addressDetails.line_1"", line_2: ""$addressDetails.line_2"" } } ])";.;"db.Addresses.aggregate([ { $lookup: { from: ""Students"", localField: ""address_id"", foreignField: ""current_address_id"", as: ""students"" } }, { $project: { address_id: 1, line_1: 1, line_2: 1} }, { $sort: { studentCount: -1 } }, { $limit: 1 }])";What is the id, line 1, and line 2 of the address with the most students?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the id, line 1, and line 2 of the address with the most students?
";"db.Addresses.aggregate([ { $lookup: { from: ""Students"", localField: ""address_id"", foreignField: ""current_address_id"", as: ""students"" } }, { $project: { address_id: 1, line_1: 1, line_2: 1} }, { $sort: { studentCount: -1 } }, { $limit: 1 }])"
572;hard;student_transcripts_tracking;SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;"db.Transcript_Contents.aggregate([ { $group: { _id: ""$student_course_id"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { student_course_id: ""$_id"", count: 1 }} ])";.;"db.Transcript_Contents.aggregate([ { $group: { _id: ""$student_course_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])";How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
";"db.Transcript_Contents.aggregate([ { $group: { _id: ""$student_course_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])"
573;hard;student_transcripts_tracking;SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;"db.Transcript_Contents.aggregate([ { $group: { _id: ""$student_course_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { student_course_id: ""$_id"", count: 1 } } ])";.;"db.Transcript_Contents.aggregate([ { $group: { _id: ""$student_course_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])";What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
";"db.Transcript_Contents.aggregate([ { $group: { _id: ""$student_course_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }])"
576;extra;student_transcripts_tracking;SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor';"db.Student_Enrolment.aggregate([ { $lookup: { from: ""Degree_Programs"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""degree_info"" } }, { $unwind: ""$degree_info"" }, { $match: { ""degree_info.degree_summary_name"": { $in: [""Master"", ""Bachelor""] } } }, { $group: { _id: ""$semester_id"", degreeTypes: { $addToSet: ""$degree_info.degree_summary_name"" } } }, { $match: { degreeTypes: { $all: [""Master"", ""Bachelor""] } } }, { $project: { _id: 1 } } ])";.;.;Find the semester when both Master students and Bachelor students got enrolled in.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Find the semester when both Master students and Bachelor students got enrolled in.
";"db.Student_Enrolment.aggregate([ { $lookup: { from: ""Degree_Programs"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""degree_info"" } }, { $unwind: ""$degree_info"" }, { $match: { ""degree_info.degree_summary_name"": { $in: [""Master"", ""Bachelor""] } } }, { $group: { _id: ""$semester_id"", degreeTypes: { $addToSet: ""$degree_info.degree_summary_name"" } } }, { $match: { degreeTypes: { $all: [""Master"", ""Bachelor""] } } }, { $project: { _id: 1 } } ])"
577;extra;student_transcripts_tracking;SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor';"db.Degree_Programs.aggregate([ { $match: { $or: [{ degree_summary_name: 'Master' }, { degree_summary_name: 'Bachelor' }] } }, { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrolments"" } }, { $unwind: ""$enrolments"" }, { $group: { _id: ""$enrolments.semester_id"", degreeTypes: { $addToSet: ""$degree_summary_name"" } } }, { $match: { degreeTypes: { $all: ['Master', 'Bachelor'] } } }, { $project: { semester_id: ""$_id"" } } ])";.;.;What is the id of the semester that had both Masters and Bachelors students enrolled?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the id of the semester that had both Masters and Bachelors students enrolled?
";"db.Degree_Programs.aggregate([ { $match: { $or: [{ degree_summary_name: 'Master' }, { degree_summary_name: 'Bachelor' }] } }, { $lookup: { from: ""Student_Enrolment"", localField: ""degree_program_id"", foreignField: ""degree_program_id"", as: ""enrolments"" } }, { $unwind: ""$enrolments"" }, { $group: { _id: ""$enrolments.semester_id"", degreeTypes: { $addToSet: ""$degree_summary_name"" } } }, { $match: { degreeTypes: { $all: ['Master', 'Bachelor'] } } }, { $project: { semester_id: ""$_id"" } } ])"
580;easy;student_transcripts_tracking;SELECT other_student_details FROM Students ORDER BY other_student_details DESC;db.Students.find({}, { other_student_details: 1 }).sort({ other_student_details: -1 });db.Students.find({}, { other_student_details: 1 }).sort({ other_student_details: -1 });db.Students.find({}, { other_student_details: 1}).sort({other_student_details: -1});List all the student details in reversed lexicographical order.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
List all the student details in reversed lexicographical order.
";db.Students.find({}, { other_student_details: 1}).sort({other_student_details: -1})
581;easy;student_transcripts_tracking;SELECT other_student_details FROM Students ORDER BY other_student_details DESC;db.Students.find({}, {other_student_details: 1}).sort({other_student_details: -1});db.Students.find({}, { other_student_details: 1 }).sort({ other_student_details: -1 });db.Students.find({}, {other_student_details: 1}).sort({other_student_details: -1});What other details can you tell me about students in reverse alphabetical order?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What other details can you tell me about students in reverse alphabetical order?
";db.Students.find({}, {other_student_details: 1}).sort({other_student_details: -1})
582;easy;student_transcripts_tracking;SELECT section_description FROM Sections WHERE section_name = 'h';db.Sections.find({ section_name: 'h' }, { section_description: 1 });"db.Sections.find({section_name: ""h""}, {section_description: 1})";db.Sections.findOne({section_name: 'h'}, {section_description: 1});Describe the section h.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Describe the section h.
";db.Sections.findOne({section_name: 'h'}, {section_description: 1})
583;easy;student_transcripts_tracking;SELECT section_description FROM Sections WHERE section_name = 'h';db.Sections.find({ section_name: 'h' }, { section_description: 1 });"db.Sections.find({section_name: ""h""}, {section_description: 1})";db.Sections.findOne({section_name: 'h'}, {section_description: 1});What is the description for the section named h?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
What is the description for the section named h?
";db.Sections.findOne({section_name: 'h'}, {section_description: 1})
584;hard;student_transcripts_tracking;select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582';"db.Students.find( { $or: [ {""permanent_address_id.country"": ""Haiti""}, {cell_mobile_number: ""09700166582""} ] }, {first_name: 1} )";"db.Students.find({$or: [{country: ""Haiti""}, {cell_mobile_number: ""09700166582""}]}, {first_name: 1})";.;Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Addresses(address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)
Courses(course_id, course_name, course_description, other_details)
Departments(department_id, department_name, department_description, other_details)
Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)
Sections(section_id, course_id, section_name, section_description, other_details)
Semesters(semester_id, semester_name, semester_description, other_details)
Students(student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)
Student_Enrolment(student_enrolment_id, degree_program_id, semester_id, student_id, other_details)
Student_Enrolment_Courses(student_course_id, course_id, student_enrolment_id)
Transcripts(transcript_id, transcript_date, other_details)
Transcript_Contents(student_course_id, transcript_id)
Foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id
Question:
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
";"db.Students.find( { $or: [ {""permanent_address_id.country"": ""Haiti""}, {cell_mobile_number: ""09700166582""} ] }, {first_name: 1} )"
586;easy;tvshow;SELECT Title FROM Cartoon ORDER BY title;db.Cartoon.find({}, { Title: 1 }).sort({ Title: 1 });db.Cartoon.find({}, { Title: 1 }).sort({Title: 1});db.Cartoon.find({}, {Title: 1}).sort({Title: 1});List the title of all cartoons in alphabetical order.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the title of all cartoons in alphabetical order.
";db.Cartoon.find({}, {Title: 1}).sort({Title: 1})
587;easy;tvshow;SELECT Title FROM Cartoon ORDER BY title;db.Cartoon.find({}, { Title: 1 }).sort({ Title: 1 });db.Cartoon.find({}, { Title: 1 }).sort({Title: 1});db.Cartoon.find({}, { Title: 1}).sort({Title: 1});What are the titles of the cartoons sorted alphabetically?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the titles of the cartoons sorted alphabetically?
";db.Cartoon.find({}, { Title: 1}).sort({Title: 1})
588;easy;tvshow;"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones""";db.Cartoon.find({ Directed_by: 'Ben Jones' }, { Title: 1 });"db.Cartoon.find({Directed_by: ""Ben Jones""}, { Title: 1 })";db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1});List all cartoon directed by 'Ben Jones'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List all cartoon directed by 'Ben Jones'.
";db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1})
589;easy;tvshow;"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones""";"db.Cartoon.find({ Directed_by: ""Ben Jones"" }, { Title: 1 })";"db.Cartoon.find({Directed_by: ""Ben Jones""}, {Title: 1})";db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1});What are the names of all cartoons directed by Ben Jones?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the names of all cartoons directed by Ben Jones?
";db.Cartoon.find({Directed_by: 'Ben Jones'}, {Title: 1})
592;medium;tvshow;SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date;db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 });db.Cartoon.find({}, {Title: 1, Directed_by: 1}).sort({Original_air_date: 1});.;list all cartoon titles and their directors ordered by their air date;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
list all cartoon titles and their directors ordered by their air date
";db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 })
593;medium;tvshow;SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date;db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 });db.Cartoon.find({}, { Title: 1, Directed_by: 1}).sort({Original_air_date: 1});.;What is the name and directors of all the cartoons that are ordered by air date?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the name and directors of all the cartoons that are ordered by air date?
";db.Cartoon.find({}, { Title: 1, Directed_by: 1 }).sort({ Original_air_date: 1 })
594;medium;tvshow;"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti""";db.Cartoon.find({ Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 });db.Cartoon.find({$or: [{Directed_by: 'Ben Jones'}, {Directed_by: 'Brandon Vietti'}]}, {Title: 1});db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 });List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.
";db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })
595;medium;tvshow;"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti""";db.Cartoon.find({ $or: [{ Directed_by: 'Ben Jones' }, { Directed_by: 'Brandon Vietti' }] }, { Title: 1 });"db.Cartoon.find({$or: [{Directed_by: ""Ben Jones""}, {Directed_by: ""Brandon Vietti""}]}, {Title: 1})";db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 });What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
";db.Cartoon.find( { Directed_by: { $in: ['Ben Jones', 'Brandon Vietti'] } }, { Title: 1 })
596;hard;tvshow;SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", count: 1 } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", NumberOfChannels: ""$count"" } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", count: 1 } }])";Which country has the most of TV Channels? List the country and number of TV Channels it has.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
Which country has the most of TV Channels? List the country and number of TV Channels it has.
";"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", count: 1 } }])"
597;hard;tvshow;SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", Count: ""$count"" } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", count: 1 } }])";What is the country with the most number of TV Channels and how many does it have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the country with the most number of TV Channels and how many does it have?
";"db.TV_Channel.aggregate([ { $group: { _id: ""$Country"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Country: ""$_id"", count: 1 } }])"
598;medium;tvshow;SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;"db.TV_Channel.aggregate([ { $group: { _id: null, unique_series_names: { $addToSet: ""$series_name"" }, unique_contents: { $addToSet: ""$Content"" } } }, { $project: { number_of_different_series_names: { $size: ""$unique_series_names"" }, number_of_different_contents: { $size: ""$unique_contents"" } } } ])";.;"db.TV_Channel.aggregate([ { $group: { _id: null, uniqueSeriesNames: { $addToSet: ""$series_name"" }, uniqueContents: { $addToSet: ""$Content"" } } }, { $project: { uniqueSeriesNamesCount: { $size: ""$uniqueSeriesNames"" }, uniqueContentsCount: { $size: ""$uniqueContents"" } } }])";List the number of different series names and contents in the TV Channel table.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the number of different series names and contents in the TV Channel table.
";"db.TV_Channel.aggregate([ { $group: { _id: null, uniqueSeriesNames: { $addToSet: ""$series_name"" }, uniqueContents: { $addToSet: ""$Content"" } } }, { $project: { uniqueSeriesNamesCount: { $size: ""$uniqueSeriesNames"" }, uniqueContentsCount: { $size: ""$uniqueContents"" } } }])"
599;medium;tvshow;SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;"db.TV_Channel.aggregate([ { $group: { _id: null, unique_series: { $addToSet: ""$series_name"" }, unique_content: { $addToSet: ""$Content"" } } }, { $project: { different_series: { $size: ""$unique_series"" }, different_contents: { $size: ""$unique_content"" } } } ])";.;"db.TV_Channel.aggregate([ { $group: { _id: null, series_count: { $addToSet: ""$series_name"" }, content_count: { $addToSet: ""$Content"" } } }, { $project: { series_count: { $size: ""$series_count"" }, content_count: { $size: ""$content_count"" } } }])";How many different series and contents are listed in the TV Channel table?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
How many different series and contents are listed in the TV Channel table?
";"db.TV_Channel.aggregate([ { $group: { _id: null, series_count: { $addToSet: ""$series_name"" }, content_count: { $addToSet: ""$Content"" } } }, { $project: { series_count: { $size: ""$series_count"" }, content_count: { $size: ""$content_count"" } } }])"
600;easy;tvshow;"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio""";db.TV_Channel.find({ series_name: 'Sky Radio' }, { Content: 1 });db.TV_Channel.find({series_name: 'Sky Radio'}, { Content: 1 });db.TV_Channel.find({series_name: 'Sky Radio'}, {Content: 1});What is the content of TV Channel with serial name 'Sky Radio'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the content of TV Channel with serial name 'Sky Radio'?
";db.TV_Channel.find({series_name: 'Sky Radio'}, {Content: 1})
601;easy;tvshow;"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio""";"db.TV_Channel.findOne({ series_name: ""Sky Radio"" }, { Content: 1 })";db.TV_Channel.find({series_name: 'Sky Radio'}, { Content: 1 });db.TV_Channel.find({series_name: 'Sky Radio'}, { Content: 1});What is the content of the series Sky Radio?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the content of the series Sky Radio?
";db.TV_Channel.find({series_name: 'Sky Radio'}, { Content: 1})
602;easy;tvshow;"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio""";db.TV_Channel.findOne({ series_name: 'Sky Radio' }, { Package_Option: 1 });"db.TV_Channel.find({ series_name: ""Sky Radio"" }, { Package_Option: 1 })";db.TV_Channel.find( {series_name: 'Sky Radio'}, { Package_Option: 1});What is the Package Option of TV Channel with serial name 'Sky Radio'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the Package Option of TV Channel with serial name 'Sky Radio'?
";db.TV_Channel.find( {series_name: 'Sky Radio'}, { Package_Option: 1})
603;easy;tvshow;"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio""";db.TV_Channel.find({ series_name: 'Sky Radio' }, { Package_Option: 1 });"db.TV_Channel.find({series_name: ""Sky Radio""}, {Package_Option: 1})";db.TV_Channel.find({series_name: 'Sky Radio'}, { Package_Option: 1});What are the Package Options of the TV Channels whose series names are Sky Radio?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the Package Options of the TV Channels whose series names are Sky Radio?
";db.TV_Channel.find({series_name: 'Sky Radio'}, { Package_Option: 1})
606;hard;tvshow;SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: ""$_id"", NumberOfTVChannels: ""$count"" } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: ""$_id"", ""Number_of_TV_Channel"": ""$count"" } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: ""$_id"", count: 1 } }])";List the language used least number of TV Channel. List language and number of TV Channel.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the language used least number of TV Channel. List language and number of TV Channel.
";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Language: ""$_id"", count: 1 } }])"
607;hard;tvshow;SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", numChannels: { $sum: 1 } } }, { $sort: { numChannels: 1 } }, { $limit: 1 }, { $project: { Language: ""$_id"", numChannels: 1 } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } }}, { $sort: { count: 1 }}, { $limit: 1 } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }])";What are the languages used by the least number of TV Channels and how many channels use it?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the languages used by the least number of TV Channels and how many channels use it?
";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }])"
608;medium;tvshow;SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE;"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } }}, { $project: { Language: ""$_id"", count: ""$count"" }} ])";"db.TV_Channel.aggregate([ {$group: {_id: ""$Language"", count: {$sum: 1}}} ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $project: { Language: ""$_id"", count: 1 } }])";List each language and the number of TV Channels using it.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List each language and the number of TV Channels using it.
";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $project: { Language: ""$_id"", count: 1 } }])"
609;medium;tvshow;SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE;"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", numberOfChannels: { $sum: 1 } } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } } ])";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $project: { Language: ""$_id"", count: 1 } }])";For each language, list the number of TV Channels that use it.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
For each language, list the number of TV Channels that use it.
";"db.TV_Channel.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $project: { Language: ""$_id"", count: 1 } }])"
610;medium;tvshow;"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!""";.;"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" }}, { $match: { ""cartoons.Title"": ""The Rise of the Blue Beetle!"" }}, { $project: { series_name: 1 }} ])";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_info"" } }, { $match: { ""cartoon_info.Title"": ""The Rise of the Blue Beetle!"" } }, { $project: { series_name: 1 } }])";What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_info"" } }, { $match: { ""cartoon_info.Title"": ""The Rise of the Blue Beetle!"" } }, { $project: { series_name: 1 } }])"
611;medium;tvshow;"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!""";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_info"" } }, { $unwind: ""$cartoon_info"" }, { $match: { ""cartoon_info.Title"": ""The Rise of the Blue Beetle!"" } }, { $project: { series_name: 1 } } ])";.;"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_info"" } }, { $match: { ""cartoon_info.Title"": ""The Rise of the Blue Beetle!"" } }, { $project: { series_name: 1 } }])";What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_info"" } }, { $match: { ""cartoon_info.Title"": ""The Rise of the Blue Beetle!"" } }, { $project: { series_name: 1 } }])"
612;medium;tvshow;"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""";db.TV_Channel.aggregate([ { $match: { series_name: 'Sky Radio' } }, { $lookup: { from: 'Cartoon', localField: 'id', foreignField: 'Channel', as: 'cartoons' } }, { $unwind: '$cartoons' }, { $project: { 'Title': '$cartoons.Title' } } ]);.;.;List the title of all Cartoons showed on TV Channel with series name 'Sky Radio'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the title of all Cartoons showed on TV Channel with series name 'Sky Radio'.
";db.TV_Channel.aggregate([ { $match: { series_name: 'Sky Radio' } }, { $lookup: { from: 'Cartoon', localField: 'id', foreignField: 'Channel', as: 'cartoons' } }, { $unwind: '$cartoons' }, { $project: { 'Title': '$cartoons.Title' } } ])
613;medium;tvshow;"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""";.;.;"db.TV_Channel.aggregate([ { $match: { series_name: ""Sky Radio"" } }, { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_data"" } }, { $unwind: ""$cartoon_data"" }, { $project: { Title: ""$cartoon_data.Title"" } }])";What is the title of all the cartools that are on the TV Channel with the series name 'Sky Radio'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the title of all the cartools that are on the TV Channel with the series name 'Sky Radio'?
";"db.TV_Channel.aggregate([ { $match: { series_name: ""Sky Radio"" } }, { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon_data"" } }, { $unwind: ""$cartoon_data"" }, { $project: { Title: ""$cartoon_data.Title"" } }])"
614;easy;tvshow;SELECT Episode FROM TV_series ORDER BY rating;db.TV_series.find({}, {Episode: 1}).sort({Rating: 1});db.TV_series.find({}, {Episode: 1}).sort({Rating: 1});"db.TV_series.aggregate([ { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel_info"" } }, { $unwind: ""$channel_info"" }, { $project: { Episode: 1 }}, { $sort: { Rating: 1 } }])";List the Episode of all TV series sorted by rating.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the Episode of all TV series sorted by rating.
";"db.TV_series.aggregate([ { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel_info"" } }, { $unwind: ""$channel_info"" }, { $project: { Episode: 1 }}, { $sort: { Rating: 1 } }])"
615;easy;tvshow;SELECT Episode FROM TV_series ORDER BY rating;db.TV_series.find({}, { Episode: 1 }).sort({ Rating: 1 });db.TV_series.find({}, { Episode: 1 }).sort({Rating: 1});db.TV_series.find({}, {Episode: 1}).sort({Rating: 1});What are all of the episodes ordered by ratings?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are all of the episodes ordered by ratings?
";db.TV_series.find({}, {Episode: 1}).sort({Rating: 1})
616;medium;tvshow;SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;db.TV_series.find({}, { Episode: 1, Rating: 1 }).sort({ Rating: -1 }).limit(3);.;db.TV_series.aggregate([ { $sort: { Rating: -1 } }, { $project: { Episode: 1, Rating: 1 } }, { $limit: 3 }]);List top 3 highest Rating TV series. List the TV series's Episode and Rating.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List top 3 highest Rating TV series. List the TV series's Episode and Rating.
";db.TV_series.aggregate([ { $sort: { Rating: -1 } }, { $project: { Episode: 1, Rating: 1 } }, { $limit: 3 }])
617;medium;tvshow;SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;db.TV_series.find({}, { Episode: 1, Rating: 1 }).sort({ Rating: -1 }).limit(3);.;db.TV_series.find({}, {Episode: 1, Rating: 1}).sort({Rating: -1}).limit(3);What are 3 most highly rated episodes in the TV series table and what were those ratings?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are 3 most highly rated episodes in the TV series table and what were those ratings?
";db.TV_series.find({}, {Episode: 1, Rating: 1}).sort({Rating: -1}).limit(3)
618;medium;tvshow;SELECT max(SHARE) , min(SHARE) FROM TV_series;"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } } ])";"db.TV_series.aggregate([ { $group: { _id: null, minShare: { $min: ""$Share"" }, maxShare: { $max: ""$Share"" } } }, { $project: { minShare: 1, maxShare: 1 } } ])";"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } }])";What is minimum and maximum share of TV series?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is minimum and maximum share of TV series?
";"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } }])"
619;medium;tvshow;SELECT max(SHARE) , min(SHARE) FROM TV_series;"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } } ])";"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } }}, { $project: { maxShare: 1, minShare: 1 }} ])";"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } }])";What is the maximum and minimum share for the TV series?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the maximum and minimum share for the TV series?
";"db.TV_series.aggregate([ { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } }])"
620;easy;tvshow;"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime""";db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Air_Date: 1 });db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Air_Date: 1});db.TV_series.find({Episode: 'A Love of a Lifetime'}, {Air_Date: 1});What is the air date of TV series with Episode 'A Love of a Lifetime'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the air date of TV series with Episode 'A Love of a Lifetime'?
";db.TV_series.find({Episode: 'A Love of a Lifetime'}, {Air_Date: 1})
621;easy;tvshow;"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime""";db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Air_Date: 1 });.;db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Air_Date: 1});When did the episode 'A Love of a Lifetime' air?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
When did the episode 'A Love of a Lifetime' air?
";db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Air_Date: 1})
622;easy;tvshow;"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime""";db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Weekly_Rank: 1 });.;db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1});What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?
";db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1})
623;easy;tvshow;"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime""";db.TV_series.find({ Episode: 'A Love of a Lifetime' }, { Weekly_Rank: 1 });db.TV_series.find({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1});db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1});What is the weekly rank for the episode 'A Love of a Lifetime'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the weekly rank for the episode 'A Love of a Lifetime'?
";db.TV_series.findOne({Episode: 'A Love of a Lifetime'}, {Weekly_Rank: 1})
624;medium;tvshow;"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime""";"db.TV_series.aggregate([ { $match: { Episode: 'A Love of a Lifetime' } }, { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel_info"" } }, { $unwind: ""$channel_info"" }, { $project: { series_name: ""$channel_info.series_name"" } } ])";.;.;What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.
";"db.TV_series.aggregate([ { $match: { Episode: 'A Love of a Lifetime' } }, { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel_info"" } }, { $unwind: ""$channel_info"" }, { $project: { series_name: ""$channel_info.series_name"" } } ])"
625;medium;tvshow;"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime""";"db.TV_Channel.aggregate([ { $lookup: { from: ""TV_series"", localField: ""id"", foreignField: ""Channel"", as: ""series"" } }, { $unwind: ""$series"" }, { $match: { ""series.Episode"": ""A Love of a Lifetime"" } }, { $project: { series_name: 1 } } ])";.;"db.TV_Channel.aggregate([ { $lookup: { from: ""TV_series"", localField: ""id"", foreignField: ""Channel"", as: ""tv_series"" } }, { $match: { ""tv_series.Episode"": ""A Love of a Lifetime"" } }, { $project: { series_name: 1 }}])";What is the name of the series that has the episode 'A Love of a Lifetime'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the name of the series that has the episode 'A Love of a Lifetime'?
";"db.TV_Channel.aggregate([ { $lookup: { from: ""TV_series"", localField: ""id"", foreignField: ""Channel"", as: ""tv_series"" } }, { $match: { ""tv_series.Episode"": ""A Love of a Lifetime"" } }, { $project: { series_name: 1 }}])"
626;medium;tvshow;"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""";.;"db.TV_series.aggregate([ { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel"" } }, { $match: { ""channel.series_name"": ""Sky Radio"" } }, { $project: { Episode: 1 } } ])";.;List the Episode of all TV series showed on TV Channel with series name 'Sky Radio'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
List the Episode of all TV series showed on TV Channel with series name 'Sky Radio'.
";"db.TV_series.aggregate([ { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel"" } }, { $match: { ""channel.series_name"": ""Sky Radio"" } }, { $project: { Episode: 1 } } ])"
627;medium;tvshow;"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""";.;.;"db.TV_Channel.aggregate([ { $match: { series_name: ""Sky Radio"" } }, { $lookup: { from: ""TV_series"", localField: ""id"", foreignField: ""Channel"", as: ""tv_series"" } }, { $unwind: ""$tv_series"" }, { $project: { episode: ""$tv_series.Episode"" } }])";What is the episode for the TV series named 'Sky Radio'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the episode for the TV series named 'Sky Radio'?
";"db.TV_Channel.aggregate([ { $match: { series_name: ""Sky Radio"" } }, { $lookup: { from: ""TV_series"", localField: ""id"", foreignField: ""Channel"", as: ""tv_series"" } }, { $unwind: ""$tv_series"" }, { $project: { episode: ""$tv_series.Episode"" } }])"
628;medium;tvshow;SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by;"db.Cartoon.aggregate([ { $group: { _id: ""$Directed_by"", count: { $sum: 1 } }} ])";"db.Cartoon.aggregate([ { $group: { _id: ""$Directed_by"", count: { $sum: 1 } } } ])";.;Find the number of cartoons directed by each of the listed directors.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
Find the number of cartoons directed by each of the listed directors.
";"db.Cartoon.aggregate([ { $group: { _id: ""$Directed_by"", count: { $sum: 1 } }} ])"
629;medium;tvshow;SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by;"db.Cartoon.aggregate([ { $group: { _id: ""$Directed_by"", count: { $sum: 1 } }} ])";"db.Cartoon.aggregate([{ $group: { _id: ""$Directed_by"", Total_Cartoons: { $sum: 1} } }])";.;How many cartoons did each director create?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
How many cartoons did each director create?
";"db.Cartoon.aggregate([ { $group: { _id: ""$Directed_by"", count: { $sum: 1 } }} ])"
632;medium;tvshow;"SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = ""yes""";db.TV_Channel.find({ Hight_definition_TV: 'yes' }, { Package_Option: 1, series_name: 1 });.;.;Find the package choice and series name of the TV channel that has high definition TV.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
Find the package choice and series name of the TV channel that has high definition TV.
";db.TV_Channel.find({ Hight_definition_TV: 'yes' }, { Package_Option: 1, series_name: 1 })
633;medium;tvshow;"SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = ""yes""";"db.TV_Channel.find({ Hight_definition_TV: ""yes"" }, { Package_Option: 1, series_name: 1 })";.;.;What are the package options and the name of the series for the TV Channel that supports high definition TV?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the package options and the name of the series for the TV Channel that supports high definition TV?
";"db.TV_Channel.find({ Hight_definition_TV: ""yes"" }, { Package_Option: 1, series_name: 1 })"
635;medium;tvshow;SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey';"db.Cartoon.aggregate([ { $match: { Written_by: 'Todd Casey' } }, { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel_info"" } }, { $unwind: ""$channel_info"" }, { $project: { country: ""$channel_info.Country"" } }, { $group: { _id: ""$country"" } }, { $project: { country: ""$_id"" } } ])";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" } }, { $match: { ""cartoons.Written_by"": ""Todd Casey"" } }, { $project: { Country: 1 } } ])";.;What are the countries that have cartoons on TV that were written by Todd Casey?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the countries that have cartoons on TV that were written by Todd Casey?
";"db.Cartoon.aggregate([ { $match: { Written_by: 'Todd Casey' } }, { $lookup: { from: ""TV_Channel"", localField: ""Channel"", foreignField: ""id"", as: ""channel_info"" } }, { $unwind: ""$channel_info"" }, { $project: { country: ""$channel_info.Country"" } }, { $group: { _id: ""$country"" } }, { $project: { country: ""$_id"" } } ])"
639;extra;tvshow;SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones';"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" } }, { $unwind: ""$cartoons"" }, { $match: { $or: [ { ""cartoons.Directed_by"": ""Ben Jones"" }, { ""cartoons.Directed_by"": ""Michael Chang"" } ] } }, { $group: { _id: { series_name: ""$series_name"", country: ""$Country"" }, directors: { $addToSet: ""$cartoons.Directed_by"" } } }, { $match: { directors: { $all: [""Ben Jones"", ""Michael Chang""] } } }, { $project: { series_name: ""$_id.series_name"", country: ""$_id.country"" } } ])";.;.;What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" } }, { $unwind: ""$cartoons"" }, { $match: { $or: [ { ""cartoons.Directed_by"": ""Ben Jones"" }, { ""cartoons.Directed_by"": ""Michael Chang"" } ] } }, { $group: { _id: { series_name: ""$series_name"", country: ""$Country"" }, directors: { $addToSet: ""$cartoons.Directed_by"" } } }, { $match: { directors: { $all: [""Ben Jones"", ""Michael Chang""] } } }, { $project: { series_name: ""$_id.series_name"", country: ""$_id.country"" } } ])"
644;hard;tvshow;SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones';"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon"" } }, { $match: { ""cartoon"": { $not: { $elemMatch: { ""Directed_by"": ""Ben Jones"" } } } } }, { $project: { id: 1 } } ])";"db.TV_Channel.find({""id"": {$nin: db.Cartoon.distinct(""Channel"", {""Directed_by"": ""Ben Jones""})}}, { id: 1 })";.;find the id of tv channels that do not play any cartoon directed by Ben Jones.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
find the id of tv channels that do not play any cartoon directed by Ben Jones.
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoon"" } }, { $match: { ""cartoon"": { $not: { $elemMatch: { ""Directed_by"": ""Ben Jones"" } } } } }, { $project: { id: 1 } } ])"
645;hard;tvshow;SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones';"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""Cartoon"" } }, { $match: { ""Cartoon"": { $not: { $elemMatch: { Directed_by: ""Ben Jones"" } } } } }, { $project: { id: 1 } } ])";"db.TV_Channel.find({ ""id"": { ""$nin"": db.Cartoon.distinct(""Channel"", { ""Directed_by"": ""Ben Jones"" }) } }, { ""id"": 1 })";.;What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""Cartoon"" } }, { $match: { ""Cartoon"": { $not: { $elemMatch: { Directed_by: ""Ben Jones"" } } } } }, { $project: { id: 1 } } ])"
646;hard;tvshow;SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""Cartoons"" } }, { $match: { ""Cartoons.Directed_by"": { $ne: ""Ben Jones"" } } }, { $project: { Package_Option: 1 } } ])";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" } }, { $match: { ""cartoons.Directed_by"": { $ne: ""Ben Jones"" } } }, { $project: { Package_Option: 1 } } ])";.;find the package option of the tv channel that do not have any cartoon directed by Ben Jones.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""Cartoons"" } }, { $match: { ""Cartoons.Directed_by"": { $ne: ""Ben Jones"" } } }, { $project: { Package_Option: 1 } } ])"
647;hard;tvshow;SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones');"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" } }, { $match: { ""cartoons"": { $not: { $elemMatch: { ""Directed_by"": ""Ben Jones"" } } } } }, { $project: { ""Package_Option"": 1 } } ])";.;.;What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option)
TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel)
Cartoon(id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel)
Foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id
Question:
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
";"db.TV_Channel.aggregate([ { $lookup: { from: ""Cartoon"", localField: ""id"", foreignField: ""Channel"", as: ""cartoons"" } }, { $match: { ""cartoons"": { $not: { $elemMatch: { ""Directed_by"": ""Ben Jones"" } } } } }, { $project: { ""Package_Option"": 1 } } ])"
650;easy;poker_player;SELECT Earnings FROM poker_player ORDER BY Earnings DESC;db.poker_player.find({}, { Earnings: 1 }).sort({ Earnings: -1 });db.poker_player.find({}, { Earnings: 1 }).sort({Earnings: -1});db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1});List the earnings of poker players in descending order.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
List the earnings of poker players in descending order.
";db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1})
651;easy;poker_player;SELECT Earnings FROM poker_player ORDER BY Earnings DESC;db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1});db.poker_player.find({}, {Earnings: 1}).sort({Earnings: -1});db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $project: { Earnings: 1 } }]);What are the earnings of poker players, ordered descending by value?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the earnings of poker players, ordered descending by value?
";db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $project: { Earnings: 1 } }])
652;medium;poker_player;SELECT Final_Table_Made , Best_Finish FROM poker_player;db.poker_player.find({}, { Final_Table_Made: 1, Best_Finish: 1 });db.poker_player.find({}, {Final_Table_Made: 1, Best_Finish: 1});"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $project: { Final_Table_Made: 1, Best_Finish: 1 } }])";List the final tables made and the best finishes of poker players.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
List the final tables made and the best finishes of poker players.
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $project: { Final_Table_Made: 1, Best_Finish: 1 } }])"
653;medium;poker_player;SELECT Final_Table_Made , Best_Finish FROM poker_player;db.poker_player.find({}, { Final_Table_Made: 1, Best_Finish: 1 });db.poker_player.find({}, { Final_Table_Made: 1, Best_Finish: 1 });db.poker_player.find({}, {Final_Table_Made: 1, Best_Finish: 1});What are the final tables made and best finishes for all poker players?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the final tables made and best finishes for all poker players?
";db.poker_player.find({}, {Final_Table_Made: 1, Best_Finish: 1})
654;easy;poker_player;SELECT avg(Earnings) FROM poker_player;"db.poker_player.aggregate([ { $group: { _id: null, avgEarnings: { $avg: ""$Earnings"" } } }, { $project: { avgEarnings: 1} } ])";"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } } ])";"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } }])";What is the average earnings of poker players?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What is the average earnings of poker players?
";"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } }])"
655;easy;poker_player;SELECT avg(Earnings) FROM poker_player;"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } } ])";"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } } ])";"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } }])";Return the average earnings across all poker players.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the average earnings across all poker players.
";"db.poker_player.aggregate([ { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } }])"
656;medium;poker_player;SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;db.poker_player.find({}, { Money_Rank: 1 }).sort({ Earnings: -1 }).limit(1);db.poker_player.find({}, { Money_Rank: 1 }).sort({Earnings: -1}).limit(1);db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }]);What is the money rank of the poker player with the highest earnings?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What is the money rank of the poker player with the highest earnings?
";db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }])
657;medium;poker_player;SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;db.poker_player.find({}, { Money_Rank: 1 }).sort({ Earnings: -1 }).limit(1);db.poker_player.find({}, { Money_Rank: 1}).sort({Earnings: -1}).limit(1);db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }]);Return the money rank of the player with the greatest earnings.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the money rank of the player with the greatest earnings.
";db.poker_player.aggregate([ { $sort: { Earnings: -1 } }, { $limit: 1 }, { $project: { Money_Rank: 1 } }])
658;easy;poker_player;SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;"db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTables: { $max: ""$Final_Table_Made"" } } }, { $project: { maxFinalTables: 1 } } ])";db.poker_player.find({Earnings: {$lt: 200000}}, { Final_Table_Made: 1 }).sort({Final_Table_Made: -1}).limit(1);"db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTables: { $max: ""$Final_Table_Made"" } } }, { $project: { maxFinalTables: 1 } }])";What is the maximum number of final tables made among poker players with earnings less than 200000?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What is the maximum number of final tables made among poker players with earnings less than 200000?
";"db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTables: { $max: ""$Final_Table_Made"" } } }, { $project: { maxFinalTables: 1 } }])"
659;easy;poker_player;SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;"db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 }}}, { $group: { _id: null, maxFinalTableMade: { $max: ""$Final_Table_Made"" }}}, { $project: { maxFinalTableMade: 1 }} ])";db.poker_player.find({Earnings: {$lt: 200000}}, { Final_Table_Made: 1 }).sort({Final_Table_Made: -1}).limit(1);"db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTableMade: { $max: ""$Final_Table_Made"" } } }, { $project: { maxFinalTableMade: 1 } }])";Return the maximum final tables made across all poker players who have earnings below 200000.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the maximum final tables made across all poker players who have earnings below 200000.
";"db.poker_player.aggregate([ { $match: { Earnings: { $lt: 200000 } } }, { $group: { _id: null, maxFinalTableMade: { $max: ""$Final_Table_Made"" } } }, { $project: { maxFinalTableMade: 1 } }])"
660;easy;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $match: { ""player_info"": { $ne: [] } } }, { $project: { ""Name"": 1, ""_id"": 0 } } ])";.;.;What are the names of poker players?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names of poker players?
";"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $match: { ""player_info"": { $ne: [] } } }, { $project: { ""Name"": 1, ""_id"": 0 } } ])"
661;easy;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $match: { ""poker_info"": { $ne: [] } } }, { $project: { Name: 1 } } ])";.;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_player_info"" } }, { $unwind: ""$poker_player_info"" }, { $project: { Name: 1 } }])";Return the names of all the poker players.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the names of all the poker players.
";"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_player_info"" } }, { $unwind: ""$poker_player_info"" }, { $project: { Name: 1 } }])"
662;medium;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000;"db.poker_player.aggregate([ { $match: { Earnings: {$gt: 300000} } }, { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""people_info"" } }, { $unwind: ""$people_info"" }, { $project: { ""Name"": ""$people_info.Name"" } } ])";.;"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: ""$player_info.Name"" } }])";What are the names of poker players whose earnings is higher than 300000?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names of poker players whose earnings is higher than 300000?
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: ""$player_info.Name"" } }])"
663;medium;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000;.;.;"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: ""$player_info.Name"" } }])";Give the names of poker players who have earnings above 300000.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Give the names of poker players who have earnings above 300000.
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $match: { Earnings: { $gt: 300000 } } }, { $project: { Name: ""$player_info.Name"" } }])"
664;medium;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made;.;.;"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $project: { Name: ""$player_info.Name""} }, { $sort: { Final_Table_Made: 1 } }])";List the names of poker players ordered by the final tables made in ascending order.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
List the names of poker players ordered by the final tables made in ascending order.
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $project: { Name: ""$player_info.Name""} }, { $sort: { Final_Table_Made: 1 } }])"
665;medium;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $unwind: ""$poker_info"" }, { $sort: { ""poker_info.Final_Table_Made"": 1 } }, { $project: { Name: 1 } } ])";.;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_player_info"" } }, { $unwind: ""$poker_player_info"" }, { $sort: { ""poker_player_info.Final_Table_Made"": 1 } }, { $project: { Name: 1 } }])";What are the names of poker players, ordered ascending by the number of final tables they have made?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names of poker players, ordered ascending by the number of final tables they have made?
";"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_player_info"" } }, { $unwind: ""$poker_player_info"" }, { $sort: { ""poker_player_info.Final_Table_Made"": 1 } }, { $project: { Name: 1 } }])"
667;hard;poker_player;SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;.;.;"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $sort: { ""Earnings"": 1 } }, { $limit: 1 }, { $project: { ""Birth_Date"": ""$player_info.Birth_Date"" } }])";Return the birth date of the poker player with the lowest earnings.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the birth date of the poker player with the lowest earnings.
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $sort: { ""Earnings"": 1 } }, { $limit: 1 }, { $project: { ""Birth_Date"": ""$player_info.Birth_Date"" } }])"
668;hard;poker_player;SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1;"db.people.aggregate([ { $sort: { Height: -1 } }, { $limit: 1 }, { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $unwind: ""$poker_info"" }, { $project: { Money_Rank: ""$poker_info.Money_Rank"" } } ])";.;.;What is the money rank of the tallest poker player?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What is the money rank of the tallest poker player?
";"db.people.aggregate([ { $sort: { Height: -1 } }, { $limit: 1 }, { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $unwind: ""$poker_info"" }, { $project: { Money_Rank: ""$poker_info.Money_Rank"" } } ])"
669;hard;poker_player;SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1;.;"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_details"" } }, { $sort: { ""player_details.Height"": -1} }, { $limit: 1 }, { $project: { ""Money_Rank"": 1 } } ])";.;Return the money rank of the poker player with the greatest height.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the money rank of the poker player with the greatest height.
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_details"" } }, { $sort: { ""player_details.Height"": -1} }, { $limit: 1 }, { $project: { ""Money_Rank"": 1 } } ])"
670;medium;poker_player;SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200;"db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""pokerDetails"" } }, { $unwind: ""$pokerDetails"" }, { $group: { _id: null, averageEarnings: { $avg: ""$pokerDetails.Earnings"" } } }, { $project: { averageEarnings: 1 } } ])";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""people"" } }, { $unwind: ""$people"" }, { $match: { ""people.Height"": { $gt: 200 } } }, { $group: { _id: null, avg_earnings: { $avg: ""$Earnings"" } } }, { $project: { avg_earnings: 1 } } ])";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $match: { ""player_info.Height"": { $gt: 200 } } }, { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } }])";What is the average earnings of poker players with height higher than 200?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What is the average earnings of poker players with height higher than 200?
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $match: { ""player_info.Height"": { $gt: 200 } } }, { $group: { _id: null, averageEarnings: { $avg: ""$Earnings"" } } }, { $project: { averageEarnings: 1 } }])"
671;medium;poker_player;SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200;"db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $group: { _id: null, avgEarnings: { $avg: ""$player_info.Earnings"" } } }, { $project: { avgEarnings: 1 } } ])";"db.poker_player.aggregate([ { $lookup: { from: 'people', localField: 'People_ID', foreignField: 'People_ID', as: 'player_info' } }, { $match: { ""player_info.Height"": { $gt: 200} } }, { $group: { _id: null, average_earnings: { $avg: ""$Earnings"" } } }, { $project: { average_earnings: 1} } ])";"db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_player_data"" } }, { $unwind: ""$poker_player_data"" }, { $group: { _id: null, avgEarnings: { $avg: ""$poker_player_data.Earnings"" } } }, { $project: { avgEarnings: 1 } } ])";Give average earnings of poker players who are taller than 200.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Give average earnings of poker players who are taller than 200.
";"db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_player_data"" } }, { $unwind: ""$poker_player_data"" }, { $group: { _id: null, avgEarnings: { $avg: ""$poker_player_data.Earnings"" } } }, { $project: { avgEarnings: 1 } } ])"
672;medium;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $sort: { ""player_info.Earnings"": -1 } }, { $project: { ""Name"": 1, ""_id"": 0 } } ])";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player"" }}, { $unwind: ""$player"" }, { $project: { name: ""$player.Name"", Earnings: 1 }}, { $sort: { ""Earnings"": -1 }}, { $project: { name: 1 }} ])";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $project: { Name: ""$player_info.Name"" } }, { $sort: { Earnings: -1 } }])";What are the names of poker players in descending order of earnings?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names of poker players in descending order of earnings?
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $project: { Name: ""$player_info.Name"" } }, { $sort: { Earnings: -1 } }])"
673;medium;poker_player;SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC;"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $unwind: ""$poker_info"" }, { $sort: { ""poker_info.Earnings"": -1 } }, { $project: { ""Name"": 1 } } ])";.;"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $project: { Name: ""$player_info.Name"" } }, { $sort: { Earnings: -1 } }])";Return the names of poker players sorted by their earnings descending.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the names of poker players sorted by their earnings descending.
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""player_info"" } }, { $unwind: ""$player_info"" }, { $project: { Name: ""$player_info.Name"" } }, { $sort: { Earnings: -1 } }])"
674;medium;poker_player;SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality;"db.people.aggregate([ { $group: { _id: ""$Nationality"", NumberOfPeople: { $sum: 1 } } }, { $project: { Nationality: ""$_id"", NumberOfPeople: 1 } } ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } } ])";.;What are different nationalities of people and the corresponding number of people from each nation?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are different nationalities of people and the corresponding number of people from each nation?
";"db.people.aggregate([ { $group: { _id: ""$Nationality"", NumberOfPeople: { $sum: 1 } } }, { $project: { Nationality: ""$_id"", NumberOfPeople: 1 } } ])"
675;medium;poker_player;SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality;"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } } ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } } ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }])";How many people are there of each nationality?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
How many people are there of each nationality?
";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }])"
676;hard;poker_player;SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""people_info"" } }, { $unwind: ""$people_info"" }, { $group: { _id: ""$people_info.Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: ""$_id"" } }])";What is the most common nationality of people?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What is the most common nationality of people?
";"db.poker_player.aggregate([ { $lookup: { from: ""people"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""people_info"" } }, { $unwind: ""$people_info"" }, { $group: { _id: ""$people_info.Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: ""$_id"" } }])"
677;hard;poker_player;SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: ""$_id"" } } ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: ""$_id"" } } ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: ""$_id"" } }])";Give the nationality that is most common across all people.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Give the nationality that is most common across all people.
";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: ""$_id"" } }])"
678;easy;poker_player;SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: ""$_id"" } } ])";.;"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: ""$_id"" } }])";What are the nationalities that are shared by at least two people?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the nationalities that are shared by at least two people?
";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: ""$_id"" } }])"
679;easy;poker_player;SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: ""$_id"" } } ])";"db.people.aggregate([ {$group: {_id: ""$Nationality"", count: {$sum: 1}}}, {$match: {count: {$gte: 2}}}, {$project: { nationality: ""$_id""}} ])";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: ""$_id"" } }])";Return the nationalities for which there are two or more people.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Return the nationalities for which there are two or more people.
";"db.people.aggregate([ { $group: { _id: ""$Nationality"", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Nationality: ""$_id"" } }])"
680;medium;poker_player;SELECT Name , Birth_Date FROM people ORDER BY Name ASC;db.people.find({}, { Name: 1, Birth_Date: 1 }).sort({ Name: 1 });db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1});db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1});List the names and birth dates of people in ascending alphabetical order of name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
List the names and birth dates of people in ascending alphabetical order of name.
";db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1})
681;medium;poker_player;SELECT Name , Birth_Date FROM people ORDER BY Name ASC;db.people.find({}, { Name: 1, Birth_Date: 1 }).sort({ Name: 1 });db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1});db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1});What are the names and birth dates of people, ordered by their names in alphabetical order?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names and birth dates of people, ordered by their names in alphabetical order?
";db.people.find({}, {Name: 1, Birth_Date: 1}).sort({Name: 1})
682;easy;poker_player;"SELECT Name FROM people WHERE Nationality != ""Russia""";db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 });db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 });.;Show names of people whose nationality is not 'Russia'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
Show names of people whose nationality is not 'Russia'.
";db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 })
683;easy;poker_player;"SELECT Name FROM people WHERE Nationality != ""Russia""";db.people.find({ Nationality: { $ne: 'Russia' } }, { Name: 1 });"db.people.find({Nationality: {$ne: ""Russia""}}, {Name: 1})";db.people.find( { Nationality: { $ne: 'Russia' } }, { Name: 1 });What are the names of people who are not from Russia?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names of people who are not from Russia?
";db.people.find( { Nationality: { $ne: 'Russia' } }, { Name: 1 })
684;hard;poker_player;SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $match: { ""poker_info"": { $size: 0 } } }, { $project: { Name: 1 } } ])";db.people.find({ People_ID: { $nin: db.poker_player.distinct('People_ID') } }, { Name: 1 });.;List the names of people that are not poker players.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
List the names of people that are not poker players.
";"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $match: { ""poker_info"": { $size: 0 } } }, { $project: { Name: 1 } } ])"
685;hard;poker_player;SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $match: { ""poker_info"": { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.people.find({People_ID: { $nin: db.poker_player.distinct(""People_ID"") }}, {Name: 1})";.;What are the names of people who do not play poker?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
poker_player(Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings)
people(People_ID, Nationality, Name, Birth_Date, Height)
Foreign keys:
poker_player.People_ID = people.People_ID
Question:
What are the names of people who do not play poker?
";"db.people.aggregate([ { $lookup: { from: ""poker_player"", localField: ""People_ID"", foreignField: ""People_ID"", as: ""poker_info"" } }, { $match: { ""poker_info"": { $size: 0 } } }, { $project: { Name: 1 } } ])"
689;medium;voter_1;SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC;db.CONTESTANTS.find({}, { contestant_number: 1, contestant_name: 1 }).sort({ contestant_name: -1 });db.CONTESTANTS.find({}, {contestant_number: 1, contestant_name: 1}) .sort({contestant_name: -1});.;List the contestant numbers and names, ordered by contestant name descending.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
List the contestant numbers and names, ordered by contestant name descending.
";db.CONTESTANTS.find({}, { contestant_number: 1, contestant_name: 1 }).sort({ contestant_name: -1 })
690;medium;voter_1;SELECT vote_id , phone_number , state FROM votes;db.VOTES.find({}, { vote_id: 1, phone_number: 1, state: 1 });db.VOTES.find({}, {vote_id: 1, phone_number: 1, state: 1});.;List the vote ids, phone numbers and states of all votes.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
List the vote ids, phone numbers and states of all votes.
";db.VOTES.find({}, { vote_id: 1, phone_number: 1, state: 1 })
691;medium;voter_1;SELECT max(area_code) , min(area_code) FROM area_code_state;"db.AREA_CODE_STATE.aggregate([ { $group: { _id: null, maxAreaCode: { $max: ""$area_code"" }, minAreaCode: { $min: ""$area_code"" } } }, { $project: { maxAreaCode: 1, minAreaCode: 1 } } ])";"db.AREA_CODE_STATE.aggregate([{$group: {_id: null, maxAreaCode: {$max: ""$area_code""}, minAreaCode: {$min: ""$area_code""}}}, { $project: { maxAreaCode: 1, minAreaCode: 1 }}])";"db.AREA_CODE_STATE.aggregate([ { $group: { _id: null, maxAreaCode: { $max: ""$area_code"" }, minAreaCode: { $min: ""$area_code"" } } }, { $project: { maxAreaCode: 1, minAreaCode: 1 } }])";What are the maximum and minimum values of area codes?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
What are the maximum and minimum values of area codes?
";"db.AREA_CODE_STATE.aggregate([ { $group: { _id: null, maxAreaCode: { $max: ""$area_code"" }, minAreaCode: { $min: ""$area_code"" } } }, { $project: { maxAreaCode: 1, minAreaCode: 1 } }])"
693;easy;voter_1;SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';db.CONTESTANTS.find({ contestant_name: {$ne: 'Jessie Alloway'} }, { contestant_name: 1 });db.CONTESTANTS.find({ contestant_name: { $ne: 'Jessie Alloway' } }, { contestant_name: 1 });.;What are the names of the contestants whose names are not 'Jessie Alloway';"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
What are the names of the contestants whose names are not 'Jessie Alloway'
";db.CONTESTANTS.find({ contestant_name: {$ne: 'Jessie Alloway'} }, { contestant_name: 1 })
695;medium;voter_1;SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2;"db.VOTES.aggregate([ { $group: { _id: ""$contestant_number"", voteCount: { $sum: 1 } }}, { $match: { voteCount: { $gte: 2 } }}, { $lookup: { from: ""CONTESTANTS"", localField: ""_id"", foreignField: ""contestant_number"", as: ""contestant_info"" }}, { $unwind: ""$contestant_info"" }, { $project: { contestant_number: ""$_id"", contestant_name: ""$contestant_info.contestant_name"" }} ])";"db.CONTESTANTS.aggregate([ { $lookup: { from: ""VOTES"", localField: ""contestant_number"", foreignField: ""contestant_number"", as: ""votes"" } }, { $match: { ""votes.1"": { $exists: true } } }, { $project: { contestant_number: 1, contestant_name: 1 } } ])";.;What are the contestant numbers and names of the contestants who had at least two votes?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
What are the contestant numbers and names of the contestants who had at least two votes?
";"db.VOTES.aggregate([ { $group: { _id: ""$contestant_number"", voteCount: { $sum: 1 } }}, { $match: { voteCount: { $gte: 2 } }}, { $lookup: { from: ""CONTESTANTS"", localField: ""_id"", foreignField: ""contestant_number"", as: ""contestant_info"" }}, { $unwind: ""$contestant_info"" }, { $project: { contestant_number: ""$_id"", contestant_name: ""$contestant_info.contestant_name"" }} ])"
696;extra;voter_1;SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1;"db.VOTES.aggregate([ { $group: { _id: ""$contestant_number"", voteCount: { $sum: 1 } } }, { $sort: { voteCount: 1 } }, { $limit: 1 }, { $lookup: { from: ""CONTESTANTS"", localField: ""_id"", foreignField: ""contestant_number"", as: ""contestantInfo"" } }, { $project: { contestant_number: ""$_id"", contestant_name: { $arrayElemAt: [""$contestantInfo.contestant_name"", 0] } } } ])";"db.CONTESTANTS.aggregate([ { $lookup: { from: ""VOTES"", localField: ""contestant_number"", foreignField: ""contestant_number"", as: ""votes"" }}, { $unwind: ""$votes"" }, { $group: { _id: ""$contestant_number"", contestant_name: { $first: ""$contestant_name"" }, total_votes: { $sum: 1 } }}, { $sort: { total_votes: 1 }}, { $limit: 1 }, { $project: { contestant_name: 1 }} ])";.;Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
";"db.VOTES.aggregate([ { $group: { _id: ""$contestant_number"", voteCount: { $sum: 1 } } }, { $sort: { voteCount: 1 } }, { $limit: 1 }, { $lookup: { from: ""CONTESTANTS"", localField: ""_id"", foreignField: ""contestant_number"", as: ""contestantInfo"" } }, { $project: { contestant_number: ""$_id"", contestant_name: { $arrayElemAt: [""$contestantInfo.contestant_name"", 0] } } } ])"
697;medium;voter_1;SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA';.;db.VOTES.aggregate([ { $match: { state: { $in: ['NY', 'CA'] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ]);.;What are the number of votes from state 'NY' or 'CA'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
What are the number of votes from state 'NY' or 'CA'?
";db.VOTES.aggregate([ { $match: { state: { $in: ['NY', 'CA'] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])
698;extra;voter_1;SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes );"db.CONTESTANTS.aggregate([ { $lookup: { from: ""VOTES"", localField: ""contestant_number"", foreignField: ""contestant_number"", as: ""contestant_votes"" } }, { $match: { contestant_votes: { $size: 0 } } }, { $count: ""contestants_without_votes"" } ])";"db.CONTESTANTS.aggregate([ { $lookup: { from: ""VOTES"", localField: ""contestant_number"", foreignField: ""contestant_number"", as: ""votes"" } }, { $match: { ""votes"": [] } }, { $count: ""contestants_without_votes"" } ])";.;How many contestants did not get voted?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
How many contestants did not get voted?
";"db.CONTESTANTS.aggregate([ { $lookup: { from: ""VOTES"", localField: ""contestant_number"", foreignField: ""contestant_number"", as: ""contestant_votes"" } }, { $match: { contestant_votes: { $size: 0 } } }, { $count: ""contestants_without_votes"" } ])"
699;extra;voter_1;SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1;"db.VOTES.aggregate([ { $group: { _id: ""$state"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""AREA_CODE_STATE"", localField: ""_id"", foreignField: ""state"", as: ""area_code_info"" } }, { $project: { area_code: { $arrayElemAt: [ ""$area_code_info.area_code"", 0 ] } } } ])";"db.VOTES.aggregate([ { $group: { _id: ""$state"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""AREA_CODE_STATE"", localField: ""_id"", foreignField: ""state"", as: ""area_code_state"" } }, { $project: { area_code: { $arrayElemAt: [ ""$area_code_state.area_code"", 0 ] } } } ])";.;What is the area code in which the most voters voted?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
What is the area code in which the most voters voted?
";"db.VOTES.aggregate([ { $group: { _id: ""$state"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""AREA_CODE_STATE"", localField: ""_id"", foreignField: ""state"", as: ""area_code_info"" } }, { $project: { area_code: { $arrayElemAt: [ ""$area_code_info.area_code"", 0 ] } } } ])"
702;medium;voter_1;"select contestant_name from contestants where contestant_name like ""%al%""";db.CONTESTANTS.find({ contestant_name: /Al/i }, { contestant_name: 1 });.;.;Return the names of the contestants whose names contain the substring 'Al' .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
AREA_CODE_STATE(area_code, state)
CONTESTANTS(contestant_number, contestant_name)
VOTES(vote_id, phone_number, state, contestant_number, created)
Foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state
Question:
Return the names of the contestants whose names contain the substring 'Al' .
";db.CONTESTANTS.find({ contestant_name: /Al/i }, { contestant_name: 1 })
707;easy;world_1;"SELECT sum(SurfaceArea) FROM country WHERE Region = ""Caribbean""";"db.country.aggregate([ { $match: { Region: 'Caribbean' } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } } ])";"db.country.aggregate([ { $match: { Region: ""Caribbean"" } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } } ])";"db.country.aggregate([ { $match: { Region: ""Caribbean"" } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])";What is the total surface area of the countries in the Caribbean region?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the total surface area of the countries in the Caribbean region?
";"db.country.aggregate([ { $match: { Region: ""Caribbean"" } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])"
708;easy;world_1;"SELECT sum(SurfaceArea) FROM country WHERE Region = ""Caribbean""";"db.country.aggregate([ { $match: { Region: 'Caribbean' } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } } ])";.;"db.country.aggregate([ { $match: { Region: ""Caribbean"" } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])";How much surface area do the countires in the Carribean cover together?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How much surface area do the countires in the Carribean cover together?
";"db.country.aggregate([ { $match: { Region: ""Caribbean"" } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])"
709;easy;world_1;"SELECT Continent FROM country WHERE Name = ""Anguilla""";db.country.find({ Name: 'Anguilla' }, { Continent: 1 });"db.country.aggregate([ { $match: { Name: ""Anguilla"" } }, { $project: { Continent: 1 } } ])";db.country.find({Name: 'Anguilla'}, {Continent: 1});Which continent is Anguilla in?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which continent is Anguilla in?
";db.country.find({Name: 'Anguilla'}, {Continent: 1})
710;easy;world_1;"SELECT Continent FROM country WHERE Name = ""Anguilla""";db.country.find({ Name: 'Anguilla' }, { Continent: 1 });.;db.country.find({Name: 'Anguilla'}, {Continent: 1});What is the continent name which Anguilla belongs to?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the continent name which Anguilla belongs to?
";db.country.find({Name: 'Anguilla'}, {Continent: 1})
711;medium;world_1;"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = ""Kabul""";.;"db.city.aggregate([ { $match: { Name: ""Kabul"" } }, { $lookup: { from: ""country"", localField: ""CountryCode"", foreignField: ""Code"", as: ""country"" } }, { $unwind: ""$country"" }, { $project: { Region: ""$country.Region"" } } ])";"db.country.aggregate([ { $lookup: { from: ""city"", localField: ""Code"", foreignField: ""CountryCode"", as: ""city_info"" } }, { $match: { ""city_info.Name"": ""Kabul"" } }, { $project: { ""_id"": 0, ""Region"": 1 } }])";Which region is the city Kabul located in?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which region is the city Kabul located in?
";"db.country.aggregate([ { $lookup: { from: ""city"", localField: ""Code"", foreignField: ""CountryCode"", as: ""city_info"" } }, { $match: { ""city_info.Name"": ""Kabul"" } }, { $project: { ""_id"": 0, ""Region"": 1 } }])"
713;extra;world_1;"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Aruba"" ORDER BY Percentage DESC LIMIT 1";.;"db.countrylanguage.find({CountryCode: ""ABW""}, { Language: 1 }).sort({Percentage: -1}).limit(1)";"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $sort: { ""languages.Percentage"": -1 } }, { $limit: 1 }, { $project: { Language: ""$languages.Language"" } }])";Which language is the most popular in Aruba?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which language is the most popular in Aruba?
";"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $sort: { ""languages.Percentage"": -1 } }, { $limit: 1 }, { $project: { Language: ""$languages.Language"" } }])"
714;extra;world_1;"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Aruba"" ORDER BY Percentage DESC LIMIT 1";.;.;"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $sort: { ""languages.Percentage"": -1 } }, { $limit: 1 }, { $project: { Language: ""$languages.Language"" } }])";What language is predominantly spoken in Aruba?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What language is predominantly spoken in Aruba?
";"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $sort: { ""languages.Percentage"": -1 } }, { $limit: 1 }, { $project: { Language: ""$languages.Language"" } }])"
715;medium;world_1;"SELECT Population , LifeExpectancy FROM country WHERE Name = ""Brazil""";"db.country.find({ Name: ""Brazil"" }, { Population: 1, LifeExpectancy: 1 })";"db.country.find({Name: ""Brazil""}, {Population: 1, LifeExpectancy: 1})";db.country.find( { Name: 'Brazil' }, { Population: 1, LifeExpectancy: 1 });What are the population and life expectancies in Brazil?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the population and life expectancies in Brazil?
";db.country.find( { Name: 'Brazil' }, { Population: 1, LifeExpectancy: 1 })
716;medium;world_1;"SELECT Population , LifeExpectancy FROM country WHERE Name = ""Brazil""";"db.country.find({ Name: ""Brazil"" }, { Population: 1, LifeExpectancy: 1 })";"db.country.find({Name: ""Brazil""}, {Population: 1, LifeExpectancy: 1}).pretty()";db.country.find({Name: 'Brazil'}, {Population: 1, LifeExpectancy: 1});Give me Brazil’s population and life expectancies.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give me Brazil’s population and life expectancies.
";db.country.find({Name: 'Brazil'}, {Population: 1, LifeExpectancy: 1})
717;medium;world_1;"SELECT Population , Region FROM country WHERE Name = ""Angola""";db.country.find({ Name: 'Angola' }, { Region: 1, Population: 1 });"db.country.find({ ""Name"": ""Angola"" }, { ""Region"": 1, ""Population"": 1 })";db.country.find( { Name: 'Angola' }, { Population: 1, Region: 1 });What are the region and population of Angola?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the region and population of Angola?
";db.country.find( { Name: 'Angola' }, { Population: 1, Region: 1 })
718;medium;world_1;"SELECT Population , Region FROM country WHERE Name = ""Angola""";db.country.find({ Name: 'Angola' }, { Population: 1, Region: 1 });"db.country.find({ ""Name"": ""Angola"" },{ ""_id"": 0, ""Region"": 1, ""Population"": 1 })";db.country.find({Name: 'Angola'}, {Population: 1, Region: 1});What region does Angola belong to and what is its population?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What region does Angola belong to and what is its population?
";db.country.find({Name: 'Angola'}, {Population: 1, Region: 1})
719;easy;world_1;"SELECT avg(LifeExpectancy) FROM country WHERE Region = ""Central Africa""";"db.country.aggregate([ { $match: { Region: ""Central Africa"" } }, { $group: { _id: null, AvgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { AvgLifeExpectancy: 1 } } ])";"db.country.aggregate([ { $match: { Region: ""Central Africa"" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { avgLifeExpectancy: 1 } } ])";"db.country.aggregate([ { $match: { Region: ""Central Africa"" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { avgLifeExpectancy: 1 } }])";What is the average expected life expectancy for countries in the region of Central Africa?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the average expected life expectancy for countries in the region of Central Africa?
";"db.country.aggregate([ { $match: { Region: ""Central Africa"" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { avgLifeExpectancy: 1 } }])"
720;easy;world_1;"SELECT avg(LifeExpectancy) FROM country WHERE Region = ""Central Africa""";"db.country.aggregate([ { $match: { Region: 'Central Africa' } }, { $group: { _id: null, AverageLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { AverageLifeExpectancy: 1 }} ])";"db.country.aggregate([ { $match: { Continent: ""Africa"", Region: ""Central Africa"" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { avgLifeExpectancy: 1 } } ])";"db.country.aggregate([ { $match: { Region: ""Central Africa"" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { avgLifeExpectancy: 1 } }])";How long is the people’s average life expectancy in Central Africa?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How long is the people’s average life expectancy in Central Africa?
";"db.country.aggregate([ { $match: { Region: ""Central Africa"" } }, { $group: { _id: null, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $project: { avgLifeExpectancy: 1 } }])"
721;hard;world_1;"SELECT Name FROM country WHERE Continent = ""Asia"" ORDER BY LifeExpectancy LIMIT 1";db.country.find({Continent: 'Asia'}, { Name: 1}).sort({LifeExpectancy: 1}).limit(1);"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $sort: { LifeExpectancy: 1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])";db.country.find( { Continent: 'Asia' }, { Name: 1 }).sort({ LifeExpectancy: 1 }).limit(1);What is the name of country that has the shortest life expectancy in Asia?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the name of country that has the shortest life expectancy in Asia?
";db.country.find( { Continent: 'Asia' }, { Name: 1 }).sort({ LifeExpectancy: 1 }).limit(1)
722;hard;world_1;"SELECT Name FROM country WHERE Continent = ""Asia"" ORDER BY LifeExpectancy LIMIT 1";db.country.find({Continent: 'Asia'}, {Name: 1}).sort({LifeExpectancy: 1}).limit(1);"db.country.find({""Continent"": ""Asia""}, { Name: 1 }).sort({""LifeExpectancy"": 1}).limit(1)";db.country.find({Continent: 'Asia'}, {Name: 1}).sort({LifeExpectancy: 1}).limit(1);Give the name of the country in Asia with the lowest life expectancy.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the name of the country in Asia with the lowest life expectancy.
";db.country.find({Continent: 'Asia'}, {Name: 1}).sort({LifeExpectancy: 1}).limit(1)
723;medium;world_1;"SELECT sum(Population) , max(GNP) FROM country WHERE Continent = ""Asia""";"db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, TotalPopulation: { $sum: ""$Population"" }, MaxGNP: { $max: ""$GNP"" } } }, { $project: { TotalPopulation: 1, MaxGNP: 1 } } ])";"db.country.aggregate([ { $match: { ""Continent"": ""Asia"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, maxGnp: { $max: ""$GNP"" } } }, { $project: { totalPopulation: 1, maxGnp: 1 } } ])";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, maxGNP: { $max: ""$GNP"" } }}, { $project: { totalPopulation: 1, maxGNP:1 } }])";What is the total population and maximum GNP in Asia?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the total population and maximum GNP in Asia?
";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, maxGNP: { $max: ""$GNP"" } }}, { $project: { totalPopulation: 1, maxGNP:1 } }])"
724;medium;world_1;"SELECT sum(Population) , max(GNP) FROM country WHERE Continent = ""Asia""";"db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, largestGNP: { $max: ""$GNP"" } } }, { $project: { totalPopulation: 1, largestGNP: 1 } } ])";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, largestGNP: { $max: ""$GNP"" } } }, { $project: { totalPopulation: 1, largestGNP: 1 } } ])";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, maxGNP: { $max: ""$GNP"" } } }, { $project: { totalPopulation: 1, maxGNP: 1 } }])";How many people live in Asia, and what is the largest GNP among them?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many people live in Asia, and what is the largest GNP among them?
";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" }, maxGNP: { $max: ""$GNP"" } } }, { $project: { totalPopulation: 1, maxGNP: 1 } }])"
727;medium;world_1;"SELECT sum(SurfaceArea) FROM country WHERE Continent = ""Asia"" OR Continent = ""Europe""";"db.country.aggregate([ { $match: { Continent: { $in: ['Asia', 'Europe'] } } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } } ])";"db.country.aggregate([ { $match: { Continent: { $in: [""Asia"", ""Europe""] } } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 }} ])";"db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])";What is the total surface area of the continents Asia and Europe?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the total surface area of the continents Asia and Europe?
";"db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])"
728;medium;world_1;"SELECT sum(SurfaceArea) FROM country WHERE Continent = ""Asia"" OR Continent = ""Europe""";"db.country.aggregate([ { $match: { Continent: { $in: [""Asia"", ""Europe""] } } }, { $group: { _id: null, TotalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { TotalSurfaceArea: 1 } } ])";"db.country.aggregate([ { $match: { Continent: { $in: [""Asia"", ""Europe""] } } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 }} ])";"db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])";Give the total surface area covered by countries in Asia or Europe.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the total surface area covered by countries in Asia or Europe.
";"db.country.aggregate([ { $match: { $or: [ { Continent: 'Asia' }, { Continent: 'Europe' } ] } }, { $group: { _id: null, totalSurfaceArea: { $sum: ""$SurfaceArea"" } } }, { $project: { totalSurfaceArea: 1 } }])"
729;easy;world_1;"SELECT sum(Population) FROM city WHERE District = ""Gelderland""";"db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 }} ])";"db.city.aggregate([ { $match: { District: ""Gelderland"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 }} ])";db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }]);How many people live in Gelderland district?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many people live in Gelderland district?
";db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }])
730;easy;world_1;"SELECT sum(Population) FROM city WHERE District = ""Gelderland""";"db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 }} ])";"db.city.aggregate([ { $match: { District: ""Gelderland"" } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 }} ])";db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }]);What is the total population of Gelderland district?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the total population of Gelderland district?
";db.city.aggregate([ { $match: { District: 'Gelderland' } }, { $group: { _id: null, totalPopulation: { $sum: '$Population' } } }, { $project: { totalPopulation: 1 } }])
731;medium;world_1;"SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = ""US Territory""";"db.country.aggregate([ { $match: { GovernmentForm: 'US Territory' } }, { $group: { _id: null, avgGNP: { $avg: ""$GNP"" }, totalPopulation: { $sum: ""$Population"" } } }, { $project: { avgGNP: 1, totalPopulation: 1 }} ])";.;"db.country.aggregate([ { $match: { GovernmentForm: ""US Territory"" } }, { $group: { _id: null, avgGNP: { $avg: ""$GNP"" }, totalPopulation: { $sum: ""$Population"" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])";What is the average GNP and total population in all nations whose government is US territory?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the average GNP and total population in all nations whose government is US territory?
";"db.country.aggregate([ { $match: { GovernmentForm: ""US Territory"" } }, { $group: { _id: null, avgGNP: { $avg: ""$GNP"" }, totalPopulation: { $sum: ""$Population"" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])"
732;medium;world_1;"SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = ""US Territory""";"db.country.aggregate([ { $match: { GovernmentForm: 'US Territory' } }, { $group: { _id: null, avgGNP: { $avg: ""$GNP"" }, totalPopulation: { $sum: ""$Population"" } } }, { $project: { avgGNP: 1, totalPopulation: 1 } } ])";.;"db.country.aggregate([ { $match: { GovernmentForm: ""US Territory"" } }, { $group: { _id: null, avgGNP: { $avg: ""$GNP"" }, totalPopulation: { $sum: ""$Population"" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])";Give the mean GNP and total population of nations which are considered US territory.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the mean GNP and total population of nations which are considered US territory.
";"db.country.aggregate([ { $match: { GovernmentForm: ""US Territory"" } }, { $group: { _id: null, avgGNP: { $avg: ""$GNP"" }, totalPopulation: { $sum: ""$Population"" } }}, { $project: { totalPopulation: 1, avgGNP: 1 } }])"
735;easy;world_1;"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = ""Africa""";"db.country.aggregate([ { $match: { Continent: ""Africa"" } }, { $group: { _id: ""$GovernmentForm"" } }, { $count: ""distinct_government_forms"" } ])";.;.;How many type of governments are in Africa?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many type of governments are in Africa?
";"db.country.aggregate([ { $match: { Continent: ""Africa"" } }, { $group: { _id: ""$GovernmentForm"" } }, { $count: ""distinct_government_forms"" } ])"
736;easy;world_1;"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = ""Africa""";"db.country.aggregate([ { $match: { Continent: ""Africa"" } }, { $group: { _id: ""$GovernmentForm"" } }, { $count: ""distinctGovernmentForms"" } ])";.;.;How many different forms of governments are there in Africa?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many different forms of governments are there in Africa?
";"db.country.aggregate([ { $match: { Continent: ""Africa"" } }, { $group: { _id: ""$GovernmentForm"" } }, { $count: ""distinctGovernmentForms"" } ])"
737;medium;world_1;"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Aruba""";"db.countrylanguage.aggregate([ { $lookup: { from: ""country"", localField: ""CountryCode"", foreignField: ""Code"", as: ""country"" } }, { $match: { ""country.Name"": ""Aruba"" } }, { $count: ""TotalLanguages"" } ])";.;"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $project: { languages: { $size: ""$languages"" } } }])";What is the total number of languages used in Aruba?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the total number of languages used in Aruba?
";"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $project: { languages: { $size: ""$languages"" } } }])"
738;medium;world_1;"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Aruba""";"db.countrylanguage.aggregate([ { $lookup: { from: ""country"", localField: ""CountryCode"", foreignField: ""Code"", as: ""country_info"" } }, { $match: { ""country_info.Name"": ""Aruba"" } }, { $group: { _id: ""$Language"" } }, { $count: ""num_languages"" } ])";.;"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $project: { languages: { $size: ""$languages"" } } }])";How many languages are spoken in Aruba?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many languages are spoken in Aruba?
";"db.country.aggregate([ { $match: { Name: ""Aruba"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $project: { languages: { $size: ""$languages"" } } }])"
739;medium;world_1;"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Afghanistan"" AND IsOfficial = ""T""";.;.;"db.country.aggregate([ { $match: { Name: ""Afghanistan"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many official languages does Afghanistan have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many official languages does Afghanistan have?
";"db.country.aggregate([ { $match: { Name: ""Afghanistan"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
740;medium;world_1;"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Afghanistan"" AND IsOfficial = ""T""";"db.country.aggregate([ { $match: { Name: 'Afghanistan' } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""official_languages"" } }, { $unwind: ""$official_languages"" }, { $match: { ""official_languages.IsOfficial"": ""T"" } }, { $count: ""num_official_languages"" } ])";.;"db.country.aggregate([ { $match: { Name: ""Afghanistan"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many official languages are spoken in Afghanistan?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many official languages are spoken in Afghanistan?
";"db.country.aggregate([ { $match: { Name: ""Afghanistan"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
743;extra;world_1;SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$Continent"", distinctLanguages: { $addToSet: ""$languages.Language"" } } }, { $project: { _id: 1, numberOfLanguages: { $size: ""$distinctLanguages"" } } }, { $sort: { numberOfLanguages: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $group: { _id: ""$Continent"", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: ""$_id""} }])";Which continent has the most diverse languages?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which continent has the most diverse languages?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $group: { _id: ""$Continent"", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: ""$_id""} }])"
744;extra;world_1;SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$Continent"", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$Continent"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 }}])";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $group: { _id: ""$Continent"", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: ""$_id""} }])";Which continent speaks the most languages?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which continent speaks the most languages?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $group: { _id: ""$Continent"", languageCount: { $sum: 1 } } }, { $sort: { languageCount: -1 } }, { $limit: 1 }, { $project: { Continent: ""$_id""} }])"
745;easy;world_1;"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Dutch"")";.;.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""Dutch""] } } }, { $count: ""count"" }])";How many countries speak both English and Dutch?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many countries speak both English and Dutch?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""Dutch""] } } }, { $count: ""count"" }])"
746;easy;world_1;"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Dutch"")";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""Dutch""] } } }, { $count: ""NumberOfNations"" } ])";.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""Dutch""] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";What is the number of nations that use English and Dutch?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the number of nations that use English and Dutch?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""Dutch""] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
747;extra;world_1;"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""French""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""French""] } } }, { $project: { ""Name"": 1, ""_id"": 0 } } ])";.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""French""] } } }, { $project: { Name: 1 } }])";What are the names of nations speak both English and French?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the names of nations speak both English and French?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""French""] } } }, { $project: { Name: 1 } }])"
748;extra;world_1;"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""French""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages"": { $all: [ { $elemMatch: { Language: ""English"" } }, { $elemMatch: { Language: ""French"" } } ] } } }, { $project: { Name: 1 } } ])";.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""French""] } } }, { $project: { Name: 1 } }])";Give the names of nations that speak both English and French.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the names of nations that speak both English and French.
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $all: [""English"", ""French""] } } }, { $project: { Name: 1 } }])"
750;extra;world_1;"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" AND T2.IsOfficial = ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""French"" AND T2.IsOfficial = ""T""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages"": { $elemMatch: { ""Language"": ""English"", ""IsOfficial"": ""T"" } } } }, { $match: { ""languages"": { $elemMatch: { ""Language"": ""French"", ""IsOfficial"": ""T"" } } } }, { $project: { ""Name"": 1, ""_id"": 0 } } ])";.;.;Give the names of countries with English and French as official languages.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the names of countries with English and French as official languages.
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages"": { $elemMatch: { ""Language"": ""English"", ""IsOfficial"": ""T"" } } } }, { $match: { ""languages"": { $elemMatch: { ""Language"": ""French"", ""IsOfficial"": ""T"" } } } }, { $project: { ""Name"": 1, ""_id"": 0 } } ])"
751;medium;world_1;"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Chinese""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": ""Chinese"" } }, { $group: { _id: ""$Continent"" } }, { $count: ""distinct_continents"" } ])";.;.;What is the number of distinct continents where Chinese is spoken?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the number of distinct continents where Chinese is spoken?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": ""Chinese"" } }, { $group: { _id: ""$Continent"" } }, { $count: ""distinct_continents"" } ])"
752;medium;world_1;"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Chinese""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": ""Chinese"" } }, { $group: { _id: ""$Continent"" } }, { $count: ""distinct_continents"" } ])";.;.;How many continents speak Chinese?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many continents speak Chinese?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": ""Chinese"" } }, { $group: { _id: ""$Continent"" } }, { $count: ""distinct_continents"" } ])"
753;hard;world_1;"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" OR T2.Language = ""Dutch""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $in: [""English"", ""Dutch""] } } }, { $group: { _id: ""$Region"" } }, { $project: { Region: ""$_id"" } } ])";.;"db.country.aggregate([ { $match: { ""Code"": { $in: db.countrylanguage.distinct(""CountryCode"", { Language: { $in: [""English"", ""Dutch""] } }) } } }, { $group: { _id: ""$Region"" } }, { $project: { Region: ""$_id"" } }])";What are the regions that use English or Dutch?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the regions that use English or Dutch?
";"db.country.aggregate([ { $match: { ""Code"": { $in: db.countrylanguage.distinct(""CountryCode"", { Language: { $in: [""English"", ""Dutch""] } }) } } }, { $group: { _id: ""$Region"" } }, { $project: { Region: ""$_id"" } }])"
754;hard;world_1;"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" OR T2.Language = ""Dutch""";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $in: [""Dutch"", ""English""] } } }, { $group: { _id: ""$Region"" } }, { $project: { Region: ""$_id"" } } ])";.;.;Which regions speak Dutch or English?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which regions speak Dutch or English?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $in: [""Dutch"", ""English""] } } }, { $group: { _id: ""$Region"" } }, { $project: { Region: ""$_id"" } } ])"
757;extra;world_1;"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1";"db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" }}, { $unwind: ""$languages"" }, { $group: { _id: ""$languages.Language"", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";.;"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$languages.Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])";Which language is the most popular on the Asian continent?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which language is the most popular on the Asian continent?
";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$languages.Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])"
758;extra;world_1;"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" }}, { $unwind: ""$languages"" }, { $group: { _id: ""$languages.Language"", numberOfCountries: { $sum: 1 } }}, { $sort: { numberOfCountries: -1 } }, { $limit: 1 }, { $project: { _id: 1, numberOfCountries: 0 } } ])";"db.countrylanguage.aggregate([ { $lookup: { from: ""country"", localField: ""CountryCode"", foreignField: ""Code"", as: ""country"" }}, { $match: { ""country.Continent"": ""Asia"" }}, { $group: { _id: ""$Language"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit : 1 }, { $project: { language: ""$_id"" }} ])";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$languages.Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])";What is the language that is used by the largest number of Asian nations?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the language that is used by the largest number of Asian nations?
";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $group: { _id: ""$languages.Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } }])"
761;extra;world_1;"SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = ""English"" ORDER BY T1.Population DESC LIMIT 1";"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""language"" } }, { $match: { ""language.Language"": ""English"" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])";.;"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""country_language"" } }, { $match: { ""country_language.Language"": ""English"" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])";Find the city with the largest population that uses English.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Find the city with the largest population that uses English.
";"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""country_language"" } }, { $match: { ""country_language.Language"": ""English"" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])"
762;extra;world_1;"SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = ""English"" ORDER BY T1.Population DESC LIMIT 1";"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": ""English"" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])";"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""countrylanguage"" } }, { $unwind: ""$countrylanguage"" }, { $match: { ""countrylanguage.Language"": ""English"" } }, { $sort: { ""Population"": -1 } }, { $limit: 1 }, { $project: { ""_id"": 0, ""Name"": 1, ""Population"": 1 } } ])";"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""country_info"" } }, { $unwind: ""$country_info"" }, { $match: { ""country_info.Language"": ""English"" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])";What is the most populace city that speaks English?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the most populace city that speaks English?
";"db.city.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""CountryCode"", foreignField: ""CountryCode"", as: ""country_info"" } }, { $unwind: ""$country_info"" }, { $match: { ""country_info.Language"": ""English"" } }, { $sort: { Population: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } }])"
763;hard;world_1;"SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1";db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 } ).sort({ SurfaceArea: -1 }).limit(1);"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $sort: { SurfaceArea: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1, LifeExpectancy: 1 } } ])";db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1);Find the name, population and expected life length of asian country with the largest area?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Find the name, population and expected life length of asian country with the largest area?
";db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)
764;hard;world_1;"SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1";db.country.find( { Continent: 'Asia' }, { Name: 1, Population: 1, LifeExpectancy: 1 } ).sort({ SurfaceArea: -1 }).limit(1);"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $sort: { SurfaceArea: -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1, LifeExpectancy: 1 } } ])";"db.country.find( { Continent: ""Asia"" }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)";What are the name, population, and life expectancy of the largest Asian country by land?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the name, population, and life expectancy of the largest Asian country by land?
";"db.country.find( { Continent: ""Asia"" }, { Name: 1, Population: 1, LifeExpectancy: 1 }).sort({ SurfaceArea: -1 }).limit(1)"
767;extra;world_1;"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"")";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages"": { $not: { $elemMatch: { ""Language"": ""English"" } } } } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 } } ])";.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $ne: ""English"" } } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 } }])";What is the total number of people living in the nations that do not use English?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the total number of people living in the nations that do not use English?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $ne: ""English"" } } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 } }])"
768;extra;world_1;"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"")";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages"": { $not: { $elemMatch: { Language: ""English"" } } } } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 } } ])";.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $ne: ""English"" } } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 } }])";How many people live in countries that do not speak English?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
How many people live in countries that do not speak English?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""languages.Language"": { $ne: ""English"" } } }, { $group: { _id: null, totalPopulation: { $sum: ""$Population"" } } }, { $project: { totalPopulation: 1 } }])"
769;medium;world_1;"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = ""Beatrix"" AND T2.IsOfficial = ""T""";"db.country.aggregate([ { $match: { HeadOfState: 'Beatrix' } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $project: { Language: ""$languages.Language"" } } ])";.;"db.country.aggregate([ { $match: { HeadOfState: ""Beatrix"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $project: { Language: ""$languages.Language"" } }])";What is the official language spoken in the country whose head of state is Beatrix?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the official language spoken in the country whose head of state is Beatrix?
";"db.country.aggregate([ { $match: { HeadOfState: ""Beatrix"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $project: { Language: ""$languages.Language"" } }])"
770;medium;world_1;"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = ""Beatrix"" AND T2.IsOfficial = ""T""";.;.;"db.country.aggregate([ { $match: { HeadOfState: ""Beatrix"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""country_language"" } }, { $unwind: ""$country_language"" }, { $match: { ""country_language.IsOfficial"": ""T"" } }, { $project: { Language: ""$country_language.Language"" } }])";What is the official language used in the country the name of whose head of state is Beatrix.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What is the official language used in the country the name of whose head of state is Beatrix.
";"db.country.aggregate([ { $match: { HeadOfState: ""Beatrix"" } }, { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""country_language"" } }, { $unwind: ""$country_language"" }, { $match: { ""country_language.IsOfficial"": ""T"" } }, { $project: { Language: ""$country_language.Language"" } }])"
772;medium;world_1;"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = ""T""";.;.;"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""IndepYear"": { $lt: 1930 } } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $group: { _id: null, distinctLanguages: { $addToSet: ""$languages.Language"" } } }, { $project: { totalDistinctLanguages: { $size: ""$distinctLanguages"" } } }])";For the countries founded before 1930, what is the total number of distinct official languages?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
For the countries founded before 1930, what is the total number of distinct official languages?
";"db.country.aggregate([ { $lookup: { from: ""countrylanguage"", localField: ""Code"", foreignField: ""CountryCode"", as: ""languages"" } }, { $match: { ""IndepYear"": { $lt: 1930 } } }, { $unwind: ""$languages"" }, { $match: { ""languages.IsOfficial"": ""T"" } }, { $group: { _id: null, distinctLanguages: { $addToSet: ""$languages.Language"" } } }, { $project: { totalDistinctLanguages: { $size: ""$distinctLanguages"" } } }])"
776;extra;world_1;"SELECT Name FROM country WHERE Continent = ""Africa"" AND population < (SELECT min(population) FROM country WHERE Continent = ""Asia"")";"db.country.aggregate([ { $match: { Continent: ""Asia"" } }, { $group: { _id: null, minPopulation: { $min: ""$Population"" } } }, { $lookup: { from: ""country"", let: { minAsiaPop: ""$minPopulation"" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [""$Continent"", ""Africa""] }, { $lt: [""$Population"", ""$$minAsiaPop""] } ] } } }, { $project: { Name: 1 } } ], as: ""africanCountries"" } }, { $unwind: ""$africanCountries"" }, { $replaceRoot: { newRoot: ""$africanCountries"" } } ])";db.country.find({ 'Continent': 'Africa', 'Population': { $lt: db.country.find({ 'Continent': 'Asia' }).sort({ 'Population': 1 }).limit(1).next().Population } }, { 'Name': 1 });db.country.find( { Continent: 'Africa', Population: { $lt: db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, minPopulation: { $min: '$Population' } } } ]).toArray()[0].minPopulation } }, { Name: 1 });Which African countries have a smaller population than that of any country in Asia?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which African countries have a smaller population than that of any country in Asia?
";db.country.find( { Continent: 'Africa', Population: { $lt: db.country.aggregate([ { $match: { Continent: 'Asia' } }, { $group: { _id: null, minPopulation: { $min: '$Population' } } } ]).toArray()[0].minPopulation } }, { Name: 1 })
791;medium;world_1;SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;db.country.find({}, { Name: 1, Population: 1, HeadOfState: 1 }).sort({ SurfaceArea: -1 }).limit(1);db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1);db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1);What are the population, name and leader of the country with the largest area?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the population, name and leader of the country with the largest area?
";db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1)
792;medium;world_1;SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;db.country.find({}, { Name: 1, Population: 1, HeadOfState: 1 }).sort({ SurfaceArea: -1 }).limit(1);db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}) .sort({SurfaceArea: -1}) .limit(1);db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1);Give the name, population, and head of state for the country that has the largest area.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the name, population, and head of state for the country that has the largest area.
";db.country.find({}, {Name: 1, Population: 1, HeadOfState: 1}).sort({SurfaceArea: -1}).limit(1)
797;medium;world_1;SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72;"db.country.aggregate([ { $group: { _id: ""$GovernmentForm"", TotalPopulation: { $sum: ""$Population"" }, AverageLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $match: { AverageLifeExpectancy: { $gt: 72 } } }, { $project: { GovernmentForm: ""$_id"", TotalPopulation: 1 } } ])";.;"db.country.aggregate([ { $group: { _id: ""$GovernmentForm"", totalPopulation: { $sum: ""$Population"" }, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $match: { avgLifeExpectancy: { $gt: 72 } } }, { $project: { GovernmentForm: ""$_id"", totalPopulation: 1 } }])";Find the government form name and total population for each government form whose average life expectancy is longer than 72.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
";"db.country.aggregate([ { $group: { _id: ""$GovernmentForm"", totalPopulation: { $sum: ""$Population"" }, avgLifeExpectancy: { $avg: ""$LifeExpectancy"" } } }, { $match: { avgLifeExpectancy: { $gt: 72 } } }, { $project: { GovernmentForm: ""$_id"", totalPopulation: 1 } }])"
801;medium;world_1;SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;db.country.find({}, { Name: 1, SurfaceArea: 1 }).sort({ SurfaceArea: -1 }).limit(5);db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5);db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5);What are the names and areas of countries with the top 5 largest area?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the names and areas of countries with the top 5 largest area?
";db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5)
802;medium;world_1;SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;db.country.find({}, { Name: 1, SurfaceArea: 1 }).sort({ SurfaceArea: -1 }).limit(5);db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5);db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5);Return the names and surface areas of the 5 largest countries.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Return the names and surface areas of the 5 largest countries.
";db.country.find({}, {Name: 1, SurfaceArea: 1}).sort({SurfaceArea: -1}).limit(5)
803;medium;world_1;SELECT Name FROM country ORDER BY Population DESC LIMIT 3;db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3);db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3);db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3);What are names of countries with the top 3 largest population?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are names of countries with the top 3 largest population?
";db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)
804;medium;world_1;SELECT Name FROM country ORDER BY Population DESC LIMIT 3;db.country.find({}, { Name: 1 }).sort({ Population: -1 }).limit(3);.;db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3);Return the names of the 3 most populated countries.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Return the names of the 3 most populated countries.
";db.country.find({}, {Name: 1}).sort({Population: -1}).limit(3)
805;medium;world_1;SELECT Name FROM country ORDER BY Population ASC LIMIT 3;db.country.find({}, {Name: 1}).sort({Population: 1}).limit(3);db.country.find({}, {Name: 1}).sort({Population: 1}).limit(3);db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3);What are the names of the nations with the 3 lowest populations?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
What are the names of the nations with the 3 lowest populations?
";db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3)
806;medium;world_1;SELECT Name FROM country ORDER BY Population ASC LIMIT 3;"db.country.find({}, { ""Name"": 1, ""_id"": 0 }).sort({ ""Population"": 1 }).limit(3)";db.country.find({}, {Name: 1}).sort({Population: 1}).limit(3);db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3);Return the names of the 3 countries with the fewest people.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Return the names of the 3 countries with the fewest people.
";db.country.find({}, { Name: 1}).sort({Population: 1}).limit(3)
815;hard;world_1;SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 },{ $project: { _id: 1 }}] )";"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: ""$_id"" } }])";Which language is spoken by the largest number of countries?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Which language is spoken by the largest number of countries?
";"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: ""$_id"" } }])"
816;hard;world_1;SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1} } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { language: ""$_id"" } } ])";"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: ""$_id"" } }])";Give the language that is spoken in the most countries.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
city(ID, Name, CountryCode, District, Population)
sqlite_sequence(name, seq)
country(Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)
countrylanguage(CountryCode, Language, IsOfficial, Percentage)
Foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code
Question:
Give the language that is spoken in the most countries.
";"db.countrylanguage.aggregate([ { $group: { _id: ""$Language"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Language: ""$_id"" } }])"
825;easy;orchestra;SELECT Name FROM conductor ORDER BY Age ASC;db.conductor.find({}, { Name: 1 }).sort({ Age: 1 });db.conductor.find({}, {Name: 1}).sort({Age: 1});db.conductor.find({}, {Name: 1}).sort({Age: 1});List the names of conductors in ascending order of age.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
List the names of conductors in ascending order of age.
";db.conductor.find({}, {Name: 1}).sort({Age: 1})
826;easy;orchestra;SELECT Name FROM conductor ORDER BY Age ASC;db.conductor.find({}, { Name: 1}).sort({Age: 1});db.conductor.find({}, { Name: 1 }).sort({ Age: 1 });db.conductor.find({}, {Name: 1}).sort({Age: 1});What are the names of conductors, ordered by age?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the names of conductors, ordered by age?
";db.conductor.find({}, {Name: 1}).sort({Age: 1})
827;easy;orchestra;SELECT Name FROM conductor WHERE Nationality != 'USA';db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1});db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 });db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1});What are the names of conductors whose nationalities are not 'USA'?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the names of conductors whose nationalities are not 'USA'?
";db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1})
828;easy;orchestra;SELECT Name FROM conductor WHERE Nationality != 'USA';db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 });db.conductor.find({Nationality: {$ne: 'USA'}}, {Name: 1});db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 });Return the names of conductors that do not have the nationality 'USA'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Return the names of conductors that do not have the nationality 'USA'.
";db.conductor.find({ Nationality: { $ne: 'USA' } }, { Name: 1 })
829;easy;orchestra;SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;db.orchestra.find({}, { Record_Company: 1 }).sort({ Year_of_Founded: -1 });db.orchestra.find({}, { Record_Company: 1}).sort({Year_of_Founded: -1});db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1});What are the record companies of orchestras in descending order of years in which they were founded?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the record companies of orchestras in descending order of years in which they were founded?
";db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1})
830;easy;orchestra;SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;db.orchestra.find({}, { Record_Company: 1 }).sort({ Year_of_Founded: -1 });.;db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1});Return the record companies of orchestras, sorted descending by the years in which they were founded.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Return the record companies of orchestras, sorted descending by the years in which they were founded.
";db.orchestra.find({}, {Record_Company: 1}).sort({Year_of_Founded: -1})
831;easy;orchestra;SELECT avg(Attendance) FROM SHOW;"db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: ""$Attendance"" } } }, { $project: { averageAttendance: 1 } } ])";"db.show.aggregate([ { $group: { _id: null, average_attendance: { $avg: ""$Attendance"" } } }, { $project: { average_attendance: 1} } ])";"db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: ""$Attendance"" } } }, { $project: { averageAttendance: 1 } }])";What is the average attendance of shows?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What is the average attendance of shows?
";"db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: ""$Attendance"" } } }, { $project: { averageAttendance: 1 } }])"
832;easy;orchestra;SELECT avg(Attendance) FROM SHOW;"db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: ""$Attendance"" } } }, { $project: { averageAttendance: 1 } } ])";"db.show.aggregate([ { $group: { _id: null, average_attendance: { $avg: ""$Attendance"" } } }, { $project: { average_attendance: 1} } ])";"db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: ""$Attendance"" } } }, { $project: { averageAttendance: 1 } }])";Return the average attendance across all shows.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Return the average attendance across all shows.
";"db.show.aggregate([ { $group: { _id: null, averageAttendance: { $avg: ""$Attendance"" } } }, { $project: { averageAttendance: 1 } }])"
833;medium;orchestra;"SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != ""Live final""";"db.performance.aggregate([ { $match: { Type: { $ne: ""Live final"" } } }, { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } } ])";.;.;What are the maximum and minimum share of performances whose type is not 'Live final'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the maximum and minimum share of performances whose type is not 'Live final'.
";"db.performance.aggregate([ { $match: { Type: { $ne: ""Live final"" } } }, { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } } ])"
834;medium;orchestra;"SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != ""Live final""";"db.performance.aggregate([ { $match: { Type: { $ne: 'Live final' } } }, { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } } ])";.;.;Return the maximum and minimum shares for performances that do not have the type 'Live final'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Return the maximum and minimum shares for performances that do not have the type 'Live final'.
";"db.performance.aggregate([ { $match: { Type: { $ne: 'Live final' } } }, { $group: { _id: null, maxShare: { $max: ""$Share"" }, minShare: { $min: ""$Share"" } } }, { $project: { maxShare: 1, minShare: 1 } } ])"
837;easy;orchestra;SELECT Name FROM conductor ORDER BY Year_of_Work DESC;db.conductor.find({}, { Name: 1 }).sort({ Year_of_Work: -1 });db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1});db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1});List names of conductors in descending order of years of work.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
List names of conductors in descending order of years of work.
";db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1})
838;easy;orchestra;SELECT Name FROM conductor ORDER BY Year_of_Work DESC;db.conductor.find({}, { Name: 1 }).sort({ Year_of_Work: -1 });.;db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1});What are the names of conductors, sorted descending by the number of years they have worked?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the names of conductors, sorted descending by the number of years they have worked?
";db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1})
839;medium;orchestra;SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;db.conductor.find({}, { Name: 1 }).sort({ Year_of_Work: -1 }).limit(1);"db.conductor.aggregate([ { $group: { _id: ""$Name"", Years_of_Work: { $sum: ""$Year_of_Work"" } } }, { $sort: { Years_of_Work: -1 } }, { $limit: 1 }, { $project: { Name: ""$_id"" } } ])";db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1);List the name of the conductor with the most years of work.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
List the name of the conductor with the most years of work.
";db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)
840;medium;orchestra;SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1);"db.conductor.aggregate([ { $group: { _id: ""$Name"", yearsOfWork: { $sum: ""$Year_of_Work"" } } }, { $sort: { yearsOfWork: -1 } }, { $limit: 1 }, { $project: { conductorName: ""$_id"" } } ])";db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1);What is the name of the conductor who has worked the greatest number of years?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What is the name of the conductor who has worked the greatest number of years?
";db.conductor.find({}, {Name: 1}).sort({Year_of_Work: -1}).limit(1)
841;medium;orchestra;SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestras"" } }, { $unwind: ""$orchestras"" }, { $project: { Name: 1, Orchestra: ""$orchestras.Orchestra"" } } ])";.;.;Show the names of conductors and the orchestras they have conducted.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Show the names of conductors and the orchestras they have conducted.
";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestras"" } }, { $unwind: ""$orchestras"" }, { $project: { Name: 1, Orchestra: ""$orchestras.Orchestra"" } } ])"
842;medium;orchestra;SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestras"" } }, { $unwind: ""$orchestras"" }, { $project: { ""Name"": 1, ""Orchestra"": ""$orchestras.Orchestra"" } } ])";.;.;What are the names of conductors as well as the corresonding orchestras that they have conducted?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the names of conductors as well as the corresonding orchestras that they have conducted?
";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestras"" } }, { $unwind: ""$orchestras"" }, { $project: { ""Name"": 1, ""Orchestra"": ""$orchestras.Orchestra"" } } ])"
847;medium;orchestra;SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008;"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestras"" } }, { $match: { ""orchestras.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } } ])";"db.conductor.aggregate([ {$lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""conductor_orchestra"" }}, {$unwind: ""$conductor_orchestra""}, {$match: {""conductor_orchestra.Year_of_Founded"": {$gt: 2008}}}, {$project: { Name: 1}} ])";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestra_info"" } }, { $match: { ""orchestra_info.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } }])";Please show the name of the conductor that has conducted orchestras founded after 2008.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Please show the name of the conductor that has conducted orchestras founded after 2008.
";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestra_info"" } }, { $match: { ""orchestra_info.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } }])"
848;medium;orchestra;SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008;"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestra_info"" } }, { $unwind: ""$orchestra_info"" }, { $match: { ""orchestra_info.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } } ])";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestra_info"" } }, { $match: { ""orchestra_info.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } } ])";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestra_info"" } }, { $unwind: ""$orchestra_info"" }, { $match: { ""orchestra_info.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } }])";What are the names of conductors who have conducted orchestras founded after the year 2008?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the names of conductors who have conducted orchestras founded after the year 2008?
";"db.conductor.aggregate([ { $lookup: { from: ""orchestra"", localField: ""Conductor_ID"", foreignField: ""Conductor_ID"", as: ""orchestra_info"" } }, { $unwind: ""$orchestra_info"" }, { $match: { ""orchestra_info.Year_of_Founded"": { $gt: 2008 } } }, { $project: { Name: 1 } }])"
849;medium;orchestra;SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company;"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", NumberOfOrchestras: { $sum: 1 } } }, { $project: { Record_Company: ""$_id"", NumberOfOrchestras: 1 } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }])";Please show the different record companies and the corresponding number of orchestras.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Please show the different record companies and the corresponding number of orchestras.
";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }])"
850;medium;orchestra;SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company;"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", NumberOfOrchestras: { $sum: 1 } } }, { $project: { Record_Company: ""$_id"", NumberOfOrchestras: 1 } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $project: { Record_Company: ""$_id"", Count_of_Orchestras: ""$count"" } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }])";How many orchestras does each record company manage?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
How many orchestras does each record company manage?
";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }])"
851;medium;orchestra;SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;db.orchestra.aggregate([ { $group: { _id: '$Major_Record_Format', count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: '$_id' } } ]);"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { _id: 1 } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: ""$_id""} }])";Please show the record formats of orchestras in ascending order of count.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Please show the record formats of orchestras in ascending order of count.
";"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: ""$_id""} }])"
852;medium;orchestra;SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: ""$_id"" } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: ""$_id"" } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: ""$_id""} }])";What are the major record formats of orchestras, sorted by their frequency?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the major record formats of orchestras, sorted by their frequency?
";"db.orchestra.aggregate([ { $group: { _id: ""$Major_Record_Format"", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Major_Record_Format: ""$_id""} }])"
853;hard;orchestra;SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: ""$_id"" } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 }} ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: ""$_id"" } }])";List the record company shared by the most number of orchestras.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
List the record company shared by the most number of orchestras.
";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: ""$_id"" } }])"
854;hard;orchestra;SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 }} ])";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: ""$_id"" } }])";What is the record company used by the greatest number of orchestras?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What is the record company used by the greatest number of orchestras?
";"db.orchestra.aggregate([ { $group: { _id: ""$Record_Company"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Record_Company: ""$_id"" } }])"
855;hard;orchestra;SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);"db.orchestra.aggregate([ { $lookup: { from: ""performance"", localField: ""Orchestra_ID"", foreignField: ""Orchestra_ID"", as: ""performance_info"" } }, { $match: { ""performance_info"": { $size: 0 } } }, { $project: { Orchestra: 1 } } ])";"db.orchestra.aggregate([ { $lookup: { from: ""performance"", localField: ""Orchestra_ID"", foreignField: ""Orchestra_ID"", as: ""performances"" } }, { $match: { ""performances"": { $size: 0 } } }, { $project: { Orchestra: 1 } } ])";"db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(""Orchestra_ID"") } }, { Orchestra: 1 })";List the names of orchestras that have no performance.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
List the names of orchestras that have no performance.
";"db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(""Orchestra_ID"") } }, { Orchestra: 1 })"
856;hard;orchestra;SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);"db.orchestra.aggregate([ { $lookup: { from: ""performance"", localField: ""Orchestra_ID"", foreignField: ""Orchestra_ID"", as: ""performances"" } }, { $match: { performances: { $size: 0 } } }, { $project: { Orchestra: 1 } } ])";"db.orchestra.find({Orchestra_ID: {$nin: db.performance.distinct(""Orchestra_ID"")}}, { Orchestra: 1 })";"db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(""Orchestra_ID"") } }, { Orchestra: 1 })";What are the orchestras that do not have any performances?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
What are the orchestras that do not have any performances?
";"db.orchestra.find( { Orchestra_ID: { $nin: db.performance.distinct(""Orchestra_ID"") } }, { Orchestra: 1 })"
857;hard;orchestra;SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;"db.orchestra.aggregate([ { $facet: { ""before2003"": [ { $match: { Year_of_Founded: { $lt: 2003 } } }, { $group: { _id: ""$Record_Company"" } } ], ""after2003"": [ { $match: { Year_of_Founded: { $gt: 2003 } } }, { $group: { _id: ""$Record_Company"" } } ] } }, { $project: { commonRecordCompanies: { $setIntersection: [""$before2003._id"", ""$after2003._id""] } } }, { $unwind: ""$commonRecordCompanies"" }, { $replaceRoot: { newRoot: { $arrayToObject: [[{ k: ""Record_Company"", v: ""$commonRecordCompanies"" }]] } } } ])";.;.;Show the record companies shared by orchestras founded before 2003 and after 2003.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
conductor(Conductor_ID, Name, Age, Nationality, Year_of_Work)
orchestra(Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format)
performance(Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)
show(Show_ID, Performance_ID, If_first_show, Result, Attendance)
Foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID
Question:
Show the record companies shared by orchestras founded before 2003 and after 2003.
";"db.orchestra.aggregate([ { $facet: { ""before2003"": [ { $match: { Year_of_Founded: { $lt: 2003 } } }, { $group: { _id: ""$Record_Company"" } } ], ""after2003"": [ { $match: { Year_of_Founded: { $gt: 2003 } } }, { $group: { _id: ""$Record_Company"" } } ] } }, { $project: { commonRecordCompanies: { $setIntersection: [""$before2003._id"", ""$after2003._id""] } } }, { $unwind: ""$commonRecordCompanies"" }, { $replaceRoot: { newRoot: { $arrayToObject: [[{ k: ""Record_Company"", v: ""$commonRecordCompanies"" }]] } } } ])"
865;medium;network_1;SELECT name , grade FROM Highschooler;db.Highschooler.find({}, { name: 1, grade: 1 });db.Highschooler.find({}, {name: 1, grade: 1});db.Highschooler.find({}, { name: 1, grade: 1});Show the names and grades of each high schooler.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the names and grades of each high schooler.
";db.Highschooler.find({}, { name: 1, grade: 1})
866;medium;network_1;SELECT name , grade FROM Highschooler;db.Highschooler.find({}, { name: 1, grade: 1 });db.Highschooler.find({}, {name: 1, grade: 1});db.Highschooler.find({}, {name: 1, grade: 1});What are the names and grades for each high schooler?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names and grades for each high schooler?
";db.Highschooler.find({}, {name: 1, grade: 1})
867;easy;network_1;SELECT grade FROM Highschooler;.;.;db.Highschooler.find({}, {grade: 1});Show all the grades of the high schoolers.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show all the grades of the high schoolers.
";db.Highschooler.find({}, {grade: 1})
868;easy;network_1;SELECT grade FROM Highschooler;db.Highschooler.find({}, { grade: 1 });db.Highschooler.find({}, { grade: 1});db.Highschooler.find({}, {grade: 1});What is the grade of each high schooler?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What is the grade of each high schooler?
";db.Highschooler.find({}, {grade: 1})
869;easy;network_1;"SELECT grade FROM Highschooler WHERE name = ""Kyle""";db.Highschooler.find({ name: 'Kyle' }, { grade: 1 });"db.Highschooler.find({ name: ""Kyle"" }, { grade: 1 })";db.Highschooler.find({name: 'Kyle'}, { grade: 1});What grade is Kyle in?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What grade is Kyle in?
";db.Highschooler.find({name: 'Kyle'}, { grade: 1})
870;easy;network_1;"SELECT grade FROM Highschooler WHERE name = ""Kyle""";db.Highschooler.find({ name: 'Kyle' }, { grade: 1 });"db.Highschooler.findOne({name: ""Kyle""}, {grade: 1})";db.Highschooler.findOne({name: 'Kyle'}, {grade: 1});Return the grade for the high schooler named Kyle.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Return the grade for the high schooler named Kyle.
";db.Highschooler.findOne({name: 'Kyle'}, {grade: 1})
871;easy;network_1;SELECT name FROM Highschooler WHERE grade = 10;db.Highschooler.find({ grade: 10 }, { name: 1 });db.Highschooler.find({grade: 10}, { name: 1});db.Highschooler.find({grade: 10}, {name: 1});Show the names of all high schoolers in grade 10.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the names of all high schoolers in grade 10.
";db.Highschooler.find({grade: 10}, {name: 1})
872;easy;network_1;SELECT name FROM Highschooler WHERE grade = 10;db.Highschooler.find({ grade: 10 }, { name: 1 });db.Highschooler.find({grade: 10}, {name: 1});db.Highschooler.find({grade: 10}, {name: 1});What are the names of all high schoolers in grade 10?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names of all high schoolers in grade 10?
";db.Highschooler.find({grade: 10}, {name: 1})
873;easy;network_1;"SELECT ID FROM Highschooler WHERE name = ""Kyle""";db.Highschooler.find({name: 'Kyle'}, { ID: 1});"db.Highschooler.find({name: ""Kyle""}, {ID: 1})";.;Show the ID of the high schooler named Kyle.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the ID of the high schooler named Kyle.
";db.Highschooler.find({name: 'Kyle'}, { ID: 1})
874;easy;network_1;"SELECT ID FROM Highschooler WHERE name = ""Kyle""";.;"db.Highschooler.find({name: ""Kyle""}, {ID: 1})";db.Highschooler.find({name: 'Kyle'}, { ID: 1});What is Kyle's id?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What is Kyle's id?
";db.Highschooler.find({name: 'Kyle'}, { ID: 1})
877;medium;network_1;SELECT grade , count(*) FROM Highschooler GROUP BY grade;"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $project: { grade: ""$_id"", count: 1 } }])";Show the number of high schoolers for each grade.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the number of high schoolers for each grade.
";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $project: { grade: ""$_id"", count: 1 } }])"
878;medium;network_1;SELECT grade , count(*) FROM Highschooler GROUP BY grade;"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }])";How many high schoolers are in each grade?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
How many high schoolers are in each grade?
";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }])"
881;easy;network_1;SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { _id: 1 } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: ""$_id"" } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: ""$_id"" } }])";Show me all grades that have at least 4 students.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show me all grades that have at least 4 students.
";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: ""$_id"" } }])"
882;easy;network_1;SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { _id: 1 } } ])";"db.Highschooler.aggregate([ {$group: {_id: ""$grade"", count: {$sum: 1}}}, {$match: {count: {$gte: 4}}}, { $project: {""grade"": ""$_id"" } } ])";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: ""$_id"" } }])";Which grades have 4 or more high schoolers?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Which grades have 4 or more high schoolers?
";"db.Highschooler.aggregate([ { $group: { _id: ""$grade"", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { grade: ""$_id"" } }])"
883;medium;network_1;SELECT student_id , count(*) FROM Friend GROUP BY student_id;"db.Friend.aggregate([ { $group: { _id: ""$student_id"", numberOfFriends: {$sum: 1} }}, { $project: { student_id: ""$_id"", numberOfFriends: 1 }} ])";"db.Friend.aggregate([ { $group: { _id: ""$student_id"", friend_count: { $sum: 1 } } }, { $project: { _id: ""$_id"", friend_count: 1 } } ])";"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }])";Show the student IDs and numbers of friends corresponding to each.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the student IDs and numbers of friends corresponding to each.
";"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }])"
884;medium;network_1;SELECT student_id , count(*) FROM Friend GROUP BY student_id;"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }, { $project: { student_id: ""$_id"", count: ""$count"" } } ])";"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }, { $project: { student_id: ""$_id"", num_friends: ""$count"" } } ])";"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }, { $project: { student_id: ""$_id"", count: 1 } }])";How many friends does each student have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
How many friends does each student have?
";"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }, { $project: { student_id: ""$_id"", count: 1 } }])"
887;extra;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""Friends"" } }, { $project: { name: 1, numberOfFriends: { $size: ""$Friends"" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", let: { studentId: ""$ID"" }, pipeline: [ { $match: { $expr: { $or: [ { $eq: [""$student_id"", ""$$studentId""] }, { $eq: [""$friend_id"", ""$$studentId""] } ] } } } ], as: ""friends"" } }, { $project: { name: 1, numFriends: { $size: ""$friends"" } } }, { $sort: { numFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])";.;What is the name of the high schooler who has the greatest number of friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What is the name of the high schooler who has the greatest number of friends?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""Friends"" } }, { $project: { name: 1, numberOfFriends: { $size: ""$Friends"" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
888;extra;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""Friends"" } }, { $project: { name: 1, numberOfFriends: { $size: ""$Friends"" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $project: { name: 1, numFriends: { $size: ""$friends"" } } }, { $sort: { numFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])";.;Return the name of the high school student with the most friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Return the name of the high school student with the most friends.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""Friends"" } }, { $project: { name: 1, numberOfFriends: { $size: ""$Friends"" } } }, { $sort: { numberOfFriends: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
890;medium;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3;"db.Friend.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $lookup: { from: ""Highschooler"", localField: ""_id"", foreignField: ""ID"", as: ""student_info"" } }, { $unwind: ""$student_info"" }, { $project: { name: ""$student_info.name"" } } ])";.;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $exists: true, $ne: [] } } }, { $addFields: { friendCount: { $size: ""$friends"" } } }, { $match: { friendCount: { $gte: 3 } } }, { $project: { name: 1 } }])";What are the names of high schoolers who have 3 or more friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names of high schoolers who have 3 or more friends?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $exists: true, $ne: [] } } }, { $addFields: { friendCount: { $size: ""$friends"" } } }, { $match: { friendCount: { $gte: 3 } } }, { $project: { name: 1 } }])"
891;hard;network_1;"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = ""Kyle""";.;.;"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $unwind: ""$friends"" }, { $lookup: { from: ""Highschooler"", localField: ""friends.friend_id"", foreignField: ""ID"", as: ""friend_info"" } }, { $unwind: ""$friend_info"" }, { $project: { name: ""$friend_info.name"" } }])";Show the names of all of the high schooler Kyle's friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the names of all of the high schooler Kyle's friends.
";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $unwind: ""$friends"" }, { $lookup: { from: ""Highschooler"", localField: ""friends.friend_id"", foreignField: ""ID"", as: ""friend_info"" } }, { $unwind: ""$friend_info"" }, { $project: { name: ""$friend_info.name"" } }])"
892;hard;network_1;"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = ""Kyle""";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $unwind: ""$friends"" }, { $lookup: { from: ""Highschooler"", localField: ""friends.friend_id"", foreignField: ""ID"", as: ""friend_names"" } }, { $unwind: ""$friend_names"" }, { $project: { name: ""$friend_names.name"" } } ])";.;.;Return the names of friends of the high school student Kyle.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Return the names of friends of the high school student Kyle.
";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $unwind: ""$friends"" }, { $lookup: { from: ""Highschooler"", localField: ""friends.friend_id"", foreignField: ""ID"", as: ""friend_names"" } }, { $unwind: ""$friend_names"" }, { $project: { name: ""$friend_names.name"" } } ])"
893;medium;network_1;"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = ""Kyle""";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $project: { numberOfFriends: { $size: ""$friends"" } } } ])";.;"db.Friend.aggregate([ { $lookup: { from: ""Highschooler"", localField: ""student_id"", foreignField: ""ID"", as: ""student_info"" } }, { $match: { ""student_info.name"": ""Kyle"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many friends does the high school student Kyle have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
How many friends does the high school student Kyle have?
";"db.Friend.aggregate([ { $lookup: { from: ""Highschooler"", localField: ""student_id"", foreignField: ""ID"", as: ""student_info"" } }, { $match: { ""student_info.name"": ""Kyle"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
894;medium;network_1;"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = ""Kyle""";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $project: { numberOfFriends: { $size: ""$friends"" } } } ])";.;"db.Friend.aggregate([ { $lookup: { from: ""Highschooler"", localField: ""student_id"", foreignField: ""ID"", as: ""student_info"" } }, { $match: { ""student_info.name"": ""Kyle"" } }, { $count: ""total"" }])";Count the number of friends Kyle has.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Count the number of friends Kyle has.
";"db.Friend.aggregate([ { $lookup: { from: ""Highschooler"", localField: ""student_id"", foreignField: ""ID"", as: ""student_info"" } }, { $match: { ""student_info.name"": ""Kyle"" } }, { $count: ""total"" }])"
895;hard;network_1;SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $project: { ID: 1 } } ])";.;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { ID: 1 } }])";Show ids of all students who do not have any friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show ids of all students who do not have any friends.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { ID: 1 } }])"
896;hard;network_1;SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { ""ID"": 1, ""_id"": 0 } } ])";.;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $project: { ID: 1 } }])";What are the ids of high school students who do not have friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the ids of high school students who do not have friends?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $project: { ID: 1 } }])"
897;hard;network_1;SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { name: 1 } } ])";.;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { name: 1 } }])";Show names of all high school students who do not have any friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show names of all high school students who do not have any friends.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { name: 1 } }])"
898;hard;network_1;SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $project: { name: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $project: { name: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { name: 1 } }])";What are the names of students who have no friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names of students who have no friends?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $project: { name: 1 } }])"
899;hard;network_1;SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""liked_by"" } }, { $match: { $and: [ { ""friends.0"": { $exists: true } }, { ""liked_by.0"": { $exists: true } } ] } }, { $project: { ID: 1 } } ])";.;.;Show the ids of high schoolers who have friends and are also liked by someone else.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the ids of high schoolers who have friends and are also liked by someone else.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""liked_by"" } }, { $match: { $and: [ { ""friends.0"": { $exists: true } }, { ""liked_by.0"": { $exists: true } } ] } }, { $project: { ID: 1 } } ])"
900;hard;network_1;SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""likedBy"" } }, { $match: { $expr: { $and: [ { $ne: [ { $size: ""$friends"" }, 0 ] }, { $ne: [ { $size: ""$likedBy"" }, 0 ] } ] } } }, { $project: { ID: 1 } } ])";.;.;What are the ids of students who both have friends and are liked?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the ids of students who both have friends and are liked?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""likedBy"" } }, { $match: { $expr: { $and: [ { $ne: [ { $size: ""$friends"" }, 0 ] }, { $ne: [ { $size: ""$likedBy"" }, 0 ] } ] } } }, { $project: { ID: 1 } } ])"
901;hard;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""liked_by"" } }, { $match: { ""friends.0"": { $exists: true }, ""liked_by.0"": { $exists: true } } }, { $project: { name: 1 } } ])";.;.;Show name of all students who have some friends and also are liked by someone else.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show name of all students who have some friends and also are liked by someone else.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""liked_by"" } }, { $match: { ""friends.0"": { $exists: true }, ""liked_by.0"": { $exists: true } } }, { $project: { name: 1 } } ])"
902;hard;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""has_friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""is_liked"" } }, { $match: { $and: [ { ""has_friends.0"": { $exists: true } }, { ""is_liked.0"": { $exists: true } } ] } }, { $project: { name: 1 } } ])";.;.;What are the names of high schoolers who both have friends and are liked?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names of high schoolers who both have friends and are liked?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""has_friends"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""liked_id"", as: ""is_liked"" } }, { $match: { $and: [ { ""has_friends.0"": { $exists: true } }, { ""is_liked.0"": { $exists: true } } ] } }, { $project: { name: 1 } } ])"
903;medium;network_1;SELECT student_id , count(*) FROM Likes GROUP BY student_id;"db.Likes.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } } ])";"db.Likes.aggregate([ { $group: { _id: ""$student_id"", likes_count: { $sum: 1 } } }, { $project: { student_id: ""$_id"", likes_count: 1 } } ])";"db.Likes.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }])";Count the number of likes for each student id.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Count the number of likes for each student id.
";"db.Likes.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }])"
904;medium;network_1;SELECT student_id , count(*) FROM Likes GROUP BY student_id;"db.Likes.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } } ])";"db.Likes.aggregate([ { $group: { _id: ""$student_id"", num_likes: { $sum: 1 } } } ])";"db.Likes.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }])";How many likes correspond to each student id?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
How many likes correspond to each student id?
";"db.Likes.aggregate([ { $group: { _id: ""$student_id"", count: { $sum: 1 } } }])"
905;medium;network_1;SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;"db.Highschooler.aggregate([ { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes_info"" } }, { $match: { ""likes_info"": { $ne: [] } } }, { $project: { name: 1, number_of_likes: { $size: ""$likes_info"" } } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes"" } }, { $match: { ""likes"": { $ne: [] } } }, { $project: { name: 1, numOfLikes: { $size: ""$likes"" } } } ])";.;Show the names of high schoolers who have likes, and numbers of likes for each.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the names of high schoolers who have likes, and numbers of likes for each.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes_info"" } }, { $match: { ""likes_info"": { $ne: [] } } }, { $project: { name: 1, number_of_likes: { $size: ""$likes_info"" } } } ])"
906;medium;network_1;SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id;"db.Highschooler.aggregate([ { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes_info"" } }, { $match: { ""likes_info"": { $ne: [] } } }, { $project: { name: 1, likesCount: { $size: ""$likes_info"" } } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes"" } }, { $match: { ""likes"": { $exists: true, $ne: [] } } }, { $project: { name: 1, numberOfLikes: { $size: ""$likes"" } } } ])";.;What are the names of high schoolers who have likes, and how many likes does each have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names of high schoolers who have likes, and how many likes does each have?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes_info"" } }, { $match: { ""likes_info"": { $ne: [] } } }, { $project: { name: 1, likesCount: { $size: ""$likes_info"" } } } ])"
911;hard;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2;.;.;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { grade: { $gt: 5 } } }, { $addFields: { friendCount: { $size: ""$friends"" } } }, { $match: { friendCount: { $gte: 2 } } }, { $project: { name: 1 } }])";Show the names of students who have a grade higher than 5 and have at least 2 friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Show the names of students who have a grade higher than 5 and have at least 2 friends.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { grade: { $gt: 5 } } }, { $addFields: { friendCount: { $size: ""$friends"" } } }, { $match: { friendCount: { $gte: 2 } } }, { $project: { name: 1 } }])"
912;hard;network_1;SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2;"db.Highschooler.aggregate([ { $match: { grade: { $gt: 5 } } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $project: { name: 1, numberOfFriends: { $size: ""$friends"" } } }, { $match: { numberOfFriends: { $gte: 2 } } }, { $project: { name: 1 } } ])";.;.;What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
";"db.Highschooler.aggregate([ { $match: { grade: { $gt: 5 } } }, { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $project: { name: 1, numberOfFriends: { $size: ""$friends"" } } }, { $match: { numberOfFriends: { $gte: 2 } } }, { $project: { name: 1 } } ])"
913;medium;network_1;"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = ""Kyle""";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes"" } }, { $project: { num_likes: { $size: ""$likes"" } } } ])";.;"db.Likes.aggregate([ { $lookup: { from: ""Highschooler"", localField: ""student_id"", foreignField: ""ID"", as: ""student"" } }, { $match: { ""student.name"": ""Kyle"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])";How many likes does Kyle have?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
How many likes does Kyle have?
";"db.Likes.aggregate([ { $lookup: { from: ""Highschooler"", localField: ""student_id"", foreignField: ""ID"", as: ""student"" } }, { $match: { ""student.name"": ""Kyle"" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } }])"
914;medium;network_1;"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = ""Kyle""";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes"" }}, { $unwind: ""$likes"" }, { $count: ""likes_count"" } ])";.;.;Return the number of likes that the high schooler named Kyle has.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Return the number of likes that the high schooler named Kyle has.
";"db.Highschooler.aggregate([ { $match: { name: ""Kyle"" } }, { $lookup: { from: ""Likes"", localField: ""ID"", foreignField: ""student_id"", as: ""likes"" }}, { $unwind: ""$likes"" }, { $count: ""likes_count"" } ])"
915;hard;network_1;SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends.0"": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: ""$grade"" } } }, { $project: { averageGrade: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $ne: [] } } }, { $group: { _id: null, average_grade: { $avg: ""$grade"" } } }, { $project: { average_grade: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends.0"": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: ""$grade"" } } }, { $project: { averageGrade: 1 } }])";Find the average grade of all students who have some friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Find the average grade of all students who have some friends.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends.0"": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: ""$grade"" } } }, { $project: { averageGrade: 1 } }])"
916;hard;network_1;SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" }}, { $match: { ""friends"": { $ne: [] } }}, { $group: { _id: null, averageGrade: { $avg: ""$grade"" } }}, { $project: { averageGrade: 1 }} ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $ne: [] } } }, { $group: { _id: null, average_grade: { $avg: ""$grade"" } } }, { $project: { average_grade: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends.0"": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: ""$grade"" } } }, { $project: { averageGrade: 1 } }])";What is the average grade of students who have friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What is the average grade of students who have friends?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends.0"": { $exists: true } } }, { $group: { _id: null, averageGrade: { $avg: ""$grade"" } } }, { $project: { averageGrade: 1 } }])"
917;extra;network_1;SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);db.Highschooler.aggregate([ { $lookup: { from: 'Friend', localField: 'ID', foreignField: 'student_id', as: 'friends' } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: '$grade' } } }, { $project: { minGrade: 1 } } ]);"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { ""friends"": { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: ""$grade"" } } }, { $project: { minGrade: 1 } } ])";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: ""$grade"" } } }, { $project: { minGrade: 1 } }])";Find the minimum grade of students who have no friends.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
Find the minimum grade of students who have no friends.
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: ""$grade"" } } }, { $project: { minGrade: 1 } }])"
918;extra;network_1;SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id);"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, lowestGrade: { $min: ""$grade"" } } }, { $project: { lowestGrade: 1 } } ])";.;"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: ""$grade"" } } }, { $project: { minGrade: 1 } }])";What is the lowest grade of students who do not have any friends?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Highschooler(ID, name, grade)
Friend(student_id, friend_id)
Likes(student_id, liked_id)
Foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID
Question:
What is the lowest grade of students who do not have any friends?
";"db.Highschooler.aggregate([ { $lookup: { from: ""Friend"", localField: ""ID"", foreignField: ""student_id"", as: ""friends"" } }, { $match: { friends: { $size: 0 } } }, { $group: { _id: null, minGrade: { $min: ""$grade"" } } }, { $project: { minGrade: 1 } }])"
919;hard;dog_kennels;SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;"db.Owners.aggregate([ { $lookup: { from: ""Professionals"", localField: ""state"", foreignField: ""state"", as: ""professionals"" } }, { $match: { ""professionals"": { $ne: [] } } }, { $group: { _id: ""$state"" } }, { $project: { state: ""$_id"" } } ])";"db.Owners.aggregate([ { $group: { _id: ""$state"", owner_count: { $sum: 1 } } }, { $lookup: { from: ""Professionals"", localField: ""_id"", foreignField: ""state"", as: ""professionals"" } }, { $match: { owner_count: { $gt: 0 }, professionals: { $exists: true, $ne: [] } } }, { $project: { _id: 1 } } ])";"db.Owners.aggregate([ { $group: { _id: ""$state"" } }, { $lookup: { from: ""Professionals"", localField: ""_id"", foreignField: ""state"", as: ""professionals"" } }, { $match: { professionals: { $ne: [] } } }, { $project: { state: ""$_id"" } }])";Which states have both owners and professionals living there?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which states have both owners and professionals living there?
";"db.Owners.aggregate([ { $group: { _id: ""$state"" } }, { $lookup: { from: ""Professionals"", localField: ""_id"", foreignField: ""state"", as: ""professionals"" } }, { $match: { professionals: { $ne: [] } } }, { $project: { state: ""$_id"" } }])"
920;hard;dog_kennels;SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;"db.Owners.aggregate([ { $lookup: { from: ""Professionals"", localField: ""state"", foreignField: ""state"", as: ""common_states"" } }, { $match: { ""common_states"": { $ne: [] } } }, { $group: { _id: ""$state"" } }, { $project: { state: ""$_id"" } } ])";.;.;Find the states where both owners and professionals live.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the states where both owners and professionals live.
";"db.Owners.aggregate([ { $lookup: { from: ""Professionals"", localField: ""state"", foreignField: ""state"", as: ""common_states"" } }, { $match: { ""common_states"": { $ne: [] } } }, { $group: { _id: ""$state"" } }, { $project: { state: ""$_id"" } } ])"
923;extra;dog_kennels;SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2;"db.Professionals.aggregate([ { $match: { state: 'Indiana' } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1 } }, { $unionWith: { coll: ""Professionals"", pipeline: [ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1, treatmentCount: { $size: ""$treatments"" } } }, { $match: { treatmentCount: { $gt: 2 } } } ] } }, { $group: { _id: { professional_id: ""$professional_id"", last_name: ""$last_name"", cell_number: ""$cell_number"" } } }, { $project: { professional_id: ""$_id.professional_id"", last_name: ""$_id.last_name"", cell_number: ""$_id.cell_number"" } } ])";.;.;Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
";"db.Professionals.aggregate([ { $match: { state: 'Indiana' } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1 } }, { $unionWith: { coll: ""Professionals"", pipeline: [ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, last_name: 1, cell_number: 1, treatmentCount: { $size: ""$treatments"" } } }, { $match: { treatmentCount: { $gt: 2 } } } ] } }, { $group: { _id: { professional_id: ""$professional_id"", last_name: ""$last_name"", cell_number: ""$cell_number"" } } }, { $project: { professional_id: ""$_id.professional_id"", last_name: ""$_id.last_name"", cell_number: ""$_id.cell_number"" } } ])"
925;hard;dog_kennels;select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 );"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatments_info"" } }, { $project: { name: 1, total_cost: { $sum: ""$treatments_info.cost_of_treatment"" } } }, { $match: { total_cost: { $lte: 1000 } } }, { $project: { name: 1 } } ])";.;"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $addFields: { totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])";Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
";"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $addFields: { totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])"
926;hard;dog_kennels;select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 );"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""dog_treatments"" } }, { $project: { name: 1, totalCost: { $sum: ""$dog_treatments.cost_of_treatment"" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } } ])";.;"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $addFields: { totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])";What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
";"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $addFields: { totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $match: { totalCost: { $lte: 1000 } } }, { $project: { name: 1 } }])"
929;extra;dog_kennels;SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } } ])";.;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $size: 0 } } }, { $project: { ""_id"": 0, ""professional_id"": 1, ""role_code"": 1, ""email_address"": 1 } }])";Which professional did not operate any treatment on dogs? List the professional's id, role and email.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $size: 0 } } }, { $project: { ""_id"": 0, ""professional_id"": 1, ""role_code"": 1, ""email_address"": 1 } }])"
930;extra;dog_kennels;SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatmentInfo"" } }, { $match: { treatmentInfo: { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } } ])";.;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } }])";Give me the id, role and email of the professionals who did not perform any treatment on dogs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $size: 0 } } }, { $project: { professional_id: 1, role_code: 1, email_address: 1 } }])"
931;extra;dog_kennels;SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"db.Dogs.aggregate([ { $group: { _id: ""$owner_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Owners"", localField: ""_id"", foreignField: ""owner_id"", as: ""ownerDetails"" }}, { $unwind: ""$ownerDetails"" }, { $project: { owner_id: ""$_id"", first_name: ""$ownerDetails.first_name"", last_name: ""$ownerDetails.last_name"" }} ])";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $addFields: { totalDogs: { $size: ""$dogs"" } } }, { $sort: { totalDogs: -1 } }, { $project: { owner_id: 1, first_name: 1, last_name: 1 } }, { $limit: 1 } ])";"db.Dogs.aggregate([ { $lookup: { from: ""Owners"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""owner_info"" } }, { $unwind: ""$owner_info"" }, { $group: { _id: ""$owner_id"", first_name: { $first: ""$owner_info.first_name"" }, last_name: { $first: ""$owner_info.last_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", first_name: 1, last_name: 1 } }])";Which owner owns the most dogs? List the owner id, first name and last name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which owner owns the most dogs? List the owner id, first name and last name.
";"db.Dogs.aggregate([ { $lookup: { from: ""Owners"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""owner_info"" } }, { $unwind: ""$owner_info"" }, { $group: { _id: ""$owner_id"", first_name: { $first: ""$owner_info.first_name"" }, last_name: { $first: ""$owner_info.last_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", first_name: 1, last_name: 1 } }])"
932;extra;dog_kennels;SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"db.Dogs.aggregate([ { $group: { _id: ""$owner_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Owners"", localField: ""_id"", foreignField: ""owner_id"", as: ""ownerDetails"" } }, { $unwind: ""$ownerDetails"" }, { $project: { owner_id: ""$_id"", first_name: ""$ownerDetails.first_name"", last_name: ""$ownerDetails.last_name"" } } ])";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" }}, { $project: { owner_id: 1, first_name: 1, last_name: 1, dog_count: { $size: ""$dogs"" } }}, { $sort: { dog_count: -1 }}, { $limit: 1 }, { $project: { owner_id: 1, first_name: 1, last_name: 1 } } ])";"db.Dogs.aggregate([ { $lookup: { from: ""Owners"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""owner_info"" } }, { $unwind: ""$owner_info"" }, { $group: { _id: ""$owner_id"", first_name: { $first: ""$owner_info.first_name"" }, last_name: { $first: ""$owner_info.last_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", first_name: 1, last_name: 1 } }])";Return the owner id, first name and last name of the owner who has the most dogs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Return the owner id, first name and last name of the owner who has the most dogs.
";"db.Dogs.aggregate([ { $lookup: { from: ""Owners"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""owner_info"" } }, { $unwind: ""$owner_info"" }, { $group: { _id: ""$owner_id"", first_name: { $first: ""$owner_info.first_name"" }, last_name: { $first: ""$owner_info.last_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", first_name: 1, last_name: 1 } }])"
933;medium;dog_kennels;SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: ""$treatments"" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $exists: true, $not: {$size: 0} } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, treatments: { $size: ""$treatments"" } } }, { $match: { treatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])";.;Which professionals have done at least two treatments? List the professional's id, role, and first name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which professionals have done at least two treatments? List the professional's id, role, and first name.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: ""$treatments"" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])"
934;medium;dog_kennels;SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: ""$treatments"" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numTreatments: { $size: ""$treatments"" } } }, { $match: { numTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])";.;What are the id, role, and first name of the professionals who have performed two or more treatments?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What are the id, role, and first name of the professionals who have performed two or more treatments?
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $project: { professional_id: 1, role_code: 1, first_name: 1, numberOfTreatments: { $size: ""$treatments"" } } }, { $match: { numberOfTreatments: { $gte: 2 } } }, { $project: { professional_id: 1, role_code: 1, first_name: 1 } } ])"
935;extra;dog_kennels;SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;.;"db.Dogs.aggregate([ { $group: { _id: ""$breed_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Breeds"", localField: ""_id"", foreignField: ""breed_code"", as: ""breed"" } }, { $unwind: ""$breed"" }, { $project: { breed_name: ""$breed.breed_name"" } } ])";"db.Breeds.aggregate([ { $lookup: { from: ""Dogs"", localField: ""breed_code"", foreignField: ""breed_code"", as: ""dogs"" } }, { $project: { breed_name: 1} }, { $sort: { dogCount: -1 } }, { $limit: 1 }])";What is the name of the breed with the most dogs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What is the name of the breed with the most dogs?
";"db.Breeds.aggregate([ { $lookup: { from: ""Dogs"", localField: ""breed_code"", foreignField: ""breed_code"", as: ""dogs"" } }, { $project: { breed_name: 1} }, { $sort: { dogCount: -1 } }, { $limit: 1 }])"
936;extra;dog_kennels;SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;.;"db.Dogs.aggregate([ { $group: { _id: ""$breed_code"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Breeds"", localField: ""_id"", foreignField: ""breed_code"", as: ""breed"" } }, { $unwind: ""$breed"" }, { $project: { breed_name: ""$breed.breed_name"" } } ])";"db.Breeds.aggregate([ { $lookup: { from: ""Dogs"", localField: ""breed_code"", foreignField: ""breed_code"", as: ""dogs"" } }, { $project: { breed_name: 1 } }, { $sort: { dogCount: -1 } }, { $limit: 1 }])";Which breed do the most dogs have? Give me the breed name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which breed do the most dogs have? Give me the breed name.
";"db.Breeds.aggregate([ { $lookup: { from: ""Dogs"", localField: ""breed_code"", foreignField: ""breed_code"", as: ""dogs"" } }, { $project: { breed_name: 1 } }, { $sort: { dogCount: -1 } }, { $limit: 1 }])"
937;extra;dog_kennels;SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"db.Treatments.aggregate([ { $lookup: { from: ""Dogs"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""dog_info"" } }, { $unwind: ""$dog_info"" }, { $group: { _id: ""$dog_info.owner_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: ""Owners"", localField: ""_id"", foreignField: ""owner_id"", as: ""owner_info"" } }, { $unwind: ""$owner_info"" }, { $project: { owner_id: ""$_id"", last_name: ""$owner_info.last_name"" } } ])";.;"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", last_name: { $first: ""$last_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", last_name: 1 } }])";Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", last_name: { $first: ""$last_name"" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", last_name: 1 } }])"
939;extra;dog_kennels;SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;"db.Treatments.aggregate([ { $group: { _id: ""$treatment_type_code"", totalCost: { $sum: ""$cost_of_treatment"" } } }, { $sort: { totalCost: 1 } }, { $limit: 1 }, { $lookup: { from: ""Treatment_Types"", localField: ""_id"", foreignField: ""treatment_type_code"", as: ""treatmentType"" } }, { $unwind: ""$treatmentType"" }, { $project: { treatment_type_description: ""$treatmentType.treatment_type_description"" } } ])";"db.Treatment_Types.aggregate([ { $lookup: { from: ""Treatments"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$treatment_type_code"", totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $sort: { totalCost: 1 } }, { $limit: 1 }, { $lookup: { from: ""Treatment_Types"", localField: ""_id"", foreignField: ""treatment_type_code"", as: ""treatmentType"" } }, { $unwind: ""$treatmentType"" }, { $project: { treatmentTypeDescription: ""$treatmentType.treatment_type_description"" } } ])";"db.Treatment_Types.aggregate([ { $lookup: { from: ""Treatments"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatments"" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])";What is the description of the treatment type that costs the least money in total?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What is the description of the treatment type that costs the least money in total?
";"db.Treatment_Types.aggregate([ { $lookup: { from: ""Treatments"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatments"" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])"
940;extra;dog_kennels;SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;.;"db.Treatment_Types.aggregate([ { $lookup: { from: ""Treatments"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$treatment_type_code"", totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $sort: { totalCost: 1 } }, { $limit: 1 }, { $lookup: { from: ""Treatment_Types"", localField: ""_id"", foreignField: ""treatment_type_code"", as: ""treatmentType"" } }, { $unwind: ""$treatmentType"" }, { $project: { description: ""$treatmentType.treatment_type_description"" } } ])";"db.Treatment_Types.aggregate([ { $lookup: { from: ""Treatments"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatments"" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])";Give me the description of the treatment type whose total cost is the lowest.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Give me the description of the treatment type whose total cost is the lowest.
";"db.Treatment_Types.aggregate([ { $lookup: { from: ""Treatments"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatments"" } }, { $project: { treatment_type_description: 1 } }, { $sort: { totalCost: 1 } }, { $limit: 1 }])"
941;extra;dog_kennels;SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dog_info"" } }, { $unwind: ""$dog_info"" }, { $lookup: { from: ""Treatments"", localField: ""dog_info.dog_id"", foreignField: ""dog_id"", as: ""treatment_info"" } }, { $unwind: ""$treatment_info"" }, { $group: { _id: { owner_id: ""$owner_id"", zip_code: ""$zip_code"" }, total_cost: { $sum: ""$treatment_info.cost_of_treatment"" } } }, { $sort: { total_cost: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id.owner_id"", zip_code: ""$_id.zip_code"" } } ])";.;"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", zip_code: { $first: ""$zip_code"" }, totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", zip_code: 1 } }])";Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", zip_code: { $first: ""$zip_code"" }, totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", zip_code: 1 } }])"
942;extra;dog_kennels;SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", totalSpent: { $sum: ""$treatments.cost_of_treatment"" }, zip_code: { $first: ""$zip_code"" } } }, { $sort: { totalSpent: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", zip_code: 1 } } ])";"db.Treatments.aggregate([ { $group: { _id: ""$dog_id"", totalCost: { $sum: ""$cost_of_treatment"" } } }, { $lookup: { from: ""Dogs"", localField: ""_id"", foreignField: ""dog_id"", as: ""dog"" } }, { $unwind: ""$dog"" }, { $lookup: { from: ""Owners"", localField: ""dog.owner_id"", foreignField: ""owner_id"", as: ""owner"" } }, { $unwind: ""$owner"" }, { $group: { _id: ""$owner.owner_id"", totalCost: { $sum: ""$totalCost"" }, ownerZip: { $first: ""$owner.zip_code"" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { ownerId: ""$_id"", ownerZip: 1 } } ])";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", zip_code: { $first: ""$zip_code"" }, totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", zip_code: 1 } }])";Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $lookup: { from: ""Treatments"", localField: ""dogs.dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$owner_id"", zip_code: { $first: ""$zip_code"" }, totalCost: { $sum: ""$treatments.cost_of_treatment"" } } }, { $sort: { totalCost: -1 } }, { $limit: 1 }, { $project: { owner_id: ""$_id"", zip_code: 1 } }])"
943;medium;dog_kennels;SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;.;.;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments.1"": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])";Which professionals have done at least two types of treatments? List the professional id and cell phone.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which professionals have done at least two types of treatments? List the professional id and cell phone.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments.1"": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])"
944;medium;dog_kennels;SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2;.;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $group: { _id: ""$professional_id"", cell_number: { $first: ""$cell_number"" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1, cell_number: 1 } } ])";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments.1"": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])";Find the id and cell phone of the professionals who operate two or more types of treatments.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the id and cell phone of the professionals who operate two or more types of treatments.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments.1"": { $exists: true } } }, { $project: { professional_id: 1, cell_number: 1 } }])"
951;medium;dog_kennels;SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;.;.;"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { first_name: 1, last_name: 1, size_code: ""$dogs.size_code"" } }])";List each owner's first name, last name, and the size of his for her dog.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
List each owner's first name, last name, and the size of his for her dog.
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { first_name: 1, last_name: 1, size_code: ""$dogs.size_code"" } }])"
953;medium;dog_kennels;SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id;.;"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { ""Owner's First Name"": ""$first_name"", ""Dog's Name"": ""$dogs.name"" } } ])";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { first_name: 1, dog_name: ""$dogs.name"" } }])";List pairs of the owner's first name and the dogs's name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
List pairs of the owner's first name and the dogs's name.
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { first_name: 1, dog_name: ""$dogs.name"" } }])"
957;medium;dog_kennels;SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia';"db.Owners.aggregate([ { $match: { state: ""Virginia"" } }, { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { first_name: 1, ""dog_name"": ""$dogs.name"" } } ])";.;.;Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
";"db.Owners.aggregate([ { $match: { state: ""Virginia"" } }, { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dogs"" } }, { $unwind: ""$dogs"" }, { $project: { first_name: 1, ""dog_name"": ""$dogs.name"" } } ])"
963;medium;dog_kennels;SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';"db.Professionals.find( { state: { $in: [""Hawaii"", ""Wisconsin""] } }, { email_address: 1 } )";"db.Professionals.find({$or: [{state: ""Hawaii""}, {state: ""Wisconsin""}]}, {email_address: 1})";db.Professionals.find({ $or: [ { state: 'Hawaii' }, { state: 'Wisconsin' } ]}, { email_address: 1 });List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
";db.Professionals.find({ $or: [ { state: 'Hawaii' }, { state: 'Wisconsin' } ]}, { email_address: 1 })
964;medium;dog_kennels;SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';"db.Professionals.find( { state: { $in: [""Hawaii"", ""Wisconsin""] } }, { email_address: 1 } )";"db.Professionals.find({$or: [{state: ""Hawaii""}, {state: ""Wisconsin""}]}, {email_address: 1})";db.Professionals.find( { state: { $in: ['Hawaii', 'Wisconsin'] } }, { email_address: 1 });What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
";db.Professionals.find( { state: { $in: ['Hawaii', 'Wisconsin'] } }, { email_address: 1 })
967;easy;dog_kennels;SELECT count(DISTINCT dog_id) FROM Treatments;"db.Treatments.aggregate([ { $group: { _id: ""$dog_id"" } }, { $count: ""unique_dogs_treated"" } ])";"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $exists: true, $ne: [] } } }, { $count: ""number_of_dogs"" } ])";.;How many dogs went through any treatments?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How many dogs went through any treatments?
";"db.Treatments.aggregate([ { $group: { _id: ""$dog_id"" } }, { $count: ""unique_dogs_treated"" } ])"
969;easy;dog_kennels;SELECT count(DISTINCT professional_id) FROM Treatments;.;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $exists: true, $ne: [] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])";.;How many professionals have performed any treatment to dogs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How many professionals have performed any treatment to dogs?
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { ""treatments"": { $exists: true, $ne: [] } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
971;medium;dog_kennels;SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%';db.Professionals.find( { city: /West/ }, { role_code: 1, street: 1, city: 1, state: 1 } );db.Professionals.find({city: /West/}, {role_code: 1, street: 1, city: 1, state: 1});.;Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
";db.Professionals.find( { city: /West/ }, { role_code: 1, street: 1, city: 1, state: 1 } )
972;medium;dog_kennels;SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%';db.Professionals.find({ city: /West/ }, { role_code: 1, street: 1, city: 1, state: 1 });db.Professionals.find({city: /West/}, {role_code: 1, street: 1, city: 1, state: 1});db.Professionals.find( { city: { $regex: /West/ } }, { role_code: 1, street: 1, city: 1, state: 1 });Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
";db.Professionals.find( { city: { $regex: /West/ } }, { role_code: 1, street: 1, city: 1, state: 1 })
973;medium;dog_kennels;SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%';db.Owners.find({ state: /North/ }, { first_name: 1, last_name: 1, email_address: 1 });db.Owners.find({state: {$regex: /North/}}, {first_name: 1, last_name: 1, email_address: 1});db.Owners.find({state: {$regex: /North/}}, {first_name: 1, last_name: 1, email_address: 1});Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
";db.Owners.find({state: {$regex: /North/}}, {first_name: 1, last_name: 1, email_address: 1})
974;medium;dog_kennels;SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%';db.Owners.find({ state: /North/ }, { first_name: 1, last_name: 1, email_address: 1 });db.Owners.find({state: /North/}, {first_name: 1, last_name: 1, email_address: 1});db.Owners.find({ state: { $regex: /North/ } }, { first_name: 1, last_name: 1, email_address: 1 });Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
";db.Owners.find({ state: { $regex: /North/ } }, { first_name: 1, last_name: 1, email_address: 1 })
977;medium;dog_kennels;SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;db.Treatments.find({}, { cost_of_treatment: 1 }).sort({ date_of_treatment: -1 }).limit(1);.;.;How much does the most recent treatment cost?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How much does the most recent treatment cost?
";db.Treatments.find({}, { cost_of_treatment: 1 }).sort({ date_of_treatment: -1 }).limit(1)
978;medium;dog_kennels;SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;db.Treatments.find({}, {cost_of_treatment: 1}).sort({date_of_treatment: -1}).limit(1);"db.Treatments.aggregate([ { $sort: { date_of_treatment: -1 } }, { $limit: 1 }, { $lookup: { from: ""Treatment_Types"", localField: ""treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatment_type"" } }, { $lookup: { from: ""Professionals"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""professional"" } }, { $project: { cost_of_treatment: 1 } } ])";.;Show me the cost of the most recently performed treatment.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Show me the cost of the most recently performed treatment.
";db.Treatments.find({}, {cost_of_treatment: 1}).sort({date_of_treatment: -1}).limit(1)
979;extra;dog_kennels;SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments );"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""dog_treatments"" } }, { $match: { ""dog_treatments"": { $size: 0 } } }, { $count: ""untreated_dogs_count"" } ])";.;.;How many dogs have not gone through any treatment?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How many dogs have not gone through any treatment?
";"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""dog_treatments"" } }, { $match: { ""dog_treatments"": { $size: 0 } } }, { $count: ""untreated_dogs_count"" } ])"
980;extra;dog_kennels;select count(*) from dogs where dog_id not in ( select dog_id from treatments );"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatment_info"" } }, { $match: { ""treatment_info"": { $size: 0 } } }, { $count: ""number_of_dogs_without_treatment"" } ])";.;.;Tell me the number of dogs that have not received any treatment .;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Tell me the number of dogs that have not received any treatment .
";"db.Dogs.aggregate([ { $lookup: { from: ""Treatments"", localField: ""dog_id"", foreignField: ""dog_id"", as: ""treatment_info"" } }, { $match: { ""treatment_info"": { $size: 0 } } }, { $count: ""number_of_dogs_without_treatment"" } ])"
981;extra;dog_kennels;SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""owner_dogs"" } }, { $match: { ""owner_dogs"": { $size: 0 } } }, { $count: ""owners_without_dogs"" } ])";.;.;How many owners temporarily do not have any dogs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How many owners temporarily do not have any dogs?
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""owner_dogs"" } }, { $match: { ""owner_dogs"": { $size: 0 } } }, { $count: ""owners_without_dogs"" } ])"
982;extra;dog_kennels;SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dog_owner"" } }, { $match: { dog_owner: { $size: 0 } } }, { $count: ""number_of_owners_without_dogs"" } ])";.;.;Find the number of owners who do not own any dogs at this moment.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the number of owners who do not own any dogs at this moment.
";"db.Owners.aggregate([ { $lookup: { from: ""Dogs"", localField: ""owner_id"", foreignField: ""owner_id"", as: ""dog_owner"" } }, { $match: { dog_owner: { $size: 0 } } }, { $count: ""number_of_owners_without_dogs"" } ])"
983;extra;dog_kennels;SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { treatments: { $size: 0 } } }, { $count: ""no_treatment_count"" } ])";.;.;How many professionals did not operate any treatment on dogs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How many professionals did not operate any treatment on dogs?
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { treatments: { $size: 0 } } }, { $count: ""no_treatment_count"" } ])"
984;extra;dog_kennels;SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { treatments: [] } }, { $count: ""numberOfProfessionals"" } ])";.;.;Find the number of professionals who have not treated any dogs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the number of professionals who have not treated any dogs.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $match: { treatments: [] } }, { $count: ""numberOfProfessionals"" } ])"
989;easy;dog_kennels;SELECT max(age) FROM Dogs;"db.Dogs.aggregate([ { $group: { _id: null, oldestAge: { $max: ""$age"" } }}, { $project: { oldestAge: 1 }} ])";db.Dogs.find({}, { age: 1 }).sort({age: -1}).limit(1);db.Dogs.find({}, {age: 1}).sort({age: -1}).limit(1);What is the age of the oldest dog?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What is the age of the oldest dog?
";db.Dogs.find({}, {age: 1}).sort({age: -1}).limit(1)
990;easy;dog_kennels;SELECT max(age) FROM Dogs;db.Dogs.find({}, {age: 1}).sort({age: -1}).limit(1);db.Dogs.find({}, { age: 1 }).sort({age: -1}).limit(1);"db.Dogs.aggregate([ { $group: { _id: null, maxAge: { $max: ""$age"" } } }, { $project: { maxAge: 1 } }])";Tell me the age of the oldest dog.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Tell me the age of the oldest dog.
";"db.Dogs.aggregate([ { $group: { _id: null, maxAge: { $max: ""$age"" } } }, { $project: { maxAge: 1 } }])"
991;medium;dog_kennels;SELECT charge_type , charge_amount FROM Charges;db.Charges.find({}, { charge_type: 1, charge_amount: 1 });db.Charges.find({}, {charge_type: 1, charge_amount: 1});db.Charges.aggregate([ { $project: { charge_type: 1, charge_amount: 1 } }]);How much does each charge type costs? List both charge type and amount.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How much does each charge type costs? List both charge type and amount.
";db.Charges.aggregate([ { $project: { charge_type: 1, charge_amount: 1 } }])
992;medium;dog_kennels;SELECT charge_type , charge_amount FROM Charges;db.Charges.find({}, { charge_type: 1, charge_amount: 1 });db.Charges.find({}, {charge_type: 1, charge_amount: 1});db.Charges.find({}, { charge_type: 1, charge_amount: 1});List each charge type and its amount.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
List each charge type and its amount.
";db.Charges.find({}, { charge_type: 1, charge_amount: 1})
993;easy;dog_kennels;SELECT max(charge_amount) FROM Charges;"db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: ""$charge_amount"" } } }, { $project: { maxChargeAmount: 1 } } ])";db.Charges.find({}, { charge_amount: 1}).sort({charge_amount: -1}).limit(1);"db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: ""$charge_amount"" } } }, { $project: { öaxChargeAmount: 1 } }])";How much does the most expensive charge type costs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
How much does the most expensive charge type costs?
";"db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: ""$charge_amount"" } } }, { $project: { öaxChargeAmount: 1 } }])"
994;easy;dog_kennels;SELECT max(charge_amount) FROM Charges;db.Charges.find({}, { charge_amount: 1 }).sort({ charge_amount: -1 }).limit(1);db.Charges.find({}, { charge_amount: 1}).sort({charge_amount: -1}).limit(1);"db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: ""$charge_amount"" } } }, { $project: { öaxChargeAmount: 1 } }])";What is the charge amount of the most expensive charge type?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What is the charge amount of the most expensive charge type?
";"db.Charges.aggregate([ { $group: { _id: null, maxChargeAmount: { $max: ""$charge_amount"" } } }, { $project: { öaxChargeAmount: 1 } }])"
995;medium;dog_kennels;SELECT email_address , cell_number , home_phone FROM professionals;db.Professionals.find({}, { email_address: 1, cell_number: 1, home_phone: 1 });db.Professionals.find({}, {email_address: 1, home_phone: 1, cell_number: 1});db.Professionals.find({}, {email_address: 1, cell_number: 1, home_phone: 1});List the email, cell phone and home phone of all the professionals.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
List the email, cell phone and home phone of all the professionals.
";db.Professionals.find({}, {email_address: 1, cell_number: 1, home_phone: 1})
996;medium;dog_kennels;SELECT email_address , cell_number , home_phone FROM professionals;db.Professionals.find({}, { email_address: 1, cell_number: 1, home_phone: 1 });db.Professionals.find({}, {email_address: 1, home_phone: 1, cell_number: 1});.;What are the email, cell phone and home phone of each professional?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What are the email, cell phone and home phone of each professional?
";db.Professionals.find({}, { email_address: 1, cell_number: 1, home_phone: 1 })
997;medium;dog_kennels;SELECT DISTINCT breed_code , size_code FROM dogs;"db.Dogs.aggregate([ { $lookup: { from: ""Breeds"", localField: ""breed_code"", foreignField: ""breed_code"", as: ""breed_info"" } }, { $lookup: { from: ""Sizes"", localField: ""size_code"", foreignField: ""size_code"", as: ""size_info"" } }, { $unwind: ""$breed_info"" }, { $unwind: ""$size_info"" }, { $group: { _id: { breed_code: ""$breed_code"", size_code: ""$size_code"" } } }, { $project: { breed_code: ""$_id.breed_code"", size_code: ""$_id.size_code"" } } ])";.;.;What are all the possible breed type and size type combinations?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
What are all the possible breed type and size type combinations?
";"db.Dogs.aggregate([ { $lookup: { from: ""Breeds"", localField: ""breed_code"", foreignField: ""breed_code"", as: ""breed_info"" } }, { $lookup: { from: ""Sizes"", localField: ""size_code"", foreignField: ""size_code"", as: ""size_info"" } }, { $unwind: ""$breed_info"" }, { $unwind: ""$size_info"" }, { $group: { _id: { breed_code: ""$breed_code"", size_code: ""$size_code"" } } }, { $project: { breed_code: ""$_id.breed_code"", size_code: ""$_id.size_code"" } } ])"
998;medium;dog_kennels;SELECT DISTINCT breed_code , size_code FROM dogs;"db.Dogs.aggregate([ { $group: { _id: { breed_code: ""$breed_code"", size_code: ""$size_code"" } } }, { $project: { breed_code: ""$_id.breed_code"", size_code: ""$_id.size_code"" } } ])";.;.;Find the distinct breed type and size type combinations for dogs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
Find the distinct breed type and size type combinations for dogs.
";"db.Dogs.aggregate([ { $group: { _id: { breed_code: ""$breed_code"", size_code: ""$size_code"" } } }, { $project: { breed_code: ""$_id.breed_code"", size_code: ""$_id.size_code"" } } ])"
999;medium;dog_kennels;SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code;"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $lookup: { from: ""Treatment_Types"", localField: ""treatments.treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatment_description"" } }, { $unwind: ""$treatment_description"" }, { $group: { _id: { first_name: ""$first_name"", treatment_type_description: ""$treatment_description.treatment_type_description"" } } }, { $project: { first_name: ""$_id.first_name"", treatment_type_description: ""$_id.treatment_type_description"" } } ])";.;.;List the first name of all the professionals along with the description of the treatment they have done.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Breeds(breed_code, breed_name)
Charges(charge_id, charge_type, charge_amount)
Sizes(size_code, size_description)
Treatment_Types(treatment_type_code, treatment_type_description)
Owners(owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number)
Dogs(dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)
Professionals(professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)
Treatments(treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment)
Foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code
Question:
List the first name of all the professionals along with the description of the treatment they have done.
";"db.Professionals.aggregate([ { $lookup: { from: ""Treatments"", localField: ""professional_id"", foreignField: ""professional_id"", as: ""treatments"" } }, { $unwind: ""$treatments"" }, { $lookup: { from: ""Treatment_Types"", localField: ""treatments.treatment_type_code"", foreignField: ""treatment_type_code"", as: ""treatment_description"" } }, { $unwind: ""$treatment_description"" }, { $group: { _id: { first_name: ""$first_name"", treatment_type_description: ""$treatment_description.treatment_type_description"" } } }, { $project: { first_name: ""$_id.first_name"", treatment_type_description: ""$_id.treatment_type_description"" } } ])"
1003;easy;singer;SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: 1 });db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1});db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1});List the name of singers in ascending order of net worth.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
List the name of singers in ascending order of net worth.
";db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1})
1004;easy;singer;SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: 1 });db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1});db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1});What are the names of singers ordered by ascending net worth?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the names of singers ordered by ascending net worth?
";db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: 1})
1005;medium;singer;SELECT Birth_Year , Citizenship FROM singer;db.singer.find({}, { Birth_Year: 1, Citizenship: 1 });db.singer.find({}, {Birth_Year: 1, Citizenship: 1});db.singer.find({}, {Birth_Year: 1, Citizenship: 1});What are the birth year and citizenship of singers?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the birth year and citizenship of singers?
";db.singer.find({}, {Birth_Year: 1, Citizenship: 1})
1006;medium;singer;SELECT Birth_Year , Citizenship FROM singer;db.singer.find({}, { Birth_Year: 1, Citizenship: 1 });db.singer.find({}, { Birth_Year: 1, Citizenship: 1});db.singer.find({}, {Birth_Year: 1, Citizenship: 1});What are the birth years and citizenships of the singers?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the birth years and citizenships of the singers?
";db.singer.find({}, {Birth_Year: 1, Citizenship: 1})
1007;easy;singer;"SELECT Name FROM singer WHERE Citizenship != ""France""";db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 });db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 });db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 });List the name of singers whose citizenship is not 'France'.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
List the name of singers whose citizenship is not 'France'.
";db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })
1008;easy;singer;"SELECT Name FROM singer WHERE Citizenship != ""France""";db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 });.;db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 });What are the names of the singers who are not French citizens?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the names of the singers who are not French citizens?
";db.singer.find({ Citizenship: { $ne: 'France' } }, { Name: 1 })
1009;medium;singer;SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 });db.singer.find({$or: [{Birth_Year: 1948}, {Birth_Year: 1949}]}, {Name: 1});db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 });Show the name of singers whose birth year is either 1948 or 1949?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show the name of singers whose birth year is either 1948 or 1949?
";db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })
1010;medium;singer;SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 });db.singer.find({Birth_Year: {$in: [1948, 1949]}}, {Name: 1});db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 });What are the names of the singers whose birth years are either 1948 or 1949?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the names of the singers whose birth years are either 1948 or 1949?
";db.singer.find({ Birth_Year: { $in: [1948, 1949] } }, { Name: 1 })
1011;medium;singer;SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: -1 }).limit(1);db.singer.find({}, { Name: 1}).sort({ Net_Worth_Millions: -1 }).limit(1);db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1);What is the name of the singer with the largest net worth?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What is the name of the singer with the largest net worth?
";db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1)
1012;medium;singer;SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;db.singer.find({}, { Name: 1 }).sort({ Net_Worth_Millions: -1 }).limit(1);db.singer.find({}, { Name: 1}).sort({ Net_Worth_Millions: -1 }).limit(1);db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1);What is the name of the singer who is worth the most?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What is the name of the singer who is worth the most?
";db.singer.find({}, {Name: 1}).sort({Net_Worth_Millions: -1}).limit(1)
1013;medium;singer;SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship;"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", NumberOfSingers: { $sum: 1 } } }, { $project: { Citizenship: ""$_id"", NumberOfSingers: 1 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", totalSingers: { $sum: 1 } } }, { $match: { _id: { $ne: null } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $project: { Citizenship: ""$_id"", count: 1 } }])";Show different citizenship of singers and the number of singers of each citizenship.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show different citizenship of singers and the number of singers of each citizenship.
";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $project: { Citizenship: ""$_id"", count: 1 } }])"
1014;medium;singer;SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship;"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }])";For each citizenship, how many singers are from that country?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
For each citizenship, how many singers are from that country?
";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }])"
1015;hard;singer;SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: ""$_id"" } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: ""$_id""} }])";Please show the most common citizenship of singers.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Please show the most common citizenship of singers.
";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: ""$_id""} }])"
1016;hard;singer;select citizenship from singer group by citizenship order by count(*) desc limit 1;"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: ""$_id""} }])";What is the most common singer citizenship ?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What is the most common singer citizenship ?
";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Citizenship: ""$_id""} }])"
1017;medium;singer;SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", MaxNetWorth: { $max: ""$Net_Worth_Millions"" } } }, { $project: { Citizenship: ""$_id"", MaxNetWorth: 1 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", maxNetWorth: { $max: ""$Net_Worth_Millions"" } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", max_net_worth: { $max: ""$Net_Worth_Millions"" } } }, { $project: { Citizenship: ""$_id"", max_net_worth: 1 } }])";Show different citizenships and the maximum net worth of singers of each citizenship.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show different citizenships and the maximum net worth of singers of each citizenship.
";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", max_net_worth: { $max: ""$Net_Worth_Millions"" } } }, { $project: { Citizenship: ""$_id"", max_net_worth: 1 } }])"
1018;medium;singer;SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", maxNetWorth: { $max: ""$Net_Worth_Millions"" } } }, { $project: { Citizenship: ""$_id"", maxNetWorth: 1 } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", maxNetWorth: { $max: ""$Net_Worth_Millions"" } } } ])";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", maxNetWorth: { $max: ""$Net_Worth_Millions"" } } }])";For each citizenship, what is the maximum net worth?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
For each citizenship, what is the maximum net worth?
";"db.singer.aggregate([ { $group: { _id: ""$Citizenship"", maxNetWorth: { $max: ""$Net_Worth_Millions"" } } }])"
1019;medium;singer;SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $project: { ""Title"": ""$song_info.Title"", ""Name"": 1 } } ])";"db.song.aggregate([ { $lookup: { from: ""singer"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""singer"" } }, { $project: { ""title"": ""$Title"", ""singerName"": { $arrayElemAt: [ ""$singer.Name"", 0 ] } } } ])";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $project: { Title: ""$song_info.Title"", Name: ""$Name"" } }])";Show titles of songs and names of singers.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show titles of songs and names of singers.
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $project: { Title: ""$song_info.Title"", Name: ""$Name"" } }])"
1020;medium;singer;SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;"db.song.aggregate([ { $lookup: { from: ""singer"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""singer_info"" } }, { $unwind: ""$singer_info"" }, { $project: { Title: 1, Name: ""$singer_info.Name"" } } ])";.;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $project: { Title: ""$song_info.Title"", Name: ""$Name"" } }])";What are the song titles and singer names?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the song titles and singer names?
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $project: { Title: ""$song_info.Title"", Name: ""$Name"" } }])"
1021;medium;singer;SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $match: { ""song_info.Sales"": { $gt: 300000 } } }, { $group: { _id: ""$Name"" } }, { $project: { Name: ""$_id"" } } ])";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songData"" } }, { $unwind: ""$songData"" }, { $match: { ""songData.Sales"": { $gt: 300000 } } }, { $group: { _id: ""$Name"" } }, { $project: { Name: ""$_id"" } } ])";.;Show distinct names of singers that have songs with sales more than 300000.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show distinct names of singers that have songs with sales more than 300000.
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $match: { ""song_info.Sales"": { $gt: 300000 } } }, { $group: { _id: ""$Name"" } }, { $project: { Name: ""$_id"" } } ])"
1022;medium;singer;SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $match: { ""song_info.Sales"": { $gt: 300000 } } }, { $group: { _id: ""$Name"" } } ])";.;.;what are the different names of the singers that have sales more than 300000?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
what are the different names of the singers that have sales more than 300000?
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""song_info"" } }, { $unwind: ""$song_info"" }, { $match: { ""song_info.Sales"": { $gt: 300000 } } }, { $group: { _id: ""$Name"" } } ])"
1023;medium;singer;SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1;.;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } } ])";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } }])";Show the names of singers that have more than one song.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show the names of singers that have more than one song.
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } }])"
1024;medium;singer;SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } } ])";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } } ])";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } }])";What are the names of the singers that have more than one songs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What are the names of the singers that have more than one songs?
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { ""songs.1"": { $exists: true } } }, { $project: { Name: 1 } }])"
1025;medium;singer;SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $unwind: ""$songs"" }, { $group: { _id: ""$Name"", totalSales: { $sum: ""$songs.Sales"" } } }, { $project: { Name: ""$_id"", totalSales: 1 } } ])";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $unwind: ""$songs"" }, { $group: { _id: ""$Name"", totalSales: { $sum: ""$songs.Sales"" } } }, { $project: { singer: ""$_id"", totalSales: 1 } } ])";.;Show the names of singers and the total sales of their songs.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
Show the names of singers and the total sales of their songs.
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $unwind: ""$songs"" }, { $group: { _id: ""$Name"", totalSales: { $sum: ""$songs.Sales"" } } }, { $project: { Name: ""$_id"", totalSales: 1 } } ])"
1026;medium;singer;SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $unwind: ""$songs"" }, { $group: { _id: ""$Name"", totalSales: { $sum: ""$songs.Sales"" } } }, { $project: { Name: ""$_id"", totalSales: 1 } } ])";.;.;For each singer name, what is the total sales for their songs?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
For each singer name, what is the total sales for their songs?
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $unwind: ""$songs"" }, { $group: { _id: ""$Name"", totalSales: { $sum: ""$songs.Sales"" } } }, { $project: { Name: ""$_id"", totalSales: 1 } } ])"
1027;hard;singer;SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { songs: { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.singer.find({ Singer_ID: { $nin: db.song.distinct(""Singer_ID"") } }, { Name: 1 })";.;List the name of singers that do not have any song.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
List the name of singers that do not have any song.
";"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { songs: { $size: 0 } } }, { $project: { Name: 1 } } ])"
1028;hard;singer;SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"db.singer.aggregate([ { $lookup: { from: ""song"", localField: ""Singer_ID"", foreignField: ""Singer_ID"", as: ""songs"" } }, { $match: { songs: { $size: 0 } } }, { $project: { Name: 1 } } ])";"db.singer.find({Singer_ID: {$nin: db.song.distinct(""Singer_ID"")}}, {Name: 1})";"db.singer.find( { Singer_ID: { $nin: db.song.distinct(""Singer_ID"") } }, { Name: 1 })";What is the sname of every sing that does not have any song?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
singer(Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)
song(Song_ID, Title, Singer_ID, Sales, Highest_Position)
Foreign keys:
song.Singer_ID = singer.Singer_ID
Question:
What is the sname of every sing that does not have any song?
";"db.singer.find( { Singer_ID: { $nin: db.song.distinct(""Singer_ID"") } }, { Name: 1 })"
1033;medium;real_estate_properties;SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code;"db.Properties.aggregate([ { $lookup: { from: ""Ref_Property_Types"", localField: ""property_type_code"", foreignField: ""property_type_code"", as: ""property_type_info"" } }, { $unwind: ""$property_type_info"" }, { $group: { _id: ""$property_type_info.property_type_description"" } }, { $project: { property_type_description: ""$_id"" } } ])";.;.;Show the property type descriptions of properties belonging to that code.;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Feature_Types(feature_type_code, feature_type_name)
Ref_Property_Types(property_type_code, property_type_description)
Other_Available_Features(feature_id, feature_type_code, feature_name, feature_description)
Properties(property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)
Other_Property_Features(property_id, feature_id, property_feature_description)
Foreign keys:
Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code
Properties.property_type_code = Ref_Property_Types.property_type_code
Other_Property_Features.property_id = Properties.property_id
Other_Property_Features.feature_id = Other_Available_Features.feature_id
Question:
Show the property type descriptions of properties belonging to that code.
";"db.Properties.aggregate([ { $lookup: { from: ""Ref_Property_Types"", localField: ""property_type_code"", foreignField: ""property_type_code"", as: ""property_type_info"" } }, { $unwind: ""$property_type_info"" }, { $group: { _id: ""$property_type_info.property_type_description"" } }, { $project: { property_type_description: ""$_id"" } } ])"
1034;hard;real_estate_properties;"SELECT property_name FROM Properties WHERE property_type_code = ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code = ""Apartment"" AND room_count > 1";db.Properties.find( { $or: [ { property_type_code: 'House' }, { property_type_code: 'Apartment', room_count: { $gt: 1 } } ] }, { property_name: 1 } );.;db.Properties.find( { $or: [ { property_type_code: 'House' }, { property_type_code: 'Apartment', room_count: { $gt: 1 } } ] }, { property_name: 1 });What are the names of properties that are either houses or apartments with more than 1 room?;"Write only the MongoDB with no explanation for the query using the following schema. Do not select extra columns that are not explicitly requested.
Schema:
Ref_Feature_Types(feature_type_code, feature_type_name)
Ref_Property_Types(property_type_code, property_type_description)
Other_Available_Features(feature_id, feature_type_code, feature_name, feature_description)
Properties(property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)
Other_Property_Features(property_id, feature_id, property_feature_description)
Foreign keys:
Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code
Properties.property_type_code = Ref_Property_Types.property_type_code
Other_Property_Features.property_id = Properties.property_id
Other_Property_Features.feature_id = Other_Available_Features.feature_id
Question:
What are the names of properties that are either houses or apartments with more than 1 room?
";db.Properties.find( { $or: [ { property_type_code: 'House' }, { property_type_code: 'Apartment', room_count: { $gt: 1 } } ] }, { property_name: 1 })
