[
    {
        "question_id": 1,
        "spider_question_id": 1,
        "db_id": "department_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM head WHERE age > 56",
        "question": "How many heads of the departments are older than 56 ?",
        "query": "db.head.aggregate([ { $match: { age: { $gt: 56 } } }, { $count: \"total_heads_older_than_56\" } ])",
        "gpt4 answer": "db.head.aggregate([ { $match: { age: { $gt: 56 } } }, { $count: \"total_heads_older_than_56\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2,
        "spider_question_id": 2,
        "db_id": "department_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , born_state , age FROM head ORDER BY age",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "query": "db.head.find({}, {name: 1, born_state: 1, age: 1}).sort({age: 1})",
        "gpt4 answer": "db.head.find({}, {name: 1, born_state: 1, age: 1}).sort({age: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3,
        "spider_question_id": 3,
        "db_id": "department_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT creation , name , budget_in_billions FROM department",
        "question": "List the creation year, name and budget of each department.",
        "query": "db.department.find({}, { Creation: 1, Name: 1, Budget_in_Billions: 1 })",
        "gpt4 answer": "db.department.find({}, { Creation: 1, Name: 1, Budget_in_Billions: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 4,
        "spider_question_id": 4,
        "db_id": "department_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department",
        "question": "What are the maximum and minimum budget of the departments?",
        "query": "db.department.aggregate([ { $group: { _id: null, maxBudget: { $max: \"$Budget_in_Billions\" }, minBudget: { $min: \"$Budget_in_Billions\" } } }, { $project: { maxBudget: 1, minBudget: 1 } } ])",
        "gpt4 answer": "db.department.aggregate([ { $group: { _id: null, maxBudget: { $max: \"$Budget_in_Billions\" }, minBudget: { $min: \"$Budget_in_Billions\" } } }, { $project: { maxBudget: 1, minBudget: 1 } } ])",
        "deepseek answer": "db.department.aggregate([ { $group: { _id: null, maxBudget: { $max: \"$Budget_in_Billions\" }, minBudget: { $min: \"$Budget_in_Billions\" } } }, { $project: { maxBudget: 1, minBudget: 1 } } ])"
    },
    {
        "question_id": 5,
        "spider_question_id": 5,
        "db_id": "department_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "query": "db.department.aggregate([ { $match: { Ranking: { $gte: 10, $lte: 15 } } }, { $group: { _id: null, average: { $avg: \"$Num_Employees\" } } }, { $project: { avg: \"$average\" } } ])",
        "gpt4 answer": "db.department.aggregate([ { $match: { Ranking: { $gte: 10, $lte: 15 } } }, { $group: { _id: null, avgNumEmployees: { $avg: \"$Num_Employees\" } } }, { $project: { avgNumEmployees: 1 } } ])",
        "deepseek answer": "db.department.aggregate([ { $match: { Ranking: { $gte: 10, $lte: 15 } } }, { $group: { _id: null, average: { $avg: \"$Num_Employees\" } } }, { $project: { avg: \"$average\" } } ])"
    },
    {
        "question_id": 6,
        "spider_question_id": 6,
        "db_id": "department_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM head WHERE born_state != 'California'",
        "question": "What are the names of the heads who are born outside the California state?",
        "query": "db.head.find({born_state: {$ne: 'California'}}, {name: 1})",
        "gpt4 answer": "db.head.find({ born_state: { $ne: \"California\" } }, { name: 1 })",
        "deepseek answer": "db.head.find({born_state: {$ne: 'California'}}, {name: 1})"
    },
    {
        "question_id": 7,
        "spider_question_id": 7,
        "db_id": "department_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "query": "db.department.aggregate([ { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $unwind: \"$management_info\" }, { $lookup: { from: \"head\", localField: \"management_info.head_ID\", foreignField: \"head_ID\", as: \"head_info\" } }, { $unwind: \"$head_info\" }, { $match: { \"head_info.born_state\": \"Alabama\" } }, { $group: { _id: \"$Creation\" } } ])",
        "gpt4 answer": "db.department.aggregate([ { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $unwind: \"$management_info\" }, { $lookup: { from: \"head\", localField: \"management_info.head_ID\", foreignField: \"head_ID\", as: \"head_info\" } }, { $unwind: \"$head_info\" }, { $match: { \"head_info.born_state\": \"Alabama\" } }, { $group: { _id: \"$Creation\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 8,
        "spider_question_id": 8,
        "db_id": "department_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3",
        "question": "What are the names of the states where at least 3 heads were born?",
        "query": "db.head.aggregate([ { $group: { _id: \"$born_state\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { born_state: \"$_id\" } } ])",
        "gpt4 answer": "db.head.aggregate([ { $group: { _id: \"$born_state\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { born_state: \"$_id\" } } ])",
        "deepseek answer": "db.head.aggregate([ { $group: { _id: \"$born_state\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { born_state: \"$_id\" } } ])"
    },
    {
        "question_id": 9,
        "spider_question_id": 9,
        "db_id": "department_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "question": "In which year were most departments established?",
        "query": "db.department.aggregate([ { $group: { _id: \"$Creation\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "gpt4 answer": "db.department.aggregate([ { $group: { _id: \"$Creation\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 10,
        "spider_question_id": 10,
        "db_id": "department_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "query": "db.department.aggregate([ { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $unwind: \"$management_info\" }, { $match: { \"management_info.temporary_acting\": \"Yes\" } }, { $project: { name: \"$Name\", num_employees: \"$Num_Employees\" } } ])",
        "gpt4 answer": "db.department.aggregate([ { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $unwind: \"$management_info\" }, { $match: { \"management_info.temporary_acting\": \"Yes\" } }, { $project: { name: \"$Name\", num_employees: \"$Num_Employees\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 11,
        "spider_question_id": 12,
        "db_id": "department_management",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management)",
        "question": "How many departments are led by heads who are not mentioned?",
        "query": "db.department.aggregate([ { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $match: { \"management_info\": { $size: 0 } } }, { $count: \"num_departments_with_no_heads\" } ])",
        "gpt4 answer": "db.department.aggregate([ { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $match: { \"management_info\": { $size: 0 } } }, { $count: \"num_departments_with_no_heads\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 12,
        "spider_question_id": 13,
        "db_id": "department_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'",
        "question": "What are the distinct ages of the heads who are acting?",
        "query": "db.management.aggregate([ { $match: { temporary_acting: \"Yes\" } }, { $lookup: { from: \"head\", localField: \"head_ID\", foreignField: \"head_ID\", as: \"head_details\" } }, { $unwind: \"$head_details\" }, { $group: { _id: \"$head_details.age\" } }, { $project: { age: \"$_id\" } } ])",
        "gpt4 answer": "db.management.aggregate([ { $match: { temporary_acting: \"Yes\" } }, { $lookup: { from: \"head\", localField: \"head_ID\", foreignField: \"head_ID\", as: \"head_details\" } }, { $unwind: \"$head_details\" }, { $group: { _id: \"$head_details.age\" } }, { $project: { age: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 13,
        "spider_question_id": 14,
        "db_id": "department_management",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "query": "db.department.aggregate([ { $match: { $or: [ { Name: \"Treasury\" }, { Name: \"Homeland Security\" } ] } }, { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"dept_management\" } }, { $unwind: \"$dept_management\" }, { $lookup: { from: \"head\", localField: \"dept_management.head_ID\", foreignField: \"head_ID\", as: \"head_info\" } }, { $unwind: \"$head_info\" }, { $group: { _id: \"$head_info.born_state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { born_state: \"$_id\" } } ])",
        "gpt4 answer": "db.department.aggregate([ { $match: { Name: {$in: [\"Treasury\", \"Homeland Security\"]} } }, { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"management_info\" } }, { $unwind: \"$management_info\" }, { $lookup: { from: \"head\", localField: \"management_info.head_ID\", foreignField: \"head_ID\", as: \"head_info\" } }, { $unwind: \"$head_info\" }, { $group: { _id: \"$head_info.born_state\", departments: {$addToSet: \"$Name\"} } }, { $match: { departments: {$all: [\"Treasury\", \"Homeland Security\"]} } }, { $project: { born_state: \"$_id\" } } ])",
        "deepseek answer": "db.department.aggregate([ { $match: { $or: [ { Name: \"Treasury\" }, { Name: \"Homeland Security\" } ] } }, { $lookup: { from: \"management\", localField: \"Department_ID\", foreignField: \"department_ID\", as: \"dept_management\" } }, { $unwind: \"$dept_management\" }, { $lookup: { from: \"head\", localField: \"dept_management.head_ID\", foreignField: \"head_ID\", as: \"head_info\" } }, { $unwind: \"$head_info\" }, { $group: { _id: \"$head_info.born_state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { born_state: \"$_id\" } } ])"
    },
    {
        "question_id": 14,
        "spider_question_id": 15,
        "db_id": "department_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "query": "db.management.aggregate([ { $lookup: { from: \"department\", localField: \"department_ID\", foreignField: \"Department_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_ID\", name: { $first: \"$department_info.Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { department_ID: \"$_id\", name: 1, count: 1 } } ])",
        "gpt4 answer": "db.management.aggregate([ { $group: { _id: \"$department_ID\", numberOfHeads: { $sum: 1 } } }, { $match: { numberOfHeads: { $gt: 1 } } }, { $lookup: { from: \"department\", localField: \"_id\", foreignField: \"Department_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { department_id: \"$_id\", name: \"$department_info.Name\", numberOfHeads: 1 } } ])",
        "deepseek answer": "db.management.aggregate([ { $lookup: { from: \"department\", localField: \"department_ID\", foreignField: \"Department_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_ID\", name: { $first: \"$department_info.Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { department_ID: \"$_id\", name: 1, count: 1 } } ])"
    },
    {
        "question_id": 15,
        "spider_question_id": 19,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "question": "List the total number of horses on farms in ascending order.",
        "query": "db.farm.find({}, {Total_Horses: 1}).sort({Total_Horses: 1})",
        "gpt4 answer": "db.farm.find({}, {Total_Horses: 1}).sort({Total_Horses: 1})",
        "deepseek answer": "db.farm.find({}, {Total_Horses: 1}).sort({Total_Horses: 1})"
    },
    {
        "question_id": 16,
        "spider_question_id": 20,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "db.farm.aggregate([ { $project: { Total_Horses: 1 } }, { $sort: { Total_Horses: 1 } } ])",
        "gpt4 answer": "db.farm.find({}, { Total_Horses: 1 }).sort({ Total_Horses: 1 })",
        "deepseek answer": "db.farm.aggregate([ { $project: { Total_Horses: 1 } }, { $sort: { Total_Horses: 1 } } ])"
    },
    {
        "question_id": 17,
        "spider_question_id": 21,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
        "question": "What are the hosts of competitions whose theme is not 'Aliens'?",
        "query": "db.farm_competition.find({Theme: {$ne: 'Aliens'}}, {Hosts: 1})",
        "gpt4 answer": "db.farm_competition.find({ Theme: { $ne: 'Aliens' } }, { Hosts: 1 })",
        "deepseek answer": "db.farm_competition.find({Theme: {$ne: 'Aliens'}}, {Hosts: 1})"
    },
    {
        "question_id": 18,
        "spider_question_id": 22,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "query": "db.farm_competition.find({Theme: {$ne: 'Aliens'}}, {Hosts: 1})",
        "gpt4 answer": "db.farm_competition.find({ Theme: { $ne: \"Aliens\" } }, { Hosts: 1 })",
        "deepseek answer": "db.farm_competition.find({Theme: {$ne: 'Aliens'}}, {Hosts: 1})"
    },
    {
        "question_id": 19,
        "spider_question_id": 23,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "query": "db.farm_competition.find({}, { Theme: 1}).sort({Year: 1})",
        "gpt4 answer": "db.farm_competition.find({}, { Theme: 1 }).sort({ Year: 1 })",
        "deepseek answer": "db.farm_competition.find({}, { Theme: 1}).sort({Year: 1})"
    },
    {
        "question_id": 20,
        "spider_question_id": 24,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "query": "db.farm_competition.find({}, { Theme: 1}).sort({Year: 1})",
        "gpt4 answer": "db.farm_competition.find({}, { Theme: 1 }).sort({ Year: 1 })",
        "deepseek answer": "db.farm_competition.find({}, { Theme: 1}).sort({Year: 1})"
    },
    {
        "question_id": 21,
        "spider_question_id": 27,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Cows) , min(Cows) FROM farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "query": "db.farm.aggregate([ { $group: { _id: null, maxCows: { $max: \"$Cows\" }, minCows: { $min: \"$Cows\" } } }, { $project: { maxCows: 1, minCows: 1 } } ])",
        "gpt4 answer": "db.farm.aggregate([ { $group: { _id: null, maxCows: { $max: \"$Cows\" }, minCows: { $min: \"$Cows\" } } }, { $project: { maxCows: 1, minCows: 1 } } ])",
        "deepseek answer": "db.farm.aggregate([ { $group: { _id: null, maxCows: { $max: \"$Cows\" }, minCows: { $min: \"$Cows\" } } }, { $project: { maxCows: 1, minCows: 1 } } ])"
    },
    {
        "question_id": 22,
        "spider_question_id": 28,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Cows) , min(Cows) FROM farm",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "query": "db.farm.aggregate([ { $group: { _id: null, maxCows: { $max: \"$Cows\" }, minCows: { $min: \"$Cows\" } } }, { $project: { maxCows: 1, minCows: 1 } } ])",
        "gpt4 answer": "db.farm.aggregate([ { $group: { _id: null, maxCows: { $max: \"$Cows\" }, minCows: { $min: \"$Cows\" } } }, { $project: { maxCows: 1, minCows: 1 } } ])",
        "deepseek answer": "db.farm.aggregate([ { $group: { _id: null, maxCows: { $max: \"$Cows\" }, minCows: { $min: \"$Cows\" } } }, { $project: { maxCows: 1, minCows: 1 } } ])"
    },
    {
        "question_id": 23,
        "spider_question_id": 31,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "List official names of cities in descending order of population.",
        "query": "db.city.find({}, {Official_Name: 1}).sort({Population: -1})",
        "gpt4 answer": "db.city.find({}, {Official_Name: 1}).sort({Population: -1})",
        "deepseek answer": "db.city.find({}, {Official_Name: 1}).sort({Population: -1})"
    },
    {
        "question_id": 24,
        "spider_question_id": 32,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "What are the official names of cities, ordered descending by population?",
        "query": "db.city.find({}, {Official_Name: 1}).sort({Population: -1})",
        "gpt4 answer": "db.city.find({}, { Official_Name: 1 }).sort({ Population: -1 })",
        "deepseek answer": "db.city.find({}, {Official_Name: 1}).sort({Population: -1})"
    },
    {
        "question_id": 25,
        "spider_question_id": 33,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
        "question": "List the official name and status of the city with the largest population.",
        "query": "db.city.find({}, {Official_Name: 1, Status: 1}).sort({Population: -1}).limit(1)",
        "gpt4 answer": "db.city.find({}, { Official_Name: 1, Status: 1 }).sort({ Population: -1 }).limit(1)",
        "deepseek answer": "db.city.find({}, {Official_Name: 1, Status: 1}).sort({Population: -1}).limit(1)"
    },
    {
        "question_id": 26,
        "spider_question_id": 34,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
        "question": "What is the official name and status of the city with the most residents?",
        "query": "db.city.find({}, {Official_Name: 1, Status: 1}).sort({Population: -1}).limit(1)",
        "gpt4 answer": "db.city.find({}, { Official_Name: 1, Status: 1 }).sort({ Population: -1 }).limit(1)",
        "deepseek answer": "db.city.find({}, {Official_Name: 1, Status: 1}).sort({Population: -1}).limit(1)"
    },
    {
        "question_id": 27,
        "spider_question_id": 35,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
        "question": "Show the years and the official names of the host cities of competitions.",
        "query": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"host_city_info\" } }, { $unwind: \"$host_city_info\" }, { $project: { \"_id\": 0, \"Year\": \"$host_city_info.Year\", \"Official_Name\": 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"host_city_info\" } }, { $unwind: \"$host_city_info\" }, { $project: { \"_id\": 0, \"Year\": \"$host_city_info.Year\", \"Official_Name\": 1 } } ])"
    },
    {
        "question_id": 28,
        "spider_question_id": 37,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1",
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "query": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $match: { \"competitions.1\": { $exists: true } } }, { $project: { \"_id\": 0, \"Official_Name\": 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $match: { \"competitions.1\": { $exists: true } } }, { $project: { \"_id\": 0, \"Official_Name\": 1 } } ])"
    },
    {
        "question_id": 29,
        "spider_question_id": 38,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1",
        "question": "What are the official names of cities that have hosted more than one competition?",
        "query": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $match: { \"competitions.1\": { $exists: true } } }, { $project: { Official_Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $match: { \"competitions.1\": { $exists: true } } }, { $project: { Official_Name: 1 } } ])"
    },
    {
        "question_id": 30,
        "spider_question_id": 39,
        "db_id": "farm",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "query": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $project: { Status: 1 } }, { $sort: { numCompetitions: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $project: { Status: 1, NumberOfCompetitions: { $size: \"$competitions\" } } }, { $sort: { NumberOfCompetitions: -1 } }, { $limit: 1 }, { $project: { Status: 1 }} ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $project: { Status: 1 } }, { $sort: { numCompetitions: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 31,
        "spider_question_id": 40,
        "db_id": "farm",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the status of the city that has hosted the most competitions?",
        "query": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $project: { Status: 1 } }, { $sort: { numCompetitions: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $project: { Status: 1 } }, { $sort: { numCompetitions: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 32,
        "spider_question_id": 41,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "query": "db.city.aggregate([ { $match: { Population: { $gt: 1000 } } }, { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $unwind: \"$competitions\" }, { $project: { Theme: \"$competitions.Theme\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $match: { Population: { $gt: 1000 } } }, { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $unwind: \"$competitions\" }, { $project: { Theme: \"$competitions.Theme\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $match: { Population: { $gt: 1000 } } }, { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $unwind: \"$competitions\" }, { $project: { Theme: \"$competitions.Theme\" } } ])"
    },
    {
        "question_id": 33,
        "spider_question_id": 42,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
        "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
        "query": "db.city.aggregate([ { $match: { Population: { $gt: 1000 } } }, { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $unwind: \"$competitions\" }, { $project: { Theme: \"$competitions.Theme\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $match: { Population: { $gt: 1000 } } }, { $lookup: { from: \"farm_competition\", localField: \"City_ID\", foreignField: \"Host_city_ID\", as: \"competitions\" } }, { $unwind: \"$competitions\" }, { $project: { Theme: \"$competitions.Theme\" } } ])"
    },
    {
        "question_id": 34,
        "spider_question_id": 43,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Status , avg(Population) FROM city GROUP BY Status",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "query": "db.city.aggregate([ { $group: { _id: \"$Status\", averagePopulation: { $avg: \"$Population\" } } } ])",
        "gpt4 answer": "db.city.aggregate([ { $group: { _id: \"$Status\", AveragePopulation: { $avg: \"$Population\" } } }, { $project: { Status: \"$_id\", AveragePopulation: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $group: { _id: \"$Status\", averagePopulation: { $avg: \"$Population\" } } } ])"
    },
    {
        "question_id": 35,
        "spider_question_id": 44,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Status , avg(Population) FROM city GROUP BY Status",
        "question": "What are the statuses and average populations of each city?",
        "query": "db.city.aggregate([ { $group: { _id: \"$Status\", averagePopulation: { $avg: \"$Population\" } } } ])",
        "gpt4 answer": "db.city.aggregate([ { $group: { _id: \"$Status\", AveragePopulation: { $avg: \"$Population\" } } }, { $project: { Status: \"$_id\", AveragePopulation: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $group: { _id: \"$Status\", averagePopulation: { $avg: \"$Population\" } } } ])"
    },
    {
        "question_id": 36,
        "spider_question_id": 45,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "query": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Status: \"$_id\"} } ])",
        "gpt4 answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Status: \"$_id\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Status: \"$_id\"} } ])"
    },
    {
        "question_id": 37,
        "spider_question_id": 46,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "query": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Status: \"$_id\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Status: \"$_id\" } } ])"
    },
    {
        "question_id": 38,
        "spider_question_id": 47,
        "db_id": "farm",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of Status across cities.",
        "query": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])"
    },
    {
        "question_id": 39,
        "spider_question_id": 48,
        "db_id": "farm",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common status across all cities?",
        "query": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])"
    },
    {
        "question_id": 40,
        "spider_question_id": 53,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "query": "db.city.find({$or: [{Population: {$gt: 1500}}, {Population: {$lt: 500}}]}, { Official_Name: 1})",
        "gpt4 answer": "db.city.find({$or: [{Population: {$gt: 1500}}, {Population: {$lt: 500}}]}, { Official_Name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 41,
        "spider_question_id": 54,
        "db_id": "farm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
        "question": "What are the official names of cities that have population over 1500 or less than 500?",
        "query": "db.city.find( { $or: [ {Population: {$gt: 1500}}, {Population: {$lt: 500}} ] }, {Official_Name: 1} )",
        "gpt4 answer": "db.city.find({ $or: [{ Population: { $gt: 1500 } }, { Population: { $lt: 500 } }] }, { Official_Name: 1 })",
        "deepseek answer": "db.city.find( { $or: [ {Population: {$gt: 1500}}, {Population: {$lt: 500}} ] }, {Official_Name: 1} )"
    },
    {
        "question_id": 42,
        "spider_question_id": 55,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Census_Ranking FROM city WHERE Status != 'Village'",
        "question": "Show the census ranking of cities whose status are not 'Village'.",
        "query": "db.city.find({Status: {$ne: 'Village'}}, {Census_Ranking: 1})",
        "gpt4 answer": "db.city.find({ Status: { $ne: 'Village' } }, { Census_Ranking: 1 })",
        "deepseek answer": "db.city.find({Status: {$ne: 'Village'}}, {Census_Ranking: 1})"
    },
    {
        "question_id": 43,
        "spider_question_id": 56,
        "db_id": "farm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Census_Ranking FROM city WHERE Status != 'Village'",
        "question": "What are the census rankings of cities that do not have the status 'Village'?",
        "query": "db.city.find({Status: {$ne: 'Village'}}, {Census_Ranking: 1})",
        "gpt4 answer": "db.city.find({ Status: { $ne: 'Village' } }, { Census_Ranking: 1 })",
        "deepseek answer": "db.city.find({Status: {$ne: 'Village'}}, {Census_Ranking: 1})"
    },
    {
        "question_id": 44,
        "spider_question_id": 63,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "List the id of students who never attends courses?",
        "query": "db.Students.find({ \"student_id\": { \"$nin\": db.Student_Course_Attendance.distinct(\"student_id\") } }, { \"student_id\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.Students.find({ \"student_id\": { \"$nin\": db.Student_Course_Attendance.distinct(\"student_id\") } }, { \"student_id\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 45,
        "spider_question_id": 64,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are the ids of every student who has never attended a course?",
        "query": "db.Students.find( { \"student_id\": { \"$nin\": db.Student_Course_Attendance.distinct(\"student_id\") } }, { \"_id\": 0, \"student_id\": 1 } )",
        "gpt4 answer": "db.Students.find( { \"student_id\": { \"$nin\": db.Student_Course_Attendance.distinct(\"student_id\") } }, { \"_id\": 0, \"student_id\": 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 46,
        "spider_question_id": 72,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "question": "How many courses do the student whose id is 171 attend?",
        "query": "db.Student_Course_Attendance.aggregate([ { $match: { student_id: 171 } }, { $group: { _id: \"$course_id\" } }, { $count: \"total_courses\" } ])",
        "gpt4 answer": "db.Student_Course_Attendance.aggregate([ { $match: { student_id: 171 } }, { $group: { _id: \"$course_id\" } }, { $count: \"total_courses\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 47,
        "spider_question_id": 73,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "question": "How many courses does the student with id 171 actually attend?",
        "query": "db.Student_Course_Attendance.aggregate([ { $match: { student_id: 171 } }, { $group: { _id: \"$course_id\" } }, { $count: \"number_of_courses_attended\" } ])",
        "gpt4 answer": "db.Student_Course_Attendance.aggregate([ { $match: { student_id: 171 } }, { $group: { _id: \"$course_id\" } }, { $count: \"number_of_courses_attended\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 48,
        "spider_question_id": 74,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org'",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "query": "db.People.aggregate([ { $match: { email_address: \"stanley.monahan@example.org\" } }, { $lookup: { from: \"Candidates\", localField: \"person_id\", foreignField: \"candidate_id\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $project: { candidate_id: \"$candidate_info.candidate_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.People.aggregate([ { $match: { email_address: \"stanley.monahan@example.org\" } }, { $lookup: { from: \"Candidates\", localField: \"person_id\", foreignField: \"candidate_id\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $project: { candidate_id: \"$candidate_info.candidate_id\" } } ])"
    },
    {
        "question_id": 49,
        "spider_question_id": 75,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org'",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "query": "db.People.aggregate([ { $match: { email_address: 'stanley.monahan@example.org' } }, { $lookup: { from: 'Candidates', localField: 'person_id', foreignField: 'candidate_id', as: 'candidate_info' } }, { $unwind: '$candidate_info' }, { $project: { candidate_id: '$candidate_info.candidate_id' } } ])",
        "gpt4 answer": "db.People.aggregate([ { $match: { email_address: \"stanley.monahan@example.org\" } }, { $lookup: { from: \"Candidates\", localField: \"person_id\", foreignField: \"candidate_id\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $project: { candidate_id: \"$candidate_info.candidate_id\" } } ])",
        "deepseek answer": "db.People.aggregate([ { $match: { email_address: 'stanley.monahan@example.org' } }, { $lookup: { from: 'Candidates', localField: 'person_id', foreignField: 'candidate_id', as: 'candidate_info' } }, { $unwind: '$candidate_info' }, { $project: { candidate_id: '$candidate_info.candidate_id' } } ])"
    },
    {
        "question_id": 50,
        "spider_question_id": 76,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "question": "Find id of the candidate who most recently accessed the course?",
        "query": "db.Candidate_Assessments.find({}, { candidate_id: 1 }).sort({ assessment_date: -1 }).limit(1)",
        "gpt4 answer": "db.Candidate_Assessments.find({}, { candidate_id: 1 }).sort({ assessment_date: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 51,
        "spider_question_id": 77,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "query": "db.Candidate_Assessments.find({}, { candidate_id: 1 }).sort({ assessment_date: -1 }).limit(1)",
        "gpt4 answer": "db.Candidate_Assessments.find({}, { candidate_id: 1 }).sort({ assessment_date: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 52,
        "spider_question_id": 79,
        "db_id": "student_assessment",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the details of the student who registered for the most number of courses?",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Registrations\", localField: \"student_id\", foreignField: \"student_id\", as: \"registrations\" } }, { $project: { \"student_details\": 1, \"numberOfCourses\": { $size: \"$registrations\" } } }, { $sort: { \"numberOfCourses\": -1 } }, { $limit: 1 }, { $project: { student_details: 1} } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Registrations\", localField: \"student_id\", foreignField: \"student_id\", as: \"registrations\" } }, { $project: { \"student_details\": 1, \"numberOfCourses\": { $size: \"$registrations\" } } }, { $sort: { \"numberOfCourses\": -1 } }, { $limit: 1 }, { $project: { student_details: 1} } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 53,
        "spider_question_id": 84,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'",
        "question": "Find id of candidates whose assessment code is 'Pass'?",
        "query": "db.Candidate_Assessments.find({asessment_outcome_code: 'Pass'}, {candidate_id: 1})",
        "gpt4 answer": "db.Candidate_Assessments.find({ asessment_outcome_code: 'Pass' }, { candidate_id: 1 })",
        "deepseek answer": "db.Candidate_Assessments.find({asessment_outcome_code: 'Pass'}, {candidate_id: 1})"
    },
    {
        "question_id": 54,
        "spider_question_id": 85,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "query": "db.Candidate_Assessments.find({asessment_outcome_code: 'Pass'}, {candidate_id: 1})",
        "gpt4 answer": "db.Candidate_Assessments.find({asessment_outcome_code: 'Pass'}, { candidate_id: 1})",
        "deepseek answer": "db.Candidate_Assessments.find({asessment_outcome_code: 'Pass'}, {candidate_id: 1})"
    },
    {
        "question_id": 55,
        "spider_question_id": 86,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail'",
        "question": "Find the cell mobile number of the candidates whose assessment code is 'Fail'?",
        "query": "db.Candidates.aggregate([ { $lookup: { from: \"Candidate_Assessments\", localField: \"candidate_id\", foreignField: \"candidate_id\", as: \"candidate_assessments\" } }, { $unwind: \"$candidate_assessments\" }, { $match: { \"candidate_assessments.asessment_outcome_code\": \"Fail\" } }, { $lookup: { from: \"People\", localField: \"candidate_id\", foreignField: \"person_id\", as: \"people\" } }, { $unwind: \"$people\" }, { $project: { cell_mobile_number: \"$people.cell_mobile_number\" } } ])",
        "gpt4 answer": "db.Candidates.aggregate([ { $lookup: { from: \"Candidate_Assessments\", localField: \"candidate_id\", foreignField: \"candidate_id\", as: \"assessments\" } }, { $unwind: \"$assessments\" }, { $match: { \"assessments.asessment_outcome_code\": \"Fail\" } }, { $lookup: { from: \"People\", localField: \"candidate_id\", foreignField: \"person_id\", as: \"people\" } }, { $unwind: \"$people\" }, { $project: { cell_mobile_number: \"$people.cell_mobile_number\" } } ])",
        "deepseek answer": "db.Candidates.aggregate([ { $lookup: { from: \"Candidate_Assessments\", localField: \"candidate_id\", foreignField: \"candidate_id\", as: \"candidate_assessments\" } }, { $unwind: \"$candidate_assessments\" }, { $match: { \"candidate_assessments.asessment_outcome_code\": \"Fail\" } }, { $lookup: { from: \"People\", localField: \"candidate_id\", foreignField: \"person_id\", as: \"people\" } }, { $unwind: \"$people\" }, { $project: { cell_mobile_number: \"$people.cell_mobile_number\" } } ])"
    },
    {
        "question_id": 56,
        "spider_question_id": 87,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail'",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of 'Fail'?",
        "query": "db.Candidates.aggregate([ { $lookup: { from: \"Candidate_Assessments\", localField: \"candidate_id\", foreignField: \"candidate_id\", as: \"candidate_assessments\" } }, { $unwind: \"$candidate_assessments\" }, { $match: { \"candidate_assessments.asessment_outcome_code\": \"Fail\" } }, { $lookup: { from: \"People\", localField: \"candidate_id\", foreignField: \"person_id\", as: \"people\" } }, { $unwind: \"$people\" }, { $project: { cell_mobile_number: \"$people.cell_mobile_number\" } } ])",
        "gpt4 answer": "db.Candidates.aggregate([ { $lookup: { from: \"Candidate_Assessments\", localField: \"candidate_id\", foreignField: \"candidate_id\", as: \"assessments\" } }, { $unwind: \"$assessments\" }, { $match: { \"assessments.asessment_outcome_code\": \"Fail\" } }, { $lookup: { from: \"People\", localField: \"candidate_id\", foreignField: \"person_id\", as: \"candidate_people\" } }, { $unwind: \"$candidate_people\" }, { $project: { cell_mobile_number: \"$candidate_people.cell_mobile_number\" } } ])",
        "deepseek answer": "db.Candidates.aggregate([ { $lookup: { from: \"Candidate_Assessments\", localField: \"candidate_id\", foreignField: \"candidate_id\", as: \"candidate_assessments\" } }, { $unwind: \"$candidate_assessments\" }, { $match: { \"candidate_assessments.asessment_outcome_code\": \"Fail\" } }, { $lookup: { from: \"People\", localField: \"candidate_id\", foreignField: \"person_id\", as: \"people\" } }, { $unwind: \"$people\" }, { $project: { cell_mobile_number: \"$people.cell_mobile_number\" } } ])"
    },
    {
        "question_id": 57,
        "spider_question_id": 88,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
        "question": "What are the id of students who registered course 301?",
        "query": "db.Student_Course_Registrations.find({course_id: 301}, {student_id: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student_Course_Registrations.find({course_id: 301}, {student_id: 1})"
    },
    {
        "question_id": 58,
        "spider_question_id": 89,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
        "question": "What are the ids of the students who registered for course 301?",
        "query": "db.Student_Course_Registrations.find({course_id: 301}, {student_id: 1})",
        "gpt4 answer": "db.Student_Course_Registrations.find({course_id: 301}, { student_id: 1})",
        "deepseek answer": "db.Student_Course_Registrations.find({course_id: 301}, {student_id: 1})"
    },
    {
        "question_id": 59,
        "spider_question_id": 92,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "question": "Find distinct cities of addresses of people?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"pa\" } }, { $unwind: \"$pa\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"people_addresses\" } }, { $match: { \"people_addresses.address_id\": { $exists: true } } }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"pa\" } }, { $unwind: \"$pa\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 60,
        "spider_question_id": 94,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "Find distinct cities of address of students?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_join\" } }, { $unwind: \"$address_join\" }, { $lookup: { from: \"Students\", localField: \"address_join.person_id\", foreignField: \"student_id\", as: \"student_join\" } }, { $unwind: \"$student_join\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"PA\" } }, { $unwind: \"$PA\" }, { $lookup: { from: \"Students\", localField: \"PA.person_id\", foreignField: \"student_id\", as: \"S\" } }, { $unwind: \"$S\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_join\" } }, { $unwind: \"$address_join\" }, { $lookup: { from: \"Students\", localField: \"address_join.person_id\", foreignField: \"student_id\", as: \"student_join\" } }, { $unwind: \"$student_join\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 61,
        "spider_question_id": 95,
        "db_id": "student_assessment",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "What are the different cities where students live?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_join\" } }, { $unwind: \"$address_join\" }, { $lookup: { from: \"Students\", localField: \"address_join.person_id\", foreignField: \"student_id\", as: \"student_join\" } }, { $unwind: \"$student_join\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"pa\" } }, { $unwind: \"$pa\" }, { $lookup: { from: \"Students\", localField: \"pa.person_id\", foreignField: \"student_id\", as: \"s\" } }, { $unwind: \"$s\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"People_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_join\" } }, { $unwind: \"$address_join\" }, { $lookup: { from: \"Students\", localField: \"address_join.person_id\", foreignField: \"student_id\", as: \"student_join\" } }, { $unwind: \"$student_join\" }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 62,
        "spider_question_id": 96,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT course_name FROM courses ORDER BY course_name",
        "question": "List the names of courses in alphabetical order?",
        "query": "db.Courses.find({}, { course_name: 1 }).sort({ course_name: 1 })",
        "gpt4 answer": "db.Courses.find({}, { course_name: 1 }).sort({ course_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 63,
        "spider_question_id": 97,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT course_name FROM courses ORDER BY course_name",
        "question": "What are the names of the courses in alphabetical order?",
        "query": "db.Courses.find({}, { course_name: 1 }).sort({ course_name: 1 })",
        "gpt4 answer": "db.Courses.find({}, { course_name: 1 }).sort({ course_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 64,
        "spider_question_id": 98,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT first_name FROM people ORDER BY first_name",
        "question": "List the first names of people in alphabetical order?",
        "query": "db.People.find({}, {first_name: 1}).sort({first_name: 1})",
        "gpt4 answer": "db.People.find({}, { first_name: 1 }).sort({ first_name: 1 })",
        "deepseek answer": "db.People.find({}, {first_name: 1}).sort({first_name: 1})"
    },
    {
        "question_id": 65,
        "spider_question_id": 99,
        "db_id": "student_assessment",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT first_name FROM people ORDER BY first_name",
        "question": "What are the first names of the people in alphabetical order?",
        "query": "db.People.find({}, {first_name: 1}).sort({first_name: 1})",
        "gpt4 answer": "db.People.find({}, { first_name: 1 }).sort({ first_name: 1 })",
        "deepseek answer": "db.People.find({}, {first_name: 1}).sort({first_name: 1})"
    },
    {
        "question_id": 66,
        "spider_question_id": 101,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "db.Student_Course_Registrations.aggregate([ { $lookup: { from: \"Student_Course_Attendance\", localField: \"student_id\", foreignField: \"student_id\", as: \"attendance\" } }, { $project: { student_id: 1 } }, { $unionWith: { coll: \"Student_Course_Attendance\", pipeline: [ { $project: { student_id: 1 } } ] } }, { $group: { _id: \"$student_id\" } }, { $project: { student_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Student_Course_Registrations.aggregate([ { $lookup: { from: \"Student_Course_Attendance\", localField: \"student_id\", foreignField: \"student_id\", as: \"attendance\" } }, { $project: { student_id: 1 } }, { $unionWith: { coll: \"Student_Course_Attendance\", pipeline: [ { $project: { student_id: 1 } } ] } }, { $group: { _id: \"$student_id\" } }, { $project: { student_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 67,
        "spider_question_id": 102,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "query": "db.Student_Course_Registrations.aggregate([ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } }, { $unionWith: { coll: \"Student_Course_Attendance\", pipeline: [ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } } ] } }, { $group: { _id: \"$_id\" } }, { $project: { course_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Student_Course_Registrations.aggregate([ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } }, { $unionWith: { coll: \"Student_Course_Attendance\", pipeline: [ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } } ] } }, { $group: { _id: \"$_id\" } }, { $project: { course_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 68,
        "spider_question_id": 103,
        "db_id": "student_assessment",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "query": "db.Student_Course_Registrations.aggregate([ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } }, { $unionWith: { coll: \"Student_Course_Attendance\", pipeline: [ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } } ] } }, { $group: { _id: \"$_id\" } }, { $project: { course_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Student_Course_Registrations.aggregate([ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } }, { $unionWith: { coll: \"Student_Course_Attendance\", pipeline: [ { $match: { student_id: 121 } }, { $group: { _id: \"$course_id\" } } ] } }, { $group: { _id: \"$_id\" } }, { $project: { course_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 69,
        "spider_question_id": 114,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , max(lat) FROM station GROUP BY city",
        "question": "For each city, return the highest latitude among its stations.",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\", maxLatitude: { $max: \"$lat\" } } }, { $project: { city: \"$_id\", maxLatitude: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } } ])"
    },
    {
        "question_id": 70,
        "spider_question_id": 115,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , max(lat) FROM station GROUP BY city",
        "question": "For each city, what is the highest latitude for its stations?",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\", highestLatitude: { $max: \"$lat\" } } }, { $project: { city: \"$_id\", highestLatitude: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } } ])"
    },
    {
        "question_id": 71,
        "spider_question_id": 116,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "query": "db.trip.find({}, { start_station_name: 1, end_station_name: 1}).sort({id: 1}).limit(3)",
        "gpt4 answer": "db.trip.find({}, { start_station_name: 1, end_station_name: 1 }).sort({ id: 1 }).limit(3)",
        "deepseek answer": "db.trip.find({}, { start_station_name: 1, end_station_name: 1}).sort({id: 1}).limit(3)"
    },
    {
        "question_id": 72,
        "spider_question_id": 117,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
        "question": "What is the station station and end station for the trips with the three smallest ids?",
        "query": "db.trip.find({}, { start_station_name: 1, end_station_name: 1}).sort({id: 1}).limit(3)",
        "gpt4 answer": "db.trip.find({}, { start_station_name: 1, end_station_name: 1 }).sort({ id: 1 }).limit(3)",
        "deepseek answer": "db.trip.find({}, { start_station_name: 1, end_station_name: 1}).sort({id: 1}).limit(3)"
    },
    {
        "question_id": 73,
        "spider_question_id": 118,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(lat) , avg(long) FROM station WHERE city = 'San Jose'",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "query": "db.station.aggregate([ { $match: { city: \"San Jose\" } }, { $group: { _id: null, avgLat: { $avg: \"$lat\" }, avgLong: { $avg: \"$long\" } } }, { $project: { avgLat: 1, avgLong: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $match: { city: \"San Jose\" } }, { $group: { _id: null, avgLat: { $avg: \"$lat\" }, avgLong: { $avg: \"$long\" } } }, { $project: { avgLat: 1, avgLong: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: \"San Jose\" } }, { $group: { _id: null, avgLat: { $avg: \"$lat\" }, avgLong: { $avg: \"$long\" } } }, { $project: { avgLat: 1, avgLong: 1 } } ])"
    },
    {
        "question_id": 74,
        "spider_question_id": 119,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(lat) , avg(long) FROM station WHERE city = 'San Jose'",
        "question": "What is the average latitude and longitude in San Jose?",
        "query": "db.station.aggregate([ { $match: { city: \"San Jose\" } }, { $group: { _id: null, avgLat: { $avg: \"$lat\" }, avgLong: { $avg: \"$long\" } } }, { $project: { avgLat: 1, avgLong: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $match: { city: 'San Jose' } }, { $group: { _id: null, average_latitude: { $avg: \"$lat\" }, average_longitude: { $avg: \"$long\" } } }, { $project: { average_latitude: 1, average_longitude: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: \"San Jose\" } }, { $group: { _id: null, avgLat: { $avg: \"$lat\" }, avgLong: { $avg: \"$long\" } } }, { $project: { avgLat: 1, avgLong: 1 } } ])"
    },
    {
        "question_id": 75,
        "spider_question_id": 121,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "question": "What is the id of the shortest trip?",
        "query": "db.trip.find({}, {id: 1}).sort({duration: 1}).limit(1)",
        "gpt4 answer": "db.trip.find({}, {id: 1}).sort({duration: 1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 76,
        "spider_question_id": 122,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "query": "db.trip.aggregate([ { $match: { bike_id: 636 } }, { $group: { _id: null, totalDuration: { $sum: \"$duration\" }, maxDuration: { $max: \"$duration\" } }}, { $project: { totalDuration: 1, maxDuration: 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $match: { bike_id: 636 } }, { $group: { _id: null, total_duration: { $sum: \"$duration\" }, max_duration: { $max: \"$duration\" } }}, { $project: { total_duration: 1, max_duration: 1 } } ])",
        "deepseek answer": "db.trip.aggregate([ { $match: { bike_id: 636 } }, { $group: { _id: null, totalDuration: { $sum: \"$duration\" }, maxDuration: { $max: \"$duration\" } }}, { $project: { totalDuration: 1, maxDuration: 1 } } ])"
    },
    {
        "question_id": 77,
        "spider_question_id": 123,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "query": "db.trip.aggregate([ { $match: { bike_id: 636 } }, { $group: { _id: null, totalDuration: { $sum: \"$duration\" }, maxDuration: { $max: \"$duration\" } }}, { $project: { totalDuration: 1, maxDuration: 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $match: { bike_id: 636 } }, { $group: { _id: null, total_duration: { $sum: \"$duration\" }, max_duration: { $max: \"$duration\" } } }, { $project: { total_duration: 1, max_duration: 1 } } ])",
        "deepseek answer": "db.trip.aggregate([ { $match: { bike_id: 636 } }, { $group: { _id: null, totalDuration: { $sum: \"$duration\" }, maxDuration: { $max: \"$duration\" } }}, { $project: { totalDuration: 1, maxDuration: 1 } } ])"
    },
    {
        "question_id": 78,
        "spider_question_id": 128,
        "db_id": "bike_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT city) FROM station",
        "question": "What is the number of distinct cities the stations are located at?",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\" } }, { $count: \"distinct_cities\" } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\" } }, { $count: \"distinct_cities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 79,
        "spider_question_id": 132,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "query": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $match: { \"status_info.bikes_available\": 7 } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.status.aggregate([ { $match: { bikes_available: 7 } }, { $group: { _id: \"$station_id\" } }, { $lookup: { from: \"station\", localField: \"_id\", foreignField: \"id\", as: \"station_info\" }}, { $unwind: \"$station_info\" }, { $project: { \"station_info.name\": 1 } }, { $group: { _id: \"$station_info.name\" } } ])",
        "deepseek answer": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $match: { \"status_info.bikes_available\": 7 } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 80,
        "spider_question_id": 133,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "query": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $match: { \"status_info.bikes_available\": 7 } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $match: { \"status_info.bikes_available\": 7 } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 81,
        "spider_question_id": 134,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "query": "db.trip.aggregate([ { $match: { start_date: { $regex: /^8\\// } } }, { $group: { _id: { start_station_name: \"$start_station_name\", start_station_id: \"$start_station_id\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { start_station_name: \"$_id.start_station_name\", start_station_id: \"$_id.start_station_id\" } } ])",
        "gpt4 answer": "db.trip.aggregate([ {$match: {start_date: /^8\\//}}, {$group: {_id: {start_station_name: \"$start_station_name\", start_station_id: \"$start_station_id\"}, count: {$sum: 1}}}, {$sort: {count: -1}}, {$limit: 1}, {$project: {start_station_name: \"$_id.start_station_name\", start_station_id: \"$_id.start_station_id\"}} ])",
        "deepseek answer": "db.trip.aggregate([ { $match: { start_date: { $regex: /^8\\// } } }, { $group: { _id: { start_station_name: \"$start_station_name\", start_station_id: \"$start_station_id\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { start_station_name: \"$_id.start_station_name\", start_station_id: \"$_id.start_station_id\" } } ])"
    },
    {
        "question_id": 82,
        "spider_question_id": 135,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What are the start station's name and id for the one that had the most start trips in August?",
        "query": "db.trip.aggregate([ { $match: { start_date: { $regex: /^8\\// } } }, { $group: { _id: { start_station_name: \"$start_station_name\", start_station_id: \"$start_station_id\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { start_station_name: \"$_id.start_station_name\", start_station_id: \"$_id.start_station_id\" } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $match: { start_date: { $regex: '^8/' } } }, { $group: { _id: { start_station_name: \"$start_station_name\", start_station_id: \"$start_station_id\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { start_station_name: \"$_id.start_station_name\", start_station_id: \"$_id.start_station_id\" } } ])",
        "deepseek answer": "db.trip.aggregate([ { $match: { start_date: { $regex: /^8\\// } } }, { $group: { _id: { start_station_name: \"$start_station_name\", start_station_id: \"$start_station_id\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { start_station_name: \"$_id.start_station_name\", start_station_id: \"$_id.start_station_id\" } } ])"
    },
    {
        "question_id": 83,
        "spider_question_id": 140,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "query": "db.station.aggregate([ { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"trips\" } }, { $unwind: \"$trips\" }, { $sort: { \"trips.duration\": 1 } }, { $limit: 1 }, { $project: { lat: 1, long: 1, city: 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $sort: { duration: 1 } }, { $limit: 1 }, { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $project: { lat: \"$station_info.lat\", long: \"$station_info.long\", city: \"$station_info.city\" } } ])",
        "deepseek answer": "db.station.aggregate([ { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"trips\" } }, { $unwind: \"$trips\" }, { $sort: { \"trips.duration\": 1 } }, { $limit: 1 }, { $project: { lat: 1, long: 1, city: 1 } } ])"
    },
    {
        "question_id": 84,
        "spider_question_id": 141,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
        "query": "db.station.aggregate([ { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"trips\" } }, { $unwind: \"$trips\" }, { $sort: { \"trips.duration\": 1 } }, { $limit: 1 }, { $project: { lat: 1, long: 1, city: 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $sort: { duration: 1 } }, { $limit: 1 }, { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $project: { lat: \"$station_info.lat\", long: \"$station_info.long\", city: \"$station_info.city\" } } ])",
        "deepseek answer": "db.station.aggregate([ { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"trips\" } }, { $unwind: \"$trips\" }, { $sort: { \"trips.duration\": 1 } }, { $limit: 1 }, { $project: { lat: 1, long: 1, city: 1 } } ])"
    },
    {
        "question_id": 85,
        "spider_question_id": 142,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "query": "db.station.aggregate([ { $match: { city: \"San Francisco\" } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_data\" } }, { $unwind: \"$status_data\" }, { $group: { _id: \"$id\", avgBikesAvailable: { $avg: \"$status_data.bikes_available\" } } }, { $match: { avgBikesAvailable: { $gt: 10 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $match: { city: \"San Francisco\" } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$id\", averageBikes: { $avg: \"$status_info.bikes_available\" } } }, { $match: { averageBikes: { $gt: 10 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: \"San Francisco\" } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_data\" } }, { $unwind: \"$status_data\" }, { $group: { _id: \"$id\", avgBikesAvailable: { $avg: \"$status_data.bikes_available\" } } }, { $match: { avgBikesAvailable: { $gt: 10 } } }, { $project: { _id: 1 } } ])"
    },
    {
        "question_id": 86,
        "spider_question_id": 143,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
        "query": "db.station.aggregate([ { $match: { city: \"San Francisco\" } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$status_info.station_id\", averageBikes: { $avg: \"$status_info.bikes_available\" } } }, { $match: { averageBikes: { $gt: 10 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $match: { city: \"San Francisco\" } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$status_info.station_id\", averageBikes: { $avg: \"$status_info.bikes_available\" } } }, { $match: { averageBikes: { $gt: 10 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 87,
        "spider_question_id": 144,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE '12/%'",
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "query": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$id\", name: { $first: \"$name\" }, averageBikesAvailable: { $avg: \"$status_info.bikes_available\" } } }, { $match: { $or: [ { averageBikesAvailable: { $gt: 14 } }, { installation_date: { $regex: /^12\\// } } ] } }, { $project: { name: 1, id: \"$_id\" } }, { $unionWith: { coll: \"station\", pipeline: [ { $match: { installation_date: { $regex: /^12\\// } } }, { $project: { name: 1, id: 1 } } ] } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$id\", name: { $first: \"$name\" }, averageBikesAvailable: { $avg: \"$status_info.bikes_available\" } } }, { $match: { $or: [ { averageBikesAvailable: { $gt: 14 } }, { installation_date: { $regex: /^12\\// } } ] } }, { $project: { name: 1, id: \"$_id\" } }, { $unionWith: { coll: \"station\", pipeline: [ { $match: { installation_date: { $regex: /^12\\// } } }, { $project: { name: 1, id: 1 } } ] } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 88,
        "spider_question_id": 145,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE '12/%'",
        "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
        "query": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $addFields: { average_bikes_available: { $avg: \"$status_info.bikes_available\" } } }, { $match: { $or: [ { average_bikes_available: { $gt: 14 } }, { installation_date: { $regex: '^12/' } } ] } }, { $project: { id: 1, name: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $addFields: { average_bikes_available: { $avg: \"$status_info.bikes_available\" } } }, { $match: { $or: [ { average_bikes_available: { $gt: 14 } }, { installation_date: { $regex: '^12/' } } ] } }, { $project: { id: 1, name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 89,
        "spider_question_id": 146,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "query": "db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: \"$cloud_cover\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { cloud_cover: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: \"$cloud_cover\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { cloud_cover: \"$_id\" } }])"
    },
    {
        "question_id": 90,
        "spider_question_id": 147,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: \"$cloud_cover\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { cloud_cover: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: \"$cloud_cover\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { cloud_cover: \"$_id\" } }])"
    },
    {
        "question_id": 91,
        "spider_question_id": 150,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = 'Palo Alto')",
        "question": "What is the average bike availability in stations that are not located in Palo Alto?",
        "query": "db.station.aggregate([ { $match: { city: { $ne: \"Palo Alto\" } } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status\" } }, { $unwind: \"$status\" }, { $group: { _id: null, avgBikesAvailable: { $avg: \"$status.bikes_available\" } } }, { $project: { avgBikesAvailable: 1 } } ])",
        "gpt4 answer": "db.status.aggregate([ { $lookup: { from: \"station\", localField: \"station_id\", foreignField: \"id\", as: \"station_info\" } }, { $match: { \"station_info.city\": { $ne: \"Palo Alto\" } } }, { $group: { _id: null, averageBikesAvailable: { $avg: \"$bikes_available\" } } }, { $project: { averageBikesAvailable: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: { $ne: \"Palo Alto\" } } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status\" } }, { $unwind: \"$status\" }, { $group: { _id: null, avgBikesAvailable: { $avg: \"$status.bikes_available\" } } }, { $project: { avgBikesAvailable: 1 } } ])"
    },
    {
        "question_id": 92,
        "spider_question_id": 151,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = 'Palo Alto')",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "query": "db.station.aggregate([ { $match: { city: { $ne: \"Palo Alto\" } } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status\" } }, { $unwind: \"$status\" }, { $group: { _id: null, avgBikesAvailable: { $avg: \"$status.bikes_available\" } } }, { $project: { avgBikesAvailable: 1 } } ])",
        "gpt4 answer": "db.status.aggregate([ { $lookup: { from: \"station\", localField: \"station_id\", foreignField: \"id\", as: \"station_info\" } }, { $match: { \"station_info.city\": { $ne: \"Palo Alto\" } } }, { $group: { _id: null, averageBikesAvailable: { $avg: \"$bikes_available\" } } }, { $project: { averageBikesAvailable: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: { $ne: \"Palo Alto\" } } }, { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status\" } }, { $unwind: \"$status\" }, { $group: { _id: null, avgBikesAvailable: { $avg: \"$status.bikes_available\" } } }, { $project: { avgBikesAvailable: 1 } } ])"
    },
    {
        "question_id": 93,
        "spider_question_id": 160,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "query": "db.weather.aggregate([ { $match: { min_dew_point_f: { $lt: db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: null, min_dew_point_f: { $min: \"$min_dew_point_f\" } } } ]).toArray()[0].min_dew_point_f } } }, { $project: { date: 1, zip_code: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.weather.aggregate([ { $match: { min_dew_point_f: { $lt: db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: null, min_dew_point_f: { $min: \"$min_dew_point_f\" } } } ]).toArray()[0].min_dew_point_f } } }, { $project: { date: 1, zip_code: 1 } } ])"
    },
    {
        "question_id": 94,
        "spider_question_id": 161,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?",
        "query": "db.weather.aggregate([ { $match: { min_dew_point_f: { $lt: db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: null, min_dew_point_f: { $min: \"$min_dew_point_f\" } } } ]).toArray()[0].min_dew_point_f } } }, { $project: { date: 1, zip_code: 1 } } ])",
        "gpt4 answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", minDewPoint: { $min: \"$min_dew_point_f\" } } }, { $match: { _id: 94107 } }, { $project: { minDewPoint94107: \"$minDewPoint\" } }, { $lookup: { from: \"weather\", let: { minDewPointZip: \"$minDewPoint94107\" }, pipeline: [ { $match: { $expr: { $lt: [\"$min_dew_point_f\", \"$$minDewPointZip\"] } } }, { $project: { date: 1, zip_code: 1 } } ], as: \"daysWithLowerDewPoint\" } }, { $unwind: \"$daysWithLowerDewPoint\" }, { $replaceRoot: { newRoot: \"$daysWithLowerDewPoint\" } } ])",
        "deepseek answer": "db.weather.aggregate([ { $match: { min_dew_point_f: { $lt: db.weather.aggregate([ { $match: { zip_code: 94107 } }, { $group: { _id: null, min_dew_point_f: { $min: \"$min_dew_point_f\" } } } ]).toArray()[0].min_dew_point_f } } }, { $project: { date: 1, zip_code: 1 } } ])"
    },
    {
        "question_id": 95,
        "spider_question_id": 164,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "query": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"start_station\" } }, { $unwind: \"$start_station\" }, { $sort: { \"start_station.dock_count\": -1 } }, { $limit: 1 }, { $project: { id: \"$id\" } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $sort: { \"station_info.dock_count\": -1 } }, { $limit: 1 }, { $project: { id: 1 } } ])",
        "deepseek answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"start_station\" } }, { $unwind: \"$start_station\" }, { $sort: { \"start_station.dock_count\": -1 } }, { $limit: 1 }, { $project: { id: \"$id\" } } ])"
    },
    {
        "question_id": 96,
        "spider_question_id": 165,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "question": "What is the id of the trip that started from the station with the highest dock count?",
        "query": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"station\" } }, { $unwind: \"$station\" }, { $sort: { \"station.dock_count\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"id\": 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"station\" } }, { $unwind: \"$station\" }, { $sort: { \"station.dock_count\": -1 } }, { $limit: 1 }, { $project: { id: 1 } } ])",
        "deepseek answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"station\" } }, { $unwind: \"$station\" }, { $sort: { \"station.dock_count\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"id\": 1 } } ])"
    },
    {
        "question_id": 97,
        "spider_question_id": 166,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != 'San Francisco'",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "query": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"end_station.city\": { $ne: \"San Francisco\" } } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"station_info\" } }, { $match: { \"station_info.city\": { $ne: \"San Francisco\" } } }, { $count: \"non_sf_trip_count\" } ])",
        "deepseek answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"end_station.city\": { $ne: \"San Francisco\" } } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 98,
        "spider_question_id": 167,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != 'San Francisco'",
        "question": "How many trips did not end in San Francisco?",
        "query": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"end_station.city\": { $ne: \"San Francisco\" } } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"end_station.city\": { $ne: \"San Francisco\" } } }, { $count: \"trips_not_in_san_francisco\" } ])",
        "deepseek answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"end_station.city\": { $ne: \"San Francisco\" } } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 99,
        "spider_question_id": 172,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "query": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $match: { city: { $ne: \"San Jose\" } } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$_id\", name: { $first: \"$name\" }, avgBikesAvailable: { $avg: \"$status_info.bikes_available\" } } }, { $match: { avgBikesAvailable: { $gt: 10 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"status_info\" } }, { $match: { city: { $ne: \"San Jose\" } } }, { $unwind: \"$status_info\" }, { $group: { _id: \"$_id\", name: { $first: \"$name\" }, avgBikesAvailable: { $avg: \"$status_info.bikes_available\" } } }, { $match: { avgBikesAvailable: { $gt: 10 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 100,
        "spider_question_id": 173,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'",
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
        "query": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"station_status\" } }, { $match: { city: { $ne: \"San Jose\" } } }, { $unwind: \"$station_status\" }, { $group: { _id: \"$station_status.station_id\", averageBikesAvailable: { $avg: \"$station_status.bikes_available\" }, name: { $first: \"$name\" } } }, { $match: { averageBikesAvailable: { $gt: 10 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"status\", localField: \"id\", foreignField: \"station_id\", as: \"station_status\" } }, { $match: { city: { $ne: \"San Jose\" } } }, { $unwind: \"$station_status\" }, { $group: { _id: \"$station_status.station_id\", averageBikesAvailable: { $avg: \"$station_status.bikes_available\" }, name: { $first: \"$name\" } } }, { $match: { averageBikesAvailable: { $gt: 10 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 101,
        "spider_question_id": 174,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "query": "db.station.find({}, {name: 1, lat: 1, city: 1}).sort({lat: 1}).limit(1)",
        "gpt4 answer": "db.station.find({},{name:1, lat:1, city:1, _id:0}).sort({lat:1}).limit(1)",
        "deepseek answer": "db.station.find({}, {name: 1, lat: 1, city: 1}).sort({lat: 1}).limit(1)"
    },
    {
        "question_id": 102,
        "spider_question_id": 175,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
        "question": "What is the name, latitude, and city of the station that is located the furthest South?",
        "query": "db.station.find({}, {name: 1, lat: 1, city: 1}).sort({lat: 1}).limit(1)",
        "gpt4 answer": "db.station.find({}, { name: 1, lat: 1, city: 1 }).sort({ lat: 1 }).limit(1)",
        "deepseek answer": "db.station.find({}, {name: 1, lat: 1, city: 1}).sort({lat: 1}).limit(1)"
    },
    {
        "question_id": 103,
        "spider_question_id": 176,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "db.weather.find({}, {date: 1, mean_temperature_f: 1, mean_humidity: 1}).sort({max_gust_speed_mph: -1}).limit(3)",
        "gpt4 answer": "db.weather.find({}, { date: 1, mean_temperature_f: 1, mean_humidity: 1 }) .sort({ max_gust_speed_mph: -1 }) .limit(3)",
        "deepseek answer": "db.weather.find({}, {date: 1, mean_temperature_f: 1, mean_humidity: 1}).sort({max_gust_speed_mph: -1}).limit(3)"
    },
    {
        "question_id": 104,
        "spider_question_id": 177,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?",
        "query": "db.weather.find({}, {date: 1, mean_temperature_f: 1, mean_humidity: 1}).sort({max_gust_speed_mph: -1}).limit(3)",
        "gpt4 answer": "db.weather.find({}, { date: 1, mean_temperature_f: 1, mean_humidity: 1 }).sort({ max_gust_speed_mph: -1 }).limit(3)",
        "deepseek answer": "db.weather.find({}, {date: 1, mean_temperature_f: 1, mean_humidity: 1}).sort({max_gust_speed_mph: -1}).limit(3)"
    },
    {
        "question_id": 105,
        "spider_question_id": 178,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gte: 15 } } }, { $project: { city: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\", stationCount: { $sum: 1 } } }, { $match: { stationCount: { $gte: 15 } } }, { $project: { city: \"$_id\", stationCount: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gte: 15 } } }, { $project: { city: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 106,
        "spider_question_id": 179,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gte: 15 } } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\", stationCount: { $sum: 1 } } }, { $match: { stationCount: { $gte: 15 } } }, { $project: { city: \"$_id\", stationCount: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gte: 15 } } } ])"
    },
    {
        "question_id": 107,
        "spider_question_id": 180,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "query": "db.trip.aggregate([ { $group: { _id: { start_station_id: \"$start_station_id\", start_station_name: \"$start_station_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 200 } } }, { $project: { start_station_id: \"$_id.start_station_id\", start_station_name: \"$_id.start_station_name\" } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $group: { _id: { start_station_id: \"$start_station_id\", start_station_name: \"$start_station_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 200 } } }, { $project: { start_station_id: \"$_id.start_station_id\", start_station_name: \"$_id.start_station_name\" } } ])",
        "deepseek answer": "db.trip.aggregate([ { $group: { _id: { start_station_id: \"$start_station_id\", start_station_name: \"$start_station_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 200 } } }, { $project: { start_station_id: \"$_id.start_station_id\", start_station_name: \"$_id.start_station_name\" } } ])"
    },
    {
        "question_id": 108,
        "spider_question_id": 181,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "query": "db.trip.aggregate([ { $group: { _id: { start_station_id: \"$start_station_id\", start_station_name: \"$start_station_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 200 } } }, { $project: { start_station_id: \"$_id.start_station_id\", start_station_name: \"$_id.start_station_name\" } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $group: { _id: { start_station_id: \"$start_station_id\", start_station_name: \"$start_station_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 200 } } }, { $project: { start_station_id: \"$_id.start_station_id\", start_station_name: \"$_id.start_station_name\" } } ])",
        "deepseek answer": "db.trip.aggregate([ { $group: { _id: { start_station_id: \"$start_station_id\", start_station_name: \"$start_station_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 200 } } }, { $project: { start_station_id: \"$_id.start_station_id\", start_station_name: \"$_id.start_station_name\" } } ])"
    },
    {
        "question_id": 109,
        "spider_question_id": 182,
        "db_id": "bike_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", avgVisibility: { $avg: \"$mean_visibility_miles\" } } }, { $match: { avgVisibility: { $lt: 10 } } }, { $project: { zip_code: \"$_id\" } } ])",
        "gpt4 answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", avgMeanVisibility: { $avg: \"$mean_visibility_miles\" } } }, { $match: { avgMeanVisibility: { $lt: 10 } } }, { $project: { zip_code: \"$_id\" } } ])",
        "deepseek answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", avgVisibility: { $avg: \"$mean_visibility_miles\" } } }, { $match: { avgVisibility: { $lt: 10 } } }, { $project: { zip_code: \"$_id\" } } ])"
    },
    {
        "question_id": 110,
        "spider_question_id": 183,
        "db_id": "bike_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10",
        "question": "For each zip code, select all those that have an average mean visiblity below 10.",
        "query": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", avgVisibility: { $avg: \"$mean_visibility_miles\" } } }, { $match: { avgVisibility: { $lt: 10 } } }, { $project: { zip_code: \"$_id\" } } ])",
        "gpt4 answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", avgMeanVisibility: { $avg: \"$mean_visibility_miles\" } } }, { $match: { avgMeanVisibility: { $lt: 10 } } }, { $project: { zip_code: \"$_id\" } } ])",
        "deepseek answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", avgVisibility: { $avg: \"$mean_visibility_miles\" } } }, { $match: { avgVisibility: { $lt: 10 } } }, { $project: { zip_code: \"$_id\" } } ])"
    },
    {
        "question_id": 111,
        "spider_question_id": 184,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } }, { $sort: { maxLat: -1 } }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\", highestLat: { $max: \"$lat\" } } }, { $sort: { highestLat: -1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } }, { $sort: { maxLat: -1 } }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 112,
        "spider_question_id": 185,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "question": "For each city, list their names in decreasing order by their highest station latitude.",
        "query": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } }, { $sort: { maxLat: -1 } }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$city\", maxLatitude: { $max: \"$lat\" } } }, { $sort: { maxLatitude: -1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$city\", maxLat: { $max: \"$lat\" } } }, { $sort: { maxLat: -1 } }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 113,
        "spider_question_id": 188,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "query": "db.trip.find({}, { id: 1, duration: 1}).sort({duration: -1}).limit(3)",
        "gpt4 answer": "db.trip.find({}, { id: 1, duration: 1 }).sort({ duration: -1 }).limit(3)",
        "deepseek answer": "db.trip.find({}, { id: 1, duration: 1}).sort({duration: -1}).limit(3)"
    },
    {
        "question_id": 114,
        "spider_question_id": 189,
        "db_id": "bike_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "question": "What are the ids of the trips that lasted the longest and how long did they last?",
        "query": "db.trip.find({}, { id: 1, duration: 1}).sort({duration: -1}).limit(3)",
        "gpt4 answer": "db.trip.find({}, {id: 1, duration: 1}).sort({duration: -1}).limit(3)",
        "deepseek answer": "db.trip.find({}, { id: 1, duration: 1}).sort({duration: -1}).limit(3)"
    },
    {
        "question_id": 115,
        "spider_question_id": 196,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "query": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", maxDew: { $max: \"$max_dew_point_f\" } } }, { $match: { maxDew: { $lt: 70 } } }, { $project: { zip_code: \"$_id\" } } ])",
        "gpt4 answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", maxDew: { $max: \"$max_dew_point_f\" } } }, { $match: { maxDew: { $lt: 70 } } }, { $project: { zip_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 116,
        "spider_question_id": 197,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "query": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", maxDewPoint: { $max: \"$max_dew_point_f\" } } }, { $match: { maxDewPoint: { $lt: 70 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.weather.aggregate([ { $group: { _id: \"$zip_code\", maxDewPoint: { $max: \"$max_dew_point_f\" } } }, { $match: { maxDewPoint: { $lt: 70 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 117,
        "spider_question_id": 206,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
        "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "query": "db.trip.aggregate([ { $group: { _id: \"$zip_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 100 } } }, { $lookup: { from: \"weather\", localField: \"_id\", foreignField: \"zip_code\", as: \"weather_data\" } }, { $unwind: \"$weather_data\" }, { $group: { _id: \"$_id\", avgHumidity: { $avg: \"$weather_data.mean_humidity\" } } }, { $match: { avgHumidity: { $lt: 70 } } } , { $project: { zip_code: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.trip.aggregate([ { $group: { _id: \"$zip_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 100 } } }, { $lookup: { from: \"weather\", localField: \"_id\", foreignField: \"zip_code\", as: \"weather_data\" } }, { $unwind: \"$weather_data\" }, { $group: { _id: \"$_id\", avgHumidity: { $avg: \"$weather_data.mean_humidity\" } } }, { $match: { avgHumidity: { $lt: 70 } } } , { $project: { zip_code: 1 } } ])"
    },
    {
        "question_id": 118,
        "spider_question_id": 207,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "query": "db.trip.aggregate([ { $group: { _id: \"$zip_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 100 } } }, { $lookup: { from: \"weather\", localField: \"_id\", foreignField: \"zip_code\", as: \"weather_data\" } }, { $unwind: \"$weather_data\" }, { $group: { _id: \"$_id\", avgHumidity: { $avg: \"$weather_data.mean_humidity\" } } }, { $match: { avgHumidity: { $lt: 70 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.trip.aggregate([ { $group: { _id: \"$zip_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 100 } } }, { $lookup: { from: \"weather\", localField: \"_id\", foreignField: \"zip_code\", as: \"weather_data\" } }, { $unwind: \"$weather_data\" }, { $group: { _id: \"$_id\", avgHumidity: { $avg: \"$weather_data.mean_humidity\" } } }, { $match: { avgHumidity: { $lt: 70 } } }, { $project: { _id: 1 } } ])"
    },
    {
        "question_id": 119,
        "spider_question_id": 208,
        "db_id": "bike_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "query": "db.station.aggregate([ { $match: { city: \"Palo Alto\" } }, { $lookup: { from: \"trip\", localField: \"name\", foreignField: \"end_station_name\", as: \"trips\" } }, { $project: { name: 1, endTripCount: { $size: \"$trips\" } } }, { $match: { endTripCount: { $lte: 100 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $match: { city: \"Palo Alto\" } }, { $lookup: { from: \"trip\", localField: \"name\", foreignField: \"end_station_name\", as: \"trips\" } }, { $project: { name: 1, endTripCount: { $size: \"$trips\" } } }, { $match: { endTripCount: { $lte: 100 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 120,
        "spider_question_id": 210,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = 'Mountain View' AND T3.city = 'Palo Alto'",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "query": "db.station.aggregate([ { $match: { city: \"Mountain View\" } }, { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"start_trips\" } }, { $unwind: \"$start_trips\" }, { $lookup: { from: \"station\", localField: \"start_trips.end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $unwind: \"$end_station\" }, { $match: { \"end_station.city\": \"Palo Alto\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"start_station\" } }, { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"start_station.city\": \"Mountain View\", \"end_station.city\": \"Palo Alto\" } }, { $count: \"trips\" } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: \"Mountain View\" } }, { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"start_trips\" } }, { $unwind: \"$start_trips\" }, { $lookup: { from: \"station\", localField: \"start_trips.end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $unwind: \"$end_station\" }, { $match: { \"end_station.city\": \"Palo Alto\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 121,
        "spider_question_id": 211,
        "db_id": "bike_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = 'Mountain View' AND T3.city = 'Palo Alto'",
        "question": "How many trips stated from a station in Mountain View and ended at one in Palo Alto?",
        "query": "db.station.aggregate([ { $match: { city: \"Mountain View\" } }, { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"start_trips\" } }, { $unwind: \"$start_trips\" }, { $lookup: { from: \"station\", localField: \"start_trips.end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $unwind: \"$end_station\" }, { $match: { \"end_station.city\": \"Palo Alto\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.trip.aggregate([ { $lookup: { from: \"station\", localField: \"start_station_id\", foreignField: \"id\", as: \"start_station\" } }, { $lookup: { from: \"station\", localField: \"end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $match: { \"start_station.city\": \"Mountain View\", \"end_station.city\": \"Palo Alto\" } }, { $count: \"trip_count\" } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { city: \"Mountain View\" } }, { $lookup: { from: \"trip\", localField: \"id\", foreignField: \"start_station_id\", as: \"start_trips\" } }, { $unwind: \"$start_trips\" }, { $lookup: { from: \"station\", localField: \"start_trips.end_station_id\", foreignField: \"id\", as: \"end_station\" } }, { $unwind: \"$end_station\" }, { $match: { \"end_station.city\": \"Palo Alto\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 122,
        "spider_question_id": 215,
        "db_id": "book_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Writer FROM book ORDER BY Writer ASC",
        "question": "List the writers of the books in ascending alphabetical order.",
        "query": "db.book.find({}, { Writer: 1 }).sort({ Writer: 1 })",
        "gpt4 answer": "db.book.find({}, { Writer: 1 }).sort({ Writer: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 123,
        "spider_question_id": 219,
        "db_id": "book_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
        "question": "What are the dates of publications in descending order of price?",
        "query": "db.publication.find({}, {Publication_Date: 1}).sort({Price: -1})",
        "gpt4 answer": "db.publication.find({}, { Publication_Date: 1 }).sort({ Price: -1 })",
        "deepseek answer": "db.publication.find({}, {Publication_Date: 1}).sort({Price: -1})"
    },
    {
        "question_id": 124,
        "spider_question_id": 221,
        "db_id": "book_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
        "question": "List the publisher of the publication with the highest price.",
        "query": "db.publication.find({}, { Publisher: 1 }).sort({ Price: -1 }).limit(1)",
        "gpt4 answer": "db.publication.find({}, { Publisher: 1 }).sort({ Price: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 125,
        "spider_question_id": 224,
        "db_id": "book_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000",
        "question": "Show writers who have published a book with price more than 4000000.",
        "query": "db.book.aggregate([ { $lookup: { from: \"publication\", localField: \"Book_ID\", foreignField: \"Book_ID\", as: \"publication_info\" } }, { $unwind: \"$publication_info\" }, { $match: { \"publication_info.Price\": { $gt: 4000000 } } }, { $project: { Writer: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.book.aggregate([ { $lookup: { from: \"publication\", localField: \"Book_ID\", foreignField: \"Book_ID\", as: \"publication_info\" } }, { $unwind: \"$publication_info\" }, { $match: { \"publication_info.Price\": { $gt: 4000000 } } }, { $project: { Writer: 1 } } ])"
    },
    {
        "question_id": 126,
        "spider_question_id": 226,
        "db_id": "book_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1",
        "question": "Show publishers that have more than one publication.",
        "query": "db.publication.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Publisher: \"$_id\" } } ])",
        "gpt4 answer": "db.publication.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } }}, { $match: { count: { $gt: 1 } }}, { $project: { Publisher: \"$_id\" }} ])",
        "deepseek answer": "db.publication.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Publisher: \"$_id\" } } ])"
    },
    {
        "question_id": 127,
        "spider_question_id": 227,
        "db_id": "book_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Show different publishers together with the number of publications they have.",
        "query": "db.publication.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.publication.aggregate([ { $group: { _id: \"$Publisher\", NumberOfPublications: { $sum: 1 } } }, { $project: { Publisher: \"$_id\", NumberOfPublications: 1 } } ])",
        "deepseek answer": "db.publication.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 128,
        "spider_question_id": 228,
        "db_id": "book_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common publication date.",
        "query": "db.publication.aggregate([ { $group: { _id: \"$Publication_Date\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publication_Date: \"$_id\" } } ])",
        "gpt4 answer": "db.publication.aggregate([ { $group: { _id: \"$Publication_Date\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publication_Date: \"$_id\" } } ])",
        "deepseek answer": "db.publication.aggregate([ { $group: { _id: \"$Publication_Date\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publication_Date: \"$_id\" } } ])"
    },
    {
        "question_id": 129,
        "spider_question_id": 229,
        "db_id": "book_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1",
        "question": "List the writers who have written more than one book.",
        "query": "db.book.aggregate([ { $group: { _id: \"$Writer\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Writer: \"$_id\" } } ])",
        "gpt4 answer": "db.book.aggregate([ { $group: { _id: \"$Writer\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Writer: \"$_id\" } } ])",
        "deepseek answer": "db.book.aggregate([ { $group: { _id: \"$Writer\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Writer: \"$_id\" } } ])"
    },
    {
        "question_id": 130,
        "spider_question_id": 230,
        "db_id": "book_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)",
        "question": "List the titles of books that are not published.",
        "query": "db.book.aggregate([ { $lookup: { from: \"publication\", localField: \"Book_ID\", foreignField: \"Book_ID\", as: \"publications\" } }, { $match: { \"publications\": { $size: 0 } } }, { $project: { Title: 1 } } ])",
        "gpt4 answer": "db.book.aggregate([ { $lookup: { from: \"publication\", localField: \"Book_ID\", foreignField: \"Book_ID\", as: \"publications\" } }, { $match: { \"publications\": { $size: 0 } } }, { $project: { Title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 131,
        "spider_question_id": 231,
        "db_id": "book_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000",
        "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "query": "db.publication.aggregate([ { $match: { $or: [ { Price: { $gt: 10000000 } }, { Price: { $lt: 5000000 } } ] } }, { $group: { _id: \"$Publisher\", maxPrice: { $max: \"$Price\" }, minPrice: { $min: \"$Price\" } } }, { $match: { $and: [ { maxPrice: { $gt: 10000000 } }, { minPrice: { $lt: 5000000 } } ] } }, { $project: { Publisher: \"$_id\" } } ])",
        "gpt4 answer": "db.publication.aggregate([ { $match: { $or: [ { Price: { $gt: 10000000 } }, { Price: { $lt: 5000000 } } ] } }, { $group: { _id: \"$Publisher\", maxPrice: { $max: \"$Price\" }, minPrice: { $min: \"$Price\" } } }, { $match: { $and: [ { maxPrice: { $gt: 10000000 } }, { minPrice: { $lt: 5000000 } } ] } }, { $project: { Publisher: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 132,
        "spider_question_id": 234,
        "db_id": "book_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Price FROM publication WHERE Publisher = 'Person' OR Publisher = 'Wiley'",
        "question": "Show the prices of publications whose publisher is either 'Person' or 'Wiley'",
        "query": "db.publication.find( { Publisher: { $in: ['Person', 'Wiley'] } }, { Price: 1 } )",
        "gpt4 answer": "db.publication.find( { Publisher: { $in: ['Person', 'Wiley'] } }, { Price: 1 } )",
        "deepseek answer": "db.publication.find( { Publisher: { $in: ['Person', 'Wiley'] } }, { Price: 1 } )"
    },
    {
        "question_id": 133,
        "spider_question_id": 237,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM actor ORDER BY Name ASC",
        "question": "List the name of actors in ascending alphabetical order.",
        "query": "db.actor.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.actor.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.actor.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 134,
        "spider_question_id": 238,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM actor ORDER BY Name ASC",
        "question": "What are the names of actors, ordered alphabetically?",
        "query": "db.actor.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.actor.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.actor.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 135,
        "spider_question_id": 239,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Character , Duration FROM actor",
        "question": "What are the characters and duration of actors?",
        "query": "db.actor.find({}, {Character: 1, Duration: 1})",
        "gpt4 answer": "db.actor.find({}, { Character: 1, Duration: 1 })",
        "deepseek answer": "db.actor.find({}, {Character: 1, Duration: 1})"
    },
    {
        "question_id": 136,
        "spider_question_id": 240,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Character , Duration FROM actor",
        "question": "Return the characters and durations for each actor.",
        "query": "db.actor.find({}, {Character: 1, Duration: 1})",
        "gpt4 answer": "db.actor.find({}, { Character: 1, Duration: 1 })",
        "deepseek answer": "db.actor.find({}, {Character: 1, Duration: 1})"
    },
    {
        "question_id": 137,
        "spider_question_id": 241,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM actor WHERE Age != 20",
        "question": "List the name of actors whose age is not 20.",
        "query": "db.actor.find({age: {$ne: 20}}, { Name: 1})",
        "gpt4 answer": "db.actor.find({ age: { $ne: 20 } }, { Name: 1 })",
        "deepseek answer": "db.actor.find({age: {$ne: 20}}, { Name: 1})"
    },
    {
        "question_id": 138,
        "spider_question_id": 242,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM actor WHERE Age != 20",
        "question": "What are the names of actors who are not 20 years old?",
        "query": "db.actor.find({age: {$ne: 20}}, { Name: 1})",
        "gpt4 answer": "db.actor.find({ age: { $ne: 20 } }, { Name: 1 })",
        "deepseek answer": "db.actor.find({age: {$ne: 20}}, { Name: 1})"
    },
    {
        "question_id": 139,
        "spider_question_id": 243,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Character FROM actor ORDER BY age DESC",
        "question": "What are the characters of actors in descending order of age?",
        "query": "db.actor.aggregate([ { $sort: { age: -1 } }, { $project: { Character: 1 } } ])",
        "gpt4 answer": "db.actor.find({}, {Character: 1}).sort({age: -1})",
        "deepseek answer": "db.actor.aggregate([ { $sort: { age: -1 } }, { $project: { Character: 1 } } ])"
    },
    {
        "question_id": 140,
        "spider_question_id": 244,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Character FROM actor ORDER BY age DESC",
        "question": "Return the characters for actors, ordered by age descending.",
        "query": "db.actor.find({}, {Character: 1}).sort({age: -1})",
        "gpt4 answer": "db.actor.find({}, {Character: 1}).sort({age: -1})",
        "deepseek answer": "db.actor.find({}, {Character: 1}).sort({age: -1})"
    },
    {
        "question_id": 141,
        "spider_question_id": 245,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "question": "What is the duration of the oldest actor?",
        "query": "db.actor.find({}, {Duration: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.actor.find({}).sort({ age: -1 }).limit(1).projection({ Duration: 1 })",
        "deepseek answer": "db.actor.find({}, {Duration: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 142,
        "spider_question_id": 246,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "question": "Return the duration of the actor with the greatest age.",
        "query": "db.actor.find({}, {Duration: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.actor.find({},{Duration:1, _id:0}).sort({Age:-1}).limit(1)",
        "deepseek answer": "db.actor.find({}, {Duration: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 143,
        "spider_question_id": 247,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'",
        "question": "What are the names of musicals with nominee 'Bob Fosse'?",
        "query": "db.musical.find({Nominee: 'Bob Fosse'}, { Name: 1})",
        "gpt4 answer": "db.musical.find({ Nominee: 'Bob Fosse' }, { Name: 1 })",
        "deepseek answer": "db.musical.find({Nominee: 'Bob Fosse'}, { Name: 1})"
    },
    {
        "question_id": 144,
        "spider_question_id": 248,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'",
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "query": "db.musical.find({Nominee: 'Bob Fosse'}, {Name: 1})",
        "gpt4 answer": "db.musical.find({ Nominee: \"Bob Fosse\" }, { Name: 1 })",
        "deepseek answer": "db.musical.find({Nominee: 'Bob Fosse'}, {Name: 1})"
    },
    {
        "question_id": 145,
        "spider_question_id": 251,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
        "question": "Show names of actors and names of musicals they are in.",
        "query": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $project: { \"Actor Name\": \"$Name\", \"Musical Name\": \"$musical_info.Name\" } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $project: { \"Actor Name\": \"$Name\", \"Musical Name\": \"$musical_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 146,
        "spider_question_id": 252,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
        "question": "What are the names of actors and the musicals that they are in?",
        "query": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $project: { actor_name: \"$Name\", musical_name: \"$musical_info.Name\" } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $project: { actor_name: \"$Name\", musical_name: \"$musical_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 147,
        "spider_question_id": 253,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = 'The Phantom of the Opera'",
        "question": "Show names of actors that have appeared in musical with name 'The Phantom of the Opera'.",
        "query": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $match: { \"musical_info.Name\": \"The Phantom of the Opera\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $match: { \"musical_info.Name\": \"The Phantom of the Opera\" } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $match: { \"musical_info.Name\": \"The Phantom of the Opera\" } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 148,
        "spider_question_id": 254,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = 'The Phantom of the Opera'",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "query": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $match: { \"musical_info.Name\": \"The Phantom of the Opera\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $match: { \"musical_info.Name\": \"The Phantom of the Opera\" } }, { $project: { \"Name\": 1 } } ])",
        "deepseek answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $match: { \"musical_info.Name\": \"The Phantom of the Opera\" } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 149,
        "spider_question_id": 255,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "query": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $sort: { \"musical_info.Year\": -1 } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $sort: { \"musical_info.Year\": -1 } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $sort: { \"musical_info.Year\": -1 } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 150,
        "spider_question_id": 256,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "query": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $sort: { \"musical_info.Year\": -1 } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $sort: { \"musical_info.Year\": -1 } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $sort: { \"musical_info.Year\": -1 } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 151,
        "spider_question_id": 257,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "query": "db.actor.aggregate([ { $group: { _id: \"$Musical_ID\", num_actors: { $sum: 1 } } }, { $lookup: { from: \"musical\", localField: \"_id\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $project: { Name: \"$musical_info.Name\", num_actors: 1 } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $group: { _id: \"$Musical_ID\", num_actors: { $sum: 1 } } }, { $lookup: { from: \"musical\", localField: \"_id\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $project: { Name: \"$musical_info.Name\", num_actors: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 152,
        "spider_question_id": 258,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
        "question": "How many actors have appeared in each musical?",
        "query": "db.actor.aggregate([ { $group: { _id: \"$Musical_ID\", count: { $sum: 1 } } }, { $lookup: { from: \"musical\", localField: \"_id\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $project: { Name: { $arrayElemAt: [\"$musical_info.Name\", 0] }, count: 1 } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $lookup: { from: \"musical\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $unwind: \"$musical_info\" }, { $group: { _id: \"$Musical_ID\", musical_name: { $first: \"$musical_info.Name\" }, actor_count: { $sum: 1 } } }, { $project: { Name: \"$musical_name\", Count: \"$actor_count\" } } ])",
        "deepseek answer": "db.actor.aggregate([ { $group: { _id: \"$Musical_ID\", count: { $sum: 1 } } }, { $lookup: { from: \"musical\", localField: \"_id\", foreignField: \"Musical_ID\", as: \"musical_info\" } }, { $project: { Name: { $arrayElemAt: [\"$musical_info.Name\", 0] }, count: 1 } } ])"
    },
    {
        "question_id": 153,
        "spider_question_id": 259,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3",
        "question": "Show names of musicals which have at least three actors.",
        "query": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actors\" } }, { $match: { \"actors.3\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actors\" } }, { $match: { \"actors.3\": { $exists: true } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 154,
        "spider_question_id": 260,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "query": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actors\" } }, { $match: { \"actors.3\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actors\" } }, { $match: { \"actors.3\": { $exists: true } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 155,
        "spider_question_id": 261,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", numberOfNominations: { $sum: 1 } } }, { $project: { Nominee: \"$_id\", numberOfMusicals: \"$numberOfNominations\" } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 156,
        "spider_question_id": 262,
        "db_id": "musical",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee",
        "question": "How many musicals has each nominee been nominated for?",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", totalNominations: { $sum: 1 } }} ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 157,
        "spider_question_id": 263,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nominee: \"$_id\" } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nominee: \"$_id\" } } ])"
    },
    {
        "question_id": 158,
        "spider_question_id": 264,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nominee: \"$_id\" } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nominee: \"$_id\" } } ])"
    },
    {
        "question_id": 159,
        "spider_question_id": 265,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common result of the musicals.",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])"
    },
    {
        "question_id": 160,
        "spider_question_id": 266,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the most frequent result across all musicals.",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])"
    },
    {
        "question_id": 161,
        "spider_question_id": 267,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "question": "List the nominees that have been nominated more than two musicals.",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nominee: \"$_id\" } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nominee: \"$_id\" } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nominee: \"$_id\" } } ])"
    },
    {
        "question_id": 162,
        "spider_question_id": 268,
        "db_id": "musical",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "question": "Who are the nominees who have been nominated more than two times?",
        "query": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nominee: \"$_id\" } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nominee: \"$_id\" } } ])",
        "deepseek answer": "db.musical.aggregate([ { $group: { _id: \"$Nominee\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nominee: \"$_id\" } } ])"
    },
    {
        "question_id": 163,
        "spider_question_id": 269,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "question": "List the name of musicals that do not have actors.",
        "query": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actor_info\" } }, { $match: { \"actor_info\": { $size: 0 } } }, { $project: { \"_id\": 0, \"Name\": 1 } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actor_info\" } }, { $match: { \"actor_info\": { $size: 0 } } }, { $project: { \"_id\": 0, \"Name\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 164,
        "spider_question_id": 270,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "question": "What are the names of musicals who have no actors?",
        "query": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actor_info\" } }, { $match: { \"actor_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $lookup: { from: \"actor\", localField: \"Musical_ID\", foreignField: \"Musical_ID\", as: \"actor_info\" } }, { $match: { \"actor_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 165,
        "spider_question_id": 271,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'",
        "question": "Show the nominees that have nominated musicals for both 'Tony Award' and 'Drama Desk Award'.",
        "query": "db.musical.aggregate([ { $match: { Award: { $in: ['Tony Award', 'Drama Desk Award'] } } }, { $group: { _id: \"$Nominee\", awards: { $addToSet: \"$Award\" } } }, { $match: { awards: { $all: ['Tony Award', 'Drama Desk Award'] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $match: { Award: { $in: ['Tony Award', 'Drama Desk Award'] } } }, { $group: { _id: \"$Nominee\", awards: { $addToSet: \"$Award\" } } }, { $match: { awards: { $all: ['Tony Award', 'Drama Desk Award'] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 166,
        "spider_question_id": 272,
        "db_id": "musical",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "query": "db.musical.aggregate([ { $match: { Award: { $in: [\"Tony Award\", \"Drama Desk Award\"] } } }, { $group: { _id: \"$Nominee\", awards: { $addToSet: \"$Award\" } } }, { $match: { awards: { $all: [\"Tony Award\", \"Drama Desk Award\"] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.musical.aggregate([ { $match: { Award: { $in: [\"Tony Award\", \"Drama Desk Award\"] } } }, { $group: { _id: \"$Nominee\", awards: { $addToSet: \"$Award\" } } }, { $match: { awards: { $all: [\"Tony Award\", \"Drama Desk Award\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 167,
        "spider_question_id": 275,
        "db_id": "twitter_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT email FROM user_profiles WHERE name = 'Mary'",
        "question": "Find the emails of the user named 'Mary'.",
        "query": "db.user_profiles.find({name: 'Mary'}, {email: 1})",
        "gpt4 answer": "db.user_profiles.find({name: 'Mary'}, {email: 1})",
        "deepseek answer": "db.user_profiles.find({name: 'Mary'}, {email: 1})"
    },
    {
        "question_id": 168,
        "spider_question_id": 276,
        "db_id": "twitter_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'",
        "question": "What is the partition id of the user named 'Iron Man'.",
        "query": "db.user_profiles.find({name: 'Iron Man'}, {partitionid: 1})",
        "gpt4 answer": "db.user_profiles.find({ name: 'Iron Man' }, { partitionid: 1 })",
        "deepseek answer": "db.user_profiles.find({name: 'Iron Man'}, {partitionid: 1})"
    },
    {
        "question_id": 169,
        "spider_question_id": 279,
        "db_id": "twitter_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM follows GROUP BY f1",
        "question": "Find the number of followers for each user.",
        "query": "db.follows.aggregate([ { $group: { _id: \"$f1\", followers: { $sum: 1 } } }, { $project: { followers: 1 } } ])",
        "gpt4 answer": "db.follows.aggregate([ { $group: { _id: \"$f1\", numberOfFollowers: { $sum: 1 } } }, { $project: { numberOfFollowers: 1 } } ])",
        "deepseek answer": "db.follows.aggregate([ { $group: { _id: \"$f1\", followers: { $sum: 1 } } }, { $project: { followers: 1 } } ])"
    },
    {
        "question_id": 170,
        "spider_question_id": 282,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%'",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "query": "db.user_profiles.find({name: {$regex: /Swift/}}, {name: 1, email: 1})",
        "gpt4 answer": "db.user_profiles.find({ name: /Swift/ }, { name: 1, email: 1 })",
        "deepseek answer": "db.user_profiles.find({name: {$regex: /Swift/}}, {name: 1, email: 1})"
    },
    {
        "question_id": 171,
        "spider_question_id": 283,
        "db_id": "twitter_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "query": "db.user_profiles.find( { email: { $in: [ /superstar/, /edu/ ] } }, { name: 1 } )",
        "gpt4 answer": "db.user_profiles.find( { $or: [ { email: /superstar/ }, { email: /edu/ } ] }, { name: 1 } )",
        "deepseek answer": "db.user_profiles.find( { email: { $in: [ /superstar/, /edu/ ] } }, { name: 1 } )"
    },
    {
        "question_id": 172,
        "spider_question_id": 284,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Return the text of tweets about the topic 'intern'.",
        "query": "db.tweets.find({ text: { $regex: /intern/ } }, { text: 1 })",
        "gpt4 answer": "db.tweets.find({text: /intern/}, {text: 1})",
        "deepseek answer": "db.tweets.find({ text: { $regex: /intern/ } }, { text: 1 })"
    },
    {
        "question_id": 173,
        "spider_question_id": 285,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , email FROM user_profiles WHERE followers > 1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "query": "db.user_profiles.find({followers: {$gt: 1000}}, {name: 1, email: 1})",
        "gpt4 answer": "db.user_profiles.find({ followers: { $gt: 1000 } }, { name: 1, email: 1 })",
        "deepseek answer": "db.user_profiles.find({followers: {$gt: 1000}}, {name: 1, email: 1})"
    },
    {
        "question_id": 174,
        "spider_question_id": 288,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1",
        "question": "Find the names of users who have more than one tweet.",
        "query": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"tweets\" } }, { $match: { \"tweets.1\": { $exists: true } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"tweets\" } }, { $match: { \"tweets.1\": { $exists: true } } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 175,
        "spider_question_id": 290,
        "db_id": "twitter_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "question": "Find the id of users who are followed by Mary or Susan.",
        "query": "db.user_profiles.aggregate([ { $match: { $or: [ { name: \"Mary\" }, { name: \"Susan\" } ] } }, { $lookup: { from: \"follows\", localField: \"uid\", foreignField: \"f2\", as: \"followers\" } }, { $unwind: \"$followers\" }, { $project: { f1: \"$followers.f1\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.user_profiles.aggregate([ { $match: { $or: [ { name: \"Mary\" }, { name: \"Susan\" } ] } }, { $lookup: { from: \"follows\", localField: \"uid\", foreignField: \"f2\", as: \"followers\" } }, { $unwind: \"$followers\" }, { $project: { f1: \"$followers.f1\" } } ])"
    },
    {
        "question_id": 176,
        "spider_question_id": 291,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "query": "db.user_profiles.find({}, {name: 1}).sort({followers: -1}).limit(1)",
        "gpt4 answer": "db.user_profiles.find({}, { name: 1 }).sort({ followers: -1 }).limit(1)",
        "deepseek answer": "db.user_profiles.find({}, {name: 1}).sort({followers: -1}).limit(1)"
    },
    {
        "question_id": 177,
        "spider_question_id": 292,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "query": "db.user_profiles.find({}, {name: 1, email: 1}).sort({followers: 1}).limit(1)",
        "gpt4 answer": "db.user_profiles.find({}, { name: 1, email: 1 }).sort({ followers: 1 }).limit(1)",
        "deepseek answer": "db.user_profiles.find({}, {name: 1, email: 1}).sort({followers: 1}).limit(1)"
    },
    {
        "question_id": 178,
        "spider_question_id": 293,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , followers FROM user_profiles ORDER BY followers DESC",
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "query": "db.user_profiles.find({}, {name: 1, followers: 1}).sort({followers: -1})",
        "gpt4 answer": "db.user_profiles.aggregate([ { $project: { name: 1, followers: 1 } }, { $sort: { followers: -1 } } ])",
        "deepseek answer": "db.user_profiles.find({}, {name: 1, followers: 1}).sort({followers: -1})"
    },
    {
        "question_id": 179,
        "spider_question_id": 294,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "question": "List the names of 5 users followed by the largest number of other users.",
        "query": "db.user_profiles.find({}, {name: 1}).sort({followers: -1}).limit(5)",
        "gpt4 answer": "db.user_profiles.find({}, { name: 1 }).sort({ followers: -1 }).limit(5)",
        "deepseek answer": "db.user_profiles.find({}, {name: 1}).sort({followers: -1}).limit(5)"
    },
    {
        "question_id": 180,
        "spider_question_id": 295,
        "db_id": "twitter_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT text FROM tweets ORDER BY createdate",
        "question": "List the text of all tweets in the order of date.",
        "query": "db.tweets.find({}, { text: 1}).sort({createdate: 1})",
        "gpt4 answer": "db.tweets.find({}, { text: 1 }).sort({ createdate: 1 })",
        "deepseek answer": "db.tweets.find({}, { text: 1}).sort({createdate: 1})"
    },
    {
        "question_id": 181,
        "spider_question_id": 298,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "query": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"tweets\" } }, { $match: { \"tweets.1\": { $exists: true } } }, { $project: { name: 1, count: { $size: \"$tweets\" } } } ])",
        "gpt4 answer": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"user_tweets\" } }, { $project: { name: 1, numberOfTweets: { $size: \"$user_tweets\" } } }, { $match: { numberOfTweets: { $gt: 1 } } }, { $project: { name: 1, numberOfTweets: 1 } } ])",
        "deepseek answer": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"tweets\" } }, { $match: { \"tweets.1\": { $exists: true } } }, { $project: { name: 1, count: { $size: \"$tweets\" } } } ])"
    },
    {
        "question_id": 182,
        "spider_question_id": 299,
        "db_id": "twitter_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "query": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"tweets\" } }, { $match: { \"tweets\": { $size: 0 } } }, { $group: { _id: null, averageFollowers: { $avg: \"$followers\" } } }, { $project: { averageFollowers: 1 } } ])",
        "gpt4 answer": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"user_tweets\" } }, { $match: { \"user_tweets\": { $size: 0 } } }, { $group: { _id: null, averageFollowers: { $avg: \"$followers\" } } }, { $project: { averageFollowers: 1 } } ])",
        "deepseek answer": "db.user_profiles.aggregate([ { $lookup: { from: \"tweets\", localField: \"uid\", foreignField: \"uid\", as: \"tweets\" } }, { $match: { \"tweets\": { $size: 0 } } }, { $group: { _id: null, averageFollowers: { $avg: \"$followers\" } } }, { $project: { averageFollowers: 1 } } ])"
    },
    {
        "question_id": 183,
        "spider_question_id": 300,
        "db_id": "twitter_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "question": "Find the average number of followers for the users who had some tweets.",
        "query": "db.user_profiles.aggregate([ { $match: { uid: { $in: db.tweets.distinct(\"uid\") } } }, { $group: { _id: null, avgFollowers: { $avg: \"$followers\" } } }, { $project: { avgFollowers: 1 } } ])",
        "gpt4 answer": "db.user_profiles.aggregate([ { $match: { uid: { $in: db.tweets.distinct(\"uid\") } } }, { $group: { _id: null, avgFollowers: { $avg: \"$followers\" } } }, { $project: { avgFollowers: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 184,
        "spider_question_id": 301,
        "db_id": "twitter_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(followers) , sum(followers) FROM user_profiles",
        "question": "Find the maximum and total number of followers of all users.",
        "query": "db.user_profiles.aggregate([ { $group: { _id: null, maxFollowers: { $max: \"$followers\" }, totalFollowers: { $sum: \"$followers\" } } } , { $project: { totalFollowers: 1 } }])",
        "gpt4 answer": "db.user_profiles.aggregate([ { $group: { _id: null, maxFollowers: { $max: \"$followers\" }, totalFollowers: { $sum: \"$followers\" } } }, { $project: { maxFollowers: 1, totalFollowers: 1 } } ])",
        "deepseek answer": "db.user_profiles.aggregate([ { $group: { _id: null, maxFollowers: { $max: \"$followers\" }, totalFollowers: { $sum: \"$followers\" } } } , { $project: { totalFollowers: 1 } }])"
    },
    {
        "question_id": 185,
        "spider_question_id": 304,
        "db_id": "product_catalog",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "query": "db.Attribute_Definitions.aggregate([ { $group: { _id: \"$attribute_data_type\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { attribute_data_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Attribute_Definitions.aggregate([ { $group: { _id: \"$attribute_data_type\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { attribute_data_type: \"$_id\" } } ])",
        "deepseek answer": "db.Attribute_Definitions.aggregate([ { $group: { _id: \"$attribute_data_type\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { attribute_data_type: \"$_id\" } } ])"
    },
    {
        "question_id": 186,
        "spider_question_id": 305,
        "db_id": "product_catalog",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "query": "db.Attribute_Definitions.aggregate([ { $group: { _id: \"$attribute_data_type\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { attribute_data_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Attribute_Definitions.aggregate([ { $group: { _id: \"$attribute_data_type\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { attribute_data_type: \"$_id\" } } ])",
        "deepseek answer": "db.Attribute_Definitions.aggregate([ { $group: { _id: \"$attribute_data_type\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { attribute_data_type: \"$_id\" } } ])"
    },
    {
        "question_id": 187,
        "spider_question_id": 306,
        "db_id": "product_catalog",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'",
        "question": "What is the attribute data type of the attribute with name 'Green'?",
        "query": "db.Attribute_Definitions.find( { attribute_name: 'Green' }, { attribute_data_type: 1 } )",
        "gpt4 answer": "db.Attribute_Definitions.find({ attribute_name: 'Green' }, { attribute_data_type: 1 })",
        "deepseek answer": "db.Attribute_Definitions.find( { attribute_name: 'Green' }, { attribute_data_type: 1 } )"
    },
    {
        "question_id": 188,
        "spider_question_id": 307,
        "db_id": "product_catalog",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'",
        "question": "Find the attribute data type for the attribute named 'Green'.",
        "query": "db.Attribute_Definitions.find( { attribute_name: 'Green' }, { attribute_data_type: 1 } )",
        "gpt4 answer": "db.Attribute_Definitions.find({ attribute_name: 'Green' }, { attribute_data_type: 1 })",
        "deepseek answer": "db.Attribute_Definitions.find( { attribute_name: 'Green' }, { attribute_data_type: 1 } )"
    },
    {
        "question_id": 189,
        "spider_question_id": 308,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "query": "db.Catalog_Structure.find( { catalog_level_number: { $gte: 5, $lte: 10 } }, { catalog_level_name: 1, catalog_level_number: 1 } )",
        "gpt4 answer": "db.Catalog_Structure.find( { catalog_level_number: { $gte: 5, $lte: 10 } }, { catalog_level_name: 1, catalog_level_number: 1 } )",
        "deepseek answer": "db.Catalog_Structure.find( { catalog_level_number: { $gte: 5, $lte: 10 } }, { catalog_level_name: 1, catalog_level_number: 1 } )"
    },
    {
        "question_id": 190,
        "spider_question_id": 309,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "query": "db.Catalog_Structure.find( { catalog_level_number: {$gte: 5, $lte: 10} }, { catalog_level_name: 1, catalog_level_number: 1 } )",
        "gpt4 answer": "db.Catalog_Structure.find( { catalog_level_number: { $gte: 5, $lte: 10 } }, { catalog_level_name: 1, catalog_level_number: 1 } )",
        "deepseek answer": "db.Catalog_Structure.find( { catalog_level_number: {$gte: 5, $lte: 10} }, { catalog_level_name: 1, catalog_level_number: 1 } )"
    },
    {
        "question_id": 191,
        "spider_question_id": 317,
        "db_id": "product_catalog",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "query": "db.Catalog_Contents_Additional_Attributes.aggregate([ { $group: { _id: \"$attribute_value\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Catalog_Contents_Additional_Attributes\", localField: \"_id\", foreignField: \"attribute_value\", as: \"entriesWithMostAttributes\" } }, { $unwind: \"$entriesWithMostAttributes\" }, { $lookup: { from: \"Catalog_Contents\", localField: \"entriesWithMostAttributes.catalog_entry_id\", foreignField: \"catalog_entry_id\", as: \"entryNames\" } }, { $unwind: \"$entryNames\" }, { $project: { catalog_entry_name: \"$entryNames.catalog_entry_name\" } } ])",
        "gpt4 answer": "db.Catalog_Contents_Additional_Attributes.aggregate([ { $group: { _id: \"$attribute_value\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Catalog_Contents_Additional_Attributes\", localField: \"_id\", foreignField: \"attribute_value\", as: \"entriesWithMostAttributes\" } }, { $unwind: \"$entriesWithMostAttributes\" }, { $lookup: { from: \"Catalog_Contents\", localField: \"entriesWithMostAttributes.catalog_entry_id\", foreignField: \"catalog_entry_id\", as: \"entryNames\" } }, { $unwind: \"$entryNames\" }, { $project: { catalog_entry_name: \"$entryNames.catalog_entry_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 192,
        "spider_question_id": 318,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({price_in_dollars: -1}).limit(1)",
        "gpt4 answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({price_in_dollars: -1}).limit(1)",
        "deepseek answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({price_in_dollars: -1}).limit(1)"
    },
    {
        "question_id": 193,
        "spider_question_id": 319,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "query": "db.Catalog_Contents.aggregate([ { $sort: { \"price_in_dollars\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"catalog_entry_name\": 1 } } ])",
        "gpt4 answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({price_in_dollars: -1}).limit(1)",
        "deepseek answer": "db.Catalog_Contents.aggregate([ { $sort: { \"price_in_dollars\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"catalog_entry_name\": 1 } } ])"
    },
    {
        "question_id": 194,
        "spider_question_id": 324,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "query": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({height: -1}).limit(1)",
        "gpt4 answer": "db.Catalog_Contents.find({}, { catalog_entry_name: 1 }).sort({ height: -1 }).limit(1)",
        "deepseek answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({height: -1}).limit(1)"
    },
    {
        "question_id": 195,
        "spider_question_id": 325,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "query": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({height: -1}).limit(1)",
        "gpt4 answer": "db.Catalog_Contents.find({}, { catalog_entry_name: 1 }).sort({ height: -1 }).limit(1)",
        "deepseek answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({height: -1}).limit(1)"
    },
    {
        "question_id": 196,
        "spider_question_id": 326,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "question": "Find the name of the product that has the smallest capacity.",
        "query": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({capacity: 1}).limit(1)",
        "gpt4 answer": "db.Catalog_Contents.find({}, { catalog_entry_name: 1 }).sort({ capacity: 1 }).limit(1)",
        "deepseek answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({capacity: 1}).limit(1)"
    },
    {
        "question_id": 197,
        "spider_question_id": 327,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "query": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({capacity: 1}).limit(1)",
        "gpt4 answer": "db.Catalog_Contents.find({}, { catalog_entry_name: 1 }).sort({ capacity: 1 }).limit(1)",
        "deepseek answer": "db.Catalog_Contents.find({}, {catalog_entry_name: 1}).sort({capacity: 1}).limit(1)"
    },
    {
        "question_id": 198,
        "spider_question_id": 328,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'",
        "question": "Find the names of all the products whose stock number starts with '2'.",
        "query": "db.Catalog_Contents.find( { product_stock_number: /^2/ }, { catalog_entry_name: 1 } )",
        "gpt4 answer": "db.Catalog_Contents.find({ product_stock_number: /^2/ }, { catalog_entry_name: 1 })",
        "deepseek answer": "db.Catalog_Contents.find( { product_stock_number: /^2/ }, { catalog_entry_name: 1 } )"
    },
    {
        "question_id": 199,
        "spider_question_id": 329,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'",
        "question": "Which catalog contents have a product stock number that starts from '2'? Show the catalog entry names.",
        "query": "db.Catalog_Contents.find( { product_stock_number: /^2/ }, { catalog_entry_name: 1 } )",
        "gpt4 answer": "db.Catalog_Contents.find({ product_stock_number: /^2/ }, { catalog_entry_name: 1 })",
        "deepseek answer": "db.Catalog_Contents.find( { product_stock_number: /^2/ }, { catalog_entry_name: 1 } )"
    },
    {
        "question_id": 200,
        "spider_question_id": 334,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "query": "db.Attribute_Definitions.aggregate([ { $lookup: { from: \"Catalog_Contents_Additional_Attributes\", localField: \"attribute_id\", foreignField: \"attribute_id\", as: \"attributes\" } }, { $unwind: \"$attributes\" }, { $match: { \"attributes.attribute_value\": \"0\" } }, { $project: { attribute_name: 1, attribute_id: 1 } } ])",
        "gpt4 answer": "db.Attribute_Definitions.aggregate([ { $lookup: { from: \"Catalog_Contents_Additional_Attributes\", localField: \"attribute_id\", foreignField: \"attribute_id\", as: \"attributes\" } }, { $unwind: \"$attributes\" }, { $match: { \"attributes.attribute_value\": \"0\" } }, { $project: { attribute_name: 1, attribute_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 201,
        "spider_question_id": 335,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "query": "db.Attribute_Definitions.aggregate([ { $lookup: { from: \"Catalog_Contents_Additional_Attributes\", localField: \"attribute_id\", foreignField: \"attribute_id\", as: \"additional_attributes\" } }, { $unwind: \"$additional_attributes\" }, { $match: { \"additional_attributes.attribute_value\": \"0\" } }, { $project: { attribute_name: 1, attribute_id: 1 } } ])",
        "gpt4 answer": "db.Attribute_Definitions.aggregate([ { $lookup: { from: \"Catalog_Contents_Additional_Attributes\", localField: \"attribute_id\", foreignField: \"attribute_id\", as: \"additional_attributes\" } }, { $unwind: \"$additional_attributes\" }, { $match: { \"additional_attributes.attribute_value\": \"0\" } }, { $project: { attribute_name: 1, attribute_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 202,
        "spider_question_id": 336,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "query": "db.Catalog_Contents.find( { price_in_dollars: { $gt: 700 } }, { catalog_entry_name: 1, capacity: 1 } )",
        "gpt4 answer": "db.Catalog_Contents.find( { price_in_dollars: { $gt: 700 } }, { catalog_entry_name: 1, capacity: 1 } )",
        "deepseek answer": "db.Catalog_Contents.find( { price_in_dollars: { $gt: 700 } }, { catalog_entry_name: 1, capacity: 1 } )"
    },
    {
        "question_id": 203,
        "spider_question_id": 337,
        "db_id": "product_catalog",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "db.Catalog_Contents.find( { price_in_dollars: { $gt: 700 } }, { catalog_entry_name: 1, capacity: 1 } )",
        "gpt4 answer": "db.Catalog_Contents.find( { price_in_dollars: { $gt: 700 } }, { catalog_entry_name: 1, capacity: 1 } )",
        "deepseek answer": "db.Catalog_Contents.find( { price_in_dollars: { $gt: 700 } }, { catalog_entry_name: 1, capacity: 1 } )"
    },
    {
        "question_id": 204,
        "spider_question_id": 342,
        "db_id": "product_catalog",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "db.Catalog_Contents.find( { next_entry_id: { $gt: 8 } }, { catalog_entry_name: 1 } )",
        "gpt4 answer": "db.Catalog_Contents.find({ next_entry_id: { $gt: 8 } }, { catalog_entry_name: 1 })",
        "deepseek answer": "db.Catalog_Contents.find( { next_entry_id: { $gt: 8 } }, { catalog_entry_name: 1 } )"
    },
    {
        "question_id": 205,
        "spider_question_id": 343,
        "db_id": "product_catalog",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "query": "db.Catalog_Contents.find( { next_entry_id: { $gt: 8 } }, { catalog_entry_name: 1 } )",
        "gpt4 answer": "db.Catalog_Contents.find({ next_entry_id: { $gt: 8 }}, { catalog_entry_name: 1 })",
        "deepseek answer": "db.Catalog_Contents.find( { next_entry_id: { $gt: 8 } }, { catalog_entry_name: 1 } )"
    },
    {
        "question_id": 206,
        "spider_question_id": 346,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , distance FROM Aircraft",
        "question": "Show name and distance for all aircrafts.",
        "query": "db.aircraft.find({}, { name: 1, distance: 1})",
        "gpt4 answer": "db.aircraft.find({}, { name: 1, distance: 1 })",
        "deepseek answer": "db.aircraft.find({}, { name: 1, distance: 1})"
    },
    {
        "question_id": 207,
        "spider_question_id": 347,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , distance FROM Aircraft",
        "question": "What are the names and distances for all airplanes?",
        "query": "db.aircraft.find({}, { name: 1, distance: 1})",
        "gpt4 answer": "db.aircraft.find({}, { name: 1, distance: 1 })",
        "deepseek answer": "db.aircraft.find({}, { name: 1, distance: 1})"
    },
    {
        "question_id": 208,
        "spider_question_id": 348,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT aid FROM Aircraft WHERE distance > 1000",
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "query": "db.aircraft.find({distance: {$gt: 1000}}, { aid: 1})",
        "gpt4 answer": "db.aircraft.find({ distance: { $gt: 1000 } }, { aid: 1 })",
        "deepseek answer": "db.aircraft.find({distance: {$gt: 1000}}, { aid: 1})"
    },
    {
        "question_id": 209,
        "spider_question_id": 349,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT aid FROM Aircraft WHERE distance > 1000",
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
        "query": "db.aircraft.find({distance: {$gt: 1000}}, { aid: 1})",
        "gpt4 answer": "db.aircraft.find({ distance: { $gt: 1000 } }, { aid: 1 })",
        "deepseek answer": "db.aircraft.find({distance: {$gt: 1000}}, { aid: 1})"
    },
    {
        "question_id": 210,
        "spider_question_id": 352,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , distance FROM Aircraft WHERE aid = 12",
        "question": "What is the name and distance for aircraft with id 12?",
        "query": "db.aircraft.find({aid: 12}, { name: 1, distance: 1})",
        "gpt4 answer": "db.aircraft.find({ aid: 12 }, { name: 1, distance: 1 })",
        "deepseek answer": "db.aircraft.find({aid: 12}, { name: 1, distance: 1})"
    },
    {
        "question_id": 211,
        "spider_question_id": 353,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , distance FROM Aircraft WHERE aid = 12",
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "query": "db.aircraft.find({aid: 12}, { name: 1, distance: 1})",
        "gpt4 answer": "db.aircraft.findOne({ aid: 12 }, { name: 1, distance: 1 })",
        "deepseek answer": "db.aircraft.find({aid: 12}, { name: 1, distance: 1})"
    },
    {
        "question_id": 212,
        "spider_question_id": 354,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft",
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "query": "db.aircraft.aggregate([ { $group: { _id: null, minDistance: { $min: \"$distance\" }, avgDistance: { $avg: \"$distance\" }, maxDistance: { $max: \"$distance\" } } }, { $project: { minDistance: 1, avgDistance: 1, maxDistance: 1 } } ])",
        "gpt4 answer": "db.aircraft.aggregate([ { $group: { _id: null, minDistance: { $min: \"$distance\" }, avgDistance: { $avg: \"$distance\" }, maxDistance: { $max: \"$distance\" } } }, { $project: { minDistance: 1, avgDistance: 1, maxDistance: 1 } } ])",
        "deepseek answer": "db.aircraft.aggregate([ { $group: { _id: null, minDistance: { $min: \"$distance\" }, avgDistance: { $avg: \"$distance\" }, maxDistance: { $max: \"$distance\" } } }, { $project: { minDistance: 1, avgDistance: 1, maxDistance: 1 } } ])"
    },
    {
        "question_id": 213,
        "spider_question_id": 355,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft",
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
        "query": "db.aircraft.aggregate([ { $group: { _id: null, minDistance: { $min: \"$distance\" }, avgDistance: { $avg: \"$distance\" }, maxDistance: { $max: \"$distance\" } } }, { $project: { minDistance: 1, avgDistance: 1, maxDistance: 1 } } ])",
        "gpt4 answer": "db.aircraft.aggregate([ { $group: { _id: null, minDistance: { $min: \"$distance\" }, avgDistance: { $avg: \"$distance\" }, maxDistance: { $max: \"$distance\" } } }, { $project: { minDistance: 1, avgDistance: 1, maxDistance: 1 } } ])",
        "deepseek answer": "db.aircraft.aggregate([ { $group: { _id: null, minDistance: { $min: \"$distance\" }, avgDistance: { $avg: \"$distance\" }, maxDistance: { $max: \"$distance\" } } }, { $project: { minDistance: 1, avgDistance: 1, maxDistance: 1 } } ])"
    },
    {
        "question_id": 214,
        "spider_question_id": 356,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "query": "db.aircraft.find({}, { aid: 1, name: 1}).sort({distance: -1}).limit(1)",
        "gpt4 answer": "db.aircraft.find({}, { aid: 1, name: 1 }).sort({ distance: -1 }).limit(1)",
        "deepseek answer": "db.aircraft.find({}, { aid: 1, name: 1}).sort({distance: -1}).limit(1)"
    },
    {
        "question_id": 215,
        "spider_question_id": 357,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "query": "db.aircraft.find({}, { aid: 1, name: 1}).sort({distance: -1}).limit(1)",
        "gpt4 answer": "db.aircraft.find({}, { aid: 1, name: 1 }).sort({ distance: -1 }).limit(1)",
        "deepseek answer": "db.aircraft.find({}, { aid: 1, name: 1}).sort({distance: -1}).limit(1)"
    },
    {
        "question_id": 216,
        "spider_question_id": 358,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "db.aircraft.find({}, {name: 1}).sort({distance: 1}).limit(3)",
        "gpt4 answer": "db.aircraft.find({}, { name: 1 }).sort({ distance: 1 }).limit(3)",
        "deepseek answer": "db.aircraft.find({}, {name: 1}).sort({distance: 1}).limit(3)"
    },
    {
        "question_id": 217,
        "spider_question_id": 359,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "query": "db.aircraft.find({}, {name: 1}).sort({distance: 1}).limit(3)",
        "gpt4 answer": "db.aircraft.find({}, { name: 1 }).sort({ distance: 1 }).limit(3)",
        "deepseek answer": "db.aircraft.find({}, {name: 1}).sort({distance: 1}).limit(3)"
    },
    {
        "question_id": 218,
        "spider_question_id": 360,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)",
        "question": "Show names for all aircrafts with distances more than the average.",
        "query": "db.aircraft.aggregate([ { $group: { _id: null, avgDistance: { $avg: \"$distance\" } } }, { $lookup: { from: \"aircraft\", let: { averageDistance: \"$avgDistance\" }, pipeline: [ { $match: { $expr: { $gt: [\"$distance\", \"$$averageDistance\"] } } }, { $project: { name: 1 } } ], as: \"aircrafts_above_average\" } }, { $unwind: \"$aircrafts_above_average\" }, { $replaceRoot: { newRoot: \"$aircrafts_above_average\" } } ])",
        "gpt4 answer": "db.aircraft.aggregate([ { $group: { _id: null, avgDistance: { $avg: \"$distance\" } } }, { $lookup: { from: \"aircraft\", let: { averageDistance: \"$avgDistance\" }, pipeline: [ { $match: { $expr: { $gt: [\"$distance\", \"$$averageDistance\"] } } }, { $project: { name: 1 } } ], as: \"aircrafts_above_average\" } }, { $unwind: \"$aircrafts_above_average\" }, { $replaceRoot: { newRoot: \"$aircrafts_above_average\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 219,
        "spider_question_id": 361,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft)",
        "question": "What are the names of all aircrafts that can cover more distances than average?",
        "query": "db.aircraft.aggregate([ { $group: { _id: null, averageDistance: { $avg: \"$distance\" } } }, { $addFields: { averageDistance: \"$averageDistance\" } }, { $lookup: { from: \"aircraft\", let: { avgDist: \"$averageDistance\" }, pipeline: [ { $match: { $expr: { $gt: [\"$distance\", \"$$avgDist\"] } } }, { $project: { name: 1 } } ], as: \"aircraftsWithMoreDistance\" } }, { $unwind: \"$aircraftsWithMoreDistance\" }, { $replaceRoot: { newRoot: \"$aircraftsWithMoreDistance\" } } ])",
        "gpt4 answer": "db.aircraft.aggregate([ { $group: { _id: null, averageDistance: { $avg: \"$distance\" } } }, { $addFields: { averageDistance: \"$averageDistance\" } }, { $lookup: { from: \"aircraft\", let: { avgDist: \"$averageDistance\" }, pipeline: [ { $match: { $expr: { $gt: [\"$distance\", \"$$avgDist\"] } } }, { $project: { name: 1 } } ], as: \"aircraftsWithMoreDistance\" } }, { $unwind: \"$aircraftsWithMoreDistance\" }, { $replaceRoot: { newRoot: \"$aircraftsWithMoreDistance\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 220,
        "spider_question_id": 366,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT eid FROM Employee WHERE salary > 100000",
        "question": "Show ids for all employees with at least 100000 salary.",
        "query": "db.employee.find({salary: {$gt: 100000}}, { eid: 1})",
        "gpt4 answer": "db.employee.find({ salary: { $gt: 100000 } }, { eid: 1 })",
        "deepseek answer": "db.employee.find({salary: {$gt: 100000}}, { eid: 1})"
    },
    {
        "question_id": 221,
        "spider_question_id": 367,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT eid FROM Employee WHERE salary > 100000",
        "question": "What is the id of every employee who has at least a salary of 100000?",
        "query": "db.employee.find({salary: {$gt: 100000}}, { eid: 1})",
        "gpt4 answer": "db.employee.find({ salary: { $gt: 100000 } }, { eid: 1 })",
        "deepseek answer": "db.employee.find({salary: {$gt: 100000}}, { eid: 1})"
    },
    {
        "question_id": 222,
        "spider_question_id": 370,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , salary FROM Employee WHERE eid = 242518965",
        "question": "What is the name and salary for employee with id 242518965?",
        "query": "db.employee.find({eid: 242518965}, { name: 1, salary: 1})",
        "gpt4 answer": "db.employee.find({ eid: 242518965 }, { name: 1, salary: 1 })",
        "deepseek answer": "db.employee.find({eid: 242518965}, { name: 1, salary: 1})"
    },
    {
        "question_id": 223,
        "spider_question_id": 371,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , salary FROM Employee WHERE eid = 242518965",
        "question": "What is the name and salary of the employee with the id 242518965?",
        "query": "db.employee.find({eid: 242518965}, { name: 1, salary: 1})",
        "gpt4 answer": "db.employee.find({ eid: 242518965 }, { name: 1, salary: 1 })",
        "deepseek answer": "db.employee.find({eid: 242518965}, { name: 1, salary: 1})"
    },
    {
        "question_id": 224,
        "spider_question_id": 372,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(salary) , max(salary) FROM Employee",
        "question": "What is average and maximum salary of all employees.",
        "query": "db.employee.aggregate([ { $group: { _id: null, avgSalary: { $avg: \"$salary\" }, maxSalary: { $max: \"$salary\" } } }, { $project: { avgSalary: 1, maxSalary: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" }, maxSalary: { $max: \"$salary\" } } }, { $project: { averageSalary: 1, maxSalary: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $group: { _id: null, avgSalary: { $avg: \"$salary\" }, maxSalary: { $max: \"$salary\" } } }, { $project: { avgSalary: 1, maxSalary: 1 } } ])"
    },
    {
        "question_id": 225,
        "spider_question_id": 373,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(salary) , max(salary) FROM Employee",
        "question": "What is the average and largest salary of all employees?",
        "query": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" }, maxSalary: { $max: \"$salary\" } } }, { $project: { averageSalary: 1, maxSalary:1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" }, maxSalary: { $max: \"$salary\" } } }, { $project: { averageSalary: 1, maxSalary: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" }, maxSalary: { $max: \"$salary\" } } }, { $project: { averageSalary: 1, maxSalary:1 } } ])"
    },
    {
        "question_id": 226,
        "spider_question_id": 374,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
        "question": "Show the id and name of the employee with maximum salary.",
        "query": "db.employee.find({}, { eid: 1, name: 1}).sort({salary: -1}).limit(1)",
        "gpt4 answer": "db.employee.find({}, {eid: 1, name: 1}).sort({salary: -1}).limit(1)",
        "deepseek answer": "db.employee.find({}, { eid: 1, name: 1}).sort({salary: -1}).limit(1)"
    },
    {
        "question_id": 227,
        "spider_question_id": 375,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
        "question": "What is the id and name of the employee with the highest salary?",
        "query": "db.employee.find({}, { eid: 1, name: 1}).sort({salary: -1}).limit(1)",
        "gpt4 answer": "db.employee.find({}, { eid: 1, name: 1 }).sort({ salary: -1 }).limit(1)",
        "deepseek answer": "db.employee.find({}, { eid: 1, name: 1}).sort({salary: -1}).limit(1)"
    },
    {
        "question_id": 228,
        "spider_question_id": 376,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "question": "Show the name of employees with three lowest salaries.",
        "query": "db.employee.find({}, { name: 1}).sort({salary: 1}).limit(3)",
        "gpt4 answer": "db.employee.find({}, { name: 1 }).sort({ salary: 1 }).limit(3)",
        "deepseek answer": "db.employee.find({}, { name: 1}).sort({salary: 1}).limit(3)"
    },
    {
        "question_id": 229,
        "spider_question_id": 377,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "question": "What is the name of the 3 employees who get paid the least?",
        "query": "db.employee.find({}, {name: 1}).sort({salary: 1}).limit(3)",
        "gpt4 answer": "db.employee.find({}, { name: 1 }).sort({ salary: 1 }).limit(3)",
        "deepseek answer": "db.employee.find({}, {name: 1}).sort({salary: 1}).limit(3)"
    },
    {
        "question_id": 230,
        "spider_question_id": 378,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)",
        "question": "Show names for all employees with salary more than the average.",
        "query": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $lookup: { from: \"employee\", let: { avgSalary: \"$averageSalary\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$salary\", \"$$avgSalary\" ] } } }, { $project: { name: 1 } } ], as: \"employees\" } }, { $unwind: \"$employees\" }, { $replaceRoot: { newRoot: \"$employees\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $lookup: { from: \"employee\", let: { avgSalary: \"$averageSalary\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$salary\", \"$$avgSalary\" ] } } }, { $project: { name: 1 } } ], as: \"employees\" } }, { $unwind: \"$employees\" }, { $replaceRoot: { newRoot: \"$employees\" } } ])"
    },
    {
        "question_id": 231,
        "spider_question_id": 379,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee)",
        "question": "What are the names of all employees who have a salary higher than average?",
        "query": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $lookup: { from: \"employee\", let: { avgSalary: \"$averageSalary\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$salary\", \"$$avgSalary\" ] } } }, { $project: { name: 1 } } ], as: \"employees\" } }, { $unwind: \"$employees\" }, { $replaceRoot: { newRoot: \"$employees\" } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $group: { _id: null, avgSalary: { $avg: \"$salary\" } } }, { $lookup: { from: \"employee\", let: { avgSalary: \"$avgSalary\" }, pipeline: [ { $match: { $expr: { $gt: [\"$salary\", \"$$avgSalary\"] } } }, { $project: { name: 1 } } ], as: \"highSalaryEmployees\" } }, { $unwind: \"$highSalaryEmployees\" }, { $replaceRoot: { newRoot: \"$highSalaryEmployees\" } } ])",
        "deepseek answer": "db.employee.aggregate([ { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $lookup: { from: \"employee\", let: { avgSalary: \"$averageSalary\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$salary\", \"$$avgSalary\" ] } } }, { $project: { name: 1 } } ], as: \"employees\" } }, { $unwind: \"$employees\" }, { $replaceRoot: { newRoot: \"$employees\" } } ])"
    },
    {
        "question_id": 232,
        "spider_question_id": 380,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young'",
        "question": "Show the id and salary of Mark Young.",
        "query": "db.employee.find({ name: \"Mark Young\" }, { eid: 1, salary: 1 })",
        "gpt4 answer": "db.employee.find({ name: \"Mark Young\" }, { eid: 1, salary: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 233,
        "spider_question_id": 381,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young'",
        "question": "What is the id and salary of the employee named Mark Young?",
        "query": "db.employee.find({name: \"Mark Young\"}, { eid: 1, salary: 1})",
        "gpt4 answer": "db.employee.find({ name: \"Mark Young\" }, { eid: 1, salary: 1 })",
        "deepseek answer": "db.employee.find({name: \"Mark Young\"}, { eid: 1, salary: 1})"
    },
    {
        "question_id": 234,
        "spider_question_id": 384,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "query": "db.flight.find({}, { flno: 1, origin: 1, destination: 1}).sort({origin: 1})",
        "gpt4 answer": "db.flight.find({}, { flno: 1, origin: 1, destination: 1 }).sort({ origin: 1 })",
        "deepseek answer": "db.flight.find({}, { flno: 1, origin: 1, destination: 1}).sort({origin: 1})"
    },
    {
        "question_id": 235,
        "spider_question_id": 385,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "query": "db.flight.find({}, {flno: 1, origin: 1, destination: 1}).sort({origin: 1})",
        "gpt4 answer": "db.flight.find({}, {flno: 1, origin: 1, destination: 1}).sort({origin: 1})",
        "deepseek answer": "db.flight.find({}, {flno: 1, origin: 1, destination: 1}).sort({origin: 1})"
    },
    {
        "question_id": 236,
        "spider_question_id": 386,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT flno FROM Flight WHERE origin = 'Los Angeles'",
        "question": "Show all flight number from Los Angeles.",
        "query": "db.flight.find({origin: 'Los Angeles'}, {flno: 1})",
        "gpt4 answer": "db.flight.find({ origin: 'Los Angeles' }, { flno: 1 })",
        "deepseek answer": "db.flight.find({origin: 'Los Angeles'}, {flno: 1})"
    },
    {
        "question_id": 237,
        "spider_question_id": 387,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT flno FROM Flight WHERE origin = 'Los Angeles'",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "query": "db.flight.find({origin: 'Los Angeles'}, {flno: 1})",
        "gpt4 answer": "db.flight.find({ origin: 'Los Angeles' }, { flno: 1 })",
        "deepseek answer": "db.flight.find({origin: 'Los Angeles'}, {flno: 1})"
    },
    {
        "question_id": 238,
        "spider_question_id": 388,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT origin FROM Flight WHERE destination = 'Honolulu'",
        "question": "Show origins of all flights with destination Honolulu.",
        "query": "db.flight.aggregate([ { $match: { destination: 'Honolulu' } }, { $project: { origin: 1 } } ])",
        "gpt4 answer": "db.flight.find({ destination: \"Honolulu\" }, { origin: 1 })",
        "deepseek answer": "db.flight.aggregate([ { $match: { destination: 'Honolulu' } }, { $project: { origin: 1 } } ])"
    },
    {
        "question_id": 239,
        "spider_question_id": 389,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT origin FROM Flight WHERE destination = 'Honolulu'",
        "question": "What are the origins of all flights that are headed to Honolulu?",
        "query": "db.flight.find({ destination: 'Honolulu' }, { origin: 1 })",
        "gpt4 answer": "db.flight.find({ destination: \"Honolulu\" }, { origin: 1 })",
        "deepseek answer": "db.flight.find({ destination: 'Honolulu' }, { origin: 1 })"
    },
    {
        "question_id": 240,
        "spider_question_id": 392,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT flno FROM Flight WHERE distance > 2000",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "query": "db.flight.find({distance: {$gt: 2000}}, {flno: 1})",
        "gpt4 answer": "db.flight.find({ distance: { $gt: 2000 } }, { flno: 1 })",
        "deepseek answer": "db.flight.find({distance: {$gt: 2000}}, {flno: 1})"
    },
    {
        "question_id": 241,
        "spider_question_id": 393,
        "db_id": "flight_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT flno FROM Flight WHERE distance > 2000",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "query": "db.flight.find({distance: {$gt: 2000}}, {flno: 1})",
        "gpt4 answer": "db.flight.find({ distance: { $gt: 2000 } }, { flno: 1 })",
        "deepseek answer": "db.flight.find({distance: {$gt: 2000}}, {flno: 1})"
    },
    {
        "question_id": 242,
        "spider_question_id": 394,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "query": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\", destination: \"Honolulu\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } }])",
        "gpt4 answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\", destination: \"Honolulu\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\", destination: \"Honolulu\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } }])"
    },
    {
        "question_id": 243,
        "spider_question_id": 395,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'",
        "question": "What is the average price for flights from LA to Honolulu?",
        "query": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\", destination: \"Honolulu\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } }])",
        "gpt4 answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\", destination: \"Honolulu\" }}, { $group: { _id: null, averagePrice: { $avg: \"$price\" }}}, { $project: { averagePrice: 1} } ])",
        "deepseek answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\", destination: \"Honolulu\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } }])"
    },
    {
        "question_id": 244,
        "spider_question_id": 396,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT origin , destination FROM Flight WHERE price > 300",
        "question": "Show origin and destination for flights with price higher than 300.",
        "query": "db.flight.find({price: {$gt: 300}}, { origin: 1, destination: 1})",
        "gpt4 answer": "db.flight.find({ price: { $gt: 300 } }, { origin: 1, destination: 1 })",
        "deepseek answer": "db.flight.find({price: {$gt: 300}}, { origin: 1, destination: 1})"
    },
    {
        "question_id": 245,
        "spider_question_id": 397,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT origin , destination FROM Flight WHERE price > 300",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "query": "db.flight.find({price: {$gt: 300}}, { origin: 1, destination: 1})",
        "gpt4 answer": "db.flight.find({ price: { $gt: 300 } }, { origin: 1, destination: 1 })",
        "deepseek answer": "db.flight.find({price: {$gt: 300}}, { origin: 1, destination: 1})"
    },
    {
        "question_id": 246,
        "spider_question_id": 398,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "query": "db.flight.find({}, {flno: 1, distance: 1}).sort({price: -1}).limit(1)",
        "gpt4 answer": "db.flight.find({}, { flno: 1, distance: 1 }).sort({ price: -1 }).limit(1)",
        "deepseek answer": "db.flight.find({}, {flno: 1, distance: 1}).sort({price: -1}).limit(1)"
    },
    {
        "question_id": 247,
        "spider_question_id": 399,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "query": "db.flight.find({}, {flno: 1, distance: 1}).sort({price: -1}).limit(1)",
        "gpt4 answer": "db.flight.find({}, {flno: 1, distance: 1}).sort({price: -1}).limit(1)",
        "deepseek answer": "db.flight.find({}, {flno: 1, distance: 1}).sort({price: -1}).limit(1)"
    },
    {
        "question_id": 248,
        "spider_question_id": 402,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = 'Los Angeles'",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "query": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\" } }, { $group: { _id: null, avgDistance: { $avg: \"$distance\" }, avgPrice: { $avg: \"$price\" } } } , { $project: { avgDistance:1, averagePrice: 1 } }])",
        "gpt4 answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\" } }, { $group: { _id: null, averageDistance: { $avg: \"$distance\" }, averagePrice: { $avg: \"$price\" } } }, { $project: { averageDistance: 1, averagePrice: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\" } }, { $group: { _id: null, avgDistance: { $avg: \"$distance\" }, avgPrice: { $avg: \"$price\" } } } , { $project: { avgDistance:1, averagePrice: 1 } }])"
    },
    {
        "question_id": 249,
        "spider_question_id": 403,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = 'Los Angeles'",
        "question": "What is the average distance and price for all flights from LA?",
        "query": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\" } }, { $group: { _id: null, avgDistance: { $avg: \"$distance\" }, avgPrice: { $avg: \"$price\" } } } , { $project: { avgDistance:1, averagePrice: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.flight.aggregate([ { $match: { origin: \"Los Angeles\" } }, { $group: { _id: null, avgDistance: { $avg: \"$distance\" }, avgPrice: { $avg: \"$price\" } } } , { $project: { avgDistance:1, averagePrice: 1 } }])"
    },
    {
        "question_id": 250,
        "spider_question_id": 404,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT origin , count(*) FROM Flight GROUP BY origin",
        "question": "Show all origins and the number of flights from each origin.",
        "query": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", numberOfFlights: { $sum: 1 } } }, { $project: { origin: \"$_id\", numberOfFlights: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 251,
        "spider_question_id": 405,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT origin , count(*) FROM Flight GROUP BY origin",
        "question": "For each origin, how many flights came from there?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", flightsFromOrigin: { $sum: 1 } } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 252,
        "spider_question_id": 406,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT destination , count(*) FROM Flight GROUP BY destination",
        "question": "Show all destinations and the number of flights to each destination.",
        "query": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$destination\", numberOfFlights: { $sum: 1 } } }, { $project: { destination: \"$_id\", numberOfFlights: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 253,
        "spider_question_id": 407,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT destination , count(*) FROM Flight GROUP BY destination",
        "question": "What are the destinations and number of flights to each one?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$destination\", number_of_flights: { $sum: 1 } } }, { $project: { destination: \"$_id\", number_of_flights: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 254,
        "spider_question_id": 408,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "question": "Which origin has most number of flights?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { origin: \"$_id\" } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", flightCount: { $sum: 1 } } }, { $sort: { flightCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { origin: \"$_id\" } } ])"
    },
    {
        "question_id": 255,
        "spider_question_id": 409,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "question": "What place has the most flights coming from there?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { origin: \"$_id\" } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _origin: \"$_id\" } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { origin: \"$_id\" } } ])"
    },
    {
        "question_id": 256,
        "spider_question_id": 410,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which destination has least number of flights?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 257,
        "spider_question_id": 411,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination has the fewest number of flights?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$destination\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 258,
        "spider_question_id": 414,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = 'Airbus A340-300'",
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "query": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $match: { \"aircraft_info.name\": \"Airbus A340-300\" } }, { $project: { flno: 1 } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $match: { \"aircraft_info.name\": \"Airbus A340-300\" } }, { $project: { flno: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $match: { \"aircraft_info.name\": \"Airbus A340-300\" } }, { $project: { flno: 1 } } ])"
    },
    {
        "question_id": 259,
        "spider_question_id": 415,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = 'Airbus A340-300'",
        "question": "What are the flight numbers for the aircraft Airbus A340-300?",
        "query": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $match: { \"aircraft_info.name\": \"Airbus A340-300\" } }, { $project: { flno: 1 } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $match: { \"aircraft_info.name\": \"Airbus A340-300\" } }, { $project: { flno: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 260,
        "spider_question_id": 416,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "query": "db.flight.aggregate([ { $group: { _id: \"$aid\", count: { $sum: 1 } } }, { $lookup: { from: \"aircraft\", localField: \"_id\", foreignField: \"aid\", as: \"aircraft_data\" } }, { $unwind: \"$aircraft_data\" }, { $project: { name: \"$aircraft_data.name\", numberOfFlights: \"$count\" } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$aid\", count: { $sum: 1 } } }, { $lookup: { from: \"aircraft\", localField: \"_id\", foreignField: \"aid\", as: \"aircraft_data\" } }, { $unwind: \"$aircraft_data\" }, { $project: { name: \"$aircraft_data.name\", numberOfFlights: \"$count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 261,
        "spider_question_id": 417,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "query": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $group: { _id: \"$aircraft_info.name\", count: { $sum: 1 } } }, { $project: { name: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$aid\", flightsCompleted: { $sum: 1 } } }, { $lookup: { from: \"aircraft\", localField: \"_id\", foreignField: \"aid\", as: \"aircraftInfo\" } }, { $unwind: \"$aircraftInfo\" }, { $project: { name: \"$aircraftInfo.name\", flightsCompleted: 1 } } ])",
        "deepseek answer": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $group: { _id: \"$aircraft_info.name\", count: { $sum: 1 } } }, { $project: { name: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 262,
        "spider_question_id": 418,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "question": "Show names for all aircraft with at least two flights.",
        "query": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $group: { _id: \"$aircraft_info.aid\", name: { $first: \"$aircraft_info.name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.flight.aggregate([ { $lookup: { from: \"aircraft\", localField: \"aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $group: { _id: \"$aircraft_info.aid\", name: { $first: \"$aircraft_info.name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 263,
        "spider_question_id": 419,
        "db_id": "flight_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "query": "db.aircraft.aggregate([ { $lookup: { from: \"flight\", localField: \"aid\", foreignField: \"aid\", as: \"flights\" } }, { $match: { $expr: { $gte: [{ $size: \"$flights\" }, 2] } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.aircraft.aggregate([ { $lookup: { from: \"flight\", localField: \"aid\", foreignField: \"aid\", as: \"flights\" } }, { $match: { $expr: { $gte: [{ $size: \"$flights\" }, 2] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 264,
        "spider_question_id": 422,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Show ids for all employees who don't have a certificate.",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $match: { \"certificates\": { $size: 0 } } }, { $project: { eid: 1 } }])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $match: { \"certificates\": { $size: 0 } } }, { $project: { eid: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $match: { \"certificates\": { $size: 0 } } }, { $project: { eid: 1 } }])"
    },
    {
        "question_id": 265,
        "spider_question_id": 423,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "What are the ids of all employees that don't have certificates?",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $match: { \"certificates\": { $size: 0 } } }, { $project: { eid: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $match: { certificates: { $size: 0 } } }, { $project: { eid: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $match: { \"certificates\": { $size: 0 } } }, { $project: { eid: 1 } } ])"
    },
    {
        "question_id": 266,
        "spider_question_id": 424,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = 'John Williams'",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "query": "db.employee.aggregate([ { $match: { name: \"John Williams\" } }, { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircraft\" } }, { $unwind: \"$aircraft\" }, { $project: { name: \"$aircraft.name\" } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $match: { name: 'John Williams' } }, { $lookup: { from: 'certificate', localField: 'eid', foreignField: 'eid', as: 'certificates' } }, { $unwind: '$certificates' }, { $lookup: { from: 'aircraft', localField: 'certificates.aid', foreignField: 'aid', as: 'aircrafts' } }, { $unwind: '$aircrafts' }, { $project: { name: '$aircrafts.name' } } ])",
        "deepseek answer": "db.employee.aggregate([ { $match: { name: \"John Williams\" } }, { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircraft\" } }, { $unwind: \"$aircraft\" }, { $project: { name: \"$aircraft.name\" } } ])"
    },
    {
        "question_id": 267,
        "spider_question_id": 425,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = 'John Williams'",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "query": "db.employee.aggregate([ { $match: { name: \"John Williams\" } }, { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircraft\" } }, { $unwind: \"$aircraft\" }, { $project: { name: \"$aircraft.name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.employee.aggregate([ { $match: { name: \"John Williams\" } }, { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircraft\" } }, { $unwind: \"$aircraft\" }, { $project: { name: \"$aircraft.name\" } } ])"
    },
    {
        "question_id": 268,
        "spider_question_id": 426,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificate_info\" } }, { $unwind: \"$certificate_info\" }, { $lookup: { from: \"aircraft\", localField: \"certificate_info.aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $match: { \"aircraft_info.name\": \"Boeing 737-800\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircrafts\" } }, { $unwind: \"$aircrafts\" }, { $match: { \"aircrafts.name\": \"Boeing 737-800\" } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificate_info\" } }, { $unwind: \"$certificate_info\" }, { $lookup: { from: \"aircraft\", localField: \"certificate_info.aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $match: { \"aircraft_info.name\": \"Boeing 737-800\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 269,
        "spider_question_id": 427,
        "db_id": "flight_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
        "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificate_info\" } }, { $unwind: \"$certificate_info\" }, { $lookup: { from: \"aircraft\", localField: \"certificate_info.aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $match: { \"aircraft_info.name\": \"Boeing 737-800\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"qualified_aircrafts\" } }, { $unwind: \"$qualified_aircrafts\" }, { $match: { \"qualified_aircrafts.name\": \"Boeing 737-800\" } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificate_info\" } }, { $unwind: \"$certificate_info\" }, { $lookup: { from: \"aircraft\", localField: \"certificate_info.aid\", foreignField: \"aid\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $match: { \"aircraft_info.name\": \"Boeing 737-800\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 270,
        "spider_question_id": 428,
        "db_id": "flight_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
        "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircrafts\" } }, { $unwind: \"$aircrafts\" }, { $match: { $or: [ { \"aircrafts.name\": \"Boeing 737-800\" }, { \"aircrafts.name\": \"Airbus A340-300\" } ] } }, { $group: { _id: \"$eid\", name: { $first: \"$name\" }, aircrafts: { $addToSet: \"$aircrafts.name\" } } }, { $match: { aircrafts: { $all: [\"Boeing 737-800\", \"Airbus A340-300\"] } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircrafts\" } }, { $unwind: \"$aircrafts\" }, { $match: { $or: [ { \"aircrafts.name\": \"Boeing 737-800\" }, { \"aircrafts.name\": \"Airbus A340-300\" } ] } }, { $group: { _id: \"$eid\", name: { $first: \"$name\" }, aircrafts: { $addToSet: \"$aircrafts.name\" } } }, { $match: { aircrafts: { $all: [\"Boeing 737-800\", \"Airbus A340-300\"] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 271,
        "spider_question_id": 429,
        "db_id": "flight_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
        "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircrafts\" } }, { $match: { \"aircrafts.name\": { $all: [\"Boeing 737-800\", \"Airbus A340-300\"] } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $lookup: { from: \"aircraft\", localField: \"certificates.aid\", foreignField: \"aid\", as: \"aircrafts\" } }, { $match: { \"aircrafts.name\": { $all: [\"Boeing 737-800\", \"Airbus A340-300\"] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 272,
        "spider_question_id": 435,
        "db_id": "flight_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5",
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "query": "db.aircraft.aggregate([ { $lookup: { from: \"certificate\", localField: \"aid\", foreignField: \"aid\", as: \"certificates\" } }, { $match: { distance: { $gt: 5000 }, \"certificates.eid\": { $exists: true } } }, { $project: { name: 1} }, { $sort: { count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.aircraft.aggregate([ { $lookup: { from: \"certificate\", localField: \"aid\", foreignField: \"aid\", as: \"certificates\" } }, { $match: { distance: { $gt: 5000 }, \"certificates.eid\": { $exists: true } } }, { $project: { name: 1} }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 273,
        "spider_question_id": 436,
        "db_id": "flight_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $project: { name: 1, salary: 1 } }, { $sort: { numCertificates: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $project: { name: 1, salary: 1, num_of_certificates: { $size: \"$certificates\" } } }, { $sort: { num_of_certificates: -1 } }, { $limit: 1 }, { $project: { name: 1, salary: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $project: { name: 1, salary: 1 } }, { $sort: { numCertificates: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 274,
        "spider_question_id": 437,
        "db_id": "flight_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "query": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $group: { _id: \"$eid\", name: { $first: \"$name\" }, salary: { $first: \"$salary\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1, salary: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $project: { name: 1, salary: 1, numberOfCertifications: { $size: \"$certificates\" } } }, { $sort: { numberOfCertifications: -1 } }, { $limit: 1 }, { $project: { name: 1, salary: 1 } } ])",
        "deepseek answer": "db.employee.aggregate([ { $lookup: { from: \"certificate\", localField: \"eid\", foreignField: \"eid\", as: \"certificates\" } }, { $unwind: \"$certificates\" }, { $group: { _id: \"$eid\", name: { $first: \"$name\" }, salary: { $first: \"$salary\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1, salary: 1 } } ])"
    },
    {
        "question_id": 275,
        "spider_question_id": 446,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT allergy , allergytype FROM Allergy_type",
        "question": "Show all allergies and their types.",
        "query": "db.Allergy_Type.find({}, { Allergy: 1, AllergyType: 1 })",
        "gpt4 answer": "db.Allergy_Type.find({}, { Allergy: 1, AllergyType: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 276,
        "spider_question_id": 447,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT allergy , allergytype FROM Allergy_type",
        "question": "What are the allergies and their types?",
        "query": "db.Allergy_Type.find({}, { Allergy: 1, AllergyType: 1})",
        "gpt4 answer": "db.Allergy_Type.find({}, { Allergy: 1, AllergyType: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 277,
        "spider_question_id": 448,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = 'food'",
        "question": "Show all allergies with type food.",
        "query": "db.Allergy_Type.find({AllergyType: 'food'}, { Allergy: 1})",
        "gpt4 answer": "db.Allergy_Type.find({AllergyType: 'food'}, { Allergy: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 278,
        "spider_question_id": 450,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'",
        "question": "What is the type of allergy Cat?",
        "query": "db.Allergy_Type.find({Allergy: 'Cat'}, {AllergyType: 1})",
        "gpt4 answer": "db.Allergy_Type.find({ Allergy: 'Cat' }, { AllergyType: 1 })",
        "deepseek answer": "db.Allergy_Type.find({Allergy: 'Cat'}, {AllergyType: 1})"
    },
    {
        "question_id": 279,
        "spider_question_id": 451,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'",
        "question": "What is allergy type of a cat allergy?",
        "query": "db.Allergy_Type.find({Allergy: 'Cat'}, {AllergyType: 1})",
        "gpt4 answer": "db.Allergy_Type.find({ Allergy: \"Cat\" }, { AllergyType: 1 })",
        "deepseek answer": "db.Allergy_Type.find({Allergy: 'Cat'}, {AllergyType: 1})"
    },
    {
        "question_id": 280,
        "spider_question_id": 454,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype",
        "question": "Show all allergy types and the number of allergies in each type.",
        "query": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_count\" } }, { $project: { \"_id\": 0, \"AllergyType\": 1, \"allergy_count\": { $size: \"$allergy_count\" } } }, { $group: { \"_id\": \"$AllergyType\", \"count\": { $sum: 1 } } } ])",
        "gpt4 answer": "db.Allergy_Type.aggregate([ { $group: { _id: \"$AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_count\" } }, { $project: { \"_id\": 0, \"AllergyType\": 1, \"allergy_count\": { $size: \"$allergy_count\" } } }, { $group: { \"_id\": \"$AllergyType\", \"count\": { $sum: 1 } } } ])"
    },
    {
        "question_id": 281,
        "spider_question_id": 455,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype",
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "query": "db.Allergy_Type.aggregate([ { $group: { _id: \"$AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Allergy_Type.aggregate([ { $group: { _id: \"$AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 282,
        "spider_question_id": 456,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy type has most number of allergies?",
        "query": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"AllergyCount\" } }, { $group: { _id: \"$AllergyType\", count: { $sum: { $size: \"$AllergyCount\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"AllergyCount\" } }, { $group: { _id: \"$AllergyType\", count: { $sum: { $size: \"$AllergyCount\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 283,
        "spider_question_id": 457,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy type is most common?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_allergies\" } }, { $unwind: \"$student_allergies\" }, { $lookup: { from: \"Allergy_Type\", localField: \"student_allergies.Allergy\", foreignField: \"Allergy\", as: \"allergy_type\" } }, { $unwind: \"$allergy_type\" }, { $group: { _id: \"$allergy_type.AllergyType\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { allergy_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Allergy_Type.aggregate([ { $group: { _id: \"$AllergyType\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_allergies\" } }, { $unwind: \"$student_allergies\" }, { $lookup: { from: \"Allergy_Type\", localField: \"student_allergies.Allergy\", foreignField: \"Allergy\", as: \"allergy_type\" } }, { $unwind: \"$allergy_type\" }, { $group: { _id: \"$allergy_type.AllergyType\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { allergy_type: \"$_id\" } } ])"
    },
    {
        "question_id": 284,
        "spider_question_id": 459,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
        "question": "Which allergy type is the least common?",
        "query": "db.Allergy_Type.aggregate([ { $group: { _id: \"$AllergyType\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { AllergyType: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Allergy_Type.aggregate([ { $group: { _id: \"$AllergyType\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { AllergyType: \"$_id\" } }])"
    },
    {
        "question_id": 285,
        "spider_question_id": 476,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE age > 20",
        "question": "Show all student ids who are older than 20.",
        "query": "db.Student.find({Age: {$gt: 20}}, {StuID: 1})",
        "gpt4 answer": "db.Student.find({ Age: { $gt: 20 } }, { StuID: 1 })",
        "deepseek answer": "db.Student.find({Age: {$gt: 20}}, {StuID: 1})"
    },
    {
        "question_id": 286,
        "spider_question_id": 477,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE age > 20",
        "question": "What are the student ids for students over 20 years old?",
        "query": "db.Student.find({Age: {$gt: 20}}, {StuID: 1})",
        "gpt4 answer": "db.Student.find({ Age: { $gt: 20 } }, { StuID: 1 })",
        "deepseek answer": "db.Student.find({Age: {$gt: 20}}, {StuID: 1})"
    },
    {
        "question_id": 287,
        "spider_question_id": 478,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT city_code FROM Student WHERE LName = 'Kim'",
        "question": "Which city does the student whose last name is 'Kim' live in?",
        "query": "db.Student.findOne({LName: 'Kim'}, {city_code: 1})",
        "gpt4 answer": "db.Student.find({ LName: 'Kim' }, { city_code: 1 })",
        "deepseek answer": "db.Student.findOne({LName: 'Kim'}, {city_code: 1})"
    },
    {
        "question_id": 288,
        "spider_question_id": 479,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT city_code FROM Student WHERE LName = 'Kim'",
        "question": "Give the city that the student whose family name is Kim lives in.",
        "query": "db.Student.findOne({LName: 'Kim'}, {city_code: 1})",
        "gpt4 answer": "db.Student.findOne({ LName: 'Kim' }, { city_code: 1 })",
        "deepseek answer": "db.Student.findOne({LName: 'Kim'}, {city_code: 1})"
    },
    {
        "question_id": 289,
        "spider_question_id": 480,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM Student WHERE StuID = 1004",
        "question": "Who is the advisor of student with ID 1004?",
        "query": "db.Student.find({StuID: 1004}, {Advisor: 1})",
        "gpt4 answer": "db.Student.find({ StuID: 1004 }, { Advisor: 1 })",
        "deepseek answer": "db.Student.find({StuID: 1004}, {Advisor: 1})"
    },
    {
        "question_id": 290,
        "spider_question_id": 481,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM Student WHERE StuID = 1004",
        "question": "Who advises student 1004?",
        "query": "db.Student.find({StuID: 1004}, {Advisor: 1})",
        "gpt4 answer": "db.Student.find({ StuID: 1004 }, { Advisor: 1 })",
        "deepseek answer": "db.Student.find({StuID: 1004}, {Advisor: 1})"
    },
    {
        "question_id": 291,
        "spider_question_id": 484,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(age) , avg(age) , max(age) FROM Student",
        "question": "Show the minimum, average, and maximum age of all students.",
        "query": "db.Student.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, avgAge: { $avg: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { minAge: 1, avgAge:1, maxAge:1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, avgAge: { $avg: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { minAge: 1, avgAge: 1, maxAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, avgAge: { $avg: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { minAge: 1, avgAge:1, maxAge:1 } } ])"
    },
    {
        "question_id": 292,
        "spider_question_id": 485,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(age) , avg(age) , max(age) FROM Student",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "query": "db.Student.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, avgAge: { $avg: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { minAge: 1, avgAge:1, maxAge:1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, averageAge: { $avg: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { minAge: 1, averageAge: 1, maxAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, avgAge: { $avg: \"$Age\" }, maxAge: { $max: \"$Age\" } } }, { $project: { minAge: 1, avgAge:1, maxAge:1 } } ])"
    },
    {
        "question_id": 293,
        "spider_question_id": 486,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)",
        "question": "What is the last name of the youngest student?",
        "query": "db.Student.find({}, {LName: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.Student.find({}, {LName: 1}).sort({Age: 1}).limit(1)",
        "deepseek answer": "db.Student.find({}, {LName: 1}).sort({Age: 1}).limit(1)"
    },
    {
        "question_id": 294,
        "spider_question_id": 487,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)",
        "question": "Provide the last name of the youngest student.",
        "query": "db.Student.find({}, {LName: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.Student.find({}, { LName: 1 }).sort({ Age: 1 }).limit(1)",
        "deepseek answer": "db.Student.find({}, {LName: 1}).sort({Age: 1}).limit(1)"
    },
    {
        "question_id": 295,
        "spider_question_id": 488,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)",
        "question": "Show the student id of the oldest student.",
        "query": "db.Student.find({}, { StuID: 1 }).sort({ Age: -1 }).limit(1)",
        "gpt4 answer": "db.Student.find({}, { StuID: 1 }).sort({ Age: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 296,
        "spider_question_id": 489,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student)",
        "question": "What student id corresponds to the oldest student?",
        "query": "db.Student.find({}, {StuID: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, maxAge: { $max: \"$Age\" } } }, { $lookup: { from: \"Student\", localField: \"maxAge\", foreignField: \"Age\", as: \"oldestStudents\" } }, { $unwind: \"$oldestStudents\" }, { $replaceRoot: { newRoot: \"$oldestStudents\" } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "db.Student.find({}, {StuID: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 297,
        "spider_question_id": 490,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT major , count(*) FROM Student GROUP BY major",
        "question": "Show all majors and corresponding number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", NumberOfStudents: { $sum: 1 } } }, { $project: { Major: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 298,
        "spider_question_id": 491,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT major , count(*) FROM Student GROUP BY major",
        "question": "How many students are there for each major?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 299,
        "spider_question_id": 492,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "Which major has most number of students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Major: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Major: \"$_id\" } } ])"
    },
    {
        "question_id": 300,
        "spider_question_id": 493,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the largest major?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { major: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { major: \"$_id\" } } ])"
    },
    {
        "question_id": 301,
        "spider_question_id": 494,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT age , count(*) FROM Student GROUP BY age",
        "question": "Show all ages and corresponding number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Age\", count: { $sum: 1 } } }, { $project: { age: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Age\", numberOfStudents: { $sum: 1 } } }, { $project: { age: \"$_id\", count: \"$numberOfStudents\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Age\", count: { $sum: 1 } } }, { $project: { age: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 302,
        "spider_question_id": 495,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT age , count(*) FROM Student GROUP BY age",
        "question": "How old is each student and how many students are each age?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Age\", count: { $sum: 1 } } }, { $project: { age: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Age\", NumberOfStudents: { $sum: 1 } } }, { $project: { Age: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Age\", count: { $sum: 1 } } }, { $project: { age: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 303,
        "spider_question_id": 496,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , sex FROM Student GROUP BY sex",
        "question": "Show the average age for male and female students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", AverageAge: { $avg: \"$Age\" } } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } } } ])"
    },
    {
        "question_id": 304,
        "spider_question_id": 497,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , sex FROM Student GROUP BY sex",
        "question": "What are the average ages for male and female students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } }} ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } } } ])"
    },
    {
        "question_id": 305,
        "spider_question_id": 498,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city_code , count(*) FROM Student GROUP BY city_code",
        "question": "Show all cities and corresponding number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", num_students: { $sum: 1 } } }, { $project: { city_code: \"$_id\", num_students: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 306,
        "spider_question_id": 499,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city_code , count(*) FROM Student GROUP BY city_code",
        "question": "How many students live in each city?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 307,
        "spider_question_id": 500,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT advisor , count(*) FROM Student GROUP BY advisor",
        "question": "Show all advisors and corresponding number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $project: { Advisor: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", NumberOfStudents: { $sum: 1 } }} ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $project: { Advisor: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 308,
        "spider_question_id": 501,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT advisor , count(*) FROM Student GROUP BY advisor",
        "question": "How many students does each advisor have?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 309,
        "spider_question_id": 502,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "question": "Which advisor has most number of students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 310,
        "spider_question_id": 503,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the advisor with the most students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { advisor: \"$_id\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 311,
        "spider_question_id": 506,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2",
        "question": "Show all student IDs who have at least two allergies.",
        "query": "db.Has_Allergy.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { StuID: \"$_id\" } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { StuID: \"$_id\" } } ])"
    },
    {
        "question_id": 312,
        "spider_question_id": 507,
        "db_id": "allergy_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2",
        "question": "What are the students ids of students who have more than one allergy?",
        "query": "db.Has_Allergy.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { StuID: \"$_id\" } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { StuID: \"$_id\" } } ])"
    },
    {
        "question_id": 313,
        "spider_question_id": 508,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"hasAllergy\" } }, { $match: { \"hasAllergy\": { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { Allergies: { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"hasAllergy\" } }, { $match: { \"hasAllergy\": { $size: 0 } } }, { $project: { StuID: 1 } } ])"
    },
    {
        "question_id": 314,
        "spider_question_id": 509,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "question": "Which students are unaffected by allergies?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"allergies\" } }, { $match: { \"allergies\": { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" }}, { $match: { Allergies: { $size: 0 } }}, { $project: { StuID: 1 }} ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"allergies\" } }, { $match: { \"allergies\": { $size: 0 } } }, { $project: { StuID: 1 } } ])"
    },
    {
        "question_id": 315,
        "spider_question_id": 512,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = 'food'",
        "question": "How many students have a food allergy?",
        "query": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $match: { \"allergy_info.AllergyType\": \"food\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count:1 } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"AllergyInfo\" } }, { $unwind: \"$AllergyInfo\" }, { $match: { \"AllergyInfo.AllergyType\": \"food\" } }, { $count: \"NumberOfStudentsWithFoodAllergy\" } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $match: { \"allergy_info.AllergyType\": \"food\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count:1 } } ])"
    },
    {
        "question_id": 316,
        "spider_question_id": 513,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = 'food'",
        "question": "How many students are affected by food related allergies?",
        "query": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $match: { \"allergy_info.AllergyType\": \"food\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count:1 } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"AllergyDetails\" } }, { $match: { \"AllergyDetails.AllergyType\": \"food\" } }, { $count: \"NumberOfStudents\" } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $match: { \"allergy_info.AllergyType\": \"food\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count:1 } } ])"
    },
    {
        "question_id": 317,
        "spider_question_id": 514,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy has most number of students affected?",
        "query": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Allergy: \"$_id\" } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Allergy: \"$_id\" } } ])"
    },
    {
        "question_id": 318,
        "spider_question_id": 515,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "question": "Which allergy is the most common?",
        "query": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Allergy: \"$_id\" } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Allergy: \"$_id\" } } ])"
    },
    {
        "question_id": 319,
        "spider_question_id": 516,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
        "question": "Show all allergies with number of students affected.",
        "query": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $project: { Allergy: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $project: { Allergy: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } }, { $project: { Allergy: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 320,
        "spider_question_id": 517,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
        "question": "How many students have each different allergy?",
        "query": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $group: { _id: \"$Allergy\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 321,
        "spider_question_id": 518,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
        "question": "Show all allergy type with number of students affected.",
        "query": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $group: { _id: \"$allergy_info.AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"AllergyInfo\" } }, { $unwind: \"$AllergyInfo\" }, { $group: { _id: \"$AllergyInfo.AllergyType\", NumberOfStudents: { $sum: 1 } } }, { $project: { AllergyType: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $group: { _id: \"$allergy_info.AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 322,
        "spider_question_id": 519,
        "db_id": "allergy_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
        "question": "How many students are affected by each allergy type?",
        "query": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $group: { _id: \"$allergy_info.AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"AllergyInfo\" } }, { $unwind: \"$AllergyInfo\" }, { $group: { _id: \"$AllergyInfo.AllergyType\", Count: { $sum: 1 } } }, { $project: { AllergyType: \"$_id\", Count: 1 } } ])",
        "deepseek answer": "db.Has_Allergy.aggregate([ { $lookup: { from: \"Allergy_Type\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $group: { _id: \"$allergy_info.AllergyType\", count: { $sum: 1 } } }, { $project: { allergytype: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 323,
        "spider_question_id": 520,
        "db_id": "allergy_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"allergies\" } }, { $match: { \"allergies.Allergy\": { $all: [\"Milk\", \"Cat\"] } } }, { $project: { LName: 1, Age: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": { $all: [\"Milk\", \"Cat\"] } } }, { $project: { LName: 1, Age: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"allergies\" } }, { $match: { \"allergies.Allergy\": { $all: [\"Milk\", \"Cat\"] } } }, { $project: { LName: 1, Age: 1 } } ])"
    },
    {
        "question_id": 324,
        "spider_question_id": 521,
        "db_id": "allergy_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"allergies\" } }, { $match: { \"allergies.Allergy\": { $all: [\"Milk\", \"Cat\"] } } }, { $project: { LName: 1, Age: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": { $all: [\"Milk\", \"Cat\"] } } }, { $project: { LName: 1, Age: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"allergies\" } }, { $match: { \"allergies.Allergy\": { $all: [\"Milk\", \"Cat\"] } } }, { $project: { LName: 1, Age: 1 } } ])"
    },
    {
        "question_id": 325,
        "spider_question_id": 522,
        "db_id": "allergy_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' ORDER BY T1.Allergy",
        "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "query": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $lookup: { from: \"Student\", localField: \"allergy_info.StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.Fname\": \"Lisa\" } }, { $project: { Allergy: 1, AllergyType: 1 } }, { $sort: { Allergy: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Fname: 'Lisa' } }, { $lookup: { from: 'Has_Allergy', localField: 'StuID', foreignField: 'StuID', as: 'allergies' } }, { $unwind: '$allergies' }, { $lookup: { from: 'Allergy_Type', localField: 'allergies.Allergy', foreignField: 'Allergy', as: 'allergy_types' } }, { $unwind: '$allergy_types' }, { $project: { Allergy: '$allergy_types.Allergy', AllergyType: '$allergy_types.AllergyType' } }, { $sort: { Allergy: 1 } } ])",
        "deepseek answer": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $lookup: { from: \"Student\", localField: \"allergy_info.StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.Fname\": \"Lisa\" } }, { $project: { Allergy: 1, AllergyType: 1 } }, { $sort: { Allergy: 1 } } ])"
    },
    {
        "question_id": 326,
        "spider_question_id": 523,
        "db_id": "allergy_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' ORDER BY T1.Allergy",
        "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
        "query": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $lookup: { from: \"Student\", localField: \"allergy_info.StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.Fname\": \"Lisa\" } }, { $project: { Allergy: 1, AllergyType: 1 } }, { $sort: { Allergy: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Fname: \"Lisa\", Sex: \"F\" } }, { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $unwind: \"$Allergies\" }, { $lookup: { from: \"Allergy_Type\", localField: \"Allergies.Allergy\", foreignField: \"Allergy\", as: \"AllergyInfo\" } }, { $unwind: \"$AllergyInfo\" }, { $project: { Allergy: \"$AllergyInfo.Allergy\", AllergyType: \"$AllergyInfo.AllergyType\" } }, { $sort: { Allergy: 1 } } ])",
        "deepseek answer": "db.Allergy_Type.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"Allergy\", foreignField: \"Allergy\", as: \"allergy_info\" } }, { $unwind: \"$allergy_info\" }, { $lookup: { from: \"Student\", localField: \"allergy_info.StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.Fname\": \"Lisa\" } }, { $project: { Allergy: 1, AllergyType: 1 } }, { $sort: { Allergy: 1 } } ])"
    },
    {
        "question_id": 327,
        "spider_question_id": 525,
        "db_id": "allergy_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": \"Milk\" } }, { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"CatAllergies\" } }, { $match: { \"CatAllergies.Allergy\": { $ne: \"Cat\" } } }, { $project: { Fname: 1, Sex: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": \"Milk\" } }, { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"CatAllergies\" } }, { $match: { \"CatAllergies.Allergy\": { $ne: \"Cat\" } } }, { $project: { Fname: 1, Sex: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 328,
        "spider_question_id": 528,
        "db_id": "allergy_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT fname , lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food')",
        "question": "List the first and last name of the students who do not have any food type allergy.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $lookup: { from: \"Allergy_Type\", localField: \"Allergies.Allergy\", foreignField: \"Allergy\", as: \"AllergyDetails\" } }, { $match: { AllergyDetails: { $not: { $elemMatch: { AllergyType: \"food\" } } } } }, { $project: { Fname: 1, LName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $lookup: { from: \"Allergy_Type\", localField: \"Allergies.Allergy\", foreignField: \"Allergy\", as: \"AllergyDetails\" } }, { $match: { AllergyDetails: { $not: { $elemMatch: { AllergyType: \"food\" } } } } }, { $project: { Fname: 1, LName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 329,
        "spider_question_id": 532,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": { $in: [\"Milk\", \"Cat\"] } } }, { $group: { _id: { Fname: \"$Fname\", City_code: \"$city_code\" } } }, { $project: { Fname: \"$_id.Fname\", City_code: \"$_id.City_code\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": { $in: [\"Milk\", \"Cat\"] } } }, { $group: { _id: { Fname: \"$Fname\", City_code: \"$city_code\" } } }, { $project: { Fname: \"$_id.Fname\", City_code: \"$_id.City_code\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 330,
        "spider_question_id": 533,
        "db_id": "allergy_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"has_allergy\" } }, { $unwind: \"$has_allergy\" }, { $match: { \"has_allergy.Allergy\": { $in: [\"Milk\", \"Cat\"] } } }, { $group: { _id: { fname: \"$Fname\", city_code: \"$city_code\" } } }, { $project: { fname: \"$_id.fname\", city_code: \"$_id.city_code\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"Allergies\" } }, { $match: { \"Allergies.Allergy\": {$in: [\"Milk\", \"Cat\"]} } }, { $group: { _id: { Fname: \"$Fname\", city_code: \"$city_code\" } } }, { $project: { Fname: \"$_id.Fname\", city_code: \"$_id.city_code\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Has_Allergy\", localField: \"StuID\", foreignField: \"StuID\", as: \"has_allergy\" } }, { $unwind: \"$has_allergy\" }, { $match: { \"has_allergy.Allergy\": { $in: [\"Milk\", \"Cat\"] } } }, { $group: { _id: { fname: \"$Fname\", city_code: \"$city_code\" } } }, { $project: { fname: \"$_id.fname\", city_code: \"$_id.city_code\" } } ])"
    },
    {
        "question_id": 331,
        "spider_question_id": 538,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
        "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "query": "db.invoices.aggregate([ { $group: { _id: \"$billing_country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 5 } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $group: { _id: \"$billing_country\", NumberOfInvoices: { $sum: 1 } } }, { $sort: { NumberOfInvoices: -1 } }, { $limit: 5 }, { $project: { Country: \"$_id\", NumberOfInvoices: 1 } } ])",
        "deepseek answer": "db.invoices.aggregate([ { $group: { _id: \"$billing_country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 5 } ])"
    },
    {
        "question_id": 332,
        "spider_question_id": 539,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "query": "db.invoices.aggregate([ { $group: { _id: \"$billing_country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 5 } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $group: { _id: \"$billing_country\", invoiceCount: { $sum: 1 } } }, { $sort: { invoiceCount: -1 } }, { $limit: 5 } ])",
        "deepseek answer": "db.invoices.aggregate([ { $group: { _id: \"$billing_country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 5 } ])"
    },
    {
        "question_id": 333,
        "spider_question_id": 544,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5",
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "query": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $unwind: \"$invoices\" }, { $sort: { \"invoices.invoice_date\": -1 } }, { $limit: 5 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"purchases\" } }, { $unwind: \"$purchases\" }, { $sort: { \"purchases.invoice_date\": -1 } }, { $limit: 5 }, { $project: { \"first_name\": 1, \"last_name\": 1 } } ])",
        "deepseek answer": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $unwind: \"$invoices\" }, { $sort: { \"invoices.invoice_date\": -1 } }, { $limit: 5 }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 334,
        "spider_question_id": 545,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5",
        "question": "What are the first and last names of the 5 customers who purchased something most recently?",
        "query": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $unwind: \"$invoices\" }, { $sort: { \"invoices.invoice_date\": -1 } }, { $limit: 5 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"purchases\" } }, { $unwind: \"$purchases\" }, { $sort: { \"purchases.invoice_date\": -1 } }, { $limit: 5 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $unwind: \"$invoices\" }, { $sort: { \"invoices.invoice_date\": -1 } }, { $limit: 5 }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 335,
        "spider_question_id": 546,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name , COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "query": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { first_name: 1, last_name: 1, totalOrders: { $size: \"$orders\" } } }, { $sort: { totalOrders: -1 } }, { $limit: 10 } ])",
        "gpt4 answer": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { first_name: 1, last_name: 1, totalOrders: { $size: \"$orders\" } } }, { $sort: { totalOrders: -1 } }, { $limit: 10 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 336,
        "spider_question_id": 547,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name , COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "query": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { first_name: 1, last_name: 1, totalOrders: { $size: \"$orders\" } } }, { $sort: { totalOrders: -1 } }, { $limit: 10 } ])",
        "gpt4 answer": "db.customers.aggregate([ { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { first_name: 1, last_name: 1, totalOrders: { $size: \"$orders\" } } }, { $sort: { totalOrders: -1 } }, { $limit: 10 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 337,
        "spider_question_id": 550,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "query": "db.genres.aggregate([ { $lookup: { from: \"tracks\", localField: \"id\", foreignField: \"genre_id\", as: \"tracks\" } }, { $project: { name: 1, totalTracks: { $size: \"$tracks\" } } }, { $sort: { totalTracks: -1 } }, { $limit: 5 } ])",
        "gpt4 answer": "db.genres.aggregate([ { $lookup: { from: \"tracks\", localField: \"id\", foreignField: \"genre_id\", as: \"trackDetails\" } }, { $project: { name: 1, totalTracks: { $size: \"$trackDetails\" } } }, { $sort: { totalTracks: -1 } }, { $limit: 5 } ])",
        "deepseek answer": "db.genres.aggregate([ { $lookup: { from: \"tracks\", localField: \"id\", foreignField: \"genre_id\", as: \"tracks\" } }, { $project: { name: 1, totalTracks: { $size: \"$tracks\" } } }, { $sort: { totalTracks: -1 } }, { $limit: 5 } ])"
    },
    {
        "question_id": 338,
        "spider_question_id": 551,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5",
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "query": "db.genres.aggregate([ { $lookup: { from: \"tracks\", localField: \"id\", foreignField: \"genre_id\", as: \"tracks\" } }, { $project: { name: 1, trackCount: { $size: \"$tracks\" } } }, { $sort: { trackCount: -1 } }, { $limit: 5 } ])",
        "gpt4 answer": "db.genres.aggregate([ { $lookup: { from: \"tracks\", localField: \"id\", foreignField: \"genre_id\", as: \"tracks\" } }, { $project: { name: 1, track_count: { $size: \"$tracks\" } } }, { $sort: { track_count: -1 } }, { $limit: 5 } ])",
        "deepseek answer": "db.genres.aggregate([ { $lookup: { from: \"tracks\", localField: \"id\", foreignField: \"genre_id\", as: \"tracks\" } }, { $project: { name: 1, trackCount: { $size: \"$tracks\" } } }, { $sort: { trackCount: -1 } }, { $limit: 5 } ])"
    },
    {
        "question_id": 339,
        "spider_question_id": 559,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "query": "db.invoices.aggregate([ { $sort: { total: 1 } }, { $limit: 10 }, { $lookup: { from: \"customers\", localField: \"customer_id\", foreignField: \"id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { first_name: \"$customer_info.first_name\", last_name: \"$customer_info.last_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.invoices.aggregate([ { $sort: { total: 1 } }, { $limit: 10 }, { $lookup: { from: \"customers\", localField: \"customer_id\", foreignField: \"id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { first_name: \"$customer_info.first_name\", last_name: \"$customer_info.last_name\" } } ])"
    },
    {
        "question_id": 340,
        "spider_question_id": 560,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'",
        "question": "List total amount of invoice from Chicago, IL.",
        "query": "db.invoices.aggregate([ { $match: { billing_city: \"Chicago\", billing_state: \"IL\" } }, { $group: { _id: null, total: { $sum: \"$total\" } } }, { $project: { total: 1 } } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $match: { billing_city: \"Chicago\", billing_state: \"IL\" } }, { $group: { _id: null, totalAmount: { $sum: \"$total\" } } }, { $project: { totalAmount: 1 } } ])",
        "deepseek answer": "db.invoices.aggregate([ { $match: { billing_city: \"Chicago\", billing_state: \"IL\" } }, { $group: { _id: null, total: { $sum: \"$total\" } } }, { $project: { total: 1 } } ])"
    },
    {
        "question_id": 341,
        "spider_question_id": 561,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'",
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
        "query": "db.invoices.aggregate([ { $match: { billing_city: \"Chicago\", billing_state: \"IL\" } }, { $group: { _id: null, total: { $sum: \"$total\" } } }, { $project: { total: 1 } } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $match: { billing_city: 'Chicago', billing_state: 'IL' } }, { $group: { _id: null, totalAmount: { $sum: \"$total\" } } }, { $project: { totalAmount: 1 } } ])",
        "deepseek answer": "db.invoices.aggregate([ { $match: { billing_city: \"Chicago\", billing_state: \"IL\" } }, { $group: { _id: null, total: { $sum: \"$total\" } } }, { $project: { total: 1 } } ])"
    },
    {
        "question_id": 342,
        "spider_question_id": 564,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state",
        "question": "List the number of invoices from the US, grouped by state.",
        "query": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 343,
        "spider_question_id": 565,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state",
        "question": "How many invoices were billed from each state?",
        "query": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 344,
        "spider_question_id": 566,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the state in the US with the most invoices.",
        "query": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $match: { billing_country: 'USA' } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 345,
        "spider_question_id": 567,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What are the states with the most invoices?",
        "query": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.invoices.aggregate([ { $match: { billing_country: 'USA' } }, { $group: { _id: '$billing_state', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.invoices.aggregate([ { $match: { billing_country: \"USA\" } }, { $group: { _id: \"$billing_state\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 346,
        "spider_question_id": 570,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Aerosmith'",
        "question": "List Aerosmith's albums.",
        "query": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $match: { \"artist_info.name\": \"Aerosmith\" } }, { $project: { title: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $match: { \"artist_info.name\": \"Aerosmith\" } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 347,
        "spider_question_id": 571,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Aerosmith'",
        "question": "What are the titles of all the Aerosmith albums?",
        "query": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist_info\" } }, { $match: {\"artist_info.name\": \"Aerosmith\"} }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist_info\" } }, { $match: {\"artist_info.name\": \"Aerosmith\"} }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 348,
        "spider_question_id": 572,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'",
        "question": "How many albums does Billy Cobham has?",
        "query": "db.artists.aggregate([ { $match: { name: \"Billy Cobham\" } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"albums\" } }, { $project: { albums: { $size: \"$albums\" } } } ])",
        "gpt4 answer": "db.artists.aggregate([ { $match: { name: \"Billy Cobham\" } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"albums\" }}, { $unwind: \"$albums\" }, { $count: \"number_of_albums\" } ])",
        "deepseek answer": "db.artists.aggregate([ { $match: { name: \"Billy Cobham\" } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"albums\" } }, { $project: { albums: { $size: \"$albums\" } } } ])"
    },
    {
        "question_id": 349,
        "spider_question_id": 573,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'",
        "question": "How many albums has Billy Cobam released?",
        "query": "db.artists.aggregate([ { $match: { name: 'Billy Cobham' } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"albums\" }}, { $project: { numberOfAlbums: { $size: \"$albums\" } } } ])",
        "gpt4 answer": "db.artists.aggregate([ { $match: { name: 'Billy Cobham' } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"albums\" }}, { $project: { numberOfAlbums: { $size: \"$albums\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 350,
        "spider_question_id": 574,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'",
        "question": "Eduardo Martins is a customer at which company?",
        "query": "db.customers.find( { first_name: 'Eduardo', last_name: 'Martins' }, { company: 1 } )",
        "gpt4 answer": "db.customers.findOne({ first_name: 'Eduardo', last_name: 'Martins' }, { company: 1 })",
        "deepseek answer": "db.customers.find( { first_name: 'Eduardo', last_name: 'Martins' }, { company: 1 } )"
    },
    {
        "question_id": 351,
        "spider_question_id": 575,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'",
        "question": "What is the company where Eduardo Martins is a customer?",
        "query": "db.customers.find( { first_name: 'Eduardo', last_name: 'Martins' }, { company: 1 } )",
        "gpt4 answer": "db.customers.findOne({ first_name: \"Eduardo\", last_name: \"Martins\" }, { company: 1 })",
        "deepseek answer": "db.customers.find( { first_name: 'Eduardo', last_name: 'Martins' }, { company: 1 } )"
    },
    {
        "question_id": 352,
        "spider_question_id": 576,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email , phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'",
        "question": "What is Astrid Gruber's email and phone number?",
        "query": "db.customers.find( { first_name: 'Astrid', last_name: 'Gruber' }, { email: 1, phone: 1 } )",
        "gpt4 answer": "db.customers.findOne({ first_name: 'Astrid', last_name: 'Gruber' }, { email: 1, phone: 1 })",
        "deepseek answer": "db.customers.find( { first_name: 'Astrid', last_name: 'Gruber' }, { email: 1, phone: 1 } )"
    },
    {
        "question_id": 353,
        "spider_question_id": 577,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email , phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "db.customers.find( { first_name: 'Astrid', last_name: 'Gruber' }, { email: 1, phone: 1 } )",
        "gpt4 answer": "db.customers.find({ first_name: 'Astrid', last_name: 'Gruber' }, { email: 1, phone: 1 })",
        "deepseek answer": "db.customers.find( { first_name: 'Astrid', last_name: 'Gruber' }, { email: 1, phone: 1 } )"
    },
    {
        "question_id": 354,
        "spider_question_id": 582,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'",
        "question": "What country does Roberto Almeida live?",
        "query": "db.customers.find( { first_name: \"Roberto\", last_name: \"Almeida\" }, { country: 1 } )",
        "gpt4 answer": "db.customers.find({ first_name: 'Roberto', last_name: 'Almeida' }, { country: 1 })",
        "deepseek answer": "db.customers.find( { first_name: \"Roberto\", last_name: \"Almeida\" }, { country: 1 } )"
    },
    {
        "question_id": 355,
        "spider_question_id": 583,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'",
        "question": "In which country does Roberto Almeida?",
        "query": "db.customers.find( { first_name: \"Roberto\", last_name: \"Almeida\" }, { country: 1 } )",
        "gpt4 answer": "db.customers.find({ first_name: 'Roberto', last_name: 'Almeida' }, { country: 1 })",
        "deepseek answer": "db.customers.find( { first_name: \"Roberto\", last_name: \"Almeida\" }, { country: 1 } )"
    },
    {
        "question_id": 356,
        "spider_question_id": 584,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "query": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist_info\" } }, { $match: { \"artist_info.name\": { $regex: /Led/ } } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist\" } }, { $match: { \"artist.name\": { $regex: \"Led\" } } }, { $project: { title: 1 } } ])",
        "deepseek answer": "db.albums.aggregate([ { $lookup: { from: \"artists\", localField: \"artist_id\", foreignField: \"id\", as: \"artist_info\" } }, { $match: { \"artist_info.name\": { $regex: /Led/ } } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 357,
        "spider_question_id": 585,
        "db_id": "store_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "query": "db.artists.aggregate([ { $match: { name: { $regex: /Led/ } } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"album_info\" } }, { $unwind: \"$album_info\" }, { $project: { title: \"$album_info.title\" } } ])",
        "gpt4 answer": "db.artists.aggregate([ { $match: { name: { $regex: 'Led', $options: 'i' } } }, { $lookup: { from: 'albums', localField: 'id', foreignField: 'artist_id', as: 'albums' } }, { $unwind: '$albums' }, { $project: { title: '$albums.title' } } ])",
        "deepseek answer": "db.artists.aggregate([ { $match: { name: { $regex: /Led/ } } }, { $lookup: { from: \"albums\", localField: \"id\", foreignField: \"artist_id\", as: \"album_info\" } }, { $unwind: \"$album_info\" }, { $project: { title: \"$album_info.title\" } } ])"
    },
    {
        "question_id": 358,
        "spider_question_id": 587,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson'",
        "question": "What is the count of customers that Steve Johnson supports?",
        "query": "db.employees.aggregate([ { $match: { first_name: \"Steve\", last_name: \"Johnson\" } }, { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"customers\" } }, { $project: { customers: { $size: \"$customers\" } } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { first_name: 'Steve', last_name: 'Johnson' } }, { $lookup: { from: 'customers', localField: 'id', foreignField: 'support_rep_id', as: 'supported_customers' } }, { $project: { customer_count: { $size: \"$supported_customers\" } } } ])",
        "deepseek answer": "db.employees.aggregate([ { $match: { first_name: \"Steve\", last_name: \"Johnson\" } }, { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"customers\" } }, { $project: { customers: { $size: \"$customers\" } } } ])"
    },
    {
        "question_id": 359,
        "spider_question_id": 590,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards'",
        "question": "find the full name of employees who report to Nancy Edwards?",
        "query": "db.employees.aggregate([ { $lookup: { from: \"employees\", localField: \"id\", foreignField: \"reports_to\", as: \"reporting_employees\" } }, { $match: { first_name: \"Nancy\", last_name: \"Edwards\" } }, { $unwind: \"$reporting_employees\" }, { $project: { first_name: \"$reporting_employees.first_name\", last_name: \"$reporting_employees.last_name\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"employees\", localField: \"id\", foreignField: \"reports_to\", as: \"reporting_employees\" } }, { $match: { first_name: \"Nancy\", last_name: \"Edwards\" } }, { $unwind: \"$reporting_employees\" }, { $project: { first_name: \"$reporting_employees.first_name\", last_name: \"$reporting_employees.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 360,
        "spider_question_id": 592,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'",
        "question": "What is the address of employee Nancy Edwards?",
        "query": "db.employees.find( { first_name: 'Nancy', last_name: 'Edwards' }, { address: 1 } )",
        "gpt4 answer": "db.employees.findOne({ first_name: \"Nancy\", last_name: \"Edwards\" }, { address: 1 })",
        "deepseek answer": "db.employees.find( { first_name: 'Nancy', last_name: 'Edwards' }, { address: 1 } )"
    },
    {
        "question_id": 361,
        "spider_question_id": 593,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'",
        "question": "What is Nancy Edwards's address?",
        "query": "db.employees.find({first_name: 'Nancy', last_name: 'Edwards'}, {address: 1})",
        "gpt4 answer": "db.employees.findOne({ first_name: \"Nancy\", last_name: \"Edwards\" }, { address: 1 })",
        "deepseek answer": "db.employees.find({first_name: 'Nancy', last_name: 'Edwards'}, {address: 1})"
    },
    {
        "question_id": 362,
        "spider_question_id": 594,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"support_customers\" } }, { $project: { first_name: 1, last_name: 1} }, { $sort: { support_customer_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"supported_customers\" } }, { $project: { first_name: 1, last_name: 1, num_customers: { $size: \"$supported_customers\" } } }, { $sort: { num_customers: -1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.employees.aggregate([ { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"support_customers\" } }, { $project: { first_name: 1, last_name: 1} }, { $sort: { support_customer_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 363,
        "spider_question_id": 595,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the full name of the employee who has the most customers?",
        "query": "db.employees.aggregate([ { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"support_customers\" } }, { $project: { first_name: 1, last_name: 1} }, { $sort: { support_customer_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"supported_customers\" } }, { $project: { first_name: 1, last_name: 1, num_customers: { $size: \"$supported_customers\" } } }, { $sort: { num_customers: -1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.employees.aggregate([ { $lookup: { from: \"customers\", localField: \"id\", foreignField: \"support_rep_id\", as: \"support_customers\" } }, { $project: { first_name: 1, last_name: 1} }, { $sort: { support_customer_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 364,
        "spider_question_id": 598,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'",
        "question": "What is employee Nancy Edwards's phone number?",
        "query": "db.employees.find( { first_name: 'Nancy', last_name: 'Edwards' }, { phone: 1 } )",
        "gpt4 answer": "db.employees.findOne({ first_name: 'Nancy', last_name: 'Edwards' }, { phone: 1 })",
        "deepseek answer": "db.employees.find( { first_name: 'Nancy', last_name: 'Edwards' }, { phone: 1 } )"
    },
    {
        "question_id": 365,
        "spider_question_id": 599,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'",
        "question": "What is the the phone number of Nancy Edwards?",
        "query": "db.employees.find( { first_name: 'Nancy', last_name: 'Edwards' }, { phone: 1 } )",
        "gpt4 answer": "db.employees.findOne({ first_name: 'Nancy', last_name: 'Edwards' }, { phone: 1 })",
        "deepseek answer": "db.employees.find( { first_name: 'Nancy', last_name: 'Edwards' }, { phone: 1 } )"
    },
    {
        "question_id": 366,
        "spider_question_id": 600,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "query": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({birth_date: -1}).limit(1)",
        "gpt4 answer": "db.employees.find({}, { first_name: 1, last_name: 1 }).sort({ birth_date: -1 }).limit(1)",
        "deepseek answer": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({birth_date: -1}).limit(1)"
    },
    {
        "question_id": 367,
        "spider_question_id": 601,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "question": "What si the youngest employee's first and last name?",
        "query": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({birth_date: -1}).limit(1)",
        "gpt4 answer": "db.employees.find({}, { first_name: 1, last_name: 1 }).sort({ birth_date: -1 }).limit(1)",
        "deepseek answer": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({birth_date: -1}).limit(1)"
    },
    {
        "question_id": 368,
        "spider_question_id": 602,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "query": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({hire_date: 1}).limit(10)",
        "gpt4 answer": "db.employees.find({}, { first_name: 1, last_name: 1 }).sort({ hire_date: 1 }).limit(10)",
        "deepseek answer": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({hire_date: 1}).limit(10)"
    },
    {
        "question_id": 369,
        "spider_question_id": 603,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "query": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({hire_date: 1}).limit(10)",
        "gpt4 answer": "db.employees.find({}, { first_name: 1, last_name: 1 }).sort({ hire_date: 1 }).limit(10)",
        "deepseek answer": "db.employees.find({}, {first_name: 1, last_name: 1}).sort({hire_date: 1}).limit(10)"
    },
    {
        "question_id": 370,
        "spider_question_id": 604,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , city FROM employees WHERE title = 'IT Staff' GROUP BY city",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "query": "db.employees.aggregate([ { $match: { title: \"IT Staff\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { title: 'IT Staff' } }, { $group: { _id: '$city', count: { $sum: 1 } } } ])",
        "deepseek answer": "db.employees.aggregate([ { $match: { title: \"IT Staff\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 371,
        "spider_question_id": 605,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , city FROM employees WHERE title = 'IT Staff' GROUP BY city",
        "question": "How many employees who are IT staff are from each city?",
        "query": "db.employees.aggregate([ { $match: { title: \"IT Staff\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { title: 'IT Staff' } }, { $group: { _id: \"$city\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.employees.aggregate([ { $match: { title: \"IT Staff\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 372,
        "spider_question_id": 606,
        "db_id": "store_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name , count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1",
        "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"employees\", localField: \"id\", foreignField: \"reports_to\", as: \"reports\" } }, { $project: { first_name: 1, last_name: 1, reports_count: { $size: \"$reports\" } } }, { $sort: { reports_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { reports_to: { $exists: true } } }, { $group: { _id: \"$reports_to\", num_reports: { $sum: 1 } }}, { $sort: { num_reports: -1 } }, { $limit: 1 }, { $lookup: { from: \"employees\", localField: \"_id\", foreignField: \"id\", as: \"manager\" }}, { $unwind: \"$manager\" }, { $project: { first_name: \"$manager.first_name\", last_name: \"$manager.last_name\", num_reports: 1 }} ])",
        "deepseek answer": "db.employees.aggregate([ { $lookup: { from: \"employees\", localField: \"id\", foreignField: \"reports_to\", as: \"reports\" } }, { $project: { first_name: 1, last_name: 1, reports_count: { $size: \"$reports\" } } }, { $sort: { reports_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 373,
        "spider_question_id": 608,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'",
        "question": "How many orders does Lucas Mancini has?",
        "query": "db.customers.aggregate([ { $match: { first_name: \"Lucas\", last_name: \"Mancini\" } }, { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $project: { invoices: { $size: \"$invoices\" } } } ])",
        "gpt4 answer": "db.customers.aggregate([ { $match: { first_name: 'Lucas', last_name: 'Mancini' } }, { $lookup: { from: 'invoices', localField: 'id', foreignField: 'customer_id', as: 'orders' }}, { $project: { numberOfOrders: { $size: '$orders' } } } ])",
        "deepseek answer": "db.customers.aggregate([ { $match: { first_name: \"Lucas\", last_name: \"Mancini\" } }, { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $project: { invoices: { $size: \"$invoices\" } } } ])"
    },
    {
        "question_id": 374,
        "spider_question_id": 609,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'",
        "question": "How many orders does Luca Mancini have in his invoices?",
        "query": "db.customers.aggregate([ { $match: { first_name: \"Lucas\", last_name: \"Mancini\" } }, { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $project: { invoices: { $size: \"$invoices\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.customers.aggregate([ { $match: { first_name: \"Lucas\", last_name: \"Mancini\" } }, { $lookup: { from: \"invoices\", localField: \"id\", foreignField: \"customer_id\", as: \"invoices\" } }, { $project: { invoices: { $size: \"$invoices\" } } } ])"
    },
    {
        "question_id": 375,
        "spider_question_id": 612,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM media_types",
        "question": "List all media types.",
        "query": "db.media_types.find({}, { name: 1})",
        "gpt4 answer": "db.media_types.find({}, { name: 1 })",
        "deepseek answer": "db.media_types.find({}, { name: 1})"
    },
    {
        "question_id": 376,
        "spider_question_id": 613,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM media_types",
        "question": "What are the names of all the media types?",
        "query": "db.media_types.find({}, { name: 1 })",
        "gpt4 answer": "db.media_types.find({}, { name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 377,
        "spider_question_id": 616,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM playlists",
        "question": "List the name of all playlist.",
        "query": "db.playlists.find({}, {name: 1})",
        "gpt4 answer": "db.playlists.find({}, { name: 1 })",
        "deepseek answer": "db.playlists.find({}, {name: 1})"
    },
    {
        "question_id": 378,
        "spider_question_id": 617,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM playlists",
        "question": "What are the names of all the playlists?",
        "query": "db.playlists.find({}, { name: 1})",
        "gpt4 answer": "db.playlists.find({}, { name: 1 })",
        "deepseek answer": "db.playlists.find({}, { name: 1})"
    },
    {
        "question_id": 379,
        "spider_question_id": 618,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'",
        "question": "Who is the composer of track Fast As a Shark?",
        "query": "db.tracks.find({name: 'Fast As a Shark'}, {composer: 1})",
        "gpt4 answer": "db.tracks.findOne({ name: 'Fast As a Shark' }, { composer: 1 })",
        "deepseek answer": "db.tracks.find({name: 'Fast As a Shark'}, {composer: 1})"
    },
    {
        "question_id": 380,
        "spider_question_id": 619,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'",
        "question": "What is the composer who created the track 'Fast As a Shark'?",
        "query": "db.tracks.findOne({name: 'Fast As a Shark'}, {composer: 1})",
        "gpt4 answer": "db.tracks.findOne({ name: 'Fast As a Shark' }, { composer: 1 })",
        "deepseek answer": "db.tracks.findOne({name: 'Fast As a Shark'}, {composer: 1})"
    },
    {
        "question_id": 381,
        "spider_question_id": 620,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'",
        "question": "How long does track Fast As a Shark has?",
        "query": "db.tracks.find({name: 'Fast As a Shark'}, {milliseconds: 1})",
        "gpt4 answer": "db.tracks.findOne({ name: 'Fast As a Shark' }, { milliseconds: 1 })",
        "deepseek answer": "db.tracks.find({name: 'Fast As a Shark'}, {milliseconds: 1})"
    },
    {
        "question_id": 382,
        "spider_question_id": 621,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'",
        "question": "How many milliseconds long is Fast As a Shark?",
        "query": "db.tracks.findOne({name: 'Fast As a Shark'}, {milliseconds: 1})",
        "gpt4 answer": "db.tracks.findOne({ name: 'Fast As a Shark' }, { milliseconds: 1 })",
        "deepseek answer": "db.tracks.findOne({name: 'Fast As a Shark'}, {milliseconds: 1})"
    },
    {
        "question_id": 383,
        "spider_question_id": 638,
        "db_id": "store_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id) > 100",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "query": "db.playlist_tracks.aggregate([ { $lookup: { from: \"playlists\", localField: \"playlist_id\", foreignField: \"id\", as: \"playlist_info\" } }, { $unwind: \"$playlist_info\" }, { $group: { _id: \"$playlist_id\", name: { $first: \"$playlist_info.name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 100 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.playlists.aggregate([ { $lookup: { from: \"playlist_tracks\", localField: \"id\", foreignField: \"playlist_id\", as: \"tracks\" } }, { $project: { name: 1, numberOfTracks: { $size: \"$tracks\" } } }, { $match: { numberOfTracks: { $gt: 100 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.playlist_tracks.aggregate([ { $lookup: { from: \"playlists\", localField: \"playlist_id\", foreignField: \"id\", as: \"playlist_info\" } }, { $unwind: \"$playlist_info\" }, { $group: { _id: \"$playlist_id\", name: { $first: \"$playlist_info.name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 100 } } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 384,
        "spider_question_id": 642,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'",
        "question": "How much is the track Fast As a Shark?",
        "query": "db.tracks.findOne({name: 'Fast As a Shark'}, { unit_price: 1})",
        "gpt4 answer": "db.tracks.find({name: 'Fast As a Shark'}, {unit_price: 1})",
        "deepseek answer": "db.tracks.findOne({name: 'Fast As a Shark'}, { unit_price: 1})"
    },
    {
        "question_id": 385,
        "spider_question_id": 643,
        "db_id": "store_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'",
        "question": "What is the unit price of the tune 'Fast As a Shark'?",
        "query": "db.tracks.findOne({name: 'Fast As a Shark'}, { unit_price: 1})",
        "gpt4 answer": "db.tracks.findOne({ name: 'Fast As a Shark' }, { unit_price: 1 })",
        "deepseek answer": "db.tracks.findOne({name: 'Fast As a Shark'}, { unit_price: 1})"
    },
    {
        "question_id": 386,
        "spider_question_id": 651,
        "db_id": "journal_committee",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM editor ORDER BY Age ASC",
        "question": "List the names of editors in ascending order of age.",
        "query": "db.editor.find({}, {Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.editor.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.editor.find({}, {Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 387,
        "spider_question_id": 652,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Age FROM editor",
        "question": "What are the names and ages of editors?",
        "query": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee_info\" } }, { $project: { Name: 1, Age: 1 } } ])",
        "gpt4 answer": "db.editor.find({}, { Name: 1, Age: 1 })",
        "deepseek answer": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee_info\" } }, { $project: { Name: 1, Age: 1 } } ])"
    },
    {
        "question_id": 388,
        "spider_question_id": 653,
        "db_id": "journal_committee",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM editor WHERE Age > 25",
        "question": "List the names of editors who are older than 25.",
        "query": "db.editor.find({Age: {$gt: 25}}, {Name: 1})",
        "gpt4 answer": "db.editor.find({ Age: { $gt: 25 } }, { Name: 1 })",
        "deepseek answer": "db.editor.find({Age: {$gt: 25}}, {Name: 1})"
    },
    {
        "question_id": 389,
        "spider_question_id": 654,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
        "question": "Show the names of editors of age either 24 or 25.",
        "query": "db.editor.find({ Age: { $in: [24, 25] } }, { Name: 1 })",
        "gpt4 answer": "db.editor.find({ Age: { $in: [24, 25] } }, { Name: 1 })",
        "deepseek answer": "db.editor.find({ Age: { $in: [24, 25] } }, { Name: 1 })"
    },
    {
        "question_id": 390,
        "spider_question_id": 655,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "question": "What is the name of the youngest editor?",
        "query": "db.editor.find({}, {Name: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.editor.find({}, { Name: 1 }).sort({ Age: 1 }).limit(1)",
        "deepseek answer": "db.editor.find({}, {Name: 1}).sort({Age: 1}).limit(1)"
    },
    {
        "question_id": 391,
        "spider_question_id": 656,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Age , COUNT(*) FROM editor GROUP BY Age",
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "query": "db.editor.aggregate([ { $group: { _id: \"$Age\", count: { $sum: 1 } } }, { $project: { Age: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.editor.aggregate([ { $group: { _id: \"$Age\", NumberOfEditors: { $sum: 1 } } }, { $project: { Age: \"$_id\", NumberOfEditors: 1 } } ])",
        "deepseek answer": "db.editor.aggregate([ { $group: { _id: \"$Age\", count: { $sum: 1 } } }, { $project: { Age: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 392,
        "spider_question_id": 659,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "query": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee_info\" } }, { $unwind: \"$committee_info\" }, { $lookup: { from: \"journal\", localField: \"committee_info.Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$journal_info\" }, { $project: { Name: 1, Theme: \"$journal_info.Theme\" } } ])",
        "gpt4 answer": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee_info\" } }, { $unwind: \"$committee_info\" }, { $lookup: { from: \"journal\", localField: \"committee_info.Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$journal_info\" }, { $project: { Name: 1, Theme: \"$journal_info.Theme\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 393,
        "spider_question_id": 661,
        "db_id": "journal_committee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name , T2.age , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC",
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "query": "db.journal_committee.aggregate([ { $lookup: { from: \"editor\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"editor_info\" } }, { $lookup: { from: \"journal\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$editor_info\" }, { $unwind: \"$journal_info\" }, { $project: { Name: \"$editor_info.Name\", Age: \"$editor_info.Age\", Theme: \"$journal_info.Theme\" } }, { $sort: { Theme: 1 } } ])",
        "gpt4 answer": "db.journal_committee.aggregate([ { $lookup: { from: \"editor\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"editor_info\" } }, { $unwind: \"$editor_info\" }, { $lookup: { from: \"journal\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$journal_info\" }, { $project: { \"Name\": \"$editor_info.Name\", \"Age\": \"$editor_info.Age\", \"Theme\": \"$journal_info.Theme\" } }, { $sort: { \"Theme\": 1 } } ])",
        "deepseek answer": "db.journal_committee.aggregate([ { $lookup: { from: \"editor\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"editor_info\" } }, { $lookup: { from: \"journal\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$editor_info\" }, { $unwind: \"$journal_info\" }, { $project: { Name: \"$editor_info.Name\", Age: \"$editor_info.Age\", Theme: \"$journal_info.Theme\" } }, { $sort: { Theme: 1 } } ])"
    },
    {
        "question_id": 394,
        "spider_question_id": 662,
        "db_id": "journal_committee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000",
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "query": "db.journal_committee.aggregate([ { $lookup: { from: \"editor\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"editor_info\" } }, { $lookup: { from: \"journal\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$editor_info\" }, { $unwind: \"$journal_info\" }, { $match: { \"journal_info.Sales\": { $gt: 3000 } } }, { $project: { Name: \"$editor_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.journal_committee.aggregate([ { $lookup: { from: \"editor\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"editor_info\" } }, { $lookup: { from: \"journal\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"journal_info\" } }, { $unwind: \"$editor_info\" }, { $unwind: \"$journal_info\" }, { $match: { \"journal_info.Sales\": { $gt: 3000 } } }, { $project: { Name: \"$editor_info.Name\" } } ])"
    },
    {
        "question_id": 395,
        "spider_question_id": 664,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2",
        "question": "Show the names of editors that are on at least two journal committees.",
        "query": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee_membership\" } }, { $match: { \"committee_membership.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committees\" } }, { $project: { Name: 1, committeesCount: { $size: \"$committees\" } } }, { $match: { committeesCount: { $gte: 2 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee_membership\" } }, { $match: { \"committee_membership.1\": { $exists: true } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 396,
        "spider_question_id": 665,
        "db_id": "journal_committee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "question": "List the names of editors that are not on any journal committee.",
        "query": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee\" } }, { $match: { committee: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.editor.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Editor_ID\", foreignField: \"Editor_ID\", as: \"committee\" } }, { $match: { committee: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 397,
        "spider_question_id": 666,
        "db_id": "journal_committee",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT date , theme , sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID",
        "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "query": "db.journal.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"committee\" } }, { $match: { \"committee\": { $size: 0 } } }, { $project: { Date: 1, Theme: 1, Sales: 1 } } ])",
        "gpt4 answer": "db.journal.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"committee\" } }, { $match: { \"committee\": { $size: 0 } } }, { $project: { Date: 1, Theme: 1, Sales: 1 } } ])",
        "deepseek answer": "db.journal.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"committee\" } }, { $match: { \"committee\": { $size: 0 } } }, { $project: { Date: 1, Theme: 1, Sales: 1 } } ])"
    },
    {
        "question_id": 398,
        "spider_question_id": 667,
        "db_id": "journal_committee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "query": "db.journal.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"committee\" } }, { $match: { \"committee.Work_Type\": \"Photo\" } }, { $group: { _id: null, averageSales: { $avg: \"$Sales\" } } }, { $project: { averageSales: 1 } } ])",
        "gpt4 answer": "db.journal.aggregate([ { $lookup: { from: \"journal_committee\", localField: \"Journal_ID\", foreignField: \"Journal_ID\", as: \"committee\" } }, { $match: { \"committee.Work_Type\": \"Photo\" } }, { $group: { _id: null, averageSales: { $avg: \"$Sales\" } } }, { $project: { averageSales: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 399,
        "spider_question_id": 670,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT account_id , customer_id , account_name FROM Accounts",
        "question": "Show ids, customer ids, names for all accounts.",
        "query": "db.Accounts.aggregate([ { $project: { account_id: 1, customer_id: 1, account_name: 1 } } ])",
        "gpt4 answer": "db.Accounts.find({}, { account_id: 1, customer_id: 1, account_name: 1 })",
        "deepseek answer": "db.Accounts.aggregate([ { $project: { account_id: 1, customer_id: 1, account_name: 1 } } ])"
    },
    {
        "question_id": 400,
        "spider_question_id": 671,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT account_id , customer_id , account_name FROM Accounts",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "query": "db.Accounts.find({}, {account_id: 1, customer_id: 1, account_name: 1})",
        "gpt4 answer": "db.Accounts.find({}, { account_id: 1, customer_id: 1, account_name: 1 })",
        "deepseek answer": "db.Accounts.find({}, {account_id: 1, customer_id: 1, account_name: 1})"
    },
    {
        "question_id": 401,
        "spider_question_id": 672,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338'",
        "question": "Show other account details for account with name 338.",
        "query": "db.Accounts.find({account_name: '338'}, { other_account_details: 1})",
        "gpt4 answer": "db.Accounts.find({ account_name: '338' }, { other_account_details: 1 })",
        "deepseek answer": "db.Accounts.find({account_name: '338'}, { other_account_details: 1})"
    },
    {
        "question_id": 402,
        "spider_question_id": 673,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338'",
        "question": "What are the other account details for the account with the name 338?",
        "query": "db.Accounts.findOne({account_name: '338'}, {other_account_details: 1})",
        "gpt4 answer": "db.Accounts.findOne({ account_name: '338' }, { other_account_details: 1 })",
        "deepseek answer": "db.Accounts.findOne({account_name: '338'}, {other_account_details: 1})"
    },
    {
        "question_id": 403,
        "spider_question_id": 674,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '162'",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "query": "db.Accounts.aggregate([ { $match: { account_name: \"162\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Accounts.aggregate([ { $match: { account_name: \"162\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])"
    },
    {
        "question_id": 404,
        "spider_question_id": 675,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '162'",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "query": "db.Accounts.aggregate([ { $match: { account_name: \"162\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $unwind: \"$accounts\" }, { $match: { \"accounts.account_name\": \"162\" } }, { $project: { customer_first_name: 1, customer_last_name: 1, customer_phone: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $match: { account_name: \"162\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])"
    },
    {
        "question_id": 405,
        "spider_question_id": 676,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "query": "db.Customers.aggregate([ { $match: { customer_first_name: \"Art\", customer_last_name: \"Turcotte\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $project: { accounts: { $size: \"$accounts\" } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_first_name: 'Art', customer_last_name: 'Turcotte' } }, { $lookup: { from: 'Accounts', localField: 'customer_id', foreignField: 'customer_id', as: 'customer_accounts' } }, { $unwind: '$customer_accounts' }, { $count: 'num_accounts' } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_first_name: \"Art\", customer_last_name: \"Turcotte\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $project: { accounts: { $size: \"$accounts\" } } } ])"
    },
    {
        "question_id": 406,
        "spider_question_id": 677,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "query": "db.Accounts.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.customer_first_name\": \"Art\", \"customer_info.customer_last_name\": \"Turcotte\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.customer_first_name\": \"Art\", \"customer_info.customer_last_name\": \"Turcotte\" } }, { $count: \"num_accounts\" } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.customer_first_name\": \"Art\", \"customer_info.customer_last_name\": \"Turcotte\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 407,
        "spider_question_id": 678,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id",
        "question": "Show all customer ids and the number of accounts for each customer.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", numberOfAccounts: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", numberOfAccounts: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 408,
        "spider_question_id": 679,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id",
        "question": "How many accounts are there for each customer id?",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", accountsCount: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", accountsCount: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 409,
        "spider_question_id": 680,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the customer id and number of accounts with most accounts.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", numberOfAccounts: { $sum: 1 } } }, { $sort: { numberOfAccounts: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", numberOfAccounts: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 410,
        "spider_question_id": 681,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", totalAccounts: { $sum: 1 } } }, { $sort: { totalAccounts: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", totalAccounts: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 411,
        "spider_question_id": 682,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the customer first, last name and id with least number of accounts.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", num_accounts: { $sum: 1 } } }, { $sort: { num_accounts: 1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer_details\" } }, { $unwind: \"$customer_details\" }, { $project: { customer_first_name: \"$customer_details.customer_first_name\", customer_last_name: \"$customer_details.customer_last_name\", customer_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", num_accounts: { $sum: 1 } } }, { $sort: { num_accounts: 1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer_details\" } }, { $unwind: \"$customer_details\" }, { $project: { customer_first_name: \"$customer_details.customer_first_name\", customer_last_name: \"$customer_details.customer_last_name\", customer_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 412,
        "spider_question_id": 684,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "Show the number of all customers without an account.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $count: \"customers_without_account\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $count: \"customers_without_account\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 413,
        "spider_question_id": 685,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "How many customers do not have an account?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $count: \"customers_without_accounts\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $count: \"customers_without_accounts\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 414,
        "spider_question_id": 686,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "Show the first names and last names of customers without any account.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts\": { $eq: [] } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"AccountInfo\" } }, { $match: { \"AccountInfo\": { $size: 0 } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts\": { $eq: [] } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])"
    },
    {
        "question_id": 415,
        "spider_question_id": 687,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_first_name , customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "What are the full names of customers who do not have any accounts?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts\": { $size: 0 } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_accounts\" } }, { $match: { customer_accounts: { $size: 0 } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts\": { $size: 0 } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])"
    },
    {
        "question_id": 416,
        "spider_question_id": 688,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "Show distinct first and last names for all customers with an account.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: {\"accounts\": {$ne: []}} }, { $group: { _id: {first_name: \"$customer_first_name\", last_name: \"$customer_last_name\"} } }, { $project: { customer_first_name: \"$_id.first_name\", customer_last_name: \"$_id.last_name\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: {\"accounts\": {$ne: []}} }, { $group: { _id: {first_name: \"$customer_first_name\", last_name: \"$customer_last_name\"} } }, { $project: { customer_first_name: \"$_id.first_name\", customer_last_name: \"$_id.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 417,
        "spider_question_id": 689,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "What are the full names of customers who have accounts?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts\": { $ne: [] } } }, { $group: { _id: { first_name: \"$customer_first_name\", last_name: \"$customer_last_name\" } } }, { $project: { customer_first_name: \"$_id.first_name\", customer_last_name: \"$_id.last_name\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])"
    },
    {
        "question_id": 418,
        "spider_question_id": 691,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "Count the number of customers who hold an account.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\" } }, { $count: \"unique_customers\" } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\" } }, { $count: \"unique_customers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 419,
        "spider_question_id": 693,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM Customers",
        "question": "Count the number of customers.",
        "query": "db.Customers.aggregate([ { $count: \"numberOfCustomers\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $count: \"numberOfCustomers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 420,
        "spider_question_id": 694,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "query": "db.Customers.find({}, {customer_id: 1, customer_first_name: 1, customer_last_name: 1, customer_phone: 1})",
        "gpt4 answer": "db.Customers.find({}, {customer_id: 1, customer_first_name: 1, customer_last_name: 1, customer_phone: 1})",
        "deepseek answer": "db.Customers.find({}, {customer_id: 1, customer_first_name: 1, customer_last_name: 1, customer_phone: 1})"
    },
    {
        "question_id": 421,
        "spider_question_id": 695,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , customer_first_name , customer_last_name , customer_phone FROM Customers",
        "question": "What are the ids, full names, and phones of each customer?",
        "query": "db.Customers.aggregate([ { $project: { customer_id: 1, customer_first_name: 1, customer_last_name: 1, customer_phone: 1 } } ])",
        "gpt4 answer": "db.Customers.find({}, { customer_id: 1, customer_first_name: 1, customer_last_name: 1, customer_phone: 1 })",
        "deepseek answer": "db.Customers.aggregate([ { $project: { customer_id: 1, customer_first_name: 1, customer_last_name: 1, customer_phone: 1 } } ])"
    },
    {
        "question_id": 422,
        "spider_question_id": 696,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "query": "db.Customers.find({customer_first_name: 'Aniyah', customer_last_name: 'Feest'}, {customer_phone: 1, customer_email: 1})",
        "gpt4 answer": "db.Customers.find({customer_first_name: 'Aniyah', customer_last_name: 'Feest'}, {customer_phone: 1, customer_email: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 423,
        "spider_question_id": 697,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_phone , customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'",
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "query": "db.Customers.find( { customer_first_name: 'Aniyah', customer_last_name: 'Feest' }, { customer_phone: 1, customer_email: 1 } )",
        "gpt4 answer": "db.Customers.find({ customer_first_name: 'Aniyah', customer_last_name: 'Feest' }, { customer_phone: 1, customer_email: 1 })",
        "deepseek answer": "db.Customers.find( { customer_first_name: 'Aniyah', customer_last_name: 'Feest' }, { customer_phone: 1, customer_email: 1 } )"
    },
    {
        "question_id": 424,
        "spider_question_id": 700,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "query": "db.Customers_Cards.find({}, {card_id: 1, customer_id: 1, card_type_code: 1, card_number: 1})",
        "gpt4 answer": "db.Customers_Cards.find({}, { card_id: 1, customer_id: 1, card_type_code: 1, card_number: 1 })",
        "deepseek answer": "db.Customers_Cards.find({}, {card_id: 1, customer_id: 1, card_type_code: 1, card_number: 1})"
    },
    {
        "question_id": 425,
        "spider_question_id": 701,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_id , customer_id , card_type_code , card_number FROM Customers_cards",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "query": "db.Customers_Cards.find({}, {card_id: 1, customer_id: 1, card_type_code: 1, card_number: 1})",
        "gpt4 answer": "db.Customers_Cards.find({}, { card_id: 1, customer_id: 1, card_type_code: 1, card_number: 1 })",
        "deepseek answer": "db.Customers_Cards.find({}, {card_id: 1, customer_id: 1, card_type_code: 1, card_number: 1})"
    },
    {
        "question_id": 426,
        "spider_question_id": 704,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "query": "db.Customers_Cards.aggregate([ { $match: { card_number: \"4560596484842\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.card_number\": \"4560596484842\" } }, { $project: { customer_first_name: 1, customer_last_name: 1, customer_phone: 1 } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $match: { card_number: \"4560596484842\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])"
    },
    {
        "question_id": 427,
        "spider_question_id": 705,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name , T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "query": "db.Customers_Cards.aggregate([ { $match: { card_number: \"4560596484842\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $match: { card_number: \"4560596484842\" } }, { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_last_name: \"$customer_info.customer_last_name\", customer_phone: \"$customer_info.customer_phone\" } } ])"
    },
    {
        "question_id": 428,
        "spider_question_id": 706,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'",
        "question": "How many cards does customer Art Turcotte have?",
        "query": "db.Customers.aggregate([ { $match: { $and: [ { customer_first_name: 'Art' }, { customer_last_name: 'Turcotte' } ] } }, { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $project: { totalCards: { $size: \"$cards\" } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { $and: [ { customer_first_name: 'Art' }, { customer_last_name: 'Turcotte' } ] } }, { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $project: { totalCards: { $size: \"$cards\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 429,
        "spider_question_id": 710,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' AND T2.customer_last_name = 'Huels' AND T1.card_type_code = 'Credit'",
        "question": "How many credit cards does customer Blanche Huels have?",
        "query": "db.Customers.aggregate([ { $match: { customer_first_name: \"Blanche\", customer_last_name: \"Huels\" } }, { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $unwind: \"$cards\" }, { $match: { \"cards.card_type_code\": \"Credit\" } }, { $count: \"credit_card_count\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_first_name: \"Blanche\", customer_last_name: \"Huels\" } }, { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $unwind: \"$cards\" }, { $match: { \"cards.card_type_code\": \"Credit\" } }, { $count: \"credit_card_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 430,
        "spider_question_id": 711,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' AND T2.customer_last_name = 'Huels' AND T1.card_type_code = 'Credit'",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "query": "db.Customers_Cards.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.customer_first_name\": \"Blanche\", \"customer_info.customer_last_name\": \"Huels\", \"card_type_code\": \"Credit\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_first_name: 'Blanche', customer_last_name: 'Huels' } }, { $lookup: { from: 'Customers_Cards', localField: 'customer_id', foreignField: 'customer_id', as: 'cards' } }, { $unwind: '$cards' }, { $match: { 'cards.card_type_code': 'Credit' } }, { $count: 'creditCardCount' } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.customer_first_name\": \"Blanche\", \"customer_info.customer_last_name\": \"Huels\", \"card_type_code\": \"Credit\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 431,
        "spider_question_id": 712,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", numberOfCards: { $sum: 1 } }}, { $project: { customer_id: \"$_id\", numberOfCards: 1 }} ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 432,
        "spider_question_id": 713,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", totalCards: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", numberOfCards: \"$totalCards\" } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 433,
        "spider_question_id": 714,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id with most number of cards, and how many does he have?",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 434,
        "spider_question_id": 715,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id of the customer who has the most cards, as well as the number of cards.",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", cardCount: { $sum: 1 } } }, { $sort: { cardCount: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", numberOfCards: \"$cardCount\" } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", cardCount: { $sum: 1 } } }, { $sort: { cardCount: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", numberOfCards: \"$cardCount\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 435,
        "spider_question_id": 716,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "query": "db.Customers_Cards.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $group: { _id: \"$customer_id\", firstName: { $first: \"$customer_info.customer_first_name\" }, lastName: { $first: \"$customer_info.customer_last_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1, firstName: 1, lastName: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.1\": { $exists: true } } }, { $project: { customer_id: \"$customer_id\", customer_first_name: 1, customer_last_name: 1 } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $group: { _id: \"$customer_id\", firstName: { $first: \"$customer_info.customer_first_name\" }, lastName: { $first: \"$customer_info.customer_last_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1, firstName: 1, lastName: 1 } } ])"
    },
    {
        "question_id": 436,
        "spider_question_id": 717,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "query": "db.Customers_Cards.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $group: { _id: \"$customer_id\", firstName: { $first: \"$customer_info.customer_first_name\" }, lastName: { $first: \"$customer_info.customer_last_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { customer_id: \"$_id\", customer_first_name: \"$firstName\", customer_last_name: \"$lastName\" } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customerInfo\" } }, { $unwind: \"$customerInfo\" }, { $project: { customer_id: \"$_id\", customer_first_name: \"$customerInfo.customer_first_name\", customer_last_name: \"$customerInfo.customer_last_name\" } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $group: { _id: \"$customer_id\", firstName: { $first: \"$customer_info.customer_first_name\" }, lastName: { $first: \"$customer_info.customer_last_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { customer_id: \"$_id\", customer_first_name: \"$firstName\", customer_last_name: \"$lastName\" } } ])"
    },
    {
        "question_id": 437,
        "spider_question_id": 720,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
        "question": "Show all card type codes and the number of cards in each type.",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 438,
        "spider_question_id": 721,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card types, and how many cards are there of each?",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 439,
        "spider_question_id": 722,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the card type code with most number of cards?",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { card_type_code: \"$_id\"} } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { card_type_code: \"$_id\"} } ])"
    },
    {
        "question_id": 440,
        "spider_question_id": 723,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the card type that is most common.",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 441,
        "spider_question_id": 724,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5",
        "question": "Show card type codes with at least 5 cards.",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 5 } } }, { $project: { card_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", cardCount: { $sum: 1 } } }, { $match: { cardCount: { $gte: 5 } } }, { $project: { card_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 5 } } }, { $project: { card_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 442,
        "spider_question_id": 725,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*) >= 5",
        "question": "What are the codes of card types that have 5 or more cards?",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 5 } } }, { $project: { card_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } }}, { $match: { count: { $gte: 5 } }}, { $project: { card_type_code: \"$_id\" }} ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 5 } } }, { $project: { card_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 443,
        "spider_question_id": 726,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_type_code , count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $addToSet: \"$customer_id\" } } }, { $project: { card_type_code: \"$_id\", count: { $size: \"$count\" } } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", numberOfCustomers: { $addToSet: \"$customer_id\" } } }, { $project: { card_type_code: \"$_id\", numberOfCustomers: { $size: \"$numberOfCustomers\" } } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", count: { $addToSet: \"$customer_id\" } } }, { $project: { card_type_code: \"$_id\", count: { $size: \"$count\" } } } ])"
    },
    {
        "question_id": 444,
        "spider_question_id": 727,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_type_code , count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "query": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", uniqueCustomers: { $addToSet: \"$customer_id\" } } }, { $project: { card_type_code: \"$_id\", uniqueCustomersCount: { $size: \"$uniqueCustomers\" } } } ])",
        "gpt4 answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", uniqueCustomers: { $addToSet: \"$customer_id\" } } }, { $project: { card_type_code: \"$_id\", customerCount: { $size: \"$uniqueCustomers\" } } } ])",
        "deepseek answer": "db.Customers_Cards.aggregate([ { $group: { _id: \"$card_type_code\", uniqueCustomers: { $addToSet: \"$customer_id\" } } }, { $project: { card_type_code: \"$_id\", uniqueCustomersCount: { $size: \"$uniqueCustomers\" } } } ])"
    },
    {
        "question_id": 445,
        "spider_question_id": 728,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_id , customer_first_name FROM Customers EXCEPT SELECT T1.customer_id , T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = 'Credit'",
        "question": "Show the customer ids and firstname without a credit card.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.card_type_code\": { $ne: \"Credit\" } } }, { $project: { customer_id: 1, customer_first_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"credit_cards\" } }, { $match: { \"credit_cards\": { $not: {$elemMatch: {card_type_code: \"Credit\"}}} } }, { $project: { customer_id: 1, customer_first_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.card_type_code\": { $ne: \"Credit\" } } }, { $project: { customer_id: 1, customer_first_name: 1 } } ])"
    },
    {
        "question_id": 446,
        "spider_question_id": 729,
        "db_id": "customers_card_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_id , customer_first_name FROM Customers EXCEPT SELECT T1.customer_id , T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = 'Credit'",
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.card_type_code\": { $ne: \"Credit\" } } }, { $project: { customer_id: 1, customer_first_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.card_type_code\": { $ne: \"Credit\" } } }, { $project: { customer_id: 1, customer_first_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"cards\" } }, { $match: { \"cards.card_type_code\": { $ne: \"Credit\" } } }, { $project: { customer_id: 1, customer_first_name: 1 } } ])"
    },
    {
        "question_id": 447,
        "spider_question_id": 737,
        "db_id": "customers_card_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "question": "How many different types of transactions are there?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\" } }, { $count: \"distinct_transaction_types\" } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\" } }, { $count: \"distinct_transaction_types\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 448,
        "spider_question_id": 738,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
        "question": "What is the average and total transaction amount?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: null, average: { $avg: \"$transaction_amount\" }, total: { $sum: \"$transaction_amount\" } } }, { $project: { average: 1, total:1 } }])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, averageAmount: { $avg: \"$transaction_amount\" }, totalAmount: { $sum: \"$transaction_amount\" } } }, { $project: { averageAmount: 1, totalAmount: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, average: { $avg: \"$transaction_amount\" }, total: { $sum: \"$transaction_amount\" } } }, { $project: { average: 1, total:1 } }])"
    },
    {
        "question_id": 449,
        "spider_question_id": 739,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(transaction_amount) , sum(transaction_amount) FROM Financial_transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: null, average: { $avg: \"$transaction_amount\" }, total: { $sum: \"$transaction_amount\" } } }, { $project: { average: 1, total:1 } }])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, avgTransactionAmount: { $avg: \"$transaction_amount\" }, totalTransactionAmount: { $sum: \"$transaction_amount\" } } }, { $project: { avgTransactionAmount: 1, totalTransactionAmount: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, average: { $avg: \"$transaction_amount\" }, total: { $sum: \"$transaction_amount\" } } }, { $project: { average: 1, total:1 } }])"
    },
    {
        "question_id": 450,
        "spider_question_id": 740,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
        "question": "Show the card type codes and the number of transactions.",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"card_id\", foreignField: \"card_id\", as: \"card_info\" } }, { $unwind: \"$card_info\" }, { $group: { _id: \"$card_info.card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"card_id\", foreignField: \"card_id\", as: \"card_info\" } }, { $unwind: \"$card_info\" }, { $group: { _id: \"$card_info.card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", number_of_transactions: \"$count\" } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"card_id\", foreignField: \"card_id\", as: \"card_info\" } }, { $unwind: \"$card_info\" }, { $group: { _id: \"$card_info.card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 451,
        "spider_question_id": 741,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.card_type_code , count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"card_id\", foreignField: \"card_id\", as: \"card_info\" } }, { $unwind: \"$card_info\" }, { $group: { _id: \"$card_info.card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"card_id\", foreignField: \"card_id\", as: \"card_info\" } }, { $unwind: \"$card_info\" }, { $group: { _id: \"$card_info.card_type_code\", transaction_count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", transaction_count: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Customers_Cards\", localField: \"card_id\", foreignField: \"card_id\", as: \"card_info\" } }, { $unwind: \"$card_info\" }, { $group: { _id: \"$card_info.card_type_code\", count: { $sum: 1 } } }, { $project: { card_type_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 452,
        "spider_question_id": 742,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Show the transaction type and the number of transactions.",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", count: { $sum: 1 } } }, { $project: { transaction_type: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", count: { $sum: 1 } } }, { $project: { transaction_type: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", count: { $sum: 1 } } }, { $project: { transaction_type: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 453,
        "spider_question_id": 743,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 454,
        "spider_question_id": 744,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", totalAmount: { $sum: \"$transaction_amount\" } } }, { $sort: { totalAmount: -1 } }, { $limit: 1 }, { $project: { transaction_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ {$group: { _id: \"$transaction_type\", totalAmount: {$sum: \"$transaction_amount\"} }}, {$sort: { totalAmount: -1 }}, {$limit: 1}, {$project: { _id: 1 }} ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", totalAmount: { $sum: \"$transaction_amount\" } } }, { $sort: { totalAmount: -1 } }, { $limit: 1 }, { $project: { transaction_type: \"$_id\" } } ])"
    },
    {
        "question_id": 455,
        "spider_question_id": 745,
        "db_id": "customers_card_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "question": "Return the type of transaction with the highest total amount.",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", totalAmount: { $sum: \"$transaction_amount\" } } }, { $sort: { totalAmount: -1 } }, { $limit: 1 }, { $project: { transaction_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", totalAmount: { $sum: \"$transaction_amount\" } }}, { $sort: { totalAmount: -1 }}, { $limit: 1 }, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$transaction_type\", totalAmount: { $sum: \"$transaction_amount\" } } }, { $sort: { totalAmount: -1 } }, { $limit: 1 }, { $project: { transaction_type: \"$_id\" } } ])"
    },
    {
        "question_id": 456,
        "spider_question_id": 746,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id",
        "question": "Show the account id and the number of transactions for each account",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", numberOfTransactions: { $sum: 1 } } }, { $project: { account_id: \"$_id\", numberOfTransactions: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 457,
        "spider_question_id": 747,
        "db_id": "customers_card_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", total_transactions: { $sum: 1 } } }, { $project: { account_id: \"$_id\", total_transactions: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 458,
        "spider_question_id": 750,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION FROM track",
        "question": "Show the name and location for all tracks.",
        "query": "db.track.find({}, { Name: 1, Location: 1 })",
        "gpt4 answer": "db.track.find({}, { Name: 1, Location: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 459,
        "spider_question_id": 751,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION FROM track",
        "question": "What are the names and locations of all tracks?",
        "query": "db.track.aggregate([ { $project: { Name: 1, Location: 1 } } ])",
        "gpt4 answer": "db.track.find({}, { Name: 1, Location: 1 })",
        "deepseek answer": "db.track.aggregate([ { $project: { Name: 1, Location: 1 } } ])"
    },
    {
        "question_id": 460,
        "spider_question_id": 752,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "query": "db.track.find({ Year_Opened: { $gt: 2000 }}, { Name: 1, Seating: 1 }).sort({ Seating: 1 })",
        "gpt4 answer": "db.track.find({ Year_Opened: { $gt: 2000 }}, { Name: 1, Seating: 1 }).sort({ Seating: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 461,
        "spider_question_id": 753,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "query": "db.track.find({ Year_Opened: { $gt: 2000 } }, { Name: 1, Seating: 1 }).sort({ Seating: 1 })",
        "gpt4 answer": "db.track.find({ Year_Opened: { $gt: 2000 } }, { Name: 1, Seating: 1 }).sort({ Seating: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 462,
        "spider_question_id": 754,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "question": "What is the name, location and seating for the most recently opened track?",
        "query": "db.track.find({}, { Name: 1, Location: 1, Seating: 1 }).sort({ Year_Opened: -1 }).limit(1)",
        "gpt4 answer": "db.track.find({}, { Name: 1, Location: 1, Seating: 1 }).sort({ Year_Opened: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 463,
        "spider_question_id": 755,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "query": "db.track.find({}, { Name: 1, Location: 1, Seating: 1 }).sort({ Year_Opened: -1 }).limit(1)",
        "gpt4 answer": "db.track.find({}, { Name: 1, Location: 1, Seating: 1 }).sort({ Year_Opened: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 464,
        "spider_question_id": 756,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(seating) , max(seating) , avg(seating) FROM track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "query": "db.track.aggregate([ { $group: { _id: null, minSeating: { $min: \"$Seating\" }, maxSeating: { $max: \"$Seating\" }, avgSeating: { $avg: \"$Seating\" } } }, { $project: { minSeating:1, maxSeating: 1, avgSeating:1 } } ])",
        "gpt4 answer": "db.track.aggregate([ { $group: { _id: null, minSeating: { $min: \"$Seating\" }, maxSeating: { $max: \"$Seating\" }, avgSeating: { $avg: \"$Seating\" } } }, { $project: { minSeating: 1, maxSeating: 1, avgSeating: 1 } } ])",
        "deepseek answer": "db.track.aggregate([ { $group: { _id: null, minSeating: { $min: \"$Seating\" }, maxSeating: { $max: \"$Seating\" }, avgSeating: { $avg: \"$Seating\" } } }, { $project: { minSeating:1, maxSeating: 1, avgSeating:1 } } ])"
    },
    {
        "question_id": 465,
        "spider_question_id": 757,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(seating) , max(seating) , avg(seating) FROM track",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "query": "db.track.aggregate([ { $group: { _id: null, minSeating: { $min: \"$Seating\" }, maxSeating: { $max: \"$Seating\" }, avgSeating: { $avg: \"$Seating\" } } }, { $project: { minSeating:1, maxSeating: 1, avgSeating:1 } } ])",
        "gpt4 answer": "db.track.aggregate([ { $group: { _id: null, minSeating: { $min: \"$Seating\" }, maxSeating: { $max: \"$Seating\" }, avgSeating: { $avg: \"$Seating\" } } }, { $project: { minSeating: 1, maxSeating: 1, avgSeating: 1 } } ])",
        "deepseek answer": "db.track.aggregate([ { $group: { _id: null, minSeating: { $min: \"$Seating\" }, maxSeating: { $max: \"$Seating\" }, avgSeating: { $avg: \"$Seating\" } } }, { $project: { minSeating:1, maxSeating: 1, avgSeating:1 } } ])"
    },
    {
        "question_id": 466,
        "spider_question_id": 766,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , CLASS , date FROM race",
        "question": "Show name, class, and date for all races.",
        "query": "db.race.find({}, { Name: 1, Class: 1, Date: 1 })",
        "gpt4 answer": "db.race.find({}, { Name: 1, Class: 1, Date: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 467,
        "spider_question_id": 767,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , CLASS , date FROM race",
        "question": "What are the names, classes, and dates for all races?",
        "query": "db.race.aggregate([ { $project: { Name: 1, Class: 1, Date: 1 } } ])",
        "gpt4 answer": "db.race.find({}, {Name: 1, Class: 1, Date: 1})",
        "deepseek answer": "db.race.aggregate([ { $project: { Name: 1, Class: 1, Date: 1 } } ])"
    },
    {
        "question_id": 468,
        "spider_question_id": 768,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT CLASS , count(*) FROM race GROUP BY CLASS",
        "question": "Show the race class and number of races in each class.",
        "query": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $project: { Class: \"$_id\", NumberOfRaces: \"$count\" } } ])",
        "gpt4 answer": "db.race.aggregate([ {$group: { _id: \"$Class\", numberOfRaces: {$sum: 1} }} ])",
        "deepseek answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $project: { Class: \"$_id\", NumberOfRaces: \"$count\" } } ])"
    },
    {
        "question_id": 469,
        "spider_question_id": 769,
        "db_id": "race_track",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT CLASS , count(*) FROM race GROUP BY CLASS",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "query": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 470,
        "spider_question_id": 770,
        "db_id": "race_track",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the race class with most number of races.",
        "query": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Class: \"$_id\" } } ])",
        "gpt4 answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Class: \"$_id\" } } ])"
    },
    {
        "question_id": 471,
        "spider_question_id": 771,
        "db_id": "race_track",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the class of races that is most common.",
        "query": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Class: \"$_id\" } } ])",
        "gpt4 answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Class: \"$_id\" } } ])"
    },
    {
        "question_id": 472,
        "spider_question_id": 772,
        "db_id": "race_track",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) >= 2",
        "question": "List the race class with at least two races.",
        "query": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Class: \"$_id\" } } ])",
        "gpt4 answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Class: \"$_id\" } } ])"
    },
    {
        "question_id": 473,
        "spider_question_id": 773,
        "db_id": "race_track",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*) >= 2",
        "question": "What are the classes of races that have two or more corresponding races?",
        "query": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Class: \"$_id\" } } ])",
        "gpt4 answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Class: \"$_id\" } } ])",
        "deepseek answer": "db.race.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Class: \"$_id\" } } ])"
    },
    {
        "question_id": 474,
        "spider_question_id": 791,
        "db_id": "coffee_shop",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , address FROM member GROUP BY address",
        "question": "Find the number of members living in each address.",
        "query": "db.member.aggregate([ { $group: { _id: \"$Address\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Address\", NumberOfMembers: { $sum: 1 } } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Address\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 475,
        "spider_question_id": 792,
        "db_id": "coffee_shop",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "query": "db.member.find( { Address: { $in: ['Harford', 'Waterbury'] }}, { Name: 1 } )",
        "gpt4 answer": "db.member.find( { Address: { $in: ['Harford', 'Waterbury'] }}, { Name: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 476,
        "spider_question_id": 793,
        "db_id": "coffee_shop",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , member_id FROM member WHERE Membership_card = 'Black' OR age < 30",
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "query": "db.member.find( { $or: [ { Membership_card: 'Black' }, { Age: { $lt: 30 } } ] }, { Member_ID: 1, Name: 1 } )",
        "gpt4 answer": "db.member.find({ $or: [{ Age: { $lt: 30 } }, { Membership_card: 'Black' }] }, { Name: 1, Member_ID: 1 })",
        "deepseek answer": "db.member.find( { $or: [ { Membership_card: 'Black' }, { Age: { $lt: 30 } } ] }, { Member_ID: 1, Name: 1 } )"
    },
    {
        "question_id": 477,
        "spider_question_id": 794,
        "db_id": "coffee_shop",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "query": "db.member.find({}, { Time_of_purchase: 1, Age: 1, Address: 1 }).sort({ Time_of_purchase: 1 })",
        "gpt4 answer": "db.member.find({}, { Time_of_purchase: 1, Age: 1, Address: 1 }).sort({ Time_of_purchase: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 478,
        "spider_question_id": 795,
        "db_id": "coffee_shop",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*) > 5",
        "question": "Which membership card has more than 5 members?",
        "query": "db.member.aggregate([ { $group: { _id: \"$Membership_card\", count: { $sum: 1 } } }, { $match: { count: { $gt: 5 } } }, { $project: { Membership_card: \"$_id\" } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Membership_card\", memberCount: { $sum: 1 } }}, { $match: { memberCount: { $gt: 5 } }}, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Membership_card\", count: { $sum: 1 } } }, { $match: { count: { $gt: 5 } } }, { $project: { Membership_card: \"$_id\" } } ])"
    },
    {
        "question_id": 479,
        "spider_question_id": 797,
        "db_id": "coffee_shop",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "query": "db.member.aggregate([ { $match: { $or: [{ Address: 'Hartford' }, { Address: 'Waterbury' }] } }, { $group: { _id: \"$Membership_card\", Hartford: { $sum: { $cond: [{ $eq: [\"$Address\", \"Hartford\"] }, 1, 0] } }, Waterbury: { $sum: { $cond: [{ $eq: [\"$Address\", \"Waterbury\"] }, 1, 0] } } } }, { $match: { Hartford: { $gt: 0 }, Waterbury: { $gt: 0 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $match: { $or: [{ Address: 'Hartford' }, { Address: 'Waterbury' }] } }, { $group: { _id: \"$Membership_card\", Hartford: { $sum: { $cond: [{ $eq: [\"$Address\", \"Hartford\"] }, 1, 0] } }, Waterbury: { $sum: { $cond: [{ $eq: [\"$Address\", \"Waterbury\"] }, 1, 0] } } } }, { $match: { Hartford: { $gt: 0 }, Waterbury: { $gt: 0 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 480,
        "spider_question_id": 798,
        "db_id": "coffee_shop",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM member WHERE address != 'Hartford'",
        "question": "How many members are not living in Hartford?",
        "query": "db.member.aggregate([ { $match: { Address: { $ne: \"Hartford\" } } }, { $count: \"TotalMembersNotInHartford\" } ])",
        "gpt4 answer": "db.member.aggregate([ { $match: { Address: { $ne: \"Hartford\" } } }, { $count: \"TotalMembersNotInHartford\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 481,
        "spider_question_id": 799,
        "db_id": "coffee_shop",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'",
        "question": "Which address do not have any member with the black membership card?",
        "query": "db.member.aggregate([ { $group: { _id: \"$Address\", hasBlackCard: { $max: { $cond: [{ $eq: [\"$Membership_card\", \"Black\"] }, 1, 0] } } } }, { $match: { hasBlackCard: 0 } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Address\", hasBlackCard: { $max: { $cond: [{ $eq: [\"$Membership_card\", \"Black\"] }, 1, 0] } } } }, { $match: { hasBlackCard: 0 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 482,
        "spider_question_id": 800,
        "db_id": "coffee_shop",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT address FROM shop ORDER BY open_year",
        "question": "Show the shop addresses ordered by their opening year.",
        "query": "db.shop.aggregate([ { $project: { Address: 1 } }, { $sort: { Open_Year: 1 } } ])",
        "gpt4 answer": "db.shop.find({}, { Address: 1}).sort({Open_Year: 1})",
        "deepseek answer": "db.shop.aggregate([ { $project: { Address: 1 } }, { $sort: { Open_Year: 1 } } ])"
    },
    {
        "question_id": 483,
        "spider_question_id": 802,
        "db_id": "coffee_shop",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT shop_id , address FROM shop WHERE score < (SELECT avg(score) FROM shop)",
        "question": "Find the id and address of the shops whose score is below the average score.",
        "query": "db.shop.aggregate([ { $group: { _id: null, avgScore: { $avg: \"$Score\" } } }, { $lookup: { from: \"shop\", let: { averageScore: \"$avgScore\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Score\", \"$$averageScore\"] } } }, { $project: { Shop_ID: 1, Address: 1 } } ], as: \"belowAvgShops\" }}, { $unwind: \"$belowAvgShops\" }, { $replaceRoot: { newRoot: \"$belowAvgShops\" } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $group: { _id: null, avgScore: { $avg: \"$Score\" } } }, { $lookup: { from: \"shop\", let: { averageScore: \"$avgScore\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Score\", \"$$averageScore\"] } } }, { $project: { Shop_ID: 1, Address: 1 } } ], as: \"belowAvgShops\" }}, { $unwind: \"$belowAvgShops\" }, { $replaceRoot: { newRoot: \"$belowAvgShops\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 484,
        "spider_question_id": 803,
        "db_id": "coffee_shop",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT address , num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "query": "db.shop.aggregate([ { $lookup: { from: \"happy_hour\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"happy_hours\" } }, { $match: { \"happy_hours\": { $size: 0 } } }, { $project: { Address: 1, Num_of_staff: 1 } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $lookup: { from: \"happy_hour\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"happy_hours\" } }, { $match: { \"happy_hours\": { $size: 0 } } }, { $project: { Address: 1, Num_of_staff: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 485,
        "spider_question_id": 804,
        "db_id": "coffee_shop",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "query": "db.shop.aggregate([ { $lookup: { from: \"happy_hour\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"happy_hour_info\" } }, { $unwind: \"$happy_hour_info\" }, { $match: { \"happy_hour_info.Month\": \"May\" } }, { $project: { Shop_ID: 1, Address: 1 } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $lookup: { from: \"happy_hour\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"happy_hour_info\" } }, { $unwind: \"$happy_hour_info\" }, { $match: { \"happy_hour_info.Month\": \"May\" } }, { $project: { Shop_ID: 1, Address: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 486,
        "spider_question_id": 805,
        "db_id": "coffee_shop",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT shop_id , count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "query": "db.happy_hour.aggregate([ { $group: { _id: \"$Shop_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.happy_hour.aggregate([ { $group: { _id: \"$Shop_ID\", numberOfHappyHours: { $sum: 1 } }}, { $sort: { numberOfHappyHours: -1 }}, { $limit: 1 }, { $project: { shop_id: \"$_id\", numberOfHappyHours: 1 }} ])",
        "deepseek answer": "db.happy_hour.aggregate([ { $group: { _id: \"$Shop_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 487,
        "spider_question_id": 806,
        "db_id": "coffee_shop",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "question": "Which month has the most happy hours?",
        "query": "db.happy_hour.aggregate([ { $group: { _id: \"$Month\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.happy_hour.aggregate([ { $group: { _id: \"$Month\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 488,
        "spider_question_id": 807,
        "db_id": "coffee_shop",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*) > 2",
        "question": "Which months have more than 2 happy hours?",
        "query": "db.happy_hour.aggregate([ { $group: { _id: \"$Month\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Month: \"$_id\" } } ])",
        "gpt4 answer": "db.happy_hour.aggregate([ { $group: { _id: \"$Month\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Month: \"$_id\" } } ])",
        "deepseek answer": "db.happy_hour.aggregate([ { $group: { _id: \"$Month\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Month: \"$_id\" } } ])"
    },
    {
        "question_id": 489,
        "spider_question_id": 814,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT FirstName , LastName FROM EMPLOYEE WHERE City = 'Calgary'",
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "query": "db.Employee.find({City: \"Calgary\"}, {FirstName: 1, LastName: 1})",
        "gpt4 answer": "db.Employee.find({ City: \"Calgary\" }, { FirstName: 1, LastName: 1 })",
        "deepseek answer": "db.Employee.find({City: \"Calgary\"}, {FirstName: 1, LastName: 1})"
    },
    {
        "question_id": 490,
        "spider_question_id": 815,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT FirstName , LastName FROM EMPLOYEE WHERE City = 'Calgary'",
        "question": "Find the full names of employees living in the city of Calgary.",
        "query": "db.Employee.find({City: \"Calgary\"}, {FirstName: 1, LastName: 1})",
        "gpt4 answer": "db.Employee.find({ City: 'Calgary' }, { FirstName: 1, LastName: 1 })",
        "deepseek answer": "db.Employee.find({City: \"Calgary\"}, {FirstName: 1, LastName: 1})"
    },
    {
        "question_id": 491,
        "spider_question_id": 820,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'",
        "question": "Find the title of all the albums of the artist 'AC/DC'.",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": \"AC/DC\" } }, { $project: { Title: 1 } } ])",
        "gpt4 answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"Artist\" } }, { $unwind: \"$Artist\" }, { $match: { \"Artist.Name\": \"AC/DC\" } }, { $project: { Title: 1 } } ])",
        "deepseek answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": \"AC/DC\" } }, { $project: { Title: 1 } } ])"
    },
    {
        "question_id": 492,
        "spider_question_id": 821,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'",
        "question": "What are the titles of albums by the artist 'AC/DC'?",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $match: { \"artist_info.Name\": \"AC/DC\" } }, { $project: { Title: 1 } } ])",
        "gpt4 answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist\" } }, { $match: { \"artist.Name\": \"AC/DC\" } }, { $project: { Title: 1 } } ])",
        "deepseek answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $match: { \"artist_info.Name\": \"AC/DC\" } }, { $project: { Title: 1 } } ])"
    },
    {
        "question_id": 493,
        "spider_question_id": 822,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Metallica'",
        "question": "Hom many albums does the artist 'Metallica' have?",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": \"Metallica\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist\" } }, { $unwind: \"$artist\" }, { $match: { \"artist.Name\": \"Metallica\" } }, { $count: \"albums\" } ])",
        "deepseek answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": \"Metallica\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 494,
        "spider_question_id": 823,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Metallica'",
        "question": "Find the number of albums by the artist 'Metallica'.",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": \"Metallica\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": 'Metallica' } }, { $count: \"number_of_albums\" } ])",
        "deepseek answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $match: { \"artist_info.Name\": \"Metallica\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 495,
        "spider_question_id": 826,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which artist has the most albums?",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: \"$artist_info.Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name:\"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: \"$artist_info.Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name:\"$_id\" } } ])"
    },
    {
        "question_id": 496,
        "spider_question_id": 827,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the artist with the greatest number of albums?",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: \"$artist_info.Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Album.aggregate([ { $lookup: { from: \"Artist\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: \"$artist_info.Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Name: \"$_id\" } } ])"
    },
    {
        "question_id": 497,
        "spider_question_id": 832,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM TRACK",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "query": "db.Track.aggregate([ { $group: { _id: null, maxDuration: { $max: \"$Milliseconds\" }, minDuration: { $min: \"$Milliseconds\" } } }, { $project: { maxDuration: 1, minDuration: 1 } } ])",
        "gpt4 answer": "db.Track.aggregate([ { $group: { _id: null, longestDuration: { $max: \"$Milliseconds\" }, shortestDuration: { $min: \"$Milliseconds\" } } }, { $project: { longestDuration: 1, shortestDuration: 1 } } ])",
        "deepseek answer": "db.Track.aggregate([ { $group: { _id: null, maxDuration: { $max: \"$Milliseconds\" }, minDuration: { $min: \"$Milliseconds\" } } }, { $project: { maxDuration: 1, minDuration: 1 } } ])"
    },
    {
        "question_id": 498,
        "spider_question_id": 833,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM TRACK",
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "query": "db.Track.aggregate([ { $group: { _id: null, maxDuration: { $max: \"$Milliseconds\" }, minDuration: { $min: \"$Milliseconds\" } } }, { $project: { maxDuration: 1, minDuration: 1 } } ])",
        "gpt4 answer": "db.Track.aggregate([ { $group: { _id: null, maxDuration: { $max: \"$Milliseconds\" }, minDuration: { $min: \"$Milliseconds\" } } }, { $project: { maxDuration: 1, minDuration: 1 } } ])",
        "deepseek answer": "db.Track.aggregate([ { $group: { _id: null, maxDuration: { $max: \"$Milliseconds\" }, minDuration: { $min: \"$Milliseconds\" } } }, { $project: { maxDuration: 1, minDuration: 1 } } ])"
    },
    {
        "question_id": 499,
        "spider_question_id": 836,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the most common genre in all tracks?",
        "query": "db.Genre.aggregate([ { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"tracks\" } }, { $project: { Name: 1, trackCount: { $size: \"$tracks\" } } }, { $sort: { trackCount: -1 } }, { $limit: 1 }",
        "gpt4 answer": ".",
        "deepseek answer": "db.Genre.aggregate([ { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"tracks\" } }, { $project: { Name: 1, trackCount: { $size: \"$tracks\" } } }, { $sort: { trackCount: -1 } }, { $limit: 1 }"
    },
    {
        "question_id": 500,
        "spider_question_id": 838,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "What is the least common media type in all tracks?",
        "query": "db.MediaType.aggregate([ { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { Name: 1} }, { $sort: { trackCount: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.MediaType.aggregate([ { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { Name: 1} }, { $sort: { trackCount: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 501,
        "spider_question_id": 839,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "What is the name of the media type that is least common across all tracks?",
        "query": "db.MediaType.aggregate([ { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { Name: 1} }, { $sort: { trackCount: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.MediaType.aggregate([ { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { Name: 1} }, { $sort: { trackCount: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 502,
        "spider_question_id": 842,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock'",
        "question": "How many tracks belong to rock genre?",
        "query": "db.Genre.aggregate([ { $match: { Name: 'Rock' } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"Tracks\" } }, { $unwind: \"$Tracks\" }, { $count: \"NumberOfRockTracks\" } ])",
        "gpt4 answer": "db.Genre.aggregate([ { $match: { Name: 'Rock' } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"Tracks\" } }, { $unwind: \"$Tracks\" }, { $count: \"NumberOfRockTracks\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 503,
        "spider_question_id": 843,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock'",
        "question": "Count the number of tracks that are part of the rock genre.",
        "query": "db.Track.aggregate([ { $lookup: { from: \"Genre\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"genre_info\" } }, { $match: { \"genre_info.Name\": \"Rock\" } }, { $count: \"rock_tracks\" } ])",
        "gpt4 answer": "db.Genre.aggregate([ { $match: { Name: 'Rock' } }, { $lookup: { from: 'Track', localField: 'GenreId', foreignField: 'GenreId', as: 'Tracks' } }, { $unwind: '$Tracks' }, { $count: 'NumberOfRockTracks' } ])",
        "deepseek answer": "db.Track.aggregate([ { $lookup: { from: \"Genre\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"genre_info\" } }, { $match: { \"genre_info.Name\": \"Rock\" } }, { $count: \"rock_tracks\" } ])"
    },
    {
        "question_id": 504,
        "spider_question_id": 846,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT FirstName , LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br'",
        "question": "What is the first name and last name of the customer that has email 'luisg@embraer.com.br'?",
        "query": "db.Customer.findOne({Email: 'luisg@embraer.com.br'}, {FirstName: 1, LastName: 1})",
        "gpt4 answer": "db.Customer.findOne({ Email: 'luisg@embraer.com.br' }, { FirstName: 1, LastName: 1 })",
        "deepseek answer": "db.Customer.findOne({Email: 'luisg@embraer.com.br'}, {FirstName: 1, LastName: 1})"
    },
    {
        "question_id": 505,
        "spider_question_id": 847,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT FirstName , LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br'",
        "question": "Find the full name of the customer with the email 'luisg@embraer.com.br'.",
        "query": "db.Customer.findOne({Email: 'luisg@embraer.com.br'}, {FirstName: 1, LastName: 1})",
        "gpt4 answer": "db.Customer.find({ Email: 'luisg@embraer.com.br' }, { FirstName: 1, LastName: 1 })",
        "deepseek answer": "db.Customer.findOne({Email: 'luisg@embraer.com.br'}, {FirstName: 1, LastName: 1})"
    },
    {
        "question_id": 506,
        "spider_question_id": 850,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.FirstName , T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'",
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "query": "db.Customer.aggregate([ { $match: { FirstName: \"Leonie\" } }, { $lookup: { from: \"Employee\", localField: \"SupportRepId\", foreignField: \"EmployeeId\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $project: { FirstName: \"$employee.FirstName\", LastName: \"$employee.LastName\" } } ])",
        "gpt4 answer": "db.Customer.aggregate([ { $match: { FirstName: 'Leonie' } }, { $lookup: { from: 'Employee', localField: 'SupportRepId', foreignField: 'EmployeeId', as: 'SupportEmployee' } }, { $unwind: '$SupportEmployee' }, { $project: { FirstName: '$SupportEmployee.FirstName', LastName: '$SupportEmployee.LastName' } } ])",
        "deepseek answer": "db.Customer.aggregate([ { $match: { FirstName: \"Leonie\" } }, { $lookup: { from: \"Employee\", localField: \"SupportRepId\", foreignField: \"EmployeeId\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $project: { FirstName: \"$employee.FirstName\", LastName: \"$employee.LastName\" } } ])"
    },
    {
        "question_id": 507,
        "spider_question_id": 852,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = '70174'",
        "question": "What city does the employee who helps the customer with postal code 70174 live in?",
        "query": "db.Customer.aggregate([ { $match: { PostalCode: \"70174\" } }, { $lookup: { from: \"Employee\", localField: \"SupportRepId\", foreignField: \"EmployeeId\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $project: { City: \"$employee.City\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customer.aggregate([ { $match: { PostalCode: \"70174\" } }, { $lookup: { from: \"Employee\", localField: \"SupportRepId\", foreignField: \"EmployeeId\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $project: { City: \"$employee.City\" } } ])"
    },
    {
        "question_id": 508,
        "spider_question_id": 853,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = '70174'",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "query": "db.Customer.aggregate([ { $match: { PostalCode: \"70174\" } }, { $lookup: { from: \"Employee\", localField: \"SupportRepId\", foreignField: \"EmployeeId\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $project: { City: \"$employee.City\" } } ])",
        "gpt4 answer": "db.Employee.aggregate([ { $lookup: { from: \"Customer\", localField: \"EmployeeId\", foreignField: \"SupportRepId\", as: \"SupportingCustomers\" } }, { $match: { \"SupportingCustomers.PostalCode\": \"70174\" } }, { $project: { City: 1 } } ])",
        "deepseek answer": "db.Customer.aggregate([ { $match: { PostalCode: \"70174\" } }, { $lookup: { from: \"Employee\", localField: \"SupportRepId\", foreignField: \"EmployeeId\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $project: { City: \"$employee.City\" } } ])"
    },
    {
        "question_id": 509,
        "spider_question_id": 855,
        "db_id": "chinook_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "question": "Find the number of different cities that employees live in.",
        "query": "db.Employee.aggregate([ { $group: { _id: \"$City\" } }, { $count: \"distinct_cities_count\" } ])",
        "gpt4 answer": "db.Employee.aggregate([ { $group: { _id: \"$City\" } }, { $count: \"distinct_cities_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 510,
        "spider_question_id": 860,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Brazil'",
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "query": "db.Customer.aggregate([ { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { Country: \"Brazil\", \"invoices.0\": { $exists: true } } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "gpt4 answer": "db.Customer.aggregate([ { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { Country: \"Brazil\", \"invoices.0\": { $exists: true } } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 511,
        "spider_question_id": 861,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Brazil'",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "query": "db.Customer.aggregate([ { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { Country: \"Brazil\", invoices: { $ne: [] } } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "gpt4 answer": "db.Customer.aggregate([ { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { Country: \"Brazil\", invoices: { $ne: [] } } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 512,
        "spider_question_id": 862,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Germany'",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "query": "db.Customer.aggregate([ { $match: { Country: \"Germany\" } }, { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { \"invoices.0\": { $exists: true } } }, { $project: { Address: 1 } } ])",
        "gpt4 answer": "db.Customer.aggregate([ { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"Invoices\" } }, { $match: { Country: \"Germany\", \"Invoices.0\": { $exists: true } } }, { $group: { _id: \"$Address\" } }, { $project: { Address: \"$_id\" } } ])",
        "deepseek answer": "db.Customer.aggregate([ { $match: { Country: \"Germany\" } }, { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { \"invoices.0\": { $exists: true } } }, { $project: { Address: 1 } } ])"
    },
    {
        "question_id": 513,
        "spider_question_id": 863,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Germany'",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "query": "db.Customer.aggregate([ { $match: { Country: \"Germany\" } }, { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { invoices: { $ne: [] } } }, { $project: { Address: 1 } } ])",
        "gpt4 answer": "db.Customer.aggregate([ { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { \"Country\": \"Germany\", \"invoices\": { $ne: [] } } }, { $group: { _id: \"$Address\" } }, { $project: { Address: \"$_id\" } } ])",
        "deepseek answer": "db.Customer.aggregate([ { $match: { Country: \"Germany\" } }, { $lookup: { from: \"Invoice\", localField: \"CustomerId\", foreignField: \"CustomerId\", as: \"invoices\" } }, { $match: { invoices: { $ne: [] } } }, { $project: { Address: 1 } } ])"
    },
    {
        "question_id": 514,
        "spider_question_id": 864,
        "db_id": "chinook_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Phone FROM EMPLOYEE",
        "question": "List the phone numbers of all employees.",
        "query": "db.Employee.find({}, {Phone: 1})",
        "gpt4 answer": "db.Employee.find({}, { Phone: 1 })",
        "deepseek answer": "db.Employee.find({}, {Phone: 1})"
    },
    {
        "question_id": 515,
        "spider_question_id": 865,
        "db_id": "chinook_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Phone FROM EMPLOYEE",
        "question": "What are the phone numbers for each employee?",
        "query": "db.Employee.find({}, {Phone: 1})",
        "gpt4 answer": "db.Employee.find({}, { Phone: 1 })",
        "deepseek answer": "db.Employee.find({}, {Phone: 1})"
    },
    {
        "question_id": 516,
        "spider_question_id": 866,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = 'AAC audio file'",
        "question": "How many tracks are in the AAC audio file media type?",
        "query": "db.MediaType.aggregate([ { $match: { Name: \"AAC audio file\" } }, { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { trackCount: { $size: \"$tracks\" } } } ])",
        "gpt4 answer": "db.MediaType.aggregate([ { $match: { Name: \"AAC audio file\" } }, { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"Tracks\" }}, { $unwind: \"$Tracks\" }, { $count: \"count\" } ])",
        "deepseek answer": "db.MediaType.aggregate([ { $match: { Name: \"AAC audio file\" } }, { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { trackCount: { $size: \"$tracks\" } } } ])"
    },
    {
        "question_id": 517,
        "spider_question_id": 867,
        "db_id": "chinook_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = 'AAC audio file'",
        "question": "Count the number of tracks that are of the media type 'AAC audio file'.",
        "query": "db.MediaType.aggregate([ { $match: { Name: \"AAC audio file\" } }, { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { count: { $size: \"$tracks\" } } } ])",
        "gpt4 answer": "db.MediaType.aggregate([ { $match: { Name: 'AAC audio file' } }, { $lookup: { from: 'Track', localField: 'MediaTypeId', foreignField: 'MediaTypeId', as: 'Tracks' } }, { $unwind: '$Tracks' }, { $count: 'NumberOfTracks' } ])",
        "deepseek answer": "db.MediaType.aggregate([ { $match: { Name: \"AAC audio file\" } }, { $lookup: { from: \"Track\", localField: \"MediaTypeId\", foreignField: \"MediaTypeId\", as: \"tracks\" } }, { $project: { count: { $size: \"$tracks\" } } } ])"
    },
    {
        "question_id": 518,
        "spider_question_id": 868,
        "db_id": "chinook_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Latin' OR T1.Name = 'Pop'",
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "query": "db.Track.aggregate([ { $lookup: { from: \"Genre\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"genre_info\" } }, { $match: { \"genre_info.Name\": { $in: [\"Latin\", \"Pop\"] } } }, { $group: { _id: null, averageDuration: { $avg: \"$Milliseconds\" } } }, { $project: { averageDuration:1 } } ])",
        "gpt4 answer": "db.Genre.aggregate([ { $match: { Name: { $in: ['Latin', 'Pop'] } } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"tracks\" }}, { $unwind: \"$tracks\" }, { $group: { _id: null, averageDuration: { $avg: \"$tracks.Milliseconds\" } }}, { $project: { averageDuration: 1 }} ])",
        "deepseek answer": "db.Track.aggregate([ { $lookup: { from: \"Genre\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"genre_info\" } }, { $match: { \"genre_info.Name\": { $in: [\"Latin\", \"Pop\"] } } }, { $group: { _id: null, averageDuration: { $avg: \"$Milliseconds\" } } }, { $project: { averageDuration:1 } } ])"
    },
    {
        "question_id": 519,
        "spider_question_id": 869,
        "db_id": "chinook_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Latin' OR T1.Name = 'Pop'",
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "query": "db.Genre.aggregate([ { $match: { $or: [ { Name: \"Latin\" }, { Name: \"Pop\" } ] } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"tracks\" } }, { $unwind: \"$tracks\" }, { $group: { _id: null, averageMilliseconds: { $avg: \"$tracks.Milliseconds\" } } }, { $project: { averageMilliseconds:1 } } ])",
        "gpt4 answer": "db.Track.aggregate([ { $lookup: { from: \"Genre\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"genre_info\" } }, { $unwind: \"$genre_info\" }, { $match: { \"genre_info.Name\": { $in: [\"Latin\", \"Pop\"] } } }, { $group: { _id: null, AvgMilliseconds: { $avg: \"$Milliseconds\" } } }, { $project: { AvgMilliseconds: 1 } } ])",
        "deepseek answer": "db.Genre.aggregate([ { $match: { $or: [ { Name: \"Latin\" }, { Name: \"Pop\" } ] } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"tracks\" } }, { $unwind: \"$tracks\" }, { $group: { _id: null, averageMilliseconds: { $avg: \"$tracks.Milliseconds\" } } }, { $project: { averageMilliseconds:1 } } ])"
    },
    {
        "question_id": 520,
        "spider_question_id": 882,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Pop'",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "query": "db.Genre.aggregate([ { $match: { Name: 'Pop' } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"Tracks\" } }, { $unwind: \"$Tracks\" }, { $group: { _id: null, LongestTrackDuration: { $max: \"$Tracks.Milliseconds\" }, ShortestTrackDuration: { $min: \"$Tracks.Milliseconds\" } } }, { $project: { LongestTrackDuration: 1, ShortestTrackDuration: 1 } } ])",
        "gpt4 answer": "db.Genre.aggregate([ { $match: { Name: 'Pop' } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"Tracks\" } }, { $unwind: \"$Tracks\" }, { $group: { _id: null, LongestTrackDuration: { $max: \"$Tracks.Milliseconds\" }, ShortestTrackDuration: { $min: \"$Tracks.Milliseconds\" } } }, { $project: { LongestTrackDuration: 1, ShortestTrackDuration: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 521,
        "spider_question_id": 883,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(Milliseconds) , min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Pop'",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "query": "db.Genre.aggregate([ { $match: { Name: \"Pop\" } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"pop_tracks\" } }, { $unwind: \"$pop_tracks\" }, { $group: { _id: null, max_milliseconds: { $max: \"$pop_tracks.Milliseconds\" }, min_milliseconds: { $min: \"$pop_tracks.Milliseconds\" } } }, { $project: { max_milliseconds:1, min_milliseconds:1 } } ])",
        "gpt4 answer": "db.Genre.aggregate([ { $match: { Name: 'Pop' } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"PopTracks\" } }, { $unwind: \"$PopTracks\" }, { $group: { _id: null, maxMilliseconds: { $max: \"$PopTracks.Milliseconds\" }, minMilliseconds: { $min: \"$PopTracks.Milliseconds\" } } }, { $project: { maxMilliseconds: 1, minMilliseconds: 1 } } ])",
        "deepseek answer": "db.Genre.aggregate([ { $match: { Name: \"Pop\" } }, { $lookup: { from: \"Track\", localField: \"GenreId\", foreignField: \"GenreId\", as: \"pop_tracks\" } }, { $unwind: \"$pop_tracks\" }, { $group: { _id: null, max_milliseconds: { $max: \"$pop_tracks.Milliseconds\" }, min_milliseconds: { $min: \"$pop_tracks.Milliseconds\" } } }, { $project: { max_milliseconds:1, min_milliseconds:1 } } ])"
    },
    {
        "question_id": 522,
        "spider_question_id": 889,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "question": "Cound the number of artists who have not released an album.",
        "query": "db.Artist.aggregate([ { $lookup: { from: \"Album\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"Albums\" } }, { $match: { Albums: { $size: 0 } } }, { $count: \"NumberOfArtistsWithoutAlbums\" } ])",
        "gpt4 answer": "db.Artist.aggregate([ { $lookup: { from: \"Album\", localField: \"ArtistId\", foreignField: \"ArtistId\", as: \"Albums\" } }, { $match: { Albums: { $size: 0 } } }, { $count: \"NumberOfArtistsWithoutAlbums\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 523,
        "spider_question_id": 890,
        "db_id": "chinook_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "query": "db.Album.aggregate([ { $lookup: { from: \"Track\", localField: \"AlbumId\", foreignField: \"AlbumId\", as: \"tracks\" } }, { $unwind: \"$tracks\" }, { $lookup: { from: \"Genre\", localField: \"tracks.GenreId\", foreignField: \"GenreId\", as: \"genres\" } }, { $unwind: \"$genres\" }, { $group: { _id: \"$AlbumId\", Title: { $first: \"$Title\" }, Genres: { $addToSet: \"$genres.Name\" } } }, { $match: { Genres: { $all: [\"Reggae\", \"Rock\"] } } }, { $project: { Title: 1 } } ])",
        "gpt4 answer": "db.Album.aggregate([ { $lookup: { from: \"Track\", localField: \"AlbumId\", foreignField: \"AlbumId\", as: \"tracks\" } }, { $unwind: \"$tracks\" }, { $lookup: { from: \"Genre\", localField: \"tracks.GenreId\", foreignField: \"GenreId\", as: \"genres\" } }, { $unwind: \"$genres\" }, { $group: { _id: \"$AlbumId\", Title: { $first: \"$Title\" }, Genres: { $addToSet: \"$genres.Name\" } } }, { $match: { Genres: { $all: [\"Reggae\", \"Rock\"] } } }, { $project: { Title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 524,
        "spider_question_id": 892,
        "db_id": "insurance_fnol",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_phone FROM available_policies",
        "question": "Find all the phone numbers.",
        "query": "db.Available_Policies.find({}, { Customer_Phone: 1 })",
        "gpt4 answer": "db.Available_Policies.find({}, { Customer_Phone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 525,
        "spider_question_id": 894,
        "db_id": "insurance_fnol",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = 'Life Insurance'",
        "question": "What are the customer phone numbers under the policy 'Life Insurance'?",
        "query": "db.Available_Policies.find({ policy_type_code: 'Life Insurance' }, { Customer_Phone: 1 })",
        "gpt4 answer": "db.Available_Policies.find({ policy_type_code: 'Life Insurance' }, { Customer_Phone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 526,
        "spider_question_id": 895,
        "db_id": "insurance_fnol",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = 'Life Insurance'",
        "question": "What are the phone numbers of customers using the policy with the code 'Life Insurance'?",
        "query": "db.Available_Policies.find({policy_type_code: 'Life Insurance'}, {Customer_Phone: 1})",
        "gpt4 answer": "db.Available_Policies.find({ policy_type_code: 'Life Insurance' }, { Customer_Phone: 1 })",
        "deepseek answer": "db.Available_Policies.find({policy_type_code: 'Life Insurance'}, {Customer_Phone: 1})"
    },
    {
        "question_id": 527,
        "spider_question_id": 896,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which policy type has the most records in the database?",
        "query": "db.Available_Policies.aggregate([ { $group: { _id: \"$policy_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Available_Policies.aggregate([ { $group: { _id: \"$policy_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 528,
        "spider_question_id": 898,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "question": "What are all the customer phone numbers under the most popular policy type?",
        "query": "db.Available_Policies.aggregate([ { $group: { _id: \"$policy_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Available_Policies\", localField: \"_id\", foreignField: \"policy_type_code\", as: \"popular_policies\" } }, { $unwind: \"$popular_policies\" }, { $replaceRoot: { newRoot: \"$popular_policies\" } }, { $project: { Customer_Phone: 1 } } ])",
        "gpt4 answer": "db.Available_Policies.aggregate([ { $group: { _id: \"$policy_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Available_Policies\", localField: \"_id\", foreignField: \"policy_type_code\", as: \"popular_policies\" } }, { $unwind: \"$popular_policies\" }, { $replaceRoot: { newRoot: \"$popular_policies\" } }, { $project: { Customer_Phone: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 529,
        "spider_question_id": 904,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2",
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "query": "db.First_Notification_of_Loss.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_ID\", foreignField: \"Service_ID\", as: \"service_info\" } }, { $unwind: \"$service_info\" }, { $group: { _id: \"$service_info.Service_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { service_name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.First_Notification_of_Loss.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_ID\", foreignField: \"Service_ID\", as: \"service_info\" } }, { $unwind: \"$service_info\" }, { $group: { _id: \"$service_info.Service_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { service_name: \"$_id\" } } ])"
    },
    {
        "question_id": 530,
        "spider_question_id": 905,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "query": "db.First_Notification_of_Loss.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_ID\", foreignField: \"Service_ID\", as: \"service_info\" } }, { $unwind: \"$service_info\" }, { $group: { _id: \"$service_info.Service_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { service_name: \"$_id\" } } ])",
        "gpt4 answer": "db.First_Notification_of_Loss.aggregate([ { $group: { _id: \"$Service_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $lookup: { from: \"Services\", localField: \"_id\", foreignField: \"Service_ID\", as: \"service_info\" } }, { $unwind: \"$service_info\" }, { $project: { Service_name: \"$service_info.Service_name\" } } ])",
        "deepseek answer": "db.First_Notification_of_Loss.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_ID\", foreignField: \"Service_ID\", as: \"service_info\" } }, { $unwind: \"$service_info\" }, { $group: { _id: \"$service_info.Service_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { service_name: \"$_id\" } } ])"
    },
    {
        "question_id": 531,
        "spider_question_id": 906,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "query": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"settlements\" } }, { $unwind: \"$settlements\" }, { $group: { _id: \"$Claim_ID\", Effective_Date: { $first: \"$Effective_Date\" }, totalSettlement: { $sum: \"$settlements.Settlement_Amount\" } } }, { $sort: { totalSettlement: -1 } }, { $limit: 1 }, { $project: { Effective_Date: 1 } } ])",
        "gpt4 answer": "db.Settlements.aggregate([ { $group: { _id: \"$Claim_ID\", TotalSettlementAmount: { $sum: \"$Settlement_Amount\" } } }, { $sort: { TotalSettlementAmount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Claims\", localField: \"_id\", foreignField: \"Claim_ID\", as: \"ClaimDetails\" } }, { $unwind: \"$ClaimDetails\" }, { $project: { Effective_Date: \"$ClaimDetails.Effective_Date\" } } ])",
        "deepseek answer": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"settlements\" } }, { $unwind: \"$settlements\" }, { $group: { _id: \"$Claim_ID\", Effective_Date: { $first: \"$Effective_Date\" }, totalSettlement: { $sum: \"$settlements.Settlement_Amount\" } } }, { $sort: { totalSettlement: -1 } }, { $limit: 1 }, { $project: { Effective_Date: 1 } } ])"
    },
    {
        "question_id": 532,
        "spider_question_id": 907,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.",
        "query": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"settlements\" } }, { $unwind: \"$settlements\" }, { $group: { _id: \"$Claim_ID\", Effective_Date: { $first: \"$Effective_Date\" }, totalSettlementAmount: { $sum: \"$settlements.Settlement_Amount\" } } }, { $sort: { totalSettlementAmount: -1 } }, { $limit: 1 }, { $project: { Effective_Date: 1 } } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"SettlementsInfo\" } }, { $unwind: \"$SettlementsInfo\" }, { $group: { _id: \"$Claim_ID\", TotalSettlementAmount: { $sum: \"$SettlementsInfo.Settlement_Amount\" }, EffectiveDate: { $first: \"$Effective_Date\" } } }, { $sort: { TotalSettlementAmount: -1 } }, { $limit: 1 }, { $project: { EffectiveDate: 1 } } ])",
        "deepseek answer": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"settlements\" } }, { $unwind: \"$settlements\" }, { $group: { _id: \"$Claim_ID\", Effective_Date: { $first: \"$Effective_Date\" }, totalSettlementAmount: { $sum: \"$settlements.Settlement_Amount\" } } }, { $sort: { totalSettlementAmount: -1 } }, { $limit: 1 }, { $project: { Effective_Date: 1 } } ])"
    },
    {
        "question_id": 533,
        "spider_question_id": 908,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Dayana Robel'",
        "question": "How many policies are listed for the customer named 'Dayana Robel'?",
        "query": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $project: { policies: { $size: \"$policies\" } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { Customer_name: 'Dayana Robel' } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $project: { numberOfPolicies: { $size: \"$policies\" } } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $project: { policies: { $size: \"$policies\" } } } ])"
    },
    {
        "question_id": 534,
        "spider_question_id": 909,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Dayana Robel'",
        "question": "Count the total number of policies used by the customer named 'Dayana Robel'.",
        "query": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $group: { _id: null, totalPolicies: { $sum: 1 } } }, { $project: { totalPolicies:1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { Customer_name: 'Dayana Robel' } }, { $lookup: { from: 'Customers_Policies', localField: 'Customer_ID', foreignField: 'Customer_ID', as: 'policies' } }, { $unwind: '$policies' }, { $group: { _id: null, totalPolicies: { $sum: 1 } } }, { $project: { totalPolicies: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $group: { _id: null, totalPolicies: { $sum: 1 } } }, { $project: { totalPolicies:1 } } ])"
    },
    {
        "question_id": 535,
        "spider_question_id": 910,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the customer who has the most policies listed?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" }}, { $unwind: \"$policies\" }, { $group: { _id: \"$Customer_name\", policyCount: { $sum: 1 } }}, { $sort: { policyCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" }}, { $unwind: \"$policies\" }, { $group: { _id: \"$Customer_name\", policyCount: { $sum: 1 } }}, { $sort: { policyCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 536,
        "spider_question_id": 911,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which customer uses the most policies? Give me the customer name.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $group: { _id: \"$Customer_name\", policyCount: { $sum: 1 } } }, { $sort: { policyCount: -1 } }, { $limit: 1 }, { $project: { Customer_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $group: { _id: \"$Customer_name\", policyCount: { $sum: 1 } } }, { $sort: { policyCount: -1 } }, { $limit: 1 }, { $project: { Customer_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 537,
        "spider_question_id": 912,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = 'Dayana Robel'",
        "question": "What are all the policy types of the customer named 'Dayana Robel'?",
        "query": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $lookup: { from: \"Available_Policies\", localField: \"customer_policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"available_policies\" } }, { $unwind: \"$available_policies\" }, { $group: { _id: \"$available_policies.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $lookup: { from: \"Available_Policies\", localField: \"customer_policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"available_policies\" } }, { $unwind: \"$available_policies\" }, { $group: { _id: \"$available_policies.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 538,
        "spider_question_id": 913,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = 'Dayana Robel'",
        "question": "Tell me the types of the policy used by the customer named 'Dayana Robel'.",
        "query": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $lookup: { from: \"Available_Policies\", localField: \"customer_policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"available_policies\" } }, { $unwind: \"$available_policies\" }, { $group: { _id: \"$available_policies.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { Customer_name: 'Dayana Robel' } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $lookup: { from: \"Available_Policies\", localField: \"customer_policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $group: { _id: \"$policies.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { Customer_name: \"Dayana Robel\" } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $lookup: { from: \"Available_Policies\", localField: \"customer_policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"available_policies\" } }, { $unwind: \"$available_policies\" }, { $group: { _id: \"$available_policies.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 539,
        "spider_question_id": 915,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "question": "List all the policy types used by the customer enrolled in the most policies.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $addFields: { policiesCount: { $size: \"$policies\" } } }, { $sort: { policiesCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Available_Policies\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"policy_types\" } }, { $unwind: \"$policy_types\" }, { $group: { _id: \"$policy_types.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $addFields: { policiesCount: { $size: \"$policies\" } } }, { $sort: { policiesCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Available_Policies\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"policy_types\" } }, { $unwind: \"$policy_types\" }, { $group: { _id: \"$policy_types.policy_type_code\" } }, { $project: { policy_type_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 540,
        "spider_question_id": 916,
        "db_id": "insurance_fnol",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT service_name FROM services ORDER BY service_name",
        "question": "List all the services in the alphabetical order.",
        "query": "db.Services.find({}, { Service_name: 1 }).sort({ Service_name: 1 })",
        "gpt4 answer": "db.Services.find({}, { Service_name: 1 }).sort({ Service_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 541,
        "spider_question_id": 917,
        "db_id": "insurance_fnol",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT service_name FROM services ORDER BY service_name",
        "question": "Give me a list of all the service names sorted alphabetically.",
        "query": "db.Services.find({}, { Service_name: 1 }).sort({ Service_name: 1 })",
        "gpt4 answer": "db.Services.find({}, { Service_name: 1 }).sort({ Service_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 542,
        "spider_question_id": 920,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $match: { \"fnol\": { $size: 0 } } }, { $project: { Customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"FNOL\" } }, { $match: { FNOL: { $size: 0 } } }, { $project: { Customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $match: { \"fnol\": { $size: 0 } } }, { $project: { Customer_name: 1 } } ])"
    },
    {
        "question_id": 543,
        "spider_question_id": 921,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $match: { \"fnol\": { $size: 0 } } }, { $project: { Customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"FNOL\" } }, { $match: { FNOL: { $size: 0 } } }, { $project: { Customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $match: { \"fnol\": { $size: 0 } } }, { $project: { Customer_name: 1 } } ])"
    },
    {
        "question_id": 544,
        "spider_question_id": 922,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'Close a policy' OR t3.service_name = 'Upgrade a policy'",
        "question": "Find the names of customers who have used either the service 'Close a policy' or the service 'Upgrade a policy'.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $unwind: \"$fnol\" }, { $lookup: { from: \"Services\", localField: \"fnol.Service_ID\", foreignField: \"Service_ID\", as: \"service\" } }, { $unwind: \"$service\" }, { $match: { \"service.Service_name\": { $in: [\"Close a policy\", \"Upgrade a policy\"] } } }, { $project: { Customer_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $unwind: \"$fnol\" }, { $lookup: { from: \"Services\", localField: \"fnol.Service_ID\", foreignField: \"Service_ID\", as: \"service\" } }, { $unwind: \"$service\" }, { $match: { \"service.Service_name\": { $in: [\"Close a policy\", \"Upgrade a policy\"] } } }, { $project: { Customer_name: 1 } } ])"
    },
    {
        "question_id": 545,
        "spider_question_id": 923,
        "db_id": "insurance_fnol",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'Close a policy' OR t3.service_name = 'Upgrade a policy'",
        "question": "Which customers have used the service named 'Close a policy' or 'Upgrade a policy'? Give me the customer names.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $unwind: \"$fnol\" }, { $lookup: { from: \"Services\", localField: \"fnol.Service_ID\", foreignField: \"Service_ID\", as: \"service\" } }, { $unwind: \"$service\" }, { $match: { \"service.Service_name\": { $in: [\"Close a policy\", \"Upgrade a policy\"] } } }, { $project: { Customer_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"First_Notification_of_Loss\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"fnol\" } }, { $unwind: \"$fnol\" }, { $lookup: { from: \"Services\", localField: \"fnol.Service_ID\", foreignField: \"Service_ID\", as: \"service\" } }, { $unwind: \"$service\" }, { $match: { \"service.Service_name\": { $in: [\"Close a policy\", \"Upgrade a policy\"] } } }, { $project: { Customer_name: 1 } } ])"
    },
    {
        "question_id": 546,
        "spider_question_id": 926,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'",
        "question": "Find the IDs of customers whose name contains 'Diana'.",
        "query": "db.Customers.find({ Customer_name: /Diana/ }, { Customer_ID: 1 })",
        "gpt4 answer": "db.Customers.find({ Customer_name: /Diana/ }, { Customer_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 547,
        "spider_question_id": 927,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'",
        "question": "What are the IDs of customers who have 'Diana' in part of their names?",
        "query": "db.Customers.find({Customer_name: {$regex: /Diana/}}, {Customer_ID: 1})",
        "gpt4 answer": "db.Customers.find({ Customer_name: /Diana/ }, { Customer_ID: 1 })",
        "deepseek answer": "db.Customers.find({Customer_name: {$regex: /Diana/}}, {Customer_ID: 1})"
    },
    {
        "question_id": 548,
        "spider_question_id": 928,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(settlement_amount) , min(settlement_amount) FROM settlements",
        "question": "What are the maximum and minimum settlement amount on record?",
        "query": "db.Settlements.aggregate([ { $group: { _id: null, MaxSettlementAmount: { $max: \"$Settlement_Amount\" }, MinSettlementAmount: { $min: \"$Settlement_Amount\" } } }, { $project: { MaxSettlementAmount: 1, MinSettlementAmount: 1 } } ])",
        "gpt4 answer": "db.Settlements.aggregate([ { $group: { _id: null, MaxSettlementAmount: { $max: \"$Settlement_Amount\" }, MinSettlementAmount: { $min: \"$Settlement_Amount\" } } }, { $project: { MaxSettlementAmount: 1, MinSettlementAmount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 549,
        "spider_question_id": 929,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(settlement_amount) , min(settlement_amount) FROM settlements",
        "question": "Find the maximum and minimum settlement amount.",
        "query": "db.Settlements.aggregate([ { $group: { _id: null, maxSettlementAmount: { $max: \"$Settlement_Amount\" }, minSettlementAmount: { $min: \"$Settlement_Amount\" } } }, { $project: { maxSettlementAmount: 1, minSettlementAmount: 1 } } ])",
        "gpt4 answer": "db.Settlements.aggregate([ { $group: { _id: null, maxSettlementAmount: { $max: \"$Settlement_Amount\" }, minSettlementAmount: { $min: \"$Settlement_Amount\" } } }, { $project: { maxSettlementAmount: 1, minSettlementAmount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 550,
        "spider_question_id": 930,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , customer_name FROM customers ORDER BY customer_id ASC",
        "question": "List all the customers in increasing order of IDs.",
        "query": "db.Customers.find({}, { Customer_ID: 1, Customer_name: 1}).sort({Customer_ID: 1})",
        "gpt4 answer": "db.Customers.find({}, { Customer_ID: 1, Customer_name: 1}).sort({Customer_ID: 1})",
        "deepseek answer": "db.Customers.find({}, { Customer_ID: 1, Customer_name: 1}).sort({Customer_ID: 1})"
    },
    {
        "question_id": 551,
        "spider_question_id": 931,
        "db_id": "insurance_fnol",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_id , customer_name FROM customers ORDER BY customer_id ASC",
        "question": "What is the ordered list of customer ids?",
        "query": "db.Customers.find({}, { Customer_ID: 1, Customer_name: 1}).sort({Customer_ID: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.find({}, { Customer_ID: 1, Customer_name: 1}).sort({Customer_ID: 1})"
    },
    {
        "question_id": 552,
        "spider_question_id": 932,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE '%Diana%'",
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains 'Diana'",
        "query": "db.Customers.aggregate([ { $match: { Customer_name: { $regex: /Diana/ } } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $project: { Date_Opened: \"$customer_policies.Date_Opened\", Date_Closed: \"$customer_policies.Date_Closed\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { Customer_name: /Diana/ } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" }}, { $unwind: \"$policies\" }, { $project: { \"date_opened\": \"$policies.Date_Opened\", \"date_closed\": \"$policies.Date_Closed\" }} ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { Customer_name: { $regex: /Diana/ } } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $project: { Date_Opened: \"$customer_policies.Date_Opened\", Date_Closed: \"$customer_policies.Date_Closed\" } } ])"
    },
    {
        "question_id": 553,
        "spider_question_id": 933,
        "db_id": "insurance_fnol",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t2.date_opened , t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE '%Diana%'",
        "question": "What are the open and close dates of all the policies used by the customer who have 'Diana' in part of their names?",
        "query": "db.Customers.aggregate([ { $match: { Customer_name: { $regex: /Diana/, $options: \"i\" } } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $project: { Date_Opened: \"$customer_policies.Date_Opened\", Date_Closed: \"$customer_policies.Date_Closed\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { Customer_name: { $regex: \"Diana\", $options: \"i\" } } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policy_info\" } }, { $unwind: \"$policy_info\" }, { $project: { date_opened: \"$policy_info.Date_Opened\", date_closed: \"$policy_info.Date_Closed\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { Customer_name: { $regex: /Diana/, $options: \"i\" } } }, { $lookup: { from: \"Customers_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_policies\" } }, { $unwind: \"$customer_policies\" }, { $project: { Date_Opened: \"$customer_policies.Date_Opened\", Date_Closed: \"$customer_policies.Date_Closed\" } } ])"
    },
    {
        "question_id": 554,
        "spider_question_id": 936,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM enzyme ORDER BY name DESC",
        "question": "List the name of enzymes in descending lexicographical order.",
        "query": "db.enzyme.find({}, { name: 1}).sort({name: -1})",
        "gpt4 answer": "db.enzyme.find({}, { name: 1 }).sort({ name: -1 })",
        "deepseek answer": "db.enzyme.find({}, { name: 1}).sort({name: -1})"
    },
    {
        "question_id": 555,
        "spider_question_id": 937,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM enzyme ORDER BY name DESC",
        "question": "What are the names of enzymes in descending order?",
        "query": "db.enzyme.find({}, { name: 1}).sort({name: -1})",
        "gpt4 answer": "db.enzyme.find({}, { name: 1 }).sort({ name: -1 })",
        "deepseek answer": "db.enzyme.find({}, { name: 1}).sort({name: -1})"
    },
    {
        "question_id": 556,
        "spider_question_id": 938,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION FROM enzyme",
        "question": "List the names and the locations that the enzymes can make an effect.",
        "query": "db.enzyme.find( {}, { name: 1, Location: 1 } )",
        "gpt4 answer": "db.enzyme.find( {}, { name: 1, Location: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 557,
        "spider_question_id": 939,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION FROM enzyme",
        "question": "What are the names and locations of all enzymes listed?",
        "query": "db.enzyme.find({}, { name: 1, Location: 1 })",
        "gpt4 answer": "db.enzyme.find({}, { name: 1, Location: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 558,
        "spider_question_id": 940,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(OMIM) FROM enzyme",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "query": "db.enzyme.aggregate([ { $group: { _id: null, maxOMIM: { $max: \"$OMIM\" } } }, { $project: { maxOMIM: 1 } } ])",
        "gpt4 answer": "db.enzyme.aggregate([ { $group: { _id: null, maxOMIM: { $max: \"$OMIM\" } } }, { $project: { maxOMIM: 1 } } ])",
        "deepseek answer": "db.enzyme.aggregate([ { $group: { _id: null, maxOMIM: { $max: \"$OMIM\" } } }, { $project: { maxOMIM: 1 } } ])"
    },
    {
        "question_id": 559,
        "spider_question_id": 941,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(OMIM) FROM enzyme",
        "question": "What is the maximum OMIM value in the database?",
        "query": "db.enzyme.aggregate([ { $group: { _id: null, maxOMIM: { $max: \"$OMIM\" } } }, { $project: { maxOMIM: 1 } } ])",
        "gpt4 answer": "db.enzyme.aggregate([ { $group: { _id: null, maxOMIM: { $max: \"$OMIM\" } } }, { $project: { maxOMIM: 1 } } ])",
        "deepseek answer": "db.enzyme.aggregate([ { $group: { _id: null, maxOMIM: { $max: \"$OMIM\" } } }, { $project: { maxOMIM: 1 } } ])"
    },
    {
        "question_id": 560,
        "spider_question_id": 942,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "query": "db.enzyme.find({ Location: \"Cytosol\" }, { Product: 1, Chromosome: 1, Porphyria: 1 })",
        "gpt4 answer": "db.enzyme.find({Location: 'Cytosol'}, {Product: 1, Chromosome: 1, Porphyria: 1})",
        "deepseek answer": "db.enzyme.find({ Location: \"Cytosol\" }, { Product: 1, Chromosome: 1, Porphyria: 1 })"
    },
    {
        "question_id": 561,
        "spider_question_id": 943,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
        "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
        "query": "db.enzyme.find({Location: 'Cytosol'}, { Product: 1, Chromosome: 1, Porphyria: 1})",
        "gpt4 answer": "db.enzyme.find({ Location: 'Cytosol' }, { Product: 1, Chromosome: 1, Porphyria: 1 })",
        "deepseek answer": "db.enzyme.find({Location: 'Cytosol'}, { Product: 1, Chromosome: 1, Porphyria: 1})"
    },
    {
        "question_id": 562,
        "spider_question_id": 944,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "db.enzyme.find({ Product: { $ne: 'Heme' } }, { name: 1 })",
        "gpt4 answer": "db.enzyme.find({ Product: { $ne: 'Heme' } }, { name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 563,
        "spider_question_id": 945,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "query": "db.enzyme.find({Product: {$ne: 'Heme'}}, { name: 1})",
        "gpt4 answer": "db.enzyme.find({ Product: { $ne: 'Heme' } }, { name: 1 })",
        "deepseek answer": "db.enzyme.find({Product: {$ne: 'Heme'}}, { name: 1})"
    },
    {
        "question_id": 564,
        "spider_question_id": 946,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , trade_name FROM medicine WHERE FDA_approved = 'Yes'",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "query": "db.medicine.find({ FDA_approved: \"Yes\" }, { name: 1, Trade_Name: 1 })",
        "gpt4 answer": "db.medicine.find({ FDA_approved: \"Yes\" }, { name: 1, Trade_Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 565,
        "spider_question_id": 947,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , trade_name FROM medicine WHERE FDA_approved = 'Yes'",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "query": "db.medicine.find({ FDA_approved: \"Yes\" }, { name: 1, Trade_Name: 1 })",
        "gpt4 answer": "db.medicine.find({ FDA_approved: \"Yes\" }, { name: 1, Trade_Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 566,
        "spider_question_id": 948,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "query": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $unwind: \"$interactions\" }, { $lookup: { from: \"medicine\", localField: \"interactions.medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $unwind: \"$medicine\" }, { $match: { \"medicine.name\": \"Amisulpride\", \"interactions.interaction_type\": \"inhibitor\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $unwind: \"$interactions\" }, { $lookup: { from: \"medicine\", localField: \"interactions.medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $unwind: \"$medicine\" }, { $match: { \"medicine.name\": \"Amisulpride\", \"interactions.interaction_type\": \"inhibitor\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 567,
        "spider_question_id": 949,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
        "question": "What are the names of the enzymes used in the medicine Amisulpride that acts as inhibitors?",
        "query": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $unwind: \"$interactions\" }, { $lookup: { from: \"medicine\", localField: \"interactions.medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $unwind: \"$medicine\" }, { $match: { \"medicine.name\": \"Amisulpride\", \"interactions.interaction_type\": \"inhibitor\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $unwind: \"$interactions\" }, { $lookup: { from: \"medicine\", localField: \"interactions.medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $unwind: \"$medicine\" }, { $match: { \"medicine.name\": \"Amisulpride\", \"interactions.interaction_type\": \"inhibitor\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 568,
        "spider_question_id": 950,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "query": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])",
        "deepseek answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])"
    },
    {
        "question_id": 569,
        "spider_question_id": 951,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "query": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])",
        "deepseek answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])"
    },
    {
        "question_id": 570,
        "spider_question_id": 956,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "db.medicine_enzyme_interaction.aggregate([ { $lookup: { from: \"medicine\", localField: \"medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $lookup: { from: \"enzyme\", localField: \"enzyme_id\", foreignField: \"id\", as: \"enzyme\" } }, { $match: { \"enzyme.name\": \"ALA synthase\", \"medicine.name\": \"Aripiprazole\" } }, { $project: { interaction_type: 1 } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $match: { name: 'Aripiprazole' } }, { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interaction\" } }, { $unwind: \"$interaction\" }, { $lookup: { from: \"enzyme\", localField: \"interaction.enzyme_id\", foreignField: \"id\", as: \"enzyme\" } }, { $unwind: \"$enzyme\" }, { $match: { \"enzyme.name\": 'ALA synthase' } }, { $project: { interaction_type: \"$interaction.interaction_type\" } } ])",
        "deepseek answer": "db.medicine_enzyme_interaction.aggregate([ { $lookup: { from: \"medicine\", localField: \"medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $lookup: { from: \"enzyme\", localField: \"enzyme_id\", foreignField: \"id\", as: \"enzyme\" } }, { $match: { \"enzyme.name\": \"ALA synthase\", \"medicine.name\": \"Aripiprazole\" } }, { $project: { interaction_type: 1 } } ])"
    },
    {
        "question_id": 571,
        "spider_question_id": 957,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "db.medicine_enzyme_interaction.aggregate([ { $lookup: { from: \"medicine\", localField: \"medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $lookup: { from: \"enzyme\", localField: \"enzyme_id\", foreignField: \"id\", as: \"enzyme\" } }, { $match: { \"enzyme.name\": \"ALA synthase\", \"medicine.name\": \"Aripiprazole\" } }, { $project: { interaction_type: 1 } } ])",
        "gpt4 answer": "db.medicine_enzyme_interaction.aggregate([ { $lookup: { from: \"medicine\", localField: \"medicine_id\", foreignField: \"id\", as: \"medicine_info\" } }, { $lookup: { from: \"enzyme\", localField: \"enzyme_id\", foreignField: \"id\", as: \"enzyme_info\" } }, { $match: { \"medicine_info.name\": \"Aripiprazole\", \"enzyme_info.name\": \"ALA synthase\" } }, { $project: { interaction_type: 1 } } ])",
        "deepseek answer": "db.medicine_enzyme_interaction.aggregate([ { $lookup: { from: \"medicine\", localField: \"medicine_id\", foreignField: \"id\", as: \"medicine\" } }, { $lookup: { from: \"enzyme\", localField: \"enzyme_id\", foreignField: \"id\", as: \"enzyme\" } }, { $match: { \"enzyme.name\": \"ALA synthase\", \"medicine.name\": \"Aripiprazole\" } }, { $project: { interaction_type: 1 } } ])"
    },
    {
        "question_id": 572,
        "spider_question_id": 958,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "query": "db.medicine_enzyme_interaction.aggregate([ { $group: { _id: \"$interaction_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.medicine_enzyme_interaction.aggregate([ { $group: { _id: \"$interaction_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.medicine_enzyme_interaction.aggregate([ { $group: { _id: \"$interaction_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 573,
        "spider_question_id": 959,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT interaction_type , count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "query": "db.medicine_enzyme_interaction.aggregate([ { $group: { _id: \"$interaction_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.medicine_enzyme_interaction.aggregate([ { $group: { _id: \"$interaction_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.medicine_enzyme_interaction.aggregate([ { $group: { _id: \"$interaction_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 574,
        "spider_question_id": 963,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "question": "What is the count of enzymes without any interactions?",
        "query": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $match: { interactions: { $size: 0 } } }, { $count: \"no_interaction_count\" } ])",
        "gpt4 answer": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $match: { interactions: { $size: 0 } } }, { $count: \"no_interaction_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 575,
        "spider_question_id": 964,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "query": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $project: { id: 1, Trade_Name: 1, numberOfInteractions: { $size: \"$interactions\" } } }, { $match: { numberOfInteractions: { $gte: 3 } } }, { $project: { id: 1, Trade_Name: 1 } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $project: { id: 1, Trade_Name: 1, numberOfInteractions: { $size: \"$interactions\" } } }, { $match: { numberOfInteractions: { $gte: 3 } } }, { $project: { id: 1, Trade_Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 576,
        "spider_question_id": 965,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "query": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.2\": { $exists: true } } }, { $project: { id: \"$id\", Trade_Name: \"$Trade_Name\" } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.2\": { $exists: true } } }, { $project: { id: \"$id\", Trade_Name: \"$Trade_Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 577,
        "spider_question_id": 966,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "query": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interaction\" } }, { $unwind: \"$interaction\" }, { $match: { \"interaction.interaction_type\": \"inhibitor\" } }, { $project: { name: 1, Location: 1, Product: 1 } }, { $group: { _id: { name: \"$name\", Location: \"$Location\", Product: \"$Product\" } } }, { $project: { name: \"$_id.name\", Location: \"$_id.Location\", Product: \"$_id.Product\" } } ])",
        "gpt4 answer": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interaction\" } }, { $unwind: \"$interaction\" }, { $match: { \"interaction.interaction_type\": \"inhibitor\" } }, { $project: { name: 1, Location: 1, Product: 1 } }, { $group: { _id: { name: \"$name\", Location: \"$Location\", Product: \"$Product\" } } }, { $project: { name: \"$_id.name\", Location: \"$_id.Location\", Product: \"$_id.Product\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 578,
        "spider_question_id": 967,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.name , T1.location , T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "query": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $match: { \"interactions.interaction_type\": \"inhibitor\" } }, { $group: { _id: { name: \"$name\", Location: \"$Location\", Product: \"$Product\" } } }, { $project: { name: \"$_id.name\", Location: \"$_id.Location\", Product: \"$_id.Product\" } } ])",
        "gpt4 answer": "db.enzyme.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"enzyme_id\", as: \"interactions\" } }, { $match: { \"interactions.interaction_type\": \"inhibitor\" } }, { $group: { _id: { name: \"$name\", Location: \"$Location\", Product: \"$Product\" } } }, { $project: { name: \"$_id.name\", Location: \"$_id.Location\", Product: \"$_id.Product\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 579,
        "spider_question_id": 968,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "query": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { interactions: { $elemMatch: { interaction_type: \"inhibitor\" } } } }, { $match: { interactions: { $elemMatch: { interaction_type: \"activitor\" } } } }, { $project: { name: 1, Trade_Name: 1 } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { interactions: { $elemMatch: { interaction_type: \"inhibitor\" } } } }, { $match: { interactions: { $elemMatch: { interaction_type: \"activitor\" } } } }, { $project: { name: 1, Trade_Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 580,
        "spider_question_id": 969,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'",
        "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?",
        "query": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.interaction_type\": { $all: [\"inhibitor\", \"activitor\"] } } }, { $group: { _id: { id: \"$id\", name: \"$name\", trade_name: \"$Trade_Name\" }, interactionTypes: { $addToSet: \"$interactions.interaction_type\" } } }, { $project: { name: \"$_id.name\", trade_name: \"$_id.trade_name\" } } ])",
        "gpt4 answer": "db.medicine.aggregate([ { $lookup: { from: \"medicine_enzyme_interaction\", localField: \"id\", foreignField: \"medicine_id\", as: \"interactions\" } }, { $match: { \"interactions.interaction_type\": { $all: [\"inhibitor\", \"activitor\"] } } }, { $group: { _id: { id: \"$id\", name: \"$name\", trade_name: \"$Trade_Name\" }, interactionTypes: { $addToSet: \"$interactions.interaction_type\" } } }, { $project: { name: \"$_id.name\", trade_name: \"$_id.trade_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 581,
        "spider_question_id": 974,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'",
        "question": "Which enzyme names have the substring 'ALA'?",
        "query": "db.enzyme.find( { name: { $regex: /ALA/, $options: 'i' } }, { name: 1 } )",
        "gpt4 answer": "db.enzyme.find({ name: { $regex: 'ALA' } }, { name: 1 })",
        "deepseek answer": "db.enzyme.find( { name: { $regex: /ALA/, $options: 'i' } }, { name: 1 } )"
    },
    {
        "question_id": 582,
        "spider_question_id": 975,
        "db_id": "medicine_enzyme_interaction",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "query": "db.enzyme.find({name: {$regex: /ALA/}}, { name: 1})",
        "gpt4 answer": "db.enzyme.find({ name: /ALA/ }, { name: 1 })",
        "deepseek answer": "db.enzyme.find({name: {$regex: /ALA/}}, { name: 1})"
    },
    {
        "question_id": 583,
        "spider_question_id": 979,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT school , nickname FROM university ORDER BY founded",
        "question": "What are the different schools and their nicknames, ordered by their founding years?",
        "query": "db.university.find({}, { School: 1, Nickname: 1 }).sort({ Founded: 1 })",
        "gpt4 answer": "db.university.find({}, { School: 1, Nickname: 1 }).sort({ Founded: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 584,
        "spider_question_id": 980,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT school , LOCATION FROM university WHERE affiliation = 'Public'",
        "question": "List all public schools and their locations.",
        "query": "db.university.find({ Affiliation: \"Public\" }, { School: 1, Location: 1 })",
        "gpt4 answer": "db.university.find({ Affiliation: \"Public\" }, { School: 1, Location: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 585,
        "spider_question_id": 981,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT school , LOCATION FROM university WHERE affiliation = 'Public'",
        "question": "What are the public schools and what are their locations?",
        "query": "db.university.find({ Affiliation: \"Public\" }, { School: 1, Location: 1 })",
        "gpt4 answer": "db.university.find({ Affiliation: \"Public\" }, { School: 1, Location: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 586,
        "spider_question_id": 983,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Return the founded year for the school with the largest enrollment.",
        "query": "db.university.find({}, { Founded: 1 }).sort({ Enrollment: -1 }).limit(1)",
        "gpt4 answer": "db.university.find({}, { Founded: 1 }).sort({ Enrollment: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 587,
        "spider_question_id": 984,
        "db_id": "university_basketball",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "question": "Find the founded year of the newest non public school.",
        "query": "db.university.find({Affiliation: {$ne: \"Public\"}}, {Founded: 1}).sort({Founded: -1}).limit(1)",
        "gpt4 answer": "db.university.find({Affiliation: {$ne: \"Public\"}}, {Founded: 1}).sort({Founded: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 588,
        "spider_question_id": 985,
        "db_id": "university_basketball",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "query": "db.university.find({ Affiliation: { $ne: 'Public' } }, { Founded: 1 }).sort({ Founded: -1 }).limit(1)",
        "gpt4 answer": "db.university.find({ Affiliation: { $ne: 'Public' } }, { Founded: 1 }).sort({ Founded: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 589,
        "spider_question_id": 988,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "question": "What is the highest acc percent score in the competition?",
        "query": "db.basketball_match.find({}, { ACC_Percent: 1 }).sort({ ACC_Percent: -1 }).limit(1)",
        "gpt4 answer": "db.basketball_match.find({}, { ACC_Percent: 1 }).sort({ ACC_Percent: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 590,
        "spider_question_id": 989,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "question": "Return the highest acc percent across all basketball matches.",
        "query": "db.basketball_match.find({}, { ACC_Percent: 1 }).sort({ ACC_Percent: -1 }).limit(1)",
        "gpt4 answer": "db.basketball_match.find({}, { ACC_Percent: 1 }).sort({ ACC_Percent: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 591,
        "spider_question_id": 990,
        "db_id": "university_basketball",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_match\" } }, { $unwind: \"$basketball_match\" }, { $sort: { \"basketball_match.ACC_Percent\": 1 } }, { $limit: 1 }, { $project: { Primary_conference: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_match\" } }, { $unwind: \"$basketball_match\" }, { $sort: { \"basketball_match.ACC_Percent\": 1 } }, { $limit: 1 }, { $project: { Primary_conference: 1 } } ])"
    },
    {
        "question_id": 592,
        "spider_question_id": 991,
        "db_id": "university_basketball",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_match\" } }, { $unwind: \"$basketball_match\" }, { $sort: { \"basketball_match.ACC_Percent\": 1 } }, { $limit: 1 }, { $project: { Primary_conference: 1 } } ])",
        "gpt4 answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $sort: { \"matches.ACC_Percent\": 1 } }, { $limit: 1 }, { $project: { \"Primary_conference\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_match\" } }, { $unwind: \"$basketball_match\" }, { $sort: { \"basketball_match.ACC_Percent\": 1 } }, { $limit: 1 }, { $project: { Primary_conference: 1 } } ])"
    },
    {
        "question_id": 593,
        "spider_question_id": 992,
        "db_id": "university_basketball",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"match_info\" } }, { $unwind: \"$match_info\" }, { $sort: { \"Founded\": 1 } }, { $limit: 1 }, { $project: { team_name: \"$match_info.Team_Name\", ACC_Regular_Season: \"$match_info.ACC_Regular_Season\" } } ])",
        "gpt4 answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"match_info\" } }, { $unwind: \"$match_info\" }, { $sort: { \"Founded\": 1 } }, { $limit: 1 }, { $project: { team_name: \"$match_info.Team_Name\", ACC_Regular_Season: \"$match_info.ACC_Regular_Season\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 594,
        "spider_question_id": 993,
        "db_id": "university_basketball",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t2.team_name , t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_info\" } }, { $unwind: \"$basketball_info\" }, { $sort: { \"Founded\": 1 } }, { $limit: 1 }, { $project: { team_name: \"$basketball_info.Team_Name\", ACC_Regular_Season: \"$basketball_info.ACC_Regular_Season\" } } ])",
        "gpt4 answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_info\" } }, { $unwind: \"$basketball_info\" }, { $sort: { \"Founded\": 1 } }, { $limit: 1 }, { $project: { team_name: \"$basketball_info.Team_Name\", ACC_Regular_Season: \"$basketball_info.ACC_Regular_Season\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 595,
        "spider_question_id": 994,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"match\" } }, { $unwind: \"$match\" }, { $match: { \"match.Team_Name\": \"Clemson\" } }, { $project: { All_Games: \"$match.All_Games\", Location: \"$Location\" } } ])",
        "gpt4 answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"match\" } }, { $unwind: \"$match\" }, { $match: { \"match.Team_Name\": \"Clemson\" } }, { $project: { All_Games: \"$match.All_Games\", Location: \"$Location\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 596,
        "spider_question_id": 995,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'",
        "question": "What are the all games score and location of the school called Clemson?",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_info\" } }, { $unwind: \"$basketball_info\" }, { $match: { \"basketball_info.Team_Name\": \"Clemson\" } }, { $project: { All_Games: \"$basketball_info.All_Games\", Location: \"$Location\" } } ])",
        "gpt4 answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_info\" } }, { $unwind: \"$basketball_info\" }, { $match: { \"basketball_info.Team_Name\": \"Clemson\" } }, { $project: { All_Games: \"$basketball_info.All_Games\", Location: \"$Location\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 597,
        "spider_question_id": 996,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(enrollment) FROM university WHERE founded < 1850",
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "query": "db.university.aggregate([ { $match: { Founded: { $lt: 1850 } } }, { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } } , { $project: { averageEnrollment: 1 } }])",
        "gpt4 answer": "db.university.aggregate([ { $match: { Founded: { $lt: 1850 } } }, { $group: { _id: null, average_enrollment: { $avg: \"$Enrollment\" } } }, { $project: { average_enrollment: 1 } } ])",
        "deepseek answer": "db.university.aggregate([ { $match: { Founded: { $lt: 1850 } } }, { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } } , { $project: { averageEnrollment: 1 } }])"
    },
    {
        "question_id": 598,
        "spider_question_id": 997,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(enrollment) FROM university WHERE founded < 1850",
        "question": "Return the average enrollment of universities founded before 1850.",
        "query": "db.university.aggregate([ { $match: { \"Founded\": { $lt: 1850 } } }, { $group: { _id: null, \"averageEnrollment\": { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "gpt4 answer": "db.university.aggregate([ { $match: { Founded: { $lt: 1850 } } }, { $group: { _id: null, average_enrollment: { $avg: \"$Enrollment\" } } }, { $project: { average_enrollment: 1 } } ])",
        "deepseek answer": "db.university.aggregate([ { $match: { \"Founded\": { $lt: 1850 } } }, { $group: { _id: null, \"averageEnrollment\": { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])"
    },
    {
        "question_id": 599,
        "spider_question_id": 999,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
        "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
        "query": "db.university.find({}, { Enrollment: 1, Primary_conference: 1 }).sort({ Founded: 1 }).limit(1)",
        "gpt4 answer": "db.university.find({}, { Enrollment: 1, Primary_conference: 1 }).sort({ Founded: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 600,
        "spider_question_id": 1000,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(enrollment) , min(enrollment) FROM university",
        "question": "What is the total and minimum enrollment of all schools?",
        "query": "db.university.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, minEnrollment: { $min: \"$Enrollment\" } } } , , { $project: { totalEnrollment: 1 , minEnrollment: 1 } }])",
        "gpt4 answer": "db.university.aggregate([ { $group: { _id: null, total_enrollment: { $sum: \"$Enrollment\" }, minimum_enrollment: { $min: \"$Enrollment\" } } }, { $project: { total_enrollment: 1, minimum_enrollment: 1 } } ])",
        "deepseek answer": "db.university.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, minEnrollment: { $min: \"$Enrollment\" } } } , , { $project: { totalEnrollment: 1 , minEnrollment: 1 } }])"
    },
    {
        "question_id": 601,
        "spider_question_id": 1001,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(enrollment) , min(enrollment) FROM university",
        "question": "Return the total and minimum enrollments across all schools.",
        "query": "db.university.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, minEnrollment: { $min: \"$Enrollment\" } } }, { $project: { totalEnrollment: 1, minEnrollment: 1 } } ])",
        "gpt4 answer": "db.university.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, minimumEnrollment: { $min: \"$Enrollment\" } } }, { $project: { totalEnrollment: 1, minimumEnrollment: 1 } } ])",
        "deepseek answer": "db.university.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, minEnrollment: { $min: \"$Enrollment\" } } }, { $project: { totalEnrollment: 1, minEnrollment: 1 } } ])"
    },
    {
        "question_id": 602,
        "spider_question_id": 1003,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(enrollment) , affiliation FROM university GROUP BY affiliation",
        "question": "What are the total enrollments of universities of each affiliation type?",
        "query": "db.university.aggregate([ { $group: { _id: \"$Affiliation\", TotalEnrollment: { $sum: \"$Enrollment\" } } } ])",
        "gpt4 answer": "db.university.aggregate([ { $group: { _id: \"$Affiliation\", TotalEnrollment: { $sum: \"$Enrollment\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 603,
        "spider_question_id": 1004,
        "db_id": "university_basketball",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "question": "How many schools do not participate in the basketball match?",
        "query": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_info\" } }, { $match: { \"basketball_info\": {$size: 0} } }, { $count: \"schools_not_participating\" } ])",
        "gpt4 answer": "db.university.aggregate([ { $lookup: { from: \"basketball_match\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"basketball_info\" } }, { $match: { \"basketball_info\": {$size: 0} } }, { $count: \"schools_not_participating\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 604,
        "spider_question_id": 1006,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
        "question": "Find the schools that were either founded after 1850 or public.",
        "query": "db.university.find( { $or: [{ Founded: { $gt: 1850 } }, { Affiliation: 'Public' }] }, { School: 1 } )",
        "gpt4 answer": "db.university.find( { $or: [{ Founded: { $gt: 1850 } }, { Affiliation: 'Public' }] }, { School: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 605,
        "spider_question_id": 1014,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation",
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "query": "db.university.aggregate([ { $match: { Enrollment: { $gt: 20000 } } }, { $group: { _id: \"$Affiliation\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.university.aggregate([ { $match: { Enrollment: { $gt: 20000 } } }, { $group: { _id: \"$Affiliation\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 606,
        "spider_question_id": 1016,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Enrollment) , affiliation FROM university WHERE founded > 1850 GROUP BY affiliation",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "query": "db.university.aggregate([ { $match: { Founded: { $gt: 1850 } } }, { $group: { _id: \"$Affiliation\", totalEnrollment: { $sum: \"$Enrollment\" } } } ])",
        "gpt4 answer": "db.university.aggregate([ { $match: { Founded: { $gt: 1850 } } }, { $group: { _id: \"$Affiliation\", totalEnrollment: { $sum: \"$Enrollment\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 607,
        "spider_question_id": 1017,
        "db_id": "university_basketball",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Enrollment) , affiliation FROM university WHERE founded > 1850 GROUP BY affiliation",
        "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
        "query": "db.university.aggregate([ { $match: { Founded: { $gt: 1850 } } }, { $group: { _id: \"$Affiliation\", TotalEnrollment: { $sum: \"$Enrollment\" } } }, { $project: { Affiliation: \"$_id\", TotalEnrollment: 1 } } ])",
        "gpt4 answer": "db.university.aggregate([ { $match: { Founded: { $gt: 1850 } } }, { $group: { _id: \"$Affiliation\", TotalEnrollment: { $sum: \"$Enrollment\" } } }, { $project: { Affiliation: \"$_id\", TotalEnrollment: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 608,
        "spider_question_id": 1018,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Enrollment) FROM university",
        "question": "What is the maximum enrollment across all schools?",
        "query": "db.university.aggregate([ { $group: { _id: null, maxEnrollment: { $max: \"$Enrollment\" } } } , { $project: { maxEnrollment: 1 } }])",
        "gpt4 answer": "db.university.aggregate([ { $group: { _id: null, maxEnrollment: { $max: \"$Enrollment\" } } }, { $project: { maxEnrollment: 1 } } ])",
        "deepseek answer": "db.university.aggregate([ { $group: { _id: null, maxEnrollment: { $max: \"$Enrollment\" } } } , { $project: { maxEnrollment: 1 } }])"
    },
    {
        "question_id": 609,
        "spider_question_id": 1019,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Enrollment) FROM university",
        "question": "Return the maximum enrollment across all schools.",
        "query": "db.university.aggregate([ { $group: { _id: null, maxEnrollment: { $max: \"$Enrollment\" } } }, { $project: { maxEnrollment: 1 } } ])",
        "gpt4 answer": "db.university.aggregate([ { $group: { _id: null, maxEnrollment: { $max: \"$Enrollment\" } } }, { $project: { maxEnrollment: 1 } } ])",
        "deepseek answer": "db.university.aggregate([ { $group: { _id: null, maxEnrollment: { $max: \"$Enrollment\" } } }, { $project: { maxEnrollment: 1 } } ])"
    },
    {
        "question_id": 610,
        "spider_question_id": 1020,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM basketball_match",
        "question": "List all information regarding the basketball match.",
        "query": "db.basketball_match.find({})",
        "gpt4 answer": "db.basketball_match.find({})",
        "deepseek answer": "db.basketball_match.find({})"
    },
    {
        "question_id": 611,
        "spider_question_id": 1021,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM basketball_match",
        "question": "What is all the information about the basketball match?",
        "query": "db.basketball_match.find({})",
        "gpt4 answer": "db.basketball_match.find({})",
        "deepseek answer": "db.basketball_match.find({})"
    },
    {
        "question_id": 612,
        "spider_question_id": 1022,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "query": "db.basketball_match.find({}, {Team_Name: 1}).sort({All_Home: -1})",
        "gpt4 answer": "db.basketball_match.find({}, { Team_Name: 1 }).sort({ All_Home: -1 })",
        "deepseek answer": "db.basketball_match.find({}, {Team_Name: 1}).sort({All_Home: -1})"
    },
    {
        "question_id": 613,
        "spider_question_id": 1023,
        "db_id": "university_basketball",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "db.basketball_match.find({}, {Team_Name: 1}).sort({All_Home: -1})",
        "gpt4 answer": "db.basketball_match.find({}, {Team_Name: 1}).sort({All_Home: -1})",
        "deepseek answer": "db.basketball_match.find({}, {Team_Name: 1}).sort({All_Home: -1})"
    },
    {
        "question_id": 614,
        "spider_question_id": 1024,
        "db_id": "phone_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004",
        "question": "the names of models that launched between 2002 and 2004.",
        "query": "db.chip_model.find({Launch_year: {$gte: 2002, $lte: 2004}}, {Model_name: 1})",
        "gpt4 answer": "db.chip_model.find({ Launch_year: { $gte: 2002, $lte: 2004 } }, { Model_name: 1 })",
        "deepseek answer": "db.chip_model.find({Launch_year: {$gte: 2002, $lte: 2004}}, {Model_name: 1})"
    },
    {
        "question_id": 615,
        "spider_question_id": 1025,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Model_name , RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "query": "db.chip_model.find({}, {Model_name: 1, RAM_MiB: 1}).sort({RAM_MiB: 1}).limit(1)",
        "gpt4 answer": "db.chip_model.find({}, { Model_name: 1, RAM_MiB: 1 }).sort({ RAM_MiB: 1 }).limit(1)",
        "deepseek answer": "db.chip_model.find({}, {Model_name: 1, RAM_MiB: 1}).sort({RAM_MiB: 1}).limit(1)"
    },
    {
        "question_id": 616,
        "spider_question_id": 1026,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT chip_model , screen_mode FROM phone WHERE Hardware_Model_name = 'LG-P760'",
        "question": "What are the chip model and screen mode of the phone with hardware model name 'LG-P760'?",
        "query": "db.phone.find( { Hardware_Model_name: 'LG-P760' }, { chip_model: 1, screen_mode: 1 } )",
        "gpt4 answer": "db.phone.find({ Hardware_Model_name: \"LG-P760\" }, { chip_model: 1, screen_mode: 1 })",
        "deepseek answer": "db.phone.find( { Hardware_Model_name: 'LG-P760' }, { chip_model: 1, screen_mode: 1 } )"
    },
    {
        "question_id": 617,
        "spider_question_id": 1028,
        "db_id": "phone_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(T1.RAM_MiB) , min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = 'Nokia Corporation'",
        "question": "What is maximum and minimum RAM size of phone produced by company named 'Nokia Corporation'?",
        "query": "db.phone.aggregate([ { $match: { Company_name: \"Nokia Corporation\" } }, { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_model_info\" } }, { $unwind: \"$chip_model_info\" }, { $group: { _id: null, maxRAM: { $max: \"$chip_model_info.RAM_MiB\" }, minRAM: { $min: \"$chip_model_info.RAM_MiB\" } } }, { $project: { maxRAM: 1, minRAM: 1 } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $match: { Company_name: 'Nokia Corporation' } }, { $lookup: { from: 'chip_model', localField: 'chip_model', foreignField: 'Model_name', as: 'chip_details' } }, { $unwind: '$chip_details' }, { $group: { _id: null, maxRAM: { $max: '$chip_details.RAM_MiB' }, minRAM: { $min: '$chip_details.RAM_MiB' } } }, { $project: { maxRAM: 1, minRAM: 1 } } ])",
        "deepseek answer": "db.phone.aggregate([ { $match: { Company_name: \"Nokia Corporation\" } }, { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_model_info\" } }, { $unwind: \"$chip_model_info\" }, { $group: { _id: null, maxRAM: { $max: \"$chip_model_info.RAM_MiB\" }, minRAM: { $min: \"$chip_model_info.RAM_MiB\" } } }, { $project: { maxRAM: 1, minRAM: 1 } } ])"
    },
    {
        "question_id": 618,
        "spider_question_id": 1029,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = 'Nokia Corporation'",
        "question": "What is the average ROM size of phones produced by the company named 'Nokia Corporation'?",
        "query": "db.phone.aggregate([ { $match: { Company_name: \"Nokia Corporation\" } }, { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_model_info\" } }, { $unwind: \"$chip_model_info\" }, { $group: { _id: null, avgROM: { $avg: \"$chip_model_info.ROM_MiB\" } } }, { $project: { avgROM: 1 } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $match: { Company_name: \"Nokia Corporation\" } }, { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_details\" } }, { $unwind: \"$chip_details\" }, { $group: { _id: null, avgROM: { $avg: \"$chip_details.ROM_MiB\" } } }, { $project: { avgROM: 1 } } ])",
        "deepseek answer": "db.phone.aggregate([ { $match: { Company_name: \"Nokia Corporation\" } }, { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_model_info\" } }, { $unwind: \"$chip_model_info\" }, { $group: { _id: null, avgROM: { $avg: \"$chip_model_info.ROM_MiB\" } } }, { $project: { avgROM: 1 } } ])"
    },
    {
        "question_id": 619,
        "spider_question_id": 1030,
        "db_id": "phone_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Hardware_Model_name , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "query": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_model_info\" } }, { $match: { $or: [ { \"chip_model_info.Launch_year\": 2002 }, { \"chip_model_info.RAM_MiB\": { $gt: 32 } } ] } }, { $project: { Hardware_Model_name: 1, Company_name: 1 } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_info\" } }, { $match: { $or: [ {\"chip_info.Launch_year\": 2002}, {\"chip_info.RAM_MiB\": {$gt: 32}} ] } }, { $project: { Hardware_Model_name: 1, Company_name: 1 } } ])",
        "deepseek answer": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_model_info\" } }, { $match: { $or: [ { \"chip_model_info.Launch_year\": 2002 }, { \"chip_model_info.RAM_MiB\": { $gt: 32 } } ] } }, { $project: { Hardware_Model_name: 1, Company_name: 1 } } ])"
    },
    {
        "question_id": 620,
        "spider_question_id": 1031,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Hardware_Model_name , Company_name FROM phone WHERE Accreditation_type LIKE 'Full'",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "query": "db.phone.find( { Accreditation_type: { $regex: /Full/ } }, { Hardware_Model_name: 1, Company_name: 1 } )",
        "gpt4 answer": "db.phone.find({ Accreditation_type: /Full/ }, { Hardware_Model_name: 1, Company_name: 1 })",
        "deepseek answer": "db.phone.find( { Accreditation_type: { $regex: /Full/ } }, { Hardware_Model_name: 1, Company_name: 1 } )"
    },
    {
        "question_id": 621,
        "spider_question_id": 1034,
        "db_id": "phone_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Company_name , count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1",
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Company_name\", num_models: { $sum: 1 } } }, { $sort: { num_models: 1 } }, { $limit: 1 }, { $project: { Company_name: \"$_id\", num_models: \"$num_models\" } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Company_name\", num_models: { $sum: 1 } } }, { $sort: { num_models: 1 } }, { $limit: 1 }, { $project: { Company_name: \"$_id\", num_models: \"$num_models\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 622,
        "spider_question_id": 1035,
        "db_id": "phone_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*) > 1",
        "question": "List the name of the company that produced more than one phone model.",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Company_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Company_name: \"$_id\" } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Company_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Company_name: \"$_id\" } } ])",
        "deepseek answer": "db.phone.aggregate([ { $group: { _id: \"$Company_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Company_name: \"$_id\" } } ])"
    },
    {
        "question_id": 623,
        "spider_question_id": 1036,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "query": "db.screen_mode.aggregate([ { $group: { _id: null, max_used_kb: { $max: \"$used_kb\" }, min_used_kb: { $min: \"$used_kb\" }, avg_used_kb: { $avg: \"$used_kb\" } } }, , { $project: { max_used_kb: 1, min_used_kb:1, avg_used_kb:1 } } ])",
        "gpt4 answer": "db.screen_mode.aggregate([ { $group: { _id: null, maxUsedKb: { $max: \"$used_kb\" }, minUsedKb: { $min: \"$used_kb\" }, avgUsedKb: { $avg: \"$used_kb\" } }}, { $project: { maxUsedKb: 1, minUsedKb: 1, avgUsedKb: 1 }} ])",
        "deepseek answer": "db.screen_mode.aggregate([ { $group: { _id: null, max_used_kb: { $max: \"$used_kb\" }, min_used_kb: { $min: \"$used_kb\" }, avg_used_kb: { $avg: \"$used_kb\" } } }, , { $project: { max_used_kb: 1, min_used_kb:1, avg_used_kb:1 } } ])"
    },
    {
        "question_id": 624,
        "spider_question_id": 1037,
        "db_id": "phone_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "query": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_details\" } }, { $match: { \"chip_details.Launch_year\": 2002 } }, { $sort: { \"chip_details.RAM_MiB\": -1 } }, { $limit: 1 }, { $project: { \"Hardware_Model_name\": 1 } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_details\" } }, { $match: { \"chip_details.Launch_year\": 2002 } }, { $sort: { \"chip_details.RAM_MiB\": -1 } }, { $limit: 1 }, { $project: { \"Hardware_Model_name\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 625,
        "spider_question_id": 1039,
        "db_id": "phone_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = 'Text' OR T1.RAM_MiB > 32",
        "question": "List the hardware model name for the phones that have screen mode type 'Text' or RAM size greater than 32.",
        "query": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_details\" } }, { $lookup: { from: \"screen_mode\", localField: \"screen_mode\", foreignField: \"Graphics_mode\", as: \"screen_details\" } }, { $match: { $or: [ { \"chip_details.RAM_MiB\": { $gt: 32 } }, { \"screen_details.Type\": \"Text\" } ] } }, { $project: { Hardware_Model_name: 1 } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $lookup: { from: \"chip_model\", localField: \"chip_model\", foreignField: \"Model_name\", as: \"chip_details\" } }, { $lookup: { from: \"screen_mode\", localField: \"screen_mode\", foreignField: \"Graphics_mode\", as: \"screen_details\" } }, { $match: { $or: [ { \"chip_details.RAM_MiB\": { $gt: 32 } }, { \"screen_details.Type\": \"Text\" } ] } }, { $project: { Hardware_Model_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 626,
        "spider_question_id": 1043,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Accreditation_type , count(*) FROM phone GROUP BY Accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_type\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 627,
        "spider_question_id": 1044,
        "db_id": "phone_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Accreditation_type , count(*) FROM phone GROUP BY Accreditation_type",
        "question": "How many phones belongs to each accreditation type?",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_type\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 628,
        "spider_question_id": 1045,
        "db_id": "phone_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*) > 3",
        "question": "Find the accreditation level that more than 3 phones use.",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_level\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { Accreditation_level: \"$_id\" } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_level\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { Accreditation_level: \"$_id\" } } ])",
        "deepseek answer": "db.phone.aggregate([ { $group: { _id: \"$Accreditation_level\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { Accreditation_level: \"$_id\" } } ])"
    },
    {
        "question_id": 629,
        "spider_question_id": 1046,
        "db_id": "phone_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM chip_model",
        "question": "Find the details for all chip models.",
        "query": "db.chip_model.find({})",
        "gpt4 answer": "db.chip_model.find({})",
        "deepseek answer": "db.chip_model.find({})"
    },
    {
        "question_id": 630,
        "spider_question_id": 1049,
        "db_id": "phone_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT model_name FROM chip_model ORDER BY launch_year",
        "question": "List all the model names sorted by their launch year.",
        "query": "db.chip_model.find({}, {Model_name: 1}).sort({Launch_year: 1})",
        "gpt4 answer": "db.chip_model.find({}, { Model_name: 1 }).sort({ Launch_year: 1 })",
        "deepseek answer": "db.chip_model.find({}, {Model_name: 1}).sort({Launch_year: 1})"
    },
    {
        "question_id": 631,
        "spider_question_id": 1050,
        "db_id": "phone_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "query": "db.chip_model.aggregate([ { $lookup: { from: \"phone\", localField: \"Model_name\", foreignField: \"chip_model\", as: \"phone_data\" } }, { $match: { \"phone_data\": { $size: 0 } } }, { $group: { _id: null, averageRAM: { $avg: \"$RAM_MiB\" } } }, { $project: { averageRAM:1 } } ])",
        "gpt4 answer": "db.chip_model.aggregate([ { $lookup: { from: \"phone\", localField: \"Model_name\", foreignField: \"chip_model\", as: \"used_phones\" } }, { $match: { used_phones: { $size: 0 } } }, { $group: { _id: null, averageRAM: { $avg: \"$RAM_MiB\" } } }, { $project: { averageRAM: 1 } } ])",
        "deepseek answer": "db.chip_model.aggregate([ { $lookup: { from: \"phone\", localField: \"Model_name\", foreignField: \"chip_model\", as: \"phone_data\" } }, { $match: { \"phone_data\": { $size: 0 } } }, { $group: { _id: null, averageRAM: { $avg: \"$RAM_MiB\" } } }, { $project: { averageRAM:1 } } ])"
    },
    {
        "question_id": 632,
        "spider_question_id": 1051,
        "db_id": "phone_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "query": "db.chip_model.aggregate([ { $lookup: { from: \"phone\", localField: \"Model_name\", foreignField: \"chip_model\", as: \"phone_info\" } }, { $match: { \"phone_info\": { $not: { $elemMatch: { Accreditation_type: 'Full' } } } } }, { $project: { Model_name: 1 } } ])",
        "gpt4 answer": "db.chip_model.aggregate([ { $lookup: { from: \"phone\", localField: \"Model_name\", foreignField: \"chip_model\", as: \"phone_info\" } }, { $match: { \"phone_info\": { $not: { $elemMatch: { Accreditation_type: 'Full' } } } } }, { $project: { Model_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 633,
        "spider_question_id": 1055,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country_name , Capital FROM country",
        "question": "Show the country name and capital of all countries.",
        "query": "db.country.find({}, {Country_name: 1, Capital: 1})",
        "gpt4 answer": "db.country.find({}, { Country_name: 1, Capital: 1 })",
        "deepseek answer": "db.country.find({}, {Country_name: 1, Capital: 1})"
    },
    {
        "question_id": 634,
        "spider_question_id": 1056,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country_name , Capital FROM country",
        "question": "What are the names and capitals of each country?",
        "query": "db.country.find({}, {Country_name: 1, Capital: 1})",
        "gpt4 answer": "db.country.find({}, { Country_name: 1, Capital: 1 })",
        "deepseek answer": "db.country.find({}, {Country_name: 1, Capital: 1})"
    },
    {
        "question_id": 635,
        "spider_question_id": 1057,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'",
        "question": "Show all official native languages that contain the word 'English'.",
        "query": "db.country.find({ Official_native_language: { $regex: /English/ } }, { Official_native_language: 1 })",
        "gpt4 answer": "db.country.find({ Official_native_language: /English/ }, { Official_native_language: 1 })",
        "deepseek answer": "db.country.find({ Official_native_language: { $regex: /English/ } }, { Official_native_language: 1 })"
    },
    {
        "question_id": 636,
        "spider_question_id": 1058,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'",
        "question": "What are the official native languages that contain the string 'English'.",
        "query": "db.country.find({ Official_native_language: { $regex: /English/ } }, { Official_native_language: 1 })",
        "gpt4 answer": "db.country.find({ Official_native_language: /English/ }, { Official_native_language: 1 })",
        "deepseek answer": "db.country.find({ Official_native_language: { $regex: /English/ } }, { Official_native_language: 1 })"
    },
    {
        "question_id": 637,
        "spider_question_id": 1065,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = 'Defender'",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "query": "db.match_season.find({Position: 'Defender'}, {Draft_Pick_Number: 1, Draft_Class: 1})",
        "gpt4 answer": "db.match_season.find({ Position: \"Defender\" }, { Draft_Pick_Number: 1, Draft_Class: 1 })",
        "deepseek answer": "db.match_season.find({Position: 'Defender'}, {Draft_Pick_Number: 1, Draft_Class: 1})"
    },
    {
        "question_id": 638,
        "spider_question_id": 1066,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = 'Defender'",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "query": "db.match_season.find({Position: 'Defender'}, {Draft_Pick_Number: 1, Draft_Class: 1})",
        "gpt4 answer": "db.match_season.find({ Position: 'Defender' }, { Draft_Pick_Number: 1, Draft_Class: 1 })",
        "deepseek answer": "db.match_season.find({Position: 'Defender'}, {Draft_Pick_Number: 1, Draft_Class: 1})"
    },
    {
        "question_id": 639,
        "spider_question_id": 1069,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Player , Years_Played FROM player",
        "question": "Show the players and the years played.",
        "query": "db.player.find({}, {Player: 1, Years_Played: 1})",
        "gpt4 answer": "db.player.find({}, { Player: 1, Years_Played: 1 })",
        "deepseek answer": "db.player.find({}, {Player: 1, Years_Played: 1})"
    },
    {
        "question_id": 640,
        "spider_question_id": 1070,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Player , Years_Played FROM player",
        "question": "Who are the different players and how many years has each played?",
        "query": "db.player.aggregate([ { $project: { Player: 1, Years_Played: 1 } } ])",
        "gpt4 answer": "db.player.find({}, { Player: 1, Years_Played: 1 })",
        "deepseek answer": "db.player.aggregate([ { $project: { Player: 1, Years_Played: 1 } } ])"
    },
    {
        "question_id": 641,
        "spider_question_id": 1071,
        "db_id": "match_season",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM Team",
        "question": "Show all team names.",
        "query": "db.team.find({}, { Name: 1})",
        "gpt4 answer": "db.team.find({}, { Name: 1 })",
        "deepseek answer": "db.team.find({}, { Name: 1})"
    },
    {
        "question_id": 642,
        "spider_question_id": 1072,
        "db_id": "match_season",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM Team",
        "question": "What are the names of all teams?",
        "query": "db.team.find({}, { Name: 1})",
        "gpt4 answer": "db.team.find({}, { Name: 1 })",
        "deepseek answer": "db.team.find({}, { Name: 1})"
    },
    {
        "question_id": 643,
        "spider_question_id": 1077,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = 'Dublin'",
        "question": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "query": "db.country.aggregate([ { $match: { Capital: \"Dublin\" } }, { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $group: { _id: \"$matches.Position\" } }, { $project: { Position: \"$_id\" } } ])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Capital: \"Dublin\" } }, { $lookup:{ from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_info\" } }, { $unwind: \"$match_info\" }, { $group: { _id: \"$match_info.Position\" } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Capital: \"Dublin\" } }, { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $group: { _id: \"$matches.Position\" } }, { $project: { Position: \"$_id\" } } ])"
    },
    {
        "question_id": 644,
        "spider_question_id": 1078,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = 'Dublin'",
        "question": "Give the different positions of players who play for the country with the capital Dublin.",
        "query": "db.country.aggregate([ { $match: { Capital: \"Dublin\" } }, { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $group: { _id: \"$matches.Position\" } }, { $project: { Position: \"$_id\" } } ])",
        "gpt4 answer": "db.country.aggregate([ { $match: { Capital: \"Dublin\" } }, { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_data\" } }, { $unwind: \"$match_data\" }, { $group: { _id: \"$match_data.Position\" } }, { $project: { Position: \"$_id\" } } ])",
        "deepseek answer": "db.country.aggregate([ { $match: { Capital: \"Dublin\" } }, { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $group: { _id: \"$matches.Position\" } }, { $project: { Position: \"$_id\" } } ])"
    },
    {
        "question_id": 645,
        "spider_question_id": 1079,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "query": "db.match_season.aggregate([ { $match: { $or: [ { College: \"Maryland\" }, { College: \"Duke\" } ] } }, { $lookup: { from: \"country\", localField: \"Country\", foreignField: \"Country_id\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $group: { _id: \"$country_info.Official_native_language\" } }, { $project: { Official_native_language: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $match: { $or: [ { College: \"Maryland\" }, { College: \"Duke\" } ] } }, { $lookup: { from: \"country\", localField: \"Country\", foreignField: \"Country_id\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $group: { _id: \"$country_info.Official_native_language\" } }, { $project: { Official_native_language: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 646,
        "spider_question_id": 1080,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "query": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_season_data\" } }, { $match: { \"match_season_data.College\": { $in: [\"Maryland\", \"Duke\"] } } }, { $project: { Official_native_language: 1 } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_info\" } }, { $match: { \"match_info.College\": { $in: [\"Maryland\", \"Duke\"] } } }, { $project: { Official_native_language: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_season_data\" } }, { $match: { \"match_season_data.College\": { $in: [\"Maryland\", \"Duke\"] } } }, { $project: { Official_native_language: 1 } } ])"
    },
    {
        "question_id": 647,
        "spider_question_id": 1081,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "query": "db.match_season.aggregate([ { $match: { Position: \"Defender\" } }, { $lookup: { from: \"country\", localField: \"Country\", foreignField: \"Country_id\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $group: { _id: \"$country_info.Official_native_language\" } }, { $count: \"distinct_official_languages\" } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $match: { Position: \"Defender\" } }, { $lookup: { from: \"country\", localField: \"Country\", foreignField: \"Country_id\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $group: { _id: \"$country_info.Official_native_language\" } }, { $count: \"distinct_official_languages\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 648,
        "spider_question_id": 1082,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "query": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_season_data\" } }, { $unwind: \"$match_season_data\" }, { $match: { \"match_season_data.Position\": \"Defender\" } }, { $group: { _id: null, distinctLanguages: { $addToSet: \"$Official_native_language\" } } }, { $project: { count: { $size: \"$distinctLanguages\" } } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $match: { Position: \"Defender\" } }, { $lookup: { from: \"country\", localField: \"Country\", foreignField: \"Country_id\", as: \"country_info\" } }, { $unwind: \"$country_info\" }, { $group: { _id: \"$country_info.Official_native_language\" } }, { $count: \"distinct_official_languages\" } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_season_data\" } }, { $unwind: \"$match_season_data\" }, { $match: { \"match_season_data.Position\": \"Defender\" } }, { $group: { _id: null, distinctLanguages: { $addToSet: \"$Official_native_language\" } } }, { $project: { count: { $size: \"$distinctLanguages\" } } } ])"
    },
    {
        "question_id": 649,
        "spider_question_id": 1085,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Ryley Goldner'",
        "question": "Show the positions of the players from the team with name 'Ryley Goldner'.",
        "query": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.Name\": \"Ryley Goldner\" } }, { $project: { Position: 1 } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Ryley Goldner\" } }, { $project: { Position: 1 } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.Name\": \"Ryley Goldner\" } }, { $project: { Position: 1 } } ])"
    },
    {
        "question_id": 650,
        "spider_question_id": 1086,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Ryley Goldner'",
        "question": "Return the positions of players on the team Ryley Goldner.",
        "query": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Ryley Goldner\" } }, { $project: { Position: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Ryley Goldner\" } }, { $project: { Position: 1 } } ])"
    },
    {
        "question_id": 651,
        "spider_question_id": 1087,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'",
        "question": "How many distinct colleges are associated with players from the team with name 'Columbus Crew'.",
        "query": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $group: { _id: \"$College\" } }, { $count: \"distinct_colleges\" } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $group: { _id: \"$College\" } }, { $count: \"distinct_colleges\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 652,
        "spider_question_id": 1088,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "query": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $group: { _id: \"$College\" } }, { $count: \"distinct_colleges\" } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $group: { _id: \"$College\" } }, { $count: \"distinct_colleges\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 653,
        "spider_question_id": 1089,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'",
        "question": "Show the players and years played for players from team 'Columbus Crew'.",
        "query": "db.player.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $project: { Player: 1, Years_Played: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $project: { Player: 1, Years_Played: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $project: { Player: 1, Years_Played: 1 } } ])"
    },
    {
        "question_id": 654,
        "spider_question_id": 1090,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'",
        "question": "What are the players who played for Columbus Crew, and how many years did each play for?",
        "query": "db.player.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $project: { Player: 1, Years_Played: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $project: { Player: 1, Years_Played: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"team\", localField: \"Team\", foreignField: \"Team_id\", as: \"team_info\" } }, { $match: { \"team_info.Name\": \"Columbus Crew\" } }, { $project: { Player: 1, Years_Played: 1 } } ])"
    },
    {
        "question_id": 655,
        "spider_question_id": 1091,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT POSITION , COUNT(*) FROM match_season GROUP BY POSITION",
        "question": "Show the position of players and the corresponding number of players.",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $project: { Position: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", numberOfPlayers: { $sum: 1 } }}, { $project: { Position: \"$_id\", NumberOfPlayers: \"$numberOfPlayers\" }} ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $project: { Position: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 656,
        "spider_question_id": 1092,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT POSITION , COUNT(*) FROM match_season GROUP BY POSITION",
        "question": "How many players played each position?",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.match_season.aggregate([ {$group: {_id: \"$Position\", totalPlayers: {$sum: 1}}} ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 657,
        "spider_question_id": 1094,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country_name , COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
        "question": "How many players are from each country?",
        "query": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $group: { _id: \"$Country_name\", count: { $sum: 1 } } }, { $project: { Country_name: \"$_id\", count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"matches\" } }, { $unwind: \"$matches\" }, { $group: { _id: \"$Country_name\", count: { $sum: 1 } } }, { $project: { Country_name: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 658,
        "spider_question_id": 1097,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the most common position of players in match seasons.",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Position: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Position: \"$_id\" } } ])"
    },
    {
        "question_id": 659,
        "spider_question_id": 1098,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the position that is most common among players in match seasons?",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Position: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Position: \"$_id\" } } ])"
    },
    {
        "question_id": 660,
        "spider_question_id": 1099,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { College: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { College: \"$_id\" } } ])"
    },
    {
        "question_id": 661,
        "spider_question_id": 1100,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the three colleges from which the most players are from?",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { College: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { College: \"$_id\" } } ])"
    },
    {
        "question_id": 662,
        "spider_question_id": 1101,
        "db_id": "match_season",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2",
        "question": "Show the name of colleges that have at least two players.",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { College: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", numPlayers: { $sum: 1 } } }, { $match: { numPlayers: { $gte: 2 } } }, { $project: { College: \"$_id\" } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { College: \"$_id\" } } ])"
    },
    {
        "question_id": 663,
        "spider_question_id": 1102,
        "db_id": "match_season",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2",
        "question": "What are the names of all colleges that have two or more players?",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { College: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: {_id: \"$College\", playerCount: { $sum: 1 }}}, { $match: { playerCount: { $gte: 2 } }}, { $project: { College: \"$_id\" }} ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { College: \"$_id\" } } ])"
    },
    {
        "question_id": 664,
        "spider_question_id": 1103,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $sort: { _id: -1 } }, { $project: { College: \"$_id\" } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $sort: { _id: -1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $sort: { _id: -1 } }, { $project: { College: \"$_id\" } } ])"
    },
    {
        "question_id": 665,
        "spider_question_id": 1104,
        "db_id": "match_season",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "query": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $sort: { _id: -1 } } , { $project: { College: \"$_id\" } }])",
        "gpt4 answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $sort: { _id: -1 }}, { $project: { College: \"$_id\" }} ])",
        "deepseek answer": "db.match_season.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $sort: { _id: -1 } } , { $project: { College: \"$_id\" } }])"
    },
    {
        "question_id": 666,
        "spider_question_id": 1105,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "What are the names of teams that do no have match season record?",
        "query": "db.team.find( { Team_id: { $nin: db.match_season.distinct(\"Team\") } }, { Name: 1 } )",
        "gpt4 answer": "db.team.find({ \"Team_id\": { $nin: db.match_season.distinct(\"Team\") } }, { \"Name\": 1, \"_id\": 0 })",
        "deepseek answer": "db.team.find( { Team_id: { $nin: db.match_season.distinct(\"Team\") } }, { Name: 1 } )"
    },
    {
        "question_id": 667,
        "spider_question_id": 1106,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Return the names of teams that have no match season record.",
        "query": "db.team.aggregate([ { $lookup: { from: \"match_season\", localField: \"Team_id\", foreignField: \"Team\", as: \"match_record\" } }, { $match: { match_record: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.team.aggregate([ { $lookup: { from: \"match_season\", localField: \"Team_id\", foreignField: \"Team\", as: \"match_record\" } }, { $match: { match_record: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 668,
        "spider_question_id": 1107,
        "db_id": "match_season",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'",
        "question": "What are the names of countries that have both players with position forward and players with position defender?",
        "query": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"ms\" } }, { $unwind: \"$ms\" }, { $group: { _id: \"$Country_name\", positions: { $addToSet: \"$ms.Position\"} } }, { $match: { positions: { $all: [\"Forward\", \"Defender\"] } } }, { $project: { Country_name: \"$_id\" } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"ms\" } }, { $unwind: \"$ms\" }, { $group: { _id: \"$Country_name\", positions: { $addToSet: \"$ms.Position\"} } }, { $match: { positions: { $all: [\"Forward\", \"Defender\"] } } }, { $project: { Country_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 669,
        "spider_question_id": 1108,
        "db_id": "match_season",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "query": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_info\" } }, { $match: { \"match_info.Position\": { $in: [\"Forward\", \"Defender\"] } } }, { $project: { Country_name: 1, match_info: { $filter: { input: \"$match_info\", as: \"mi\", cond: { $or: [ { $eq: [\"$$mi.Position\", \"Forward\"] }, { $eq: [\"$$mi.Position\", \"Defender\"] } ] } } } } }, { $match: { $expr: { $and: [ { $in: [\"Forward\", \"$match_info.Position\"] }, { $in: [\"Defender\", \"$match_info.Position\"] } ] } } }, { $group: { _id: \"$Country_name\" } }, { $project: { Country_name: \"$_id\" } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"match_season\", localField: \"Country_id\", foreignField: \"Country\", as: \"match_info\" } }, { $match: { \"match_info.Position\": { $in: [\"Forward\", \"Defender\"] } } }, { $project: { Country_name: 1, match_info: { $filter: { input: \"$match_info\", as: \"mi\", cond: { $or: [ { $eq: [\"$$mi.Position\", \"Forward\"] }, { $eq: [\"$$mi.Position\", \"Defender\"] } ] } } } } }, { $match: { $expr: { $and: [ { $in: [\"Forward\", \"$match_info.Position\"] }, { $in: [\"Defender\", \"$match_info.Position\"] } ] } } }, { $group: { _id: \"$Country_name\" } }, { $project: { Country_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 670,
        "spider_question_id": 1109,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT College FROM match_season WHERE POSITION = 'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION = 'Defender'",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "query": "db.match_season.aggregate([ { $match: { $or: [{ Position: 'Midfielder' }, { Position: 'Defender' }] } }, { $group: { _id: \"$College\", positions: { $addToSet: \"$Position\" } } }, { $match: { positions: { $all: ['Midfielder', 'Defender'] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $match: { $or: [{ Position: 'Midfielder' }, { Position: 'Defender' }] } }, { $group: { _id: \"$College\", positions: { $addToSet: \"$Position\" } } }, { $match: { positions: { $all: ['Midfielder', 'Defender'] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 671,
        "spider_question_id": 1110,
        "db_id": "match_season",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT College FROM match_season WHERE POSITION = 'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION = 'Defender'",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "query": "db.match_season.aggregate([ { $match: { $or: [{ Position: 'Midfielder' }, { Position: 'Defender' }] } }, { $group: { _id: '$College', positions: { $addToSet: '$Position' } } }, { $match: { positions: { $all: ['Midfielder', 'Defender'] } } }, { $project: { College: '$_id' } } ])",
        "gpt4 answer": "db.match_season.aggregate([ { $match: { $or: [{ Position: 'Midfielder' }, { Position: 'Defender' }] } }, { $group: { _id: '$College', positions: { $addToSet: '$Position' } } }, { $match: { positions: { $all: ['Midfielder', 'Defender'] } } }, { $project: { College: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 672,
        "spider_question_id": 1113,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "List the names of climbers in descending order of points.",
        "query": "db.climber.find({}, { Name: 1}).sort({Points: -1})",
        "gpt4 answer": "db.climber.find({}, {Name: 1}).sort({Points: -1})",
        "deepseek answer": "db.climber.find({}, { Name: 1}).sort({Points: -1})"
    },
    {
        "question_id": 673,
        "spider_question_id": 1114,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "What are the names of the climbers, ordered by points descending?",
        "query": "db.climber.find({}, { Name: 1}).sort({Points: -1})",
        "gpt4 answer": "db.climber.find({}, { Name: 1 }).sort({ Points: -1 })",
        "deepseek answer": "db.climber.find({}, { Name: 1}).sort({Points: -1})"
    },
    {
        "question_id": 674,
        "spider_question_id": 1115,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM climber WHERE Country != 'Switzerland'",
        "question": "List the names of climbers whose country is not Switzerland.",
        "query": "db.climber.find({Country: {$ne: 'Switzerland'}}, { Name: 1})",
        "gpt4 answer": "db.climber.find({ Country: { $ne: 'Switzerland' }}, { Name: 1 })",
        "deepseek answer": "db.climber.find({Country: {$ne: 'Switzerland'}}, { Name: 1})"
    },
    {
        "question_id": 675,
        "spider_question_id": 1116,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM climber WHERE Country != 'Switzerland'",
        "question": "What are the names of climbers who are not from the country of Switzerland?",
        "query": "db.climber.find({Country: {$ne: 'Switzerland'}}, {Name: 1})",
        "gpt4 answer": "db.climber.find({Country: {$ne: 'Switzerland'}}, { Name: 1})",
        "deepseek answer": "db.climber.find({Country: {$ne: 'Switzerland'}}, {Name: 1})"
    },
    {
        "question_id": 676,
        "spider_question_id": 1117,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Points) FROM climber WHERE Country = 'United Kingdom'",
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "query": "db.climber.aggregate([ { $match: { Country: \"United Kingdom\" } }, { $group: { _id: null, maxPoints: { $max: \"$Points\" } } }, { $project: { maxPoints: 1 } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $match: { Country: \"United Kingdom\" }}, { $group: { _id: null, maxPoints: { $max: \"$Points\" } } }, { $project: { maxPoints: 1 } } ])",
        "deepseek answer": "db.climber.aggregate([ { $match: { Country: \"United Kingdom\" } }, { $group: { _id: null, maxPoints: { $max: \"$Points\" } } }, { $project: { maxPoints: 1 } } ])"
    },
    {
        "question_id": 677,
        "spider_question_id": 1118,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Points) FROM climber WHERE Country = 'United Kingdom'",
        "question": "Return the maximum number of points for climbers from the United Kingdom.",
        "query": "db.climber.aggregate([ { $match: { Country: \"United Kingdom\" } }, { $group: { _id: null, maxPoints: { $max: \"$Points\" } } }, { $project: { maxPoints: 1 } } ])",
        "gpt4 answer": "db.climber.aggregate([ {$match: {Country: 'United Kingdom'}}, {$group: {_id: null, maxPoints: {$max: \"$Points\"}}}, {$project: { maxPoints: 1}} ])",
        "deepseek answer": "db.climber.aggregate([ { $match: { Country: \"United Kingdom\" } }, { $group: { _id: null, maxPoints: { $max: \"$Points\" } } }, { $project: { maxPoints: 1 } } ])"
    },
    {
        "question_id": 678,
        "spider_question_id": 1121,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM mountain ORDER BY Name ASC",
        "question": "What are the names of mountains in ascending alphabetical order?",
        "query": "db.mountain.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.mountain.find({}, {Name: 1}).sort({Name: 1})",
        "deepseek answer": "db.mountain.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 679,
        "spider_question_id": 1122,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM mountain ORDER BY Name ASC",
        "question": "Give the names of mountains in alphabetical order.",
        "query": "db.mountain.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.mountain.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.mountain.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 680,
        "spider_question_id": 1123,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM mountain WHERE Height > 5000",
        "question": "What are the countries of mountains with height bigger than 5000?",
        "query": "db.mountain.find({Height: {$gt: 5000}}, {Country: 1})",
        "gpt4 answer": "db.mountain.find({ Height: { $gt: 5000 } }, { Country: 1 })",
        "deepseek answer": "db.mountain.find({Height: {$gt: 5000}}, {Country: 1})"
    },
    {
        "question_id": 681,
        "spider_question_id": 1124,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM mountain WHERE Height > 5000",
        "question": "Return the countries of the mountains that have a height larger than 5000.",
        "query": "db.mountain.find({Height: {$gt: 5000}}, {Country: 1})",
        "gpt4 answer": "db.mountain.find({ Height: { $gt: 5000 }}, { Country: 1 })",
        "deepseek answer": "db.mountain.find({Height: {$gt: 5000}}, {Country: 1})"
    },
    {
        "question_id": 682,
        "spider_question_id": 1125,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "question": "What is the name of the highest mountain?",
        "query": "db.mountain.find({}, {Name: 1}).sort({Height: -1}).limit(1)",
        "gpt4 answer": "db.mountain.find({}, { Name: 1 }).sort({ Height: -1 }).limit(1)",
        "deepseek answer": "db.mountain.find({}, {Name: 1}).sort({Height: -1}).limit(1)"
    },
    {
        "question_id": 683,
        "spider_question_id": 1126,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "question": "Return the name of the mountain with the greatest height.",
        "query": "db.mountain.find({}, {Name: 1}).sort({Height: -1}).limit(1)",
        "gpt4 answer": "db.mountain.find({}, { Name: 1 }).sort({ Height: -1 }).limit(1)",
        "deepseek answer": "db.mountain.find({}, {Name: 1}).sort({Height: -1}).limit(1)"
    },
    {
        "question_id": 684,
        "spider_question_id": 1127,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "question": "List the distinct ranges of the mountains with the top 3 prominence.",
        "query": "db.mountain.aggregate([ { $sort: { Prominence: -1 } }, { $limit: 3 }, { $project: { Range: 1 } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $sort: { Prominence: -1 } }, { $limit: 3 }, { $group: { _id: \"$Range\" } } ])",
        "deepseek answer": "db.mountain.aggregate([ { $sort: { Prominence: -1 } }, { $limit: 3 }, { $project: { Range: 1 } } ])"
    },
    {
        "question_id": 685,
        "spider_question_id": 1128,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "question": "What are the different ranges of the 3 mountains with the highest prominence?",
        "query": "db.mountain.aggregate([ { $sort: { Prominence: -1 } }, { $limit: 3 }, { $group: { _id: \"$Range\" } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $sort: { Prominence: -1 } }, { $limit: 3 }, { $group: { _id: \"$Range\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 686,
        "spider_question_id": 1129,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
        "question": "Show names of climbers and the names of mountains they climb.",
        "query": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $project: { \"Name\": 1, \"mountain_name\": \"$mountain_info.Name\" } }, { $unwind: \"$mountain_name\" } ])",
        "gpt4 answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $project: { \"Name\": 1, \"mountain_name\": \"$mountain_info.Name\" } }, { $unwind: \"$mountain_name\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 687,
        "spider_question_id": 1130,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
        "question": "What are the names of climbers and the corresponding names of mountains that they climb?",
        "query": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $project: { \"climber_name\": \"$Name\", \"mountain_name\": \"$mountain_info.Name\" } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $project: { \"climber_name\": \"$Name\", \"mountain_name\": \"$mountain_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 688,
        "spider_question_id": 1131,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
        "question": "Show the names of climbers and the heights of mountains they climb.",
        "query": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $project: { \"Name\": \"$Name\", \"Height\": \"$mountain_info.Height\" } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $project: { \"Name\": \"$Name\", \"Height\": \"$mountain_info.Height\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 689,
        "spider_question_id": 1135,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = 'West Germany'",
        "question": "Show the distinct names of mountains climbed by climbers from country 'West Germany'.",
        "query": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_data\" } }, { $match: { \"Country\": \"West Germany\" } }, { $unwind: \"$mountain_data\" }, { $group: { _id: \"$mountain_data.Name\" } }, { $project: { \"Name\": \"$_id\" } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_data\" } }, { $match: { \"Country\": \"West Germany\" } }, { $unwind: \"$mountain_data\" }, { $group: { _id: \"$mountain_data.Name\" } }, { $project: { \"Name\": \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 690,
        "spider_question_id": 1136,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = 'West Germany'",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "query": "db.climber.aggregate([ { $match: { Country: 'West Germany' } }, { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $group: { _id: \"$mountain_info.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $match: { Country: 'West Germany' } }, { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $group: { _id: \"$mountain_info.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 691,
        "spider_question_id": 1137,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = 'Uganda'",
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "query": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $match: { \"mountain_info.Country\": \"Uganda\" } }, { $project: { Time: 1 } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $match: { \"mountain_info.Country\": \"Uganda\" } }, { $project: { Time: 1 } } ])",
        "deepseek answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $match: { \"mountain_info.Country\": \"Uganda\" } }, { $project: { Time: 1 } } ])"
    },
    {
        "question_id": 692,
        "spider_question_id": 1138,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = 'Uganda'",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "query": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $match: { \"mountain_info.Country\": \"Uganda\" } }, { $project: { Time: 1 } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $match: { \"mountain_info.Country\": \"Uganda\" } }, { $project: { Time: 1 } } ])",
        "deepseek answer": "db.climber.aggregate([ { $lookup: { from: \"mountain\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"mountain_info\" } }, { $match: { \"mountain_info.Country\": \"Uganda\" } }, { $project: { Time: 1 } } ])"
    },
    {
        "question_id": 693,
        "spider_question_id": 1139,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country , COUNT(*) FROM climber GROUP BY Country",
        "question": "Please show the countries and the number of climbers from each country.",
        "query": "db.climber.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { Country: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $group: { _id: \"$Country\", numberOfClimbers: { $sum: 1 } } }, { $project: { Country: \"$_id\", numberOfClimbers: 1 } } ])",
        "deepseek answer": "db.climber.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { Country: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 694,
        "spider_question_id": 1140,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country , COUNT(*) FROM climber GROUP BY Country",
        "question": "How many climbers are from each country?",
        "query": "db.climber.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.climber.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.climber.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 695,
        "spider_question_id": 1141,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1",
        "question": "List the countries that have more than one mountain.",
        "query": "db.mountain.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $group: { _id: \"$Country\", mountainCount: {$sum: 1} } }, { $match: { mountainCount: {$gt: 1} } }, { $project: { Country: \"$_id\" } } ])",
        "deepseek answer": "db.mountain.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])"
    },
    {
        "question_id": 696,
        "spider_question_id": 1142,
        "db_id": "climbing",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1",
        "question": "Which countries have more than one mountain?",
        "query": "db.mountain.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])",
        "deepseek answer": "db.mountain.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])"
    },
    {
        "question_id": 697,
        "spider_question_id": 1143,
        "db_id": "climbing",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "question": "List the names of mountains that do not have any climber.",
        "query": "db.mountain.find({ Mountain_ID: { $nin: db.climber.distinct(\"Mountain_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.mountain.aggregate([ { $lookup: { from: \"climber\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"climbers\" } }, { $match: { climbers: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.mountain.find({ Mountain_ID: { $nin: db.climber.distinct(\"Mountain_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 698,
        "spider_question_id": 1144,
        "db_id": "climbing",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "question": "What are the names of countains that no climber has climbed?",
        "query": "db.mountain.find( { Mountain_ID: { $nin: db.climber.distinct(\"Mountain_ID\") } }, { Name: 1 } )",
        "gpt4 answer": "db.mountain.aggregate([ { $lookup: { from: \"climber\", localField: \"Mountain_ID\", foreignField: \"Mountain_ID\", as: \"climber_info\" } }, { $match: { \"climber_info\": { $eq: [] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.mountain.find( { Mountain_ID: { $nin: db.climber.distinct(\"Mountain_ID\") } }, { Name: 1 } )"
    },
    {
        "question_id": 699,
        "spider_question_id": 1147,
        "db_id": "climbing",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the range that has the most number of mountains.",
        "query": "db.mountain.aggregate([ { $group: { _id: \"$Range\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Range: \"$_id\" } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $group: { _id: \"$Range\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Range: \"$_id\" } } ])",
        "deepseek answer": "db.mountain.aggregate([ { $group: { _id: \"$Range\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Range: \"$_id\" } } ])"
    },
    {
        "question_id": 700,
        "spider_question_id": 1148,
        "db_id": "climbing",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which range contains the most mountains?",
        "query": "db.mountain.aggregate([ { $group: { _id: \"$Range\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Range: \"$_id\" } }])",
        "gpt4 answer": "db.mountain.aggregate([ { $group: { _id: \"$Range\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.mountain.aggregate([ { $group: { _id: \"$Range\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Range: \"$_id\" } }])"
    },
    {
        "question_id": 701,
        "spider_question_id": 1149,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "query": "db.mountain.find({$or: [{Height: {$gt: 5000}}, {Prominence: {$gt: 1000}}]}, { Name: 1})",
        "gpt4 answer": "db.mountain.find( { $or: [ { Height: { $gt: 5000 } }, { Prominence: { $gt: 1000 } } ] }, { Name: 1 } )",
        "deepseek answer": "db.mountain.find({$or: [{Height: {$gt: 5000}}, {Prominence: {$gt: 1000}}]}, { Name: 1})"
    },
    {
        "question_id": 702,
        "spider_question_id": 1150,
        "db_id": "climbing",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
        "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
        "query": "db.mountain.find({$or: [{Height: {$gt: 5000}}, {Prominence: {$gt: 1000}}]}, { Name: 1})",
        "gpt4 answer": "db.mountain.find( { $or: [ { Height: { $gt: 5000 } }, { Prominence: { $gt: 1000 } } ] }, { Name: 1 } )",
        "deepseek answer": "db.mountain.find({$or: [{Height: {$gt: 5000}}, {Prominence: {$gt: 1000}}]}, { Name: 1})"
    },
    {
        "question_id": 703,
        "spider_question_id": 1152,
        "db_id": "body_builder",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total FROM body_builder ORDER BY Total ASC",
        "question": "List the total scores of body builders in ascending order.",
        "query": "db.body_builder.aggregate([ { $sort: { Total: 1 } }, { $project: { Total: 1 } } ])",
        "gpt4 answer": "db.body_builder.find({}, { Total: 1 }).sort({ Total: 1 })",
        "deepseek answer": "db.body_builder.aggregate([ { $sort: { Total: 1 } }, { $project: { Total: 1 } } ])"
    },
    {
        "question_id": 704,
        "spider_question_id": 1153,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Snatch , Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "query": "db.body_builder.aggregate([ { $sort: { Snatch: 1 } }, { $project: { Snatch: 1, Clean_Jerk: 1 } } ])",
        "gpt4 answer": "db.body_builder.find({}, { Snatch: 1, Clean_Jerk: 1 }).sort({ Snatch: 1 })",
        "deepseek answer": "db.body_builder.aggregate([ { $sort: { Snatch: 1 } }, { $project: { Snatch: 1, Clean_Jerk: 1 } } ])"
    },
    {
        "question_id": 705,
        "spider_question_id": 1154,
        "db_id": "body_builder",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Snatch) FROM body_builder",
        "question": "What is the average snatch score of body builders?",
        "query": "db.body_builder.aggregate([ { $group: { _id: null, averageSnatch: { $avg: \"$Snatch\" } } }, { $project: { averageSnatch: 1 } } ])",
        "gpt4 answer": "db.body_builder.aggregate([ { $group: { _id: null, averageSnatch: { $avg: \"$Snatch\" } } }, { $project: { averageSnatch: 1 } } ])",
        "deepseek answer": "db.body_builder.aggregate([ { $group: { _id: null, averageSnatch: { $avg: \"$Snatch\" } } }, { $project: { averageSnatch: 1 } } ])"
    },
    {
        "question_id": 706,
        "spider_question_id": 1155,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "query": "db.body_builder.find({}, {Clean_Jerk: 1}).sort({Total: -1}).limit(1)",
        "gpt4 answer": "db.body_builder.find({}, {Clean_Jerk: 1}).sort({Total: -1}).limit(1)",
        "deepseek answer": "db.body_builder.find({}, {Clean_Jerk: 1}).sort({Total: -1}).limit(1)"
    },
    {
        "question_id": 707,
        "spider_question_id": 1156,
        "db_id": "body_builder",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Birth_Date FROM People ORDER BY Height ASC",
        "question": "What are the birthdays of people in ascending order of height?",
        "query": "db.people.find({}, { Birth_Date: 1 }).sort({ Height: 1 })",
        "gpt4 answer": "db.people.find({}, { Birth_Date: 1 }).sort({ Height: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 708,
        "spider_question_id": 1157,
        "db_id": "body_builder",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "question": "What are the names of body builders?",
        "query": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builders\" } }, { $match: { \"body_builders\": { $ne: [] } } }, { $project: { \"Name\": 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builders\" } }, { $match: { \"body_builders\": { $ne: [] } } }, { $project: { \"Name\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 709,
        "spider_question_id": 1158,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
        "question": "What are the names of body builders whose total score is higher than 300?",
        "query": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { Total: { $gt: 300 } } }, { $project: { Name: \"$people_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { Total: { $gt: 300 } } }, { $project: { Name: \"$people_info.Name\" } } ])"
    },
    {
        "question_id": 710,
        "spider_question_id": 1159,
        "db_id": "body_builder",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the body builder with the greatest body weight?",
        "query": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" } }, { $unwind: \"$body_builder_info\" }, { $sort: {\"body_builder_info.Weight\": -1} }, { $limit: 1 }, { $project: { Name: \"$body_builder_info.Name\"} } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" } }, { $unwind: \"$body_builder_info\" }, { $sort: {\"body_builder_info.Weight\": -1} }, { $limit: 1 }, { $project: { Name: \"$body_builder_info.Name\"} } ])"
    },
    {
        "question_id": 711,
        "spider_question_id": 1160,
        "db_id": "body_builder",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Birth_Date , T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
        "question": "What are the birth date and birth place of the body builder with the highest total points?",
        "query": "db.body_builder.aggregate([ { $sort: { Total: -1 } }, { $limit: 1 }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Birth_Date: \"$people_info.Birth_Date\", Birth_Place: \"$people_info.Birth_Place\" } } ])",
        "gpt4 answer": "db.body_builder.aggregate([ { $sort: { Total: -1 } }, { $limit: 1 }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Birth_Date: \"$people_info.Birth_Date\", Birth_Place: \"$people_info.Birth_Place\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 712,
        "spider_question_id": 1161,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315",
        "question": "What are the heights of body builders with total score smaller than 315?",
        "query": "db.body_builder.aggregate([ { $match: { Total: { $lt: 315 } } }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Height: \"$people_info.Height\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.body_builder.aggregate([ { $match: { Total: { $lt: 315 } } }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Height: \"$people_info.Height\" } } ])"
    },
    {
        "question_id": 713,
        "spider_question_id": 1162,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
        "question": "What is the average total score of body builders with height bigger than 200?",
        "query": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 200 } } }, { $group: { _id: null, averageTotal: { $avg: \"$Total\" } } } , { $project: { averageTotal: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Height: { $gt: 200 } } }, { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"builder_info\" } }, { $unwind: \"$builder_info\" }, { $group: { _id: null, avgTotal: { $avg: \"$builder_info.Total\" } } }, { $project: { avgTotal: 1 } } ])",
        "deepseek answer": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 200 } } }, { $group: { _id: null, averageTotal: { $avg: \"$Total\" } } } , { $project: { averageTotal: 1 } } ])"
    },
    {
        "question_id": 714,
        "spider_question_id": 1163,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC",
        "question": "What are the names of body builders in descending order of total scores?",
        "query": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"person_info\" } }, { $unwind: \"$person_info\" }, { $project: { Name: \"$person_info.Name\"} }, { $sort: { Total: -1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"person_info\" } }, { $unwind: \"$person_info\" }, { $project: { Name: \"$person_info.Name\"} }, { $sort: { Total: -1 } }])"
    },
    {
        "question_id": 715,
        "spider_question_id": 1164,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Birth_Place , COUNT(*) FROM people GROUP BY Birth_Place",
        "question": "List each birth place along with the number of people from there.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Birth_Place\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Birth_Place\", NumberOfPeople: { $sum: 1 } } }, { $project: { Birth_Place: \"$_id\", NumberOfPeople: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Birth_Place\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 716,
        "spider_question_id": 1167,
        "db_id": "body_builder",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Height , Weight FROM people ORDER BY Height DESC",
        "question": "List the height and weight of people in descending order of height.",
        "query": "db.people.find({}, {Height: 1, Weight: 1}).sort({Height: -1})",
        "gpt4 answer": "db.people.find({}, { Height: 1, Weight: 1 }).sort({ Height: -1 })",
        "deepseek answer": "db.people.find({}, {Height: 1, Weight: 1}).sort({Height: -1})"
    },
    {
        "question_id": 717,
        "spider_question_id": 1168,
        "db_id": "body_builder",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM body_builder",
        "question": "Show all information about each body builder.",
        "query": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"builder_info\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [\"$builder_info\", 0] }, \"$$ROOT\" ] } } }, { $project: { builder_info: 0 } } ])",
        "gpt4 answer": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"builder_info\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [\"$builder_info\", 0] }, \"$$ROOT\" ] } } }, { $project: { builder_info: 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 718,
        "spider_question_id": 1169,
        "db_id": "body_builder",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id",
        "question": "List the names and origins of people who are not body builders.",
        "query": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" } }, { $match: { \"body_builder_info\": { $size: 0 } } }, { $project: { Name: 1, Birth_Place: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"builder_info\" } }, { $match: { \"builder_info\": { $size: 0 } } }, { $project: { Name: 1, Birth_Place: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" } }, { $match: { \"body_builder_info\": { $size: 0 } } }, { $project: { Name: 1, Birth_Place: 1 } } ])"
    },
    {
        "question_id": 719,
        "spider_question_id": 1171,
        "db_id": "body_builder",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
        "question": "How many persons are not body builders?",
        "query": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" } }, { $match: { body_builder_info: { $size: 0 } } }, { $count: \"not_body_builders_count\" } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" } }, { $match: { body_builder_info: { $size: 0 } } }, { $count: \"not_body_builders_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 720,
        "spider_question_id": 1173,
        "db_id": "body_builder",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE '%January%'",
        "question": "What are the total scores of the body builders whose birthday contains the string 'January' ?",
        "query": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Birth_Date\": { $regex: /January/ } } }, { $group: { _id: null, total: { $sum: \"$Total\" } } }, { $project: { total: \"$Total\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Birth_Date: /January/ } }, { $lookup: { from: \"body_builder\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"body_builder_info\" }}, { $unwind: \"$body_builder_info\" }, { $project: { total: \"$body_builder_info.Total\" } } ])",
        "deepseek answer": "db.body_builder.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Birth_Date\": { $regex: /January/ } } }, { $group: { _id: null, total: { $sum: \"$Total\" } } }, { $project: { total: \"$Total\" } } ])"
    },
    {
        "question_id": 721,
        "spider_question_id": 1174,
        "db_id": "body_builder",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT min(snatch) FROM body_builder",
        "question": "What is the minimum snatch score?",
        "query": "db.body_builder.aggregate([ { $group: { _id: null, minSnatch: { $min: \"$Snatch\" } } }, { $project: { minSnatch: 1 } } ])",
        "gpt4 answer": "db.body_builder.aggregate([ { $group: { _id: null, minSnatch: { $min: \"$Snatch\" } } }, { $project: { minSnatch: 1 } } ])",
        "deepseek answer": "db.body_builder.aggregate([ { $group: { _id: null, minSnatch: { $min: \"$Snatch\" } } }, { $project: { minSnatch: 1 } } ])"
    },
    {
        "question_id": 722,
        "spider_question_id": 1176,
        "db_id": "election_representative",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Votes FROM election ORDER BY Votes DESC",
        "question": "List the votes of elections in descending order.",
        "query": "db.election.find({}, {Votes: 1}).sort({Votes: -1})",
        "gpt4 answer": "db.election.find({}, { Votes: 1 }).sort({ Votes: -1 })",
        "deepseek answer": "db.election.find({}, {Votes: 1}).sort({Votes: -1})"
    },
    {
        "question_id": 723,
        "spider_question_id": 1177,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date , Vote_Percent FROM election",
        "question": "List the dates and vote percents of elections.",
        "query": "db.election.find({}, {Date: 1, Vote_Percent: 1})",
        "gpt4 answer": "db.election.find({}, { Date: 1, Vote_Percent: 1 })",
        "deepseek answer": "db.election.find({}, {Date: 1, Vote_Percent: 1})"
    },
    {
        "question_id": 724,
        "spider_question_id": 1178,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Vote_Percent) , max(Vote_Percent) FROM election",
        "question": "What are the minimum and maximum vote percents of elections?",
        "query": "db.election.aggregate([ { $group: { _id: null, minVotePercent: { $min: \"$Vote_Percent\" }, maxVotePercent: { $max: \"$Vote_Percent\" } } }, { $project: { minVotePercent: 1, maxVotePercent: 1 } } ])",
        "gpt4 answer": "db.election.aggregate([ { $group: { _id: null, minVotePercent: { $min: \"$Vote_Percent\" }, maxVotePercent: { $max: \"$Vote_Percent\" } } }, { $project: { minVotePercent: 1, maxVotePercent: 1 } } ])",
        "deepseek answer": "db.election.aggregate([ { $group: { _id: null, minVotePercent: { $min: \"$Vote_Percent\" }, maxVotePercent: { $max: \"$Vote_Percent\" } } }, { $project: { minVotePercent: 1, maxVotePercent: 1 } } ])"
    },
    {
        "question_id": 725,
        "spider_question_id": 1179,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Party FROM representative",
        "question": "What are the names and parties of representatives?",
        "query": "db.representative.find({}, { Name: 1, Party: 1})",
        "gpt4 answer": "db.representative.find({}, { Name: 1, Party: 1 })",
        "deepseek answer": "db.representative.find({}, { Name: 1, Party: 1})"
    },
    {
        "question_id": 726,
        "spider_question_id": 1180,
        "db_id": "election_representative",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM Representative WHERE Party != 'Republican'",
        "question": "What are the names of representatives whose party is not 'Republican'?",
        "query": "db.representative.find({ Party: { $ne: 'Republican' } }, { Name: 1 })",
        "gpt4 answer": "db.representative.find({ Party: { $ne: \"Republican\" } }, { Name: 1 })",
        "deepseek answer": "db.representative.find({ Party: { $ne: 'Republican' } }, { Name: 1 })"
    },
    {
        "question_id": 727,
        "spider_question_id": 1181,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Lifespan FROM representative WHERE State = 'New York' OR State = 'Indiana'",
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "query": "db.representative.find({State: {$in: ['New York', 'Indiana']}}, {Lifespan: 1})",
        "gpt4 answer": "db.representative.find( { State: { $in: [\"New York\", \"Indiana\"] } }, { Lifespan: 1 } )",
        "deepseek answer": "db.representative.find({State: {$in: ['New York', 'Indiana']}}, {Lifespan: 1})"
    },
    {
        "question_id": 728,
        "spider_question_id": 1182,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID",
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "query": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { Name: \"$representative_info.Name\", Date: 1 } } ])",
        "gpt4 answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { \"Name\": \"$representative_info.Name\", \"Date\": 1 } } ])",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { Name: \"$representative_info.Name\", Date: 1 } } ])"
    },
    {
        "question_id": 729,
        "spider_question_id": 1183,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "query": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $match: { Votes: { $gt: 10000 } } }, { $project: { Name: \"$representative_info.Name\" } } ])",
        "gpt4 answer": "db.election.aggregate([ { $match: { Votes: { $gt: 10000 } } }, { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"rep_info\" } }, { $unwind: \"$rep_info\" }, { $project: { \"Name\": \"$rep_info.Name\" } } ])",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $match: { Votes: { $gt: 10000 } } }, { $project: { Name: \"$representative_info.Name\" } } ])"
    },
    {
        "question_id": 730,
        "spider_question_id": 1184,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC",
        "question": "What are the names of representatives in descending order of votes?",
        "query": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { Name: \"$representative_info.Name\"} }, { $sort: { Votes: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { Name: \"$representative_info.Name\"} }, { $sort: { Votes: -1 } } ])"
    },
    {
        "question_id": 731,
        "spider_question_id": 1185,
        "db_id": "election_representative",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1",
        "question": "What is the party of the representative that has the smallest number of votes.",
        "query": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $sort: { Votes: 1 } }, { $limit: 1 }, { $project: { Party: \"$representative_info.Party\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $sort: { Votes: 1 } }, { $limit: 1 }, { $project: { Party: \"$representative_info.Party\" } } ])"
    },
    {
        "question_id": 732,
        "spider_question_id": 1186,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC",
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "query": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { Lifespan: \"$representative_info.Lifespan\"} }, { $sort: { Vote_Percent: -1 } } ])",
        "gpt4 answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { \"Lifespan\": \"$representative_info.Lifespan\" } }, { $sort: { \"Vote_Percent\": -1 } } ])",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $unwind: \"$representative_info\" }, { $project: { Lifespan: \"$representative_info.Lifespan\"} }, { $sort: { Vote_Percent: -1 } } ])"
    },
    {
        "question_id": 733,
        "spider_question_id": 1187,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = 'Republican'",
        "question": "What is the average number of votes of representatives from party 'Republican'?",
        "query": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $match: { \"representative_info.Party\": \"Republican\" } }, { $group: { _id: null, averageVotes: { $avg: \"$Votes\" } } }, { $project: { averageVotes: 1 } } ])",
        "gpt4 answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"rep_info\" } }, { $unwind: \"$rep_info\" }, { $match: { \"rep_info.Party\": \"Republican\" } }, { $group: { _id: null, averageVotes: { $avg: \"$Votes\" } } }, { $project: { averageVotes: 1 } } ])",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"representative\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"representative_info\" } }, { $match: { \"representative_info.Party\": \"Republican\" } }, { $group: { _id: null, averageVotes: { $avg: \"$Votes\" } } }, { $project: { averageVotes: 1 } } ])"
    },
    {
        "question_id": 734,
        "spider_question_id": 1188,
        "db_id": "election_representative",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Party , COUNT(*) FROM representative GROUP BY Party",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "query": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $project: { Party: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.representative.aggregate([ { $group: { _id: \"$Party\", NumberOfRepresentatives: { $sum: 1 } } }, { $project: { Party: \"$_id\", NumberOfRepresentatives: \"$NumberOfRepresentatives\" } } ])",
        "deepseek answer": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $project: { Party: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 735,
        "spider_question_id": 1189,
        "db_id": "election_representative",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the party that has the largest number of representatives?",
        "query": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 736,
        "spider_question_id": 1190,
        "db_id": "election_representative",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3",
        "question": "What parties have at least three representatives?",
        "query": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Party: \"$_id\" } } ])",
        "gpt4 answer": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.representative.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Party: \"$_id\" } } ])"
    },
    {
        "question_id": 737,
        "spider_question_id": 1191,
        "db_id": "election_representative",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2",
        "question": "What states have at least two representatives?",
        "query": "db.representative.aggregate([ { $group: { _id: \"$State\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { State: \"$_id\" } } ])",
        "gpt4 answer": "db.representative.aggregate([ { $group: { _id: \"$State\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.representative.aggregate([ { $group: { _id: \"$State\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { State: \"$_id\" } } ])"
    },
    {
        "question_id": 738,
        "spider_question_id": 1192,
        "db_id": "election_representative",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
        "question": "List the names of representatives that have not participated in elections listed here.",
        "query": "db.representative.find( { Representative_ID: { $nin: db.election.distinct(\"Representative_ID\") } }, { Name: 1 } )",
        "gpt4 answer": "db.representative.aggregate([ { $lookup: { from: \"election\", localField: \"Representative_ID\", foreignField: \"Representative_ID\", as: \"election_docs\" } }, { $match: { election_docs: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.representative.find( { Representative_ID: { $nin: db.election.distinct(\"Representative_ID\") } }, { Name: 1 } )"
    },
    {
        "question_id": 739,
        "spider_question_id": 1193,
        "db_id": "election_representative",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Party FROM representative WHERE State = 'New York' INTERSECT SELECT Party FROM representative WHERE State = 'Pennsylvania'",
        "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
        "query": "db.representative.aggregate([ { $match: { $or: [ { State: 'New York' }, { State: 'Pennsylvania' } ] } }, { $group: { _id: \"$Party\", states: { $addToSet: \"$State\" } } }, { $match: { states: { $all: [\"New York\", \"Pennsylvania\"] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.representative.aggregate([ { $match: { $or: [ { State: 'New York' }, { State: 'Pennsylvania' } ] } }, { $group: { _id: \"$Party\", states: { $addToSet: \"$State\" } } }, { $match: { states: { $all: [\"New York\", \"Pennsylvania\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 740,
        "spider_question_id": 1201,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'",
        "question": "Show the short names of the buildings managed by 'Emma'.",
        "query": "db.Apartment_Buildings.find({building_manager: 'Emma'}, {building_short_name: 1})",
        "gpt4 answer": "db.Apartment_Buildings.find({building_manager: 'Emma'}, {building_short_name: 1})",
        "deepseek answer": "db.Apartment_Buildings.find({building_manager: 'Emma'}, {building_short_name: 1})"
    },
    {
        "question_id": 741,
        "spider_question_id": 1202,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'",
        "question": "Which buildings does 'Emma' manage? Give me the short names of the buildings.",
        "query": "db.Apartment_Buildings.find( { building_manager: 'Emma' }, { building_short_name: 1 } )",
        "gpt4 answer": "db.Apartment_Buildings.find({ building_manager: 'Emma' }, { building_short_name: 1 })",
        "deepseek answer": "db.Apartment_Buildings.find( { building_manager: 'Emma' }, { building_short_name: 1 } )"
    },
    {
        "question_id": 742,
        "spider_question_id": 1203,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden'",
        "question": "Show the addresses and phones of all the buildings managed by 'Brenden'.",
        "query": "db.Apartment_Buildings.find({building_manager: 'Brenden'}, {building_address: 1, building_phone: 1})",
        "gpt4 answer": "db.Apartment_Buildings.find({ building_manager: 'Brenden' }, { building_address: 1, building_phone: 1 })",
        "deepseek answer": "db.Apartment_Buildings.find({building_manager: 'Brenden'}, {building_address: 1, building_phone: 1})"
    },
    {
        "question_id": 743,
        "spider_question_id": 1204,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden'",
        "question": "What are the address and phone number of the buildings managed by 'Brenden'?",
        "query": "db.Apartment_Buildings.find({building_manager: 'Brenden'}, {building_address: 1, building_phone: 1})",
        "gpt4 answer": "db.Apartment_Buildings.find({ building_manager: 'Brenden' }, { building_address: 1, building_phone: 1 })",
        "deepseek answer": "db.Apartment_Buildings.find({building_manager: 'Brenden'}, {building_address: 1, building_phone: 1})"
    },
    {
        "question_id": 744,
        "spider_question_id": 1205,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'",
        "question": "What are the building full names that contain the word 'court'?",
        "query": "db.Apartment_Buildings.find( { building_full_name: { $regex: /court/, $options: 'i' } }, { building_full_name: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Apartment_Buildings.find( { building_full_name: { $regex: /court/, $options: 'i' } }, { building_full_name: 1 } )"
    },
    {
        "question_id": 745,
        "spider_question_id": 1206,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'",
        "question": "Find all the building full names containing the word 'court'.",
        "query": "db.Apartment_Buildings.find( { building_full_name: { $regex: /court/, $options: 'i' } }, { building_full_name: 1 } )",
        "gpt4 answer": "db.Apartment_Buildings.find({building_full_name: /court/i}, {building_full_name: 1})",
        "deepseek answer": "db.Apartment_Buildings.find( { building_full_name: { $regex: /court/, $options: 'i' } }, { building_full_name: 1 } )"
    },
    {
        "question_id": 746,
        "spider_question_id": 1207,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(bathroom_count) , max(bathroom_count) FROM Apartments",
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "query": "db.Apartments.aggregate([ { $group: { _id: null, minBathroomCount: { $min: \"$bathroom_count\" }, maxBathroomCount: { $max: \"$bathroom_count\" } } }, { $project: { minBathroomCount: 1, maxBathroomCount: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: null, minBathrooms: { $min: \"$bathroom_count\" }, maxBathrooms: { $max: \"$bathroom_count\" } } }, { $project: { minBathrooms: 1, maxBathrooms: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: null, minBathroomCount: { $min: \"$bathroom_count\" }, maxBathroomCount: { $max: \"$bathroom_count\" } } }, { $project: { minBathroomCount: 1, maxBathroomCount: 1 } } ])"
    },
    {
        "question_id": 747,
        "spider_question_id": 1208,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(bathroom_count) , max(bathroom_count) FROM Apartments",
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "query": "db.Apartments.aggregate([ { $group: { _id: null, minBathroomCount: { $min: \"$bathroom_count\" }, maxBathroomCount: { $max: \"$bathroom_count\" } } } , { $project: { minBathroomCount: 1 , maxBathroomCount: 1 } }])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: null, min_bathroom_count: { $min: \"$bathroom_count\" }, max_bathroom_count: { $max: \"$bathroom_count\" } } }, { $project: { min_bathroom_count: 1, max_bathroom_count: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: null, minBathroomCount: { $min: \"$bathroom_count\" }, maxBathroomCount: { $max: \"$bathroom_count\" } } } , { $project: { minBathroomCount: 1 , maxBathroomCount: 1 } }])"
    },
    {
        "question_id": 748,
        "spider_question_id": 1209,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(bedroom_count) FROM Apartments",
        "question": "What is the average number of bedrooms of all apartments?",
        "query": "db.Apartments.aggregate([ { $group: { _id: null, averageBedroomCount: { $avg: \"$bedroom_count\" } } }, { $project: { averageBedroomCount: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: null, avgBedroomCount: { $avg: \"$bedroom_count\" } } }, { $project: { avgBedroomCount: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: null, averageBedroomCount: { $avg: \"$bedroom_count\" } } }, { $project: { averageBedroomCount: 1 } } ])"
    },
    {
        "question_id": 749,
        "spider_question_id": 1210,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(bedroom_count) FROM Apartments",
        "question": "Find the average number of bedrooms of all the apartments.",
        "query": "db.Apartments.aggregate([ { $group: { _id: null, averageBedroomCount: { $avg: \"$bedroom_count\" } } }, { $project: { averageBedroomCount: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: null, avgBedrooms: { $avg: \"$bedroom_count\" } } }, { $project: { avgBedrooms: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: null, averageBedroomCount: { $avg: \"$bedroom_count\" } } }, { $project: { averageBedroomCount: 1 } } ])"
    },
    {
        "question_id": 750,
        "spider_question_id": 1211,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT apt_number , room_count FROM Apartments",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "query": "db.Apartments.aggregate([ { $project: { apt_number: 1, room_count: 1 } } ])",
        "gpt4 answer": "db.Apartments.find({}, { apt_number: 1, room_count: 1 })",
        "deepseek answer": "db.Apartments.aggregate([ { $project: { apt_number: 1, room_count: 1 } } ])"
    },
    {
        "question_id": 751,
        "spider_question_id": 1212,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT apt_number , room_count FROM Apartments",
        "question": "What are the apartment number and the room count of each apartment?",
        "query": "db.Apartments.find({}, {apt_number: 1, room_count: 1})",
        "gpt4 answer": "db.Apartments.find({}, { apt_number: 1, room_count: 1 })",
        "deepseek answer": "db.Apartments.find({}, {apt_number: 1, room_count: 1})"
    },
    {
        "question_id": 752,
        "spider_question_id": 1215,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
        "question": "Return the apartment numbers of the apartments with type code 'Flat'.",
        "query": "db.Apartments.find({apt_type_code: 'Flat'}, {apt_number: 1})",
        "gpt4 answer": "db.Apartments.find({ apt_type_code: 'Flat' }, { apt_number: 1 })",
        "deepseek answer": "db.Apartments.find({apt_type_code: 'Flat'}, {apt_number: 1})"
    },
    {
        "question_id": 753,
        "spider_question_id": 1216,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
        "question": "Which apartments have type code 'Flat'? Give me their apartment numbers.",
        "query": "db.Apartments.find({apt_type_code: 'Flat'}, {apt_number: 1})",
        "gpt4 answer": "db.Apartments.find({apt_type_code: 'Flat'}, { apt_number: 1})",
        "deepseek answer": "db.Apartments.find({apt_type_code: 'Flat'}, {apt_number: 1})"
    },
    {
        "question_id": 754,
        "spider_question_id": 1217,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT guest_first_name , guest_last_name FROM Guests",
        "question": "Return the first names and last names of all guests",
        "query": "db.Guests.find({}, {guest_first_name: 1, guest_last_name: 1})",
        "gpt4 answer": "db.Guests.find({}, { guest_first_name: 1, guest_last_name: 1 })",
        "deepseek answer": "db.Guests.find({}, {guest_first_name: 1, guest_last_name: 1})"
    },
    {
        "question_id": 755,
        "spider_question_id": 1218,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT guest_first_name , guest_last_name FROM Guests",
        "question": "What are the first names and last names of all the guests?",
        "query": "db.Guests.find({}, {guest_first_name: 1, guest_last_name: 1})",
        "gpt4 answer": "db.Guests.find({}, { guest_first_name: 1, guest_last_name: 1 })",
        "deepseek answer": "db.Guests.find({}, {guest_first_name: 1, guest_last_name: 1})"
    },
    {
        "question_id": 756,
        "spider_question_id": 1227,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = 'Suite 634'",
        "question": "What is the booking status code of the apartment with apartment number 'Suite 634'?",
        "query": "db.Apartment_Bookings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apt_info\" } }, { $match: { \"apt_info.apt_number\": \"Suite 634\" } }, { $project: { booking_status_code: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $match: { apt_number: 'Suite 634' } }, { $lookup: { from: 'Apartment_Bookings', localField: 'apt_id', foreignField: 'apt_id', as: 'booking_info' } }, { $unwind: '$booking_info' }, { $project: { booking_status_code: '$booking_info.booking_status_code' } } ])",
        "deepseek answer": "db.Apartment_Bookings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apt_info\" } }, { $match: { \"apt_info.apt_number\": \"Suite 634\" } }, { $project: { booking_status_code: 1 } } ])"
    },
    {
        "question_id": 757,
        "spider_question_id": 1228,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = 'Suite 634'",
        "question": "Tell me the booking status code for the apartment with number 'Suite 634'.",
        "query": "db.Apartment_Bookings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apt_info\" } }, { $match: { \"apt_info.apt_number\": \"Suite 634\" } }, { $project: { booking_status_code: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $match: { apt_number: 'Suite 634' } }, { $lookup: { from: \"Apartment_Bookings\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"booking_info\" } }, { $unwind: \"$booking_info\" }, { $project: { booking_status_code: \"$booking_info.booking_status_code\" } } ])",
        "deepseek answer": "db.Apartment_Bookings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apt_info\" } }, { $match: { \"apt_info.apt_number\": \"Suite 634\" } }, { $project: { booking_status_code: 1 } } ])"
    },
    {
        "question_id": 758,
        "spider_question_id": 1229,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "question": "Show the distinct apartment numbers of the apartments that have bookings with status code 'Confirmed'.",
        "query": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: 'Confirmed' } }, { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apartment_details\" } }, { $unwind: \"$apartment_details\" }, { $group: { _id: \"$apartment_details.apt_number\" } }, { $project: { apt_number: \"$_id\" } } ])",
        "gpt4 answer": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: 'Confirmed' } }, { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apartment_details\" } }, { $unwind: \"$apartment_details\" }, { $group: { _id: \"$apartment_details.apt_number\" } }, { $project: { apt_number: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 759,
        "spider_question_id": 1230,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "question": "Which apartments have bookings with status code 'Confirmed'? Return their apartment numbers.",
        "query": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: 'Confirmed' } }, { $lookup: { from: 'Apartments', localField: 'apt_id', foreignField: 'apt_id', as: 'apartment_info' } }, { $unwind: '$apartment_info' }, { $project: { apt_number: '$apartment_info.apt_number' } }, { $group: { _id: \"$apt_number\" } }, { $project: { apt_number: '$_id' } } ])",
        "gpt4 answer": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: 'Confirmed' } }, { $lookup: { from: 'Apartments', localField: 'apt_id', foreignField: 'apt_id', as: 'apartment_info' } }, { $unwind: '$apartment_info' }, { $project: { apt_number: '$apartment_info.apt_number' } }, { $group: { _id: \"$apt_number\" } }, { $project: { apt_number: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 760,
        "spider_question_id": 1237,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = 'Confirmed'",
        "question": "Show the first names and last names of all the guests that have apartment bookings with status code 'Confirmed'.",
        "query": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: \"Confirmed\" } }, { $lookup: { from: \"Guests\", localField: \"guest_id\", foreignField: \"guest_id\", as: \"guest_info\" } }, { $unwind: \"$guest_info\" }, { $project: { guest_first_name: \"$guest_info.guest_first_name\", guest_last_name: \"$guest_info.guest_last_name\" } } ])",
        "gpt4 answer": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: 'Confirmed' } }, { $lookup: { from: \"Guests\", localField: \"guest_id\", foreignField: \"guest_id\", as: \"guest_info\" } }, { $unwind: \"$guest_info\" }, { $project: { guest_first_name: \"$guest_info.guest_first_name\", guest_last_name: \"$guest_info.guest_last_name\" } } ])",
        "deepseek answer": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: \"Confirmed\" } }, { $lookup: { from: \"Guests\", localField: \"guest_id\", foreignField: \"guest_id\", as: \"guest_info\" } }, { $unwind: \"$guest_info\" }, { $project: { guest_first_name: \"$guest_info.guest_first_name\", guest_last_name: \"$guest_info.guest_last_name\" } } ])"
    },
    {
        "question_id": 761,
        "spider_question_id": 1238,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.guest_first_name , T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = 'Confirmed'",
        "question": "Which guests have apartment bookings with status code 'Confirmed'? Return their first names and last names.",
        "query": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: \"Confirmed\" } }, { $lookup: { from: \"Guests\", localField: \"guest_id\", foreignField: \"guest_id\", as: \"guest_info\" } }, { $unwind: \"$guest_info\" }, { $project: { guest_first_name: \"$guest_info.guest_first_name\", guest_last_name: \"$guest_info.guest_last_name\" } } ])",
        "gpt4 answer": "db.Guests.aggregate([ { $lookup: { from: \"Apartment_Bookings\", localField: \"guest_id\", foreignField: \"guest_id\", as: \"bookings\" } }, { $unwind: \"$bookings\" }, { $match: { \"bookings.booking_status_code\": \"Confirmed\" } }, { $project: { guest_first_name: 1, guest_last_name: 1 } } ])",
        "deepseek answer": "db.Apartment_Bookings.aggregate([ { $match: { booking_status_code: \"Confirmed\" } }, { $lookup: { from: \"Guests\", localField: \"guest_id\", foreignField: \"guest_id\", as: \"guest_info\" } }, { $unwind: \"$guest_info\" }, { $project: { guest_first_name: \"$guest_info.guest_first_name\", guest_last_name: \"$guest_info.guest_last_name\" } } ])"
    },
    {
        "question_id": 762,
        "spider_question_id": 1239,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "query": "db.Apartment_Facilities.aggregate([ { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apt_info\" } }, { $unwind: \"$apt_info\" }, { $match: { \"apt_info.bedroom_count\": { $gt: 4 } } }, { $project: { facility_code: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Apartment_Facilities.aggregate([ { $lookup: { from: \"Apartments\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"apt_info\" } }, { $unwind: \"$apt_info\" }, { $match: { \"apt_info.bedroom_count\": { $gt: 4 } } }, { $project: { facility_code: 1 } } ])"
    },
    {
        "question_id": 763,
        "spider_question_id": 1240,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
        "question": "What are the facility codes of the apartments with more than four bedrooms?",
        "query": "db.Apartments.aggregate([ { $match: { bedroom_count: { $gt: 4 } } }, { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $unwind: \"$facilities\" }, { $project: { facility_code: \"$facilities.facility_code\" } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $match: { bedroom_count: { $gt: 4 } } }, { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $unwind: \"$facilities\" }, { $replaceRoot: { newRoot: \"$facilities\" } }, { $project: { facility_code: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $match: { bedroom_count: { $gt: 4 } } }, { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $unwind: \"$facilities\" }, { $project: { facility_code: \"$facilities.facility_code\" } } ])"
    },
    {
        "question_id": 764,
        "spider_question_id": 1245,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "query": "db.Apartment_Buildings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $match: { \"apartments.bathroom_count\": { $gt: 2 } } }, { $project: { building_address: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Apartment_Buildings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $match: { \"apartments.bathroom_count\": { $gt: 2 } } }, { $project: { building_address: 1 } } ])"
    },
    {
        "question_id": 765,
        "spider_question_id": 1246,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "query": "db.Apartment_Buildings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $match: { \"apartments.bathroom_count\": { $gt: 2 } } }, { $project: { building_address: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $match: { bathroom_count: { $gt: 2 } } }, { $lookup: { from: \"Apartment_Buildings\", localField: \"building_id\", foreignField: \"building_id\", as: \"building_info\" } }, { $unwind: \"$building_info\" }, { $group: { _id: \"$building_info.building_address\" } } ])",
        "deepseek answer": "db.Apartment_Buildings.aggregate([ { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $match: { \"apartments.bathroom_count\": { $gt: 2 } } }, { $project: { building_address: 1 } } ])"
    },
    {
        "question_id": 766,
        "spider_question_id": 1247,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = 'Kyle'",
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by 'Kyle'.",
        "query": "db.Apartment_Buildings.aggregate([ { $match: { building_manager: \"Kyle\" } }, { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $project: { apt_type_code: \"$apartments.apt_type_code\", apt_number: \"$apartments.apt_number\" } } ])",
        "gpt4 answer": "db.Apartment_Buildings.aggregate([ { $match: { building_manager: 'Kyle' } }, { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartment_info\" } }, { $unwind: \"$apartment_info\" }, { $project: { apt_type_code: \"$apartment_info.apt_type_code\", apt_number: \"$apartment_info.apt_number\" } } ])",
        "deepseek answer": "db.Apartment_Buildings.aggregate([ { $match: { building_manager: \"Kyle\" } }, { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $project: { apt_type_code: \"$apartments.apt_type_code\", apt_number: \"$apartments.apt_number\" } } ])"
    },
    {
        "question_id": 767,
        "spider_question_id": 1248,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.apt_type_code , T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = 'Kyle'",
        "question": "What apartment type codes and apartment numbers do the buildings managed by 'Kyle' have?",
        "query": "db.Apartment_Buildings.aggregate([ { $match: { building_manager: \"Kyle\" } }, { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $project: { apt_type_code: \"$apartments.apt_type_code\", apt_number: \"$apartments.apt_number\" } } ])",
        "gpt4 answer": "db.Apartment_Buildings.aggregate([ { $match: { building_manager: \"Kyle\" } }, { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $project: { apt_type_code: \"$apartments.apt_type_code\", apt_number: \"$apartments.apt_number\" } } ])",
        "deepseek answer": "db.Apartment_Buildings.aggregate([ { $match: { building_manager: \"Kyle\" } }, { $lookup: { from: \"Apartments\", localField: \"building_id\", foreignField: \"building_id\", as: \"apartments\" } }, { $unwind: \"$apartments\" }, { $project: { apt_type_code: \"$apartments.apt_type_code\", apt_number: \"$apartments.apt_number\" } } ])"
    },
    {
        "question_id": 768,
        "spider_question_id": 1249,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "question": "Show the booking status code and the corresponding number of bookings.",
        "query": "db.Apartment_Bookings.aggregate([ { $group: { _id: \"$booking_status_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Apartment_Bookings.aggregate([ { $group: { _id: \"$booking_status_code\", numberOfBookings: { $sum: 1 } } } ])",
        "deepseek answer": "db.Apartment_Bookings.aggregate([ { $group: { _id: \"$booking_status_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 769,
        "spider_question_id": 1250,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "query": "db.Apartment_Bookings.aggregate([ { $group: { _id: \"$booking_status_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Apartment_Bookings.aggregate([ { $group: { _id: '$booking_status_code', totalBookings: { $count: {} } }}, { $project: { booking_status_code: '$_id', totalBookings: 1 }} ])",
        "deepseek answer": "db.Apartment_Bookings.aggregate([ { $group: { _id: \"$booking_status_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 770,
        "spider_question_id": 1251,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "query": "db.Apartments.find({}, {apt_number: 1}).sort({room_count: 1})",
        "gpt4 answer": "db.Apartments.find({}, { apt_number: 1 }).sort({ room_count: 1 })",
        "deepseek answer": "db.Apartments.find({}, {apt_number: 1}).sort({room_count: 1})"
    },
    {
        "question_id": 771,
        "spider_question_id": 1252,
        "db_id": "apartment_rentals",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "question": "Sort the apartment numbers in ascending order of room count.",
        "query": "db.Apartments.aggregate([ { $sort: { room_count: 1 } }, { $project: { apt_number: 1 } } ])",
        "gpt4 answer": "db.Apartments.find({}, { apt_number: 1 }).sort({ room_count: 1 })",
        "deepseek answer": "db.Apartments.aggregate([ { $sort: { room_count: 1 } }, { $project: { apt_number: 1 } } ])"
    },
    {
        "question_id": 772,
        "spider_question_id": 1253,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "question": "Return the apartment number with the largest number of bedrooms.",
        "query": "db.Apartments.find({}, { apt_number: 1 }).sort({ bedroom_count: -1 }).limit(1)",
        "gpt4 answer": "db.Apartments.find({}, { apt_number: 1 }).sort({ bedroom_count: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 773,
        "spider_question_id": 1254,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "question": "What is the apartment number of the apartment with the most beds?",
        "query": "db.Apartments.find({}, {apt_number: 1}).sort({bedroom_count: -1}).limit(1)",
        "gpt4 answer": "db.Apartments.find({}, { apt_number: 1 }).sort({ bedroom_count: -1 }).limit(1)",
        "deepseek answer": "db.Apartments.find({}, {apt_number: 1}).sort({bedroom_count: -1}).limit(1)"
    },
    {
        "question_id": 774,
        "spider_question_id": 1255,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $project: { apt_type_code: \"$_id\", count: 1 } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { apt_type_code: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $project: { apt_type_code: \"$_id\", count: 1 } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 775,
        "spider_question_id": 1256,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $project: { apt_type_code: \"$_id\", count: 1 } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { apt_type_code: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $project: { apt_type_code: \"$_id\", count: 1 } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 776,
        "spider_question_id": 1257,
        "db_id": "apartment_rentals",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", avgRoomCount: { $avg: \"$room_count\" } } }, { $sort: { avgRoomCount: -1 } }, { $limit: 3 }, { $project: { apt_type_code: \"$_id\"} } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", averageRooms: { $avg: \"$room_count\" } } }, { $sort: { averageRooms: -1 } }, { $limit: 3 }, { $project: { apt_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", avgRoomCount: { $avg: \"$room_count\" } } }, { $sort: { avgRoomCount: -1 } }, { $limit: 3 }, { $project: { apt_type_code: \"$_id\"} } ])"
    },
    {
        "question_id": 777,
        "spider_question_id": 1258,
        "db_id": "apartment_rentals",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "question": "What are the top three apartment types in terms of the average room count? Give me the",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", avgRoomCount: { $avg: \"$room_count\" } } }, { $sort: { avgRoomCount: -1 } }, { $limit: 3 }, { $project: { apt_type_code: \"$_id\"} } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", averageRoomCount: { $avg: \"$room_count\" } } }, { $sort: { averageRoomCount: -1 } }, { $limit: 3 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", avgRoomCount: { $avg: \"$room_count\" } } }, { $sort: { avgRoomCount: -1 } }, { $limit: 3 }, { $project: { apt_type_code: \"$_id\"} } ])"
    },
    {
        "question_id": 778,
        "spider_question_id": 1259,
        "db_id": "apartment_rentals",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", totalRooms: { $sum: \"$room_count\" }, bathroomCount: { $first: \"$bathroom_count\" }, bedroomCount: { $first: \"$bedroom_count\" } }}, { $sort: { totalRooms: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\", bathroomCount: 1, bedroomCount: 1 }} ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", totalRooms: { $sum: \"$room_count\" }, bathroomCount: { $first: \"$bathroom_count\" }, bedroomCount: { $first: \"$bedroom_count\" } }}, { $sort: { totalRooms: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\", bathroomCount: 1, bedroomCount: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 779,
        "spider_question_id": 1260,
        "db_id": "apartment_rentals",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT apt_type_code , bathroom_count , bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", bathroom_count: { $first: \"$bathroom_count\" }, bedroom_count: { $first: \"$bedroom_count\" }, total_rooms: { $sum: \"$room_count\" } } }, { $sort: { total_rooms: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\", bathroom_count: 1, bedroom_count: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", totalRooms: { $sum: \"$room_count\" }, bathroomCount: { $first: \"$bathroom_count\" }, bedroomCount: { $first: \"$bedroom_count\" } }}, { $sort: { totalRooms: -1 }}, { $limit: 1 }, { $project: { aptTypeCode: \"$_id\", bathroomCount: 1, bedroomCount: 1 }} ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", bathroom_count: { $first: \"$bathroom_count\" }, bedroom_count: { $first: \"$bedroom_count\" }, total_rooms: { $sum: \"$room_count\" } } }, { $sort: { total_rooms: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\", bathroom_count: 1, bedroom_count: 1 } } ])"
    },
    {
        "question_id": 780,
        "spider_question_id": 1261,
        "db_id": "apartment_rentals",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the most common apartment type code.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, count: 0 } } ])"
    },
    {
        "question_id": 781,
        "spider_question_id": 1262,
        "db_id": "apartment_rentals",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code appears the most often?",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { apt_type_code: \"$_id\"} }])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { apt_type_code: \"$_id\"} }])"
    },
    {
        "question_id": 782,
        "spider_question_id": 1264,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?",
        "query": "db.Apartments.aggregate([ { $match: { bathroom_count: { $gt: 1 } } }, { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\"} } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Apartments.aggregate([ { $match: { bathroom_count: { $gt: 1 } } }, { $group: { _id: \"$apt_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { apt_type_code: \"$_id\"} } ])"
    },
    {
        "question_id": 783,
        "spider_question_id": 1265,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT apt_type_code , max(room_count) , min(room_count) FROM Apartments GROUP BY apt_type_code",
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", max_room_count: { $max: \"$room_count\" }, min_room_count: { $min: \"$room_count\" } } }, { $project: { apt_type_code: \"$_id\", max_room_count: 1, min_room_count: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", maxRoomCount: { $max: \"$room_count\" }, minRoomCount: { $min: \"$room_count\" } } }, { $project: { apt_type_code: \"$_id\", maxRoomCount: 1, minRoomCount: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", max_room_count: { $max: \"$room_count\" }, min_room_count: { $min: \"$room_count\" } } }, { $project: { apt_type_code: \"$_id\", max_room_count: 1, min_room_count: 1 } } ])"
    },
    {
        "question_id": 784,
        "spider_question_id": 1266,
        "db_id": "apartment_rentals",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT apt_type_code , max(room_count) , min(room_count) FROM Apartments GROUP BY apt_type_code",
        "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
        "query": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", max_room_count: { $max: \"$room_count\" }, min_room_count: { $min: \"$room_count\" } } }, { $project: { apt_type_code: \"$_id\", max_room_count: 1, min_room_count: 1 } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", max_room_count: { $max: \"$room_count\" }, min_room_count: { $min: \"$room_count\" } } }, { $project: { apt_type_code: \"$_id\", max_room_count: 1, min_room_count: 1 } } ])",
        "deepseek answer": "db.Apartments.aggregate([ { $group: { _id: \"$apt_type_code\", max_room_count: { $max: \"$room_count\" }, min_room_count: { $min: \"$room_count\" } } }, { $project: { apt_type_code: \"$_id\", max_room_count: 1, min_room_count: 1 } } ])"
    },
    {
        "question_id": 785,
        "spider_question_id": 1267,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "query": "db.Guests.aggregate([ { $group: { _id: \"$gender_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { gender_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Guests.aggregate([ { $group: { _id: \"$gender_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { gender_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Guests.aggregate([ { $group: { _id: \"$gender_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { gender_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 786,
        "spider_question_id": 1268,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
        "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
        "query": "db.Guests.aggregate([ { $group: { _id: \"$gender_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { gender_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Guests.aggregate([ { $group: { _id: \"$gender_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { gender_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Guests.aggregate([ { $group: { _id: \"$gender_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { gender_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 787,
        "spider_question_id": 1269,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "question": "How many apartments do not have any facility?",
        "query": "db.Apartments.aggregate([ { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $match: { facilities: { $size: 0 } } }, { $count: \"no_facility_apartments\" } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $match: { facilities: { $size: 0 } } }, { $count: \"no_facility_apartments\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 788,
        "spider_question_id": 1270,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "question": "Find the number of apartments that have no facility.",
        "query": "db.Apartments.aggregate([ { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $match: { facilities: [] } }, { $count: \"no_facility_count\" } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $lookup: { from: \"Apartment_Facilities\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"facilities\" } }, { $match: { facilities: [] } }, { $count: \"no_facility_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 789,
        "spider_question_id": 1271,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'",
        "question": "Show the apartment numbers of apartments with bookings that have status code both 'Provisional' and 'Confirmed'",
        "query": "db.Apartment_Bookings.aggregate([ { $match: { $or: [ { booking_status_code: 'Provisional' }, { booking_status_code: 'Confirmed' } ] } }, { $lookup: { from: 'Apartments', localField: 'apt_id', foreignField: 'apt_id', as: 'apartmentData' } }, { $unwind: '$apartmentData' }, { $group: { _id: '$apartmentData.apt_number', statusCodes: { $addToSet: '$booking_status_code' } } }, { $match: { statusCodes: { $all: ['Provisional', 'Confirmed'] } } }, { $project: { apt_number: '$_id' } } ])",
        "gpt4 answer": "db.Apartment_Bookings.aggregate([ { $match: { $or: [ { booking_status_code: 'Provisional' }, { booking_status_code: 'Confirmed' } ] } }, { $lookup: { from: 'Apartments', localField: 'apt_id', foreignField: 'apt_id', as: 'apartmentData' } }, { $unwind: '$apartmentData' }, { $group: { _id: '$apartmentData.apt_number', statusCodes: { $addToSet: '$booking_status_code' } } }, { $match: { statusCodes: { $all: ['Provisional', 'Confirmed'] } } }, { $project: { apt_number: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 790,
        "spider_question_id": 1272,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'",
        "question": "Which apartments have bookings with both status codes 'Provisional' and 'Confirmed'? Give me the apartment numbers.",
        "query": "db.Apartments.aggregate([ { $lookup: { from: \"Apartment_Bookings\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"bookings\" } }, { $match: { \"bookings.booking_status_code\": { $all: [\"Confirmed\", \"Provisional\"] } } }, { $group: { _id: \"$apt_number\" } }, { $project: { apt_number: \"$_id\" } } ])",
        "gpt4 answer": "db.Apartments.aggregate([ { $lookup: { from: \"Apartment_Bookings\", localField: \"apt_id\", foreignField: \"apt_id\", as: \"bookings\" } }, { $match: { \"bookings.booking_status_code\": { $all: [\"Confirmed\", \"Provisional\"] } } }, { $group: { _id: \"$apt_number\" } }, { $project: { apt_number: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 791,
        "spider_question_id": 1274,
        "db_id": "apartment_rentals",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1",
        "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
        "query": "db.View_Unit_Status.aggregate([ { $match: { available_yn: { $in: [0, 1] } } }, { $group: { _id: \"$apt_id\", availability: { $addToSet: \"$available_yn\" } } }, { $match: { availability: { $all: [0, 1] } } }, { $lookup: { from: \"Apartments\", localField: \"_id\", foreignField: \"apt_id\", as: \"apartmentDetails\" } }, { $unwind: \"$apartmentDetails\" }, { $project: { apt_number: \"$apartmentDetails.apt_number\" } } ])",
        "gpt4 answer": "db.View_Unit_Status.aggregate([ { $match: { available_yn: { $in: [0, 1] } } }, { $group: { _id: \"$apt_id\", availability: { $addToSet: \"$available_yn\" } } }, { $match: { availability: { $all: [0, 1] } } }, { $lookup: { from: \"Apartments\", localField: \"_id\", foreignField: \"apt_id\", as: \"apartmentDetails\" } }, { $unwind: \"$apartmentDetails\" }, { $project: { apt_number: \"$apartmentDetails.apt_number\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 792,
        "spider_question_id": 1276,
        "db_id": "game_injury",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Date FROM game ORDER BY home_team DESC",
        "question": "List the dates of games by the home team name in descending order.",
        "query": "db.game.find({}, {Date: 1}).sort({Home_team: -1})",
        "gpt4 answer": "db.game.find({}, { Date: 1 }).sort({ Home_team: -1 })",
        "deepseek answer": "db.game.find({}, {Date: 1}).sort({Home_team: -1})"
    },
    {
        "question_id": 793,
        "spider_question_id": 1277,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT season , home_team , away_team FROM game",
        "question": "List the season, home team, away team of all the games.",
        "query": "db.game.find({}, { Season: 1, Home_team: 1, Away_team: 1 })",
        "gpt4 answer": "db.game.find({}, { Season: 1, Home_team: 1, Away_team: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 794,
        "spider_question_id": 1278,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(home_games) , min(home_games) , avg(home_games) FROM stadium",
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "query": "db.stadium.aggregate([ { $group: { _id: null, maxHomeGames: { $max: \"$Home_Games\" }, minHomeGames: { $min: \"$Home_Games\" }, avgHomeGames: { $avg: \"$Home_Games\" } } }, { $project: { maxHomeGames: 1, minHomeGames: 1, avgHomeGames: 1 } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: null, maxHomeGames: { $max: \"$Home_Games\" }, minHomeGames: { $min: \"$Home_Games\" }, avgHomeGames: { $avg: \"$Home_Games\" } } }, { $project: { maxHomeGames: 1, minHomeGames: 1, avgHomeGames: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 795,
        "spider_question_id": 1280,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "query": "db.injury_accident.find( { Injury: { $ne: \"Knee problem\" } }, { Player: 1, Number_of_matches: 1, Source: 1 } )",
        "gpt4 answer": "db.injury_accident.find( { Injury: { $ne: \"Knee problem\" } }, { Player: 1, Number_of_matches: 1, Source: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 796,
        "spider_question_id": 1281,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "query": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"injury_info\" } }, { $match: { \"injury_info.Player\": \"Walter Samuel\" } }, { $project: { Season: 1 } } ])",
        "gpt4 answer": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"injury_info\" } }, { $match: { \"injury_info.Player\": \"Walter Samuel\" } }, { $project: { Season: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 797,
        "spider_question_id": 1282,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "query": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"injuries\" } }, { $match: { \"injuries.1\": { $exists: true } } }, { $project: { id: 1, Score: 1, Date: 1 } } ])",
        "gpt4 answer": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"injuries\" } }, { $match: { \"injuries.1\": { $exists: true } } }, { $project: { id: 1, Score: 1, Date: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 798,
        "spider_question_id": 1283,
        "db_id": "game_injury",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "query": "db.stadium.aggregate([ { $lookup: { from: \"game\", localField: \"id\", foreignField: \"stadium_id\", as: \"games\" } }, { $unwind: \"$games\" }, { $lookup: { from: \"injury_accident\", localField: \"games.id\", foreignField: \"game_id\", as: \"injuries\" } }, { $unwind: \"$injuries\" }, { $group: { _id: { id: \"$id\", name: \"$name\" }, totalInjuries: { $sum: 1 } } }, { $sort: { totalInjuries: -1 } }, { $limit: 1 }, { $project: { id: \"$_id.id\", name: \"$_id.name\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $lookup: { from: \"game\", localField: \"id\", foreignField: \"stadium_id\", as: \"games\" } }, { $unwind: \"$games\" }, { $lookup: { from: \"injury_accident\", localField: \"games.id\", foreignField: \"game_id\", as: \"injuries\" } }, { $unwind: \"$injuries\" }, { $group: { _id: { id: \"$id\", name: \"$name\" }, totalInjuries: { $sum: 1 } } }, { $sort: { totalInjuries: -1 } }, { $limit: 1 }, { $project: { id: \"$_id.id\", name: \"$_id.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 799,
        "spider_question_id": 1284,
        "db_id": "game_injury",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "query": "db.stadium.aggregate([ { $lookup: { from: \"game\", localField: \"id\", foreignField: \"stadium_id\", as: \"games\" } }, { $unwind: \"$games\" }, { $lookup: { from: \"injury_accident\", localField: \"games.id\", foreignField: \"game_id\", as: \"injuries\" } }, { $unwind: \"$injuries\" }, { $group: { _id: { id: \"$id\", name: \"$name\" }, injuryCount: { $sum: 1 } } }, { $sort: { injuryCount: -1 } }, { $limit: 1 }, { $project: { id: \"$_id.id\", name: \"$_id.name\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $lookup: { from: \"game\", localField: \"id\", foreignField: \"stadium_id\", as: \"games\" } }, { $unwind: \"$games\" }, { $lookup: { from: \"injury_accident\", localField: \"games.id\", foreignField: \"game_id\", as: \"injuries\" } }, { $unwind: \"$injuries\" }, { $group: { _id: { id: \"$id\", name: \"$name\" }, injuryCount: { $sum: 1 } } }, { $sort: { injuryCount: -1 } }, { $limit: 1 }, { $project: { id: \"$_id.id\", name: \"$_id.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 800,
        "spider_question_id": 1285,
        "db_id": "game_injury",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.season , T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "query": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"injuries\" } }, { $match: { \"injuries.Injury\": { $in: [\"Foot injury\", \"Knee problem\"] } } }, { $lookup: { from: \"stadium\", localField: \"stadium_id\", foreignField: \"id\", as: \"stadium_details\" } }, { $unwind: \"$stadium_details\" }, { $project: { Season: \"$Season\", Stadium: \"$stadium_details.name\" } } ])",
        "gpt4 answer": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"injuries\" } }, { $match: { \"injuries.Injury\": { $in: [\"Foot injury\", \"Knee problem\"] } } }, { $lookup: { from: \"stadium\", localField: \"stadium_id\", foreignField: \"id\", as: \"stadium_details\" } }, { $unwind: \"$stadium_details\" }, { $project: { Season: \"$Season\", Stadium: \"$stadium_details.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 801,
        "spider_question_id": 1287,
        "db_id": "game_injury",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "question": "How many games are free of injury accidents?",
        "query": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"accidents\" } }, { $match: { accidents: { $size: 0 } } }, { $count: \"games_free_of_injury\" } ])",
        "gpt4 answer": "db.game.aggregate([ { $lookup: { from: \"injury_accident\", localField: \"id\", foreignField: \"game_id\", as: \"accidents\" } }, { $match: { accidents: { $size: 0 } } }, { $count: \"games_free_of_injury\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 802,
        "spider_question_id": 1288,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "query": "db.injury_accident.aggregate([ { $lookup: { from: \"game\", localField: \"game_id\", foreignField: \"id\", as: \"game_info\" } }, { $match: { \"game_info.Season\": { $gt: 2010 } } }, { $group: { _id: \"$Injury\" } }, { $count: \"distinct_injuries\" } ])",
        "gpt4 answer": "db.injury_accident.aggregate([ { $lookup: { from: \"game\", localField: \"game_id\", foreignField: \"id\", as: \"game_info\" } }, { $match: { \"game_info.Season\": { $gt: 2010 } } }, { $group: { _id: \"$Injury\" } }, { $count: \"distinct_injuries\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 803,
        "spider_question_id": 1289,
        "db_id": "game_injury",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "query": "db.stadium.aggregate([ { $lookup: { from: \"game\", localField: \"id\", foreignField: \"stadium_id\", as: \"game_docs\" } }, { $unwind: \"$game_docs\" }, { $lookup: { from: \"injury_accident\", localField: \"game_docs.id\", foreignField: \"game_id\", as: \"injury_docs\" } }, { $unwind: \"$injury_docs\" }, { $match: { $or: [{\"injury_docs.Player\": \"Walter Samuel\"}, {\"injury_docs.Player\": \"Thiago Motta\"}] } }, { $group: { _id: \"$name\", players: {$addToSet: \"$injury_docs.Player\"} } }, { $match: { players: {$all: [\"Walter Samuel\", \"Thiago Motta\"]} } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $lookup: { from: \"game\", localField: \"id\", foreignField: \"stadium_id\", as: \"game_docs\" } }, { $unwind: \"$game_docs\" }, { $lookup: { from: \"injury_accident\", localField: \"game_docs.id\", foreignField: \"game_id\", as: \"injury_docs\" } }, { $unwind: \"$injury_docs\" }, { $match: { $or: [{\"injury_docs.Player\": \"Walter Samuel\"}, {\"injury_docs.Player\": \"Thiago Motta\"}] } }, { $group: { _id: \"$name\", players: {$addToSet: \"$injury_docs.Player\"} } }, { $match: { players: {$all: [\"Walter Samuel\", \"Thiago Motta\"]} } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 804,
        "spider_question_id": 1291,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%'",
        "question": "Which stadium name contains the substring 'Bank'?",
        "query": "db.stadium.find({name: {$regex: /Bank/}}, { name: 1})",
        "gpt4 answer": "db.stadium.find({ name: /Bank/ }, { name: 1 })",
        "deepseek answer": "db.stadium.find({name: {$regex: /Bank/}}, { name: 1})"
    },
    {
        "question_id": 805,
        "spider_question_id": 1292,
        "db_id": "game_injury",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",
        "question": "How many games has each stadium held?",
        "query": "db.game.aggregate([ { $group: { _id: \"$stadium_id\", gamesHeld: { $sum: 1 } } } ])",
        "gpt4 answer": "db.game.aggregate([ { $group: { _id: \"$stadium_id\", gamesHeld: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 806,
        "spider_question_id": 1294,
        "db_id": "soccer_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
        "question": "List all country and league names.",
        "query": "db.Country.aggregate([ { $lookup: { from: \"League\", localField: \"id\", foreignField: \"country_id\", as: \"leagues\" } }, { $unwind: \"$leagues\" }, { $project: { \"country_name\": \"$name\", \"league_name\": \"$leagues.name\" } } ])",
        "gpt4 answer": "db.Country.aggregate([ { $lookup: { from: \"League\", localField: \"id\", foreignField: \"country_id\", as: \"leagues\" } }, { $unwind: \"$leagues\" }, { $project: { \"country_name\": \"$name\", \"league_name\": \"$leagues.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 807,
        "spider_question_id": 1296,
        "db_id": "soccer_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(weight) FROM Player",
        "question": "What is the average weight of all players?",
        "query": "db.Player.aggregate([ { $group: { _id: null, averageWeight: { $avg: \"$weight\" } } }, { $project: { averageWeight: 1} } ])",
        "gpt4 answer": "db.Player.aggregate([ { $group: { _id: null, averageWeight: { $avg: \"$weight\" } } }, { $project: { averageWeight: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $group: { _id: null, averageWeight: { $avg: \"$weight\" } } }, { $project: { averageWeight: 1} } ])"
    },
    {
        "question_id": 808,
        "spider_question_id": 1303,
        "db_id": "soccer_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT preferred_foot , count(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "query": "db.Player_Attributes.aggregate([ { $match: { overall_rating: { $gt: 80 } } }, { $group: { _id: \"$preferred_foot\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Player_Attributes.aggregate([ { $match: { overall_rating: { $gt: 80 } } }, { $group: { _id: \"$preferred_foot\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Player_Attributes.aggregate([ { $match: { overall_rating: { $gt: 80 } } }, { $group: { _id: \"$preferred_foot\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 809,
        "spider_question_id": 1309,
        "db_id": "performance_attendance",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "List the hosts of performances in ascending order of attendance.",
        "query": "db.performance.find({}, { Host: 1}).sort({Attendance: 1})",
        "gpt4 answer": "db.performance.find({}, { Host: 1 }).sort({ Attendance: 1 })",
        "deepseek answer": "db.performance.find({}, { Host: 1}).sort({Attendance: 1})"
    },
    {
        "question_id": 810,
        "spider_question_id": 1310,
        "db_id": "performance_attendance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date , LOCATION FROM performance",
        "question": "What are the dates and locations of performances?",
        "query": "db.performance.find({}, {Date: 1, Location: 1})",
        "gpt4 answer": "db.performance.find({}, { Date: 1, Location: 1 })",
        "deepseek answer": "db.performance.find({}, {Date: 1, Location: 1})"
    },
    {
        "question_id": 811,
        "spider_question_id": 1311,
        "db_id": "performance_attendance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Attendance FROM performance WHERE LOCATION = 'TD Garden' OR LOCATION = 'Bell Centre'",
        "question": "Show the attendances of the performances at location 'TD Garden' or 'Bell Centre'",
        "query": "db.performance.find( { Location: { $in: ['TD Garden', 'Bell Centre'] } }, { Attendance: 1 } )",
        "gpt4 answer": "db.performance.find( { Location: { $in: ['TD Garden', 'Bell Centre'] } }, { Attendance: 1 } )",
        "deepseek answer": "db.performance.find( { Location: { $in: ['TD Garden', 'Bell Centre'] } }, { Attendance: 1 } )"
    },
    {
        "question_id": 812,
        "spider_question_id": 1312,
        "db_id": "performance_attendance",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Attendance) FROM performance",
        "question": "What is the average number of attendees for performances?",
        "query": "db.performance.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance:1 } }])",
        "gpt4 answer": "db.performance.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance: 1 } } ])",
        "deepseek answer": "db.performance.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Attendance\" } } }, { $project: { averageAttendance:1 } }])"
    },
    {
        "question_id": 813,
        "spider_question_id": 1313,
        "db_id": "performance_attendance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
        "question": "What is the date of the performance with the highest number of attendees?",
        "query": "db.performance.find({}, {Date: 1}).sort({Attendance: -1}).limit(1)",
        "gpt4 answer": "db.performance.find({}, { Date: 1 }).sort({ Attendance: -1 }).limit(1)",
        "deepseek answer": "db.performance.find({}, {Date: 1}).sort({Attendance: -1}).limit(1)"
    },
    {
        "question_id": 814,
        "spider_question_id": 1314,
        "db_id": "performance_attendance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION , COUNT(*) FROM performance GROUP BY LOCATION",
        "question": "Show different locations and the number of performances at each location.",
        "query": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 815,
        "spider_question_id": 1315,
        "db_id": "performance_attendance",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common location of performances.",
        "query": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])",
        "deepseek answer": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 816,
        "spider_question_id": 1316,
        "db_id": "performance_attendance",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2",
        "question": "Show the locations that have at least two performances.",
        "query": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "deepseek answer": "db.performance.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 817,
        "spider_question_id": 1327,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT dept_name , building FROM department WHERE budget > (SELECT avg(budget) FROM department)",
        "question": "What is the name and building of the departments whose budget is more than the average budget?",
        "query": "db.department.aggregate([ { $group: { _id: null, avgBudget: { $avg: \"$budget\" } } }, { $lookup: { from: \"department\", let: { averageBudget: \"$avgBudget\" }, pipeline: [ { $match: { $expr: { $gt: [\"$budget\", \"$$averageBudget\"] } } }, { $project: { dept_name: 1, building: 1 } } ], as: \"departmentsAboveAverage\" } }, { $unwind: \"$departmentsAboveAverage\" }, { $replaceRoot: { newRoot: \"$departmentsAboveAverage\" } } ])",
        "gpt4 answer": "db.department.aggregate([ { $group: { _id: null, avgBudget: { $avg: \"$budget\" } } }, { $lookup: { from: \"department\", let: { averageBudget: \"$avgBudget\" }, pipeline: [ { $match: { $expr: { $gt: [\"$budget\", \"$$averageBudget\"] } } }, { $project: { dept_name: 1, building: 1 } } ], as: \"departmentsAboveAverage\" } }, { $unwind: \"$departmentsAboveAverage\" }, { $replaceRoot: { newRoot: \"$departmentsAboveAverage\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 818,
        "spider_question_id": 1329,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "query": "db.classroom.find({ capacity: { $gte: 50, $lte: 100 } }, { building: 1, room_number: 1 })",
        "gpt4 answer": "db.classroom.find( { capacity: { $gte: 50, $lte: 100 } }, { building: 1, room_number: 1 } )",
        "deepseek answer": "db.classroom.find({ capacity: { $gte: 50, $lte: 100 } }, { building: 1, room_number: 1 })"
    },
    {
        "question_id": 819,
        "spider_question_id": 1330,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "query": "db.classroom.find({ capacity: { $gte: 50, $lte: 100 } }, { building: 1, room_number: 1 })",
        "gpt4 answer": "db.classroom.find({ capacity: { $gte: 50, $lte: 100 } }, { building: 1, room_number: 1 })",
        "deepseek answer": "db.classroom.find({ capacity: { $gte: 50, $lte: 100 } }, { building: 1, room_number: 1 })"
    },
    {
        "question_id": 820,
        "spider_question_id": 1331,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
        "question": "Find the name and building of the department with the highest budget.",
        "query": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1}).limit(1)",
        "gpt4 answer": "db.department.find({}, { dept_name: 1, building: 1 }).sort({ budget: -1 }).limit(1)",
        "deepseek answer": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1}).limit(1)"
    },
    {
        "question_id": 821,
        "spider_question_id": 1332,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "query": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1}).limit(1)",
        "gpt4 answer": "db.department.find({}, { dept_name: 1, building: 1 }).sort({ budget: -1 }).limit(1)",
        "deepseek answer": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1}).limit(1)"
    },
    {
        "question_id": 822,
        "spider_question_id": 1333,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "query": "db.student.find( { dept_name: 'History' }, { name: 1 } ).sort({ tot_cred: -1 }).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.student.find( { dept_name: 'History' }, { name: 1 } ).sort({ tot_cred: -1 }).limit(1)"
    },
    {
        "question_id": 823,
        "spider_question_id": 1334,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1",
        "question": "Give the name of the student in the History department with the most credits.",
        "query": "db.student.find( {dept_name: 'History'}, {name: 1} ).sort({tot_cred: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.student.find( {dept_name: 'History'}, {name: 1} ).sort({tot_cred: -1}).limit(1)"
    },
    {
        "question_id": 824,
        "spider_question_id": 1338,
        "db_id": "college_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT s_id) FROM advisor",
        "question": "Count the number of students who have advisors.",
        "query": "db.student.aggregate([ { $lookup: { from: \"advisor\", localField: \"ID\", foreignField: \"s_ID\", as: \"advisor_docs\" } }, { $match: { \"advisor_docs.0\": { $exists: true } } }, { $count: \"student_count\" } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.student.aggregate([ { $lookup: { from: \"advisor\", localField: \"ID\", foreignField: \"s_ID\", as: \"advisor_docs\" } }, { $match: { \"advisor_docs.0\": { $exists: true } } }, { $count: \"student_count\" } ])"
    },
    {
        "question_id": 825,
        "spider_question_id": 1340,
        "db_id": "college_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT dept_name) FROM course",
        "question": "Count the number of departments which offer courses.",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\" } }, { $count: \"num_departments\" } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\" } }, { $count: \"num_departments\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 826,
        "spider_question_id": 1341,
        "db_id": "college_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'",
        "question": "How many different courses offered by Physics department?",
        "query": "db.course.aggregate([ { $match: { dept_name: \"Physics\" } }, { $group: { _id: \"$course_id\" } }, { $count: \"total_courses\" } ])",
        "gpt4 answer": "db.course.aggregate([ { $match: { dept_name: \"Physics\" } }, { $group: { _id: \"$course_id\" } }, { $count: \"total_courses\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 827,
        "spider_question_id": 1343,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) = 2",
        "question": "Find the title of courses that have two prerequisites?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisites\" } }, { $project: { title: 1, numberOfPrerequisites: { $size: \"$prerequisites\" } } }, { $match: { numberOfPrerequisites: 2 } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisites\" } }, { $project: { title: 1, numberOfPrerequisites: { $size: \"$prerequisites\" } } }, { $match: { numberOfPrerequisites: 2 } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 828,
        "spider_question_id": 1344,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) = 2",
        "question": "What are the titles for courses with two prerequisites?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $project: { title: 1} }, { $match: { prereqCount: 2 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $project: { title: 1} }, { $match: { prereqCount: 2 } } ])"
    },
    {
        "question_id": 829,
        "spider_question_id": 1345,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1",
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { \"prereqs.1\": { $exists: true } } }, { $project: { title: 1, credits: 1, dept_name: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisites\" } }, { $project: { title: 1, credits: 1, dept_name: 1, numberOfPrerequisites: { $size: \"$prerequisites\" } } }, { $match: { numberOfPrerequisites: { $gt: 1 } } }, { $project: { title: 1, credits: 1, dept_name: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { \"prereqs.1\": { $exists: true } } }, { $project: { title: 1, credits: 1, dept_name: 1 } } ])"
    },
    {
        "question_id": 830,
        "spider_question_id": 1346,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count(*) > 1",
        "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { \"prereqs.1\": { $exists: true } } }, { $project: { title: 1, credits: 1, dept_name: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisites\" } }, { $match: { \"prerequisites.1\": { $exists: true } } }, { $project: { title: 1, credits: 1, dept_name: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { \"prereqs.1\": { $exists: true } } }, { $project: { title: 1, credits: 1, dept_name: 1 } } ])"
    },
    {
        "question_id": 831,
        "spider_question_id": 1348,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "Count the number of courses without prerequisites.",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { \"prereqs\": { $size: 0 } } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { prereqs: { $size: 0 } } }, { $count: \"course_count\" } ])",
        "deepseek answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereqs\" } }, { $match: { \"prereqs\": { $size: 0 } } }, { $count: \"count\" } ])"
    },
    {
        "question_id": 832,
        "spider_question_id": 1351,
        "db_id": "college_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT (DISTINCT id) FROM teaches",
        "question": "How many different instructors have taught some course?",
        "query": "db.teaches.aggregate([ { $group: { _id: \"$ID\" } }, { $count: \"distinct_instructors\" } ])",
        "gpt4 answer": "db.teaches.aggregate([ { $group: { _id: \"$ID\" } }, { $count: \"distinct_instructors\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 833,
        "spider_question_id": 1353,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
        "question": "Find the total budgets of the Marketing or Finance department.",
        "query": "db.department.aggregate([ { $match: { $or: [ { dept_name: \"Marketing\" }, { dept_name: \"Finance\" } ] } }, { $group: { _id: null, totalBudget: { $sum: \"$budget\" } } }, { $project: { totalBudget: 1 } } ])",
        "gpt4 answer": "db.department.aggregate([ { $match: { dept_name: { $in: [\"Marketing\", \"Finance\"] } } }, { $group: { _id: null, total_budget: { $sum: \"$budget\" } } }, { $project: { total_budget: 1 } } ])",
        "deepseek answer": "db.department.aggregate([ { $match: { $or: [ { dept_name: \"Marketing\" }, { dept_name: \"Finance\" } ] } }, { $group: { _id: null, totalBudget: { $sum: \"$budget\" } } }, { $project: { totalBudget: 1 } } ])"
    },
    {
        "question_id": 834,
        "spider_question_id": 1354,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "query": "db.department.aggregate([ { $match: { dept_name: { $in: [\"Marketing\", \"Finance\"] } } }, { $group: { _id: null, totalBudget: { $sum: \"$budget\" } } } , { $project: { totalBudget: 1 } } ])",
        "gpt4 answer": "db.department.aggregate([ { $match: { dept_name: { $in: [\"Marketing\", \"Finance\"] } } }, { $group: { _id: null, total_budget: { $sum: \"$budget\" } } }, { $project: { total_budget: 1 } } ])",
        "deepseek answer": "db.department.aggregate([ { $match: { dept_name: { $in: [\"Marketing\", \"Finance\"] } } }, { $group: { _id: null, totalBudget: { $sum: \"$budget\" } } } , { $project: { totalBudget: 1 } } ])"
    },
    {
        "question_id": 835,
        "spider_question_id": 1355,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "query": "db.instructor.find({name: {$regex: /Soisalon/}}, { dept_name: 1})",
        "gpt4 answer": "db.instructor.find({name: /Soisalon/}, { dept_name: 1})",
        "deepseek answer": "db.instructor.find({name: {$regex: /Soisalon/}}, { dept_name: 1})"
    },
    {
        "question_id": 836,
        "spider_question_id": 1356,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
        "query": "db.instructor.find( { name: { $regex: /Soisalon/ } }, { dept_name: 1 } )",
        "gpt4 answer": "db.instructor.find({ name: /Soisalon/ }, { dept_name: 1 })",
        "deepseek answer": "db.instructor.find( { name: { $regex: /Soisalon/ } }, { dept_name: 1 } )"
    },
    {
        "question_id": 837,
        "spider_question_id": 1361,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "query": "db.instructor.find( { dept_name: 'Statistics' }, { name: 1 } ).sort({salary: 1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.instructor.find( { dept_name: 'Statistics' }, { name: 1 } ).sort({salary: 1}).limit(1)"
    },
    {
        "question_id": 838,
        "spider_question_id": 1362,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "query": "db.instructor.find( {dept_name: 'Statistics'}, {name: 1} ).sort({salary: 1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.instructor.find( {dept_name: 'Statistics'}, {name: 1} ).sort({salary: 1}).limit(1)"
    },
    {
        "question_id": 839,
        "spider_question_id": 1363,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "query": "db.course.aggregate([ { $match: { dept_name: { $in: [\"Statistics\", \"Psychology\"] } } }, { $group: { _id: \"$title\", departments: { $addToSet: \"$dept_name\" } } }, { $match: { departments: { $all: [\"Statistics\", \"Psychology\"] } } }, { $project: { title: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.course.aggregate([ { $match: { dept_name: { $in: [\"Statistics\", \"Psychology\"] } } }, { $group: { _id: \"$title\", departments: { $addToSet: \"$dept_name\" } } }, { $match: { departments: { $all: [\"Statistics\", \"Psychology\"] } } }, { $project: { title: \"$_id\" } } ])"
    },
    {
        "question_id": 840,
        "spider_question_id": 1368,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "query": "db.teaches.aggregate([ { $match: { semester: 'Fall', year: 2009 } }, { $lookup: { from: 'teaches', let: { instructor_id: '$ID' }, pipeline: [ { $match: { $expr: { $and: [ { $eq: ['$ID', '$$instructor_id'] }, { $eq: ['$semester', 'Spring'] }, { $eq: ['$year', 2010] } ] } } } ], as: 'spring_teaching' } }, { $match: { spring_teaching: { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "gpt4 answer": "db.teaches.aggregate([ { $match: { semester: 'Fall', year: 2009 } }, { $lookup: { from: 'teaches', let: { instructor_id: '$ID' }, pipeline: [ { $match: { $expr: { $and: [ { $eq: ['$ID', '$$instructor_id'] }, { $eq: ['$semester', 'Spring'] }, { $eq: ['$year', 2010] } ] } } } ], as: 'spring_teaching' } }, { $match: { spring_teaching: { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 841,
        "spider_question_id": 1371,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", numCourses: { $sum: 1 } } }, { $sort: { numCourses: -1 } }, { $limit: 3 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 842,
        "spider_question_id": 1372,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the names of the 3 departments with the most courses?",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 843,
        "spider_question_id": 1373,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "question": "Find the name of the department that offers the highest total credits?",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 844,
        "spider_question_id": 1374,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "question": "What is the name of the department with the most credits?",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 845,
        "spider_question_id": 1377,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "question": "Which department has the lowest budget?",
        "query": "db.department.find({}, { dept_name: 1}).sort({budget: 1}).limit(1)",
        "gpt4 answer": "db.department.find({}, { dept_name: 1 }).sort({ budget: 1 }).limit(1)",
        "deepseek answer": "db.department.find({}, { dept_name: 1}).sort({budget: 1}).limit(1)"
    },
    {
        "question_id": 846,
        "spider_question_id": 1378,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "question": "Give the name of the department with the lowest budget.",
        "query": "db.department.find({}, { dept_name: 1}).sort({budget: 1}).limit(1)",
        "gpt4 answer": "db.department.find({}, { dept_name: 1 }).sort({ budget: 1 }).limit(1)",
        "deepseek answer": "db.department.find({}, { dept_name: 1}).sort({budget: 1}).limit(1)"
    },
    {
        "question_id": 847,
        "spider_question_id": 1379,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name , building FROM department ORDER BY budget DESC",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "query": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1})",
        "gpt4 answer": "db.department.find({}, { dept_name: 1, building: 1 }).sort({ budget: -1 })",
        "deepseek answer": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1})"
    },
    {
        "question_id": 848,
        "spider_question_id": 1380,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dept_name , building FROM department ORDER BY budget DESC",
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "query": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1})",
        "gpt4 answer": "db.department.find({}, { dept_name: 1, building: 1 }).sort({ budget: -1 })",
        "deepseek answer": "db.department.find({}, {dept_name: 1, building: 1}).sort({budget: -1})"
    },
    {
        "question_id": 849,
        "spider_question_id": 1381,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "question": "Who is the instructor with the highest salary?",
        "query": "db.instructor.find({}, {name: 1}).sort({salary: -1}).limit(1)",
        "gpt4 answer": "db.instructor.find({}, {name: 1}).sort({salary: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 850,
        "spider_question_id": 1382,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "question": "Give the name of the highest paid instructor.",
        "query": "db.instructor.find({}, { name: 1 }).sort({ salary: -1 }).limit(1)",
        "gpt4 answer": "db.instructor.find({}, { name: 1 }).sort({ salary: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 851,
        "spider_question_id": 1387,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.title , T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "query": "db.course.aggregate([ { $lookup: { from: \"teaches\", localField: \"course_id\", foreignField: \"course_id\", as: \"teach_info\" } }, { $unwind: \"$teach_info\" }, { $lookup: { from: \"instructor\", localField: \"teach_info.ID\", foreignField: \"ID\", as: \"instructor_info\" } }, { $unwind: \"$instructor_info\" }, { $match: { \"teach_info.year\": 2008 } }, { $project: { title: 1, instructor_name: \"$instructor_info.name\" } }, { $sort: { title: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"teaches\", localField: \"course_id\", foreignField: \"course_id\", as: \"teach_info\" } }, { $unwind: \"$teach_info\" }, { $lookup: { from: \"instructor\", localField: \"teach_info.ID\", foreignField: \"ID\", as: \"instructor_info\" } }, { $unwind: \"$instructor_info\" }, { $match: { \"teach_info.year\": 2008 } }, { $project: { title: 1, instructor_name: \"$instructor_info.name\" } }, { $sort: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 852,
        "spider_question_id": 1393,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "query": "db.classroom.aggregate([ { $match: { capacity: { $gt: 50 } } }, { $group: { _id: \"$building\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.classroom.aggregate([ { $match: { capacity: { $gt: 50 } } }, { $group: { _id: \"$building\", numberOfRooms: { $sum: 1 } } } ])",
        "deepseek answer": "db.classroom.aggregate([ { $match: { capacity: { $gt: 50 } } }, { $group: { _id: \"$building\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 853,
        "spider_question_id": 1394,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , building FROM classroom WHERE capacity > 50 GROUP BY building",
        "question": "How many rooms in each building have a capacity of over 50?",
        "query": "db.classroom.aggregate([ { $match: { capacity: { $gt: 50 } } }, { $group: { _id: \"$building\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.classroom.aggregate([ { $match: { capacity: { $gt: 50 } } }, { $group: { _id: \"$building\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.classroom.aggregate([ { $match: { capacity: { $gt: 50 } } }, { $group: { _id: \"$building\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 854,
        "spider_question_id": 1395,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building",
        "question": "Find the maximum and average capacity among rooms in each building.",
        "query": "db.classroom.aggregate([ { $group: { _id: \"$building\", maxCapacity: { $max: \"$capacity\" }, avgCapacity: { $avg: \"$capacity\" } } } ])",
        "gpt4 answer": "db.classroom.aggregate([ { $group: { _id: \"$building\", maxCapacity: { $max: \"$capacity\" }, avgCapacity: { $avg: \"$capacity\" } } }, { $project: { building: \"$_id\", maxCapacity: 1, avgCapacity: 1 } } ])",
        "deepseek answer": "db.classroom.aggregate([ { $group: { _id: \"$building\", maxCapacity: { $max: \"$capacity\" }, avgCapacity: { $avg: \"$capacity\" } } } ])"
    },
    {
        "question_id": 855,
        "spider_question_id": 1396,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(capacity) , avg(capacity) , building FROM classroom GROUP BY building",
        "question": "What are the greatest and average capacity for rooms in each building?",
        "query": "db.classroom.aggregate([ { $group: { _id: \"$building\", maxCapacity: { $max: \"$capacity\" }, avgCapacity: { $avg: \"$capacity\" } } } ])",
        "gpt4 answer": "db.classroom.aggregate([ { $group: { _id: \"$building\", maxCapacity: { $max: \"$capacity\" }, avgCapacity: { $avg: \"$capacity\" } } }, { $project: { building: \"$_id\", maxCapacity: 1, avgCapacity: 1 } } ])",
        "deepseek answer": "db.classroom.aggregate([ { $group: { _id: \"$building\", maxCapacity: { $max: \"$capacity\" }, avgCapacity: { $avg: \"$capacity\" } } } ])"
    },
    {
        "question_id": 856,
        "spider_question_id": 1399,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name",
        "question": "Find the total credits of courses provided by different department.",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", total_credits: { $sum: \"$credits\" } } }, { $project: { dept_name: \"$_id\", total_credits: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } } ])"
    },
    {
        "question_id": 857,
        "spider_question_id": 1400,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(credits) , dept_name FROM course GROUP BY dept_name",
        "question": "How many total credits are offered by each department?",
        "query": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } } ])",
        "gpt4 answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } } ])",
        "deepseek answer": "db.course.aggregate([ { $group: { _id: \"$dept_name\", totalCredits: { $sum: \"$credits\" } } } ])"
    },
    {
        "question_id": 858,
        "spider_question_id": 1403,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR",
        "question": "Find the number of courses provided in each semester and year.",
        "query": "db.section.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $project: { count: 1, semester: \"$_id.semester\", year: \"$_id.year\" } } ])",
        "gpt4 answer": "db.section.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, numberOfCourses: { $sum: 1 } } }, { $project: { semester: \"$_id.semester\", year: \"$_id.year\", count: \"$numberOfCourses\" } } ])",
        "deepseek answer": "db.section.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $project: { count: 1, semester: \"$_id.semester\", year: \"$_id.year\" } } ])"
    },
    {
        "question_id": 859,
        "spider_question_id": 1404,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , semester , YEAR FROM SECTION GROUP BY semester , YEAR",
        "question": "How many courses are provided in each semester and year?",
        "query": "db.section.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $project: { count: 1, semester: \"$_id.semester\", year: \"$_id.year\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.section.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $project: { count: 1, semester: \"$_id.semester\", year: \"$_id.year\" } } ])"
    },
    {
        "question_id": 860,
        "spider_question_id": 1405,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year which offers the largest number of courses.",
        "query": "db.section.aggregate([ { $group: { _id: \"$year\", numberOfCourses: { $sum: 1 } } }, { $sort: { numberOfCourses: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $group: { _id: \"$year\", numberOfCourses: { $sum: 1 } } }, { $sort: { numberOfCourses: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 861,
        "spider_question_id": 1406,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the greatest number of courses?",
        "query": "db.section.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "gpt4 answer": "db.section.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])",
        "deepseek answer": "db.section.aggregate([ { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { year: \"$_id\" } } ])"
    },
    {
        "question_id": 862,
        "spider_question_id": 1408,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT semester , YEAR FROM SECTION GROUP BY semester , YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year and semester with the most courses?",
        "query": "db.section.aggregate([ { $group: { _id: { year: \"$year\", semester: \"$semester\" }, coursesCount: { $sum: 1 } } }, { $sort: { coursesCount: -1 } }, { $limit: 1 }, { $project: { year: \"$_id.year\", semester: \"$_id.semester\" } } ])",
        "gpt4 answer": "db.section.aggregate([ { $group: { _id: { year: \"$year\", semester: \"$semester\" }, coursesCount: { $sum: 1 } } }, { $sort: { coursesCount: -1 } }, { $limit: 1 }, { $project: { year: \"$_id.year\", semester: \"$_id.semester\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 863,
        "spider_question_id": 1409,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of department has the highest amount of students?",
        "query": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", studentCount: { $sum: 1 } } }, { $sort: { studentCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 864,
        "spider_question_id": 1410,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the deparment with the highest enrollment?",
        "query": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 865,
        "spider_question_id": 1411,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_name FROM student GROUP BY dept_name",
        "question": "Find the total number of students in each department.",
        "query": "db.student.aggregate([ { $group: { _id: \"$dept_name\", totalStudents: { $sum: 1 } } } ])",
        "gpt4 answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", total_students: { $sum: 1 } } }, { $project: { dept_name: \"$_id\", total_students: 1 } } ])",
        "deepseek answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", totalStudents: { $sum: 1 } } } ])"
    },
    {
        "question_id": 866,
        "spider_question_id": 1412,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_name FROM student GROUP BY dept_name",
        "question": "How many students are in each department?",
        "query": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", numberOfStudents: { $count: {} } } } ])",
        "deepseek answer": "db.student.aggregate([ { $group: { _id: \"$dept_name\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 867,
        "spider_question_id": 1413,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count(*) LIMIT 1",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "query": "db.takes.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { semester: \"$_id.semester\", year: \"$_id.year\" } } ])",
        "gpt4 answer": "db.takes.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { semester: \"$_id.semester\", year: \"$_id.year\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 868,
        "spider_question_id": 1414,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT semester , YEAR FROM takes GROUP BY semester , YEAR ORDER BY count(*) LIMIT 1",
        "question": "Which semeseter and year had the fewest students?",
        "query": "db.takes.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { semester: \"$_id.semester\", year: \"$_id.year\" } } ])",
        "gpt4 answer": "db.takes.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, studentCount: { $sum: 1 } } }, { $sort: { studentCount: 1 } }, { $limit: 1 }, { $project: { semester: \"$_id.semester\", year: \"$_id.year\" } } ])",
        "deepseek answer": "db.takes.aggregate([ { $group: { _id: { semester: \"$semester\", year: \"$year\" }, count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { semester: \"$_id.semester\", year: \"$_id.year\" } } ])"
    },
    {
        "question_id": 869,
        "spider_question_id": 1423,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
        "question": "What is the title of the prerequisite class of International Finance course?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisites\" } }, { $match: { \"title\": \"International Finance\" } }, { $unwind: \"$prerequisites\" }, { $lookup: { from: \"course\", localField: \"prerequisites.prereq_id\", foreignField: \"course_id\", as: \"prereq_course\" } }, { $unwind: \"$prereq_course\" }, { $project: { \"_id\": 0, \"title\": \"$prereq_course.title\" } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisites\" } }, { $match: { \"title\": \"International Finance\" } }, { $unwind: \"$prerequisites\" }, { $lookup: { from: \"course\", localField: \"prerequisites.prereq_id\", foreignField: \"course_id\", as: \"prereq_course\" } }, { $unwind: \"$prereq_course\" }, { $project: { \"_id\": 0, \"title\": \"$prereq_course.title\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 870,
        "spider_question_id": 1424,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "query": "db.course.aggregate([ { $match: { course_id: { $in: db.prereq.distinct(\"prereq_id\", { course_id: { $in: db.course.distinct(\"course_id\", { title: \"International Finance\" }) } }) } } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prerequisite\" } }, { $unwind: \"$prerequisite\" }, { $match: { \"title\": \"International Finance\" } }, { $lookup: { from: \"course\", localField: \"prerequisite.prereq_id\", foreignField: \"course_id\", as: \"prereq_details\" } }, { $unwind: \"$prereq_details\" }, { $project: { \"title\": \"$prereq_details.title\" } } ])",
        "deepseek answer": "db.course.aggregate([ { $match: { course_id: { $in: db.prereq.distinct(\"prereq_id\", { course_id: { $in: db.course.distinct(\"course_id\", { title: \"International Finance\" }) } }) } } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 871,
        "spider_question_id": 1425,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereq_info\" }}, { $unwind: \"$prereq_info\" }, { $lookup: { from: \"course\", localField: \"prereq_info.prereq_id\", foreignField: \"course_id\", as: \"prereq_course\" }}, { $unwind: \"$prereq_course\" }, { $match: { \"prereq_course.title\": \"Differential Geometry\" } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereq_info\" }}, { $unwind: \"$prereq_info\" }, { $lookup: { from: \"course\", localField: \"prereq_info.prereq_id\", foreignField: \"course_id\", as: \"prereq_course\" }}, { $unwind: \"$prereq_course\" }, { $match: { \"prereq_course.title\": \"Differential Geometry\" } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 872,
        "spider_question_id": 1429,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "query": "db.course.aggregate([ { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $unwind: \"$section_info\" }, { $match: { \"section_info.building\": \"Chandler\", \"section_info.semester\": \"Fall\", \"section_info.year\": 2010 } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $match: { building: 'Chandler', semester: 'Fall', year: 2010 } }, { $lookup: { from: \"course\", localField: \"course_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $project: { title: \"$course_info.title\" } } ])",
        "deepseek answer": "db.course.aggregate([ { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $unwind: \"$section_info\" }, { $match: { \"section_info.building\": \"Chandler\", \"section_info.semester\": \"Fall\", \"section_info.year\": 2010 } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 873,
        "spider_question_id": 1430,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "query": "db.course.aggregate([ { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $match: { \"section_info.building\": \"Chandler\", \"section_info.semester\": \"Fall\", \"section_info.year\": 2010 } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $match: { building: 'Chandler', semester: 'Fall', year: 2010 } }, { $lookup: { from: \"course\", localField: \"course_id\", foreignField: \"course_id\", as: \"courseDetails\" } }, { $unwind: \"$courseDetails\" }, { $project: { title: \"$courseDetails.title\" } } ])",
        "deepseek answer": "db.course.aggregate([ { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $match: { \"section_info.building\": \"Chandler\", \"section_info.semester\": \"Fall\", \"section_info.year\": 2010 } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 874,
        "spider_question_id": 1437,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereq_info\" } }, { $unwind: \"$prereq_info\" }, { $match: { \"title\": \"Mobile Computing\" } }, { $lookup: { from: \"course\", localField: \"prereq_info.prereq_id\", foreignField: \"course_id\", as: \"prerequisite_course\" } }, { $unwind: \"$prerequisite_course\" }, { $project: { \"title\": \"$prerequisite_course.title\" } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"course_id\", as: \"prereq_info\" } }, { $unwind: \"$prereq_info\" }, { $match: { \"title\": \"Mobile Computing\" } }, { $lookup: { from: \"course\", localField: \"prereq_info.prereq_id\", foreignField: \"course_id\", as: \"prerequisite_course\" } }, { $unwind: \"$prerequisite_course\" }, { $project: { \"title\": \"$prerequisite_course.title\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 875,
        "spider_question_id": 1438,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "query": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"prereq_id\", as: \"prerequisites\" } }, { $unwind: \"$prerequisites\" }, { $lookup: { from: \"course\", localField: \"prerequisites.course_id\", foreignField: \"course_id\", as: \"required_course\" } }, { $unwind: \"$required_course\" }, { $match: { \"required_course.title\": \"Mobile Computing\" } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.course.aggregate([ { $lookup: { from: \"prereq\", localField: \"course_id\", foreignField: \"prereq_id\", as: \"prerequisites\" } }, { $unwind: \"$prerequisites\" }, { $lookup: { from: \"course\", localField: \"prerequisites.course_id\", foreignField: \"course_id\", as: \"required_course\" } }, { $unwind: \"$required_course\" }, { $match: { \"required_course.title\": \"Mobile Computing\" } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 876,
        "spider_question_id": 1439,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "query": "db.student.aggregate([ { $sort: { \"tot_cred\": -1 } }, { $limit: 1 }, { $lookup: { from: \"advisor\", localField: \"ID\", foreignField: \"s_ID\", as: \"advisor_info\" } }, { $unwind: \"$advisor_info\" }, { $lookup: { from: \"instructor\", localField: \"advisor_info.i_ID\", foreignField: \"ID\", as: \"instructor_info\" } }, { $unwind: \"$instructor_info\" }, { $project: { name: \"$instructor_info.name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.student.aggregate([ { $sort: { \"tot_cred\": -1 } }, { $limit: 1 }, { $lookup: { from: \"advisor\", localField: \"ID\", foreignField: \"s_ID\", as: \"advisor_info\" } }, { $unwind: \"$advisor_info\" }, { $lookup: { from: \"instructor\", localField: \"advisor_info.i_ID\", foreignField: \"ID\", as: \"instructor_info\" } }, { $unwind: \"$instructor_info\" }, { $project: { name: \"$instructor_info.name\" } } ])"
    },
    {
        "question_id": 877,
        "spider_question_id": 1440,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "question": "What is the name of the instructor who advises the student with the greatest number of total credits?",
        "query": "db.advisor.aggregate([ { $lookup: { from: \"instructor\", localField: \"i_ID\", foreignField: \"ID\", as: \"instructor_info\" } }, { $lookup: { from: \"student\", localField: \"s_ID\", foreignField: \"ID\", as: \"student_info\" } }, { $unwind: \"$instructor_info\" }, { $unwind: \"$student_info\" }, { $sort: { \"student_info.tot_cred\": -1 } }, { $limit: 1 }, { $project: { name: \"$instructor_info.name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.advisor.aggregate([ { $lookup: { from: \"instructor\", localField: \"i_ID\", foreignField: \"ID\", as: \"instructor_info\" } }, { $lookup: { from: \"student\", localField: \"s_ID\", foreignField: \"ID\", as: \"student_info\" } }, { $unwind: \"$instructor_info\" }, { $unwind: \"$student_info\" }, { $sort: { \"student_info.tot_cred\": -1 } }, { $limit: 1 }, { $project: { name: \"$instructor_info.name\" } } ])"
    },
    {
        "question_id": 878,
        "spider_question_id": 1441,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "question": "Find the name of instructors who didn't teach any courses?",
        "query": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching\" } }, { $match: { teaching: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching\" } }, { $match: { teaching: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 879,
        "spider_question_id": 1442,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "question": "What are the names of instructors who didn't teach?",
        "query": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching_info\" } }, { $match: { \"teaching_info\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching_info\" } }, { $match: { \"teaching_info\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 880,
        "spider_question_id": 1443,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "question": "Find the id of instructors who didn't teach any courses?",
        "query": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching\" } }, { $match: { teaching: { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "gpt4 answer": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching\" } }, { $match: { teaching: { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 881,
        "spider_question_id": 1444,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "question": "What are the ids of instructors who didnt' teach?",
        "query": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching\" } }, { $match: { \"teaching\": { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "gpt4 answer": "db.instructor.aggregate([ { $lookup: { from: \"teaches\", localField: \"ID\", foreignField: \"ID\", as: \"teaching\" } }, { $match: { \"teaching\": { $size: 0 } } }, { $project: { ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 882,
        "spider_question_id": 1447,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "question": "Find the name of the department which has the highest average salary of professors.",
        "query": "db.instructor.aggregate([ { $group: { _id: \"$dept_name\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.instructor.aggregate([ { $group: { _id: \"$dept_name\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.instructor.aggregate([ { $group: { _id: \"$dept_name\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 883,
        "spider_question_id": 1448,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "question": "Which department has the highest average instructor salary?",
        "query": "db.instructor.aggregate([ { $group: { _id: \"$dept_name\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])",
        "gpt4 answer": "db.instructor.aggregate([ { $group: { _id: \"$dept_name\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.instructor.aggregate([ { $group: { _id: \"$dept_name\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: -1 } }, { $limit: 1 }, { $project: { dept_name: \"$_id\" } } ])"
    },
    {
        "question_id": 884,
        "spider_question_id": 1463,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "query": "db.course.aggregate([ { $match: { dept_name: \"Psychology\" } }, { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $unwind: \"$section_info\" }, { $project: { building: \"$section_info.building\", room_number: \"$section_info.room_number\", semester: \"$section_info.semester\", year: \"$section_info.year\" } }, { $sort: { title: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $lookup: { from: \"course\", localField: \"course_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $match: { \"course_info.dept_name\": \"Psychology\" } }, { $unwind: \"$course_info\" }, { $sort: { \"course_info.title\": 1 } }, { $project: { building: 1, room_number: 1, semester: 1, year: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $match: { dept_name: \"Psychology\" } }, { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $unwind: \"$section_info\" }, { $project: { building: \"$section_info.building\", room_number: \"$section_info.room_number\", semester: \"$section_info.semester\", year: \"$section_info.year\" } }, { $sort: { title: 1 } } ])"
    },
    {
        "question_id": 885,
        "spider_question_id": 1464,
        "db_id": "college_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.building , T2.room_number , T2.semester , T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "query": "db.course.aggregate([ { $match: { dept_name: \"Psychology\" } }, { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $unwind: \"$section_info\" }, { $project: { building: \"$section_info.building\", room_number: \"$section_info.room_number\", semester: \"$section_info.semester\", year: \"$section_info.year\" } }, { $sort: { title: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $lookup: { from: \"course\", localField: \"course_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $match: { \"course_info.dept_name\": \"Psychology\" } }, { $unwind: \"$course_info\" }, { $sort: { \"course_info.title\": 1 } }, { $project: { building: 1, room_number: 1, semester: 1, year: 1 } } ])",
        "deepseek answer": "db.course.aggregate([ { $match: { dept_name: \"Psychology\" } }, { $lookup: { from: \"section\", localField: \"course_id\", foreignField: \"course_id\", as: \"section_info\" } }, { $unwind: \"$section_info\" }, { $project: { building: \"$section_info.building\", room_number: \"$section_info.room_number\", semester: \"$section_info.semester\", year: \"$section_info.year\" } }, { $sort: { title: 1 } } ])"
    },
    {
        "question_id": 886,
        "spider_question_id": 1465,
        "db_id": "college_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'",
        "question": "Find the names of all instructors in computer science department",
        "query": "db.instructor.find({dept_name: 'Comp. Sci.'}, {name: 1})",
        "gpt4 answer": "db.instructor.find({ dept_name: 'Comp. Sci.' }, { name: 1 })",
        "deepseek answer": "db.instructor.find({dept_name: 'Comp. Sci.'}, {name: 1})"
    },
    {
        "question_id": 887,
        "spider_question_id": 1466,
        "db_id": "college_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "query": "db.instructor.find({dept_name: 'Comp. Sci.'}, {name: 1})",
        "gpt4 answer": "db.instructor.find({ dept_name: 'Comp. Sci.' }, { name: 1 })",
        "deepseek answer": "db.instructor.find({dept_name: 'Comp. Sci.'}, {name: 1})"
    },
    {
        "question_id": 888,
        "spider_question_id": 1467,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "query": "db.instructor.find( { dept_name: 'Comp. Sci.', salary: { $gt: 80000 } }, { name: 1 } )",
        "gpt4 answer": "db.instructor.find({ dept_name: 'Comp. Sci.', salary: { $gt: 80000 } }, { name: 1 })",
        "deepseek answer": "db.instructor.find( { dept_name: 'Comp. Sci.', salary: { $gt: 80000 } }, { name: 1 } )"
    },
    {
        "question_id": 889,
        "spider_question_id": 1468,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "query": "db.instructor.find({ dept_name: 'Comp. Sci.', salary: { $gt: 80000 } }, { name: 1 })",
        "gpt4 answer": "db.instructor.find({dept_name: 'Comp. Sci.', salary: {$gt: 80000}}, { name: 1})",
        "deepseek answer": "db.instructor.find({ dept_name: 'Comp. Sci.', salary: { $gt: 80000 } }, { name: 1 })"
    },
    {
        "question_id": 890,
        "spider_question_id": 1477,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "query": "db.section.aggregate([ { $match: { $or: [{ semester: 'Fall', year: 2009 }, { semester: 'Spring', year: 2010 }] } }, { $group: { _id: \"$course_id\" } } ])",
        "gpt4 answer": "db.section.aggregate([ { $match: { $or: [{ semester: 'Fall', year: 2009 }, { semester: 'Spring', year: 2010 }] } }, { $group: { _id: \"$course_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 891,
        "spider_question_id": 1478,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "query": "db.section.find( { $or: [ { semester: 'Fall', year: 2009 }, { semester: 'Spring', year: 2010 } ] }, { course_id: 1 } )",
        "gpt4 answer": "db.section.find( { $or: [ { semester: 'Fall', year: 2009 }, { semester: 'Spring', year: 2010 } ] }, { course_id: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 892,
        "spider_question_id": 1481,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "query": "db.section.aggregate([ { $match: { semester: \"Fall\", year: 2009 } }, { $group: { _id: \"$course_id\" } }, { $lookup: { from: \"section\", let: { course_id: \"$_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$course_id\", \"$$course_id\"] }, { $eq: [\"$semester\", \"Spring\"] }, { $eq: [\"$year\", 2010] } ] } } }, { $project: { course_id: 1 } } ], as: \"spring_courses\" } }, { $match: { \"spring_courses\": { $size: 0 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $match: { semester: \"Fall\", year: 2009 } }, { $group: { _id: \"$course_id\" } }, { $lookup: { from: \"section\", let: { course_id: \"$_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$course_id\", \"$$course_id\"] }, { $eq: [\"$semester\", \"Spring\"] }, { $eq: [\"$year\", 2010] } ] } } }, { $project: { course_id: 1 } } ], as: \"spring_courses\" } }, { $match: { \"spring_courses\": { $size: 0 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 893,
        "spider_question_id": 1482,
        "db_id": "college_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "query": "db.section.aggregate([ { $match: { semester: \"Fall\", year: 2009 } }, { $group: { _id: \"$course_id\" } }, { $lookup: { from: \"section\", let: { course_id: \"$_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$course_id\", \"$$course_id\"] }, { $eq: [\"$semester\", \"Spring\"] }, { $eq: [\"$year\", 2010] } ] } } }, { $project: { course_id: 1 } } ], as: \"spring_courses\" } }, { $match: { \"spring_courses\": { $size: 0 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.section.aggregate([ { $match: { semester: \"Fall\", year: 2009 } }, { $group: { _id: \"$course_id\" } }, { $lookup: { from: \"section\", let: { course_id: \"$_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$course_id\", \"$$course_id\"] }, { $eq: [\"$semester\", \"Spring\"] }, { $eq: [\"$year\", 2010] } ] } } }, { $project: { course_id: 1 } } ], as: \"spring_courses\" } }, { $match: { \"spring_courses\": { $size: 0 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 894,
        "spider_question_id": 1485,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "query": "db.teaches.aggregate([ { $match: { semester: 'Spring', year: 2010 } }, { $group: { _id: '$ID' } }, { $count: 'total_instructors' } ])",
        "gpt4 answer": "db.teaches.aggregate([ { $match: { semester: 'Spring', year: 2010 } }, { $group: { _id: '$ID' } }, { $count: 'total_instructors' } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 895,
        "spider_question_id": 1486,
        "db_id": "college_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
        "question": "How many instructors teach a course in the Spring of 2010?",
        "query": "db.teaches.aggregate([ { $match: { semester: 'Spring', year: 2010 } }, { $group: { _id: \"$ID\" } }, { $count: \"distinct_instructors\" } ])",
        "gpt4 answer": "db.teaches.aggregate([ { $match: { semester: 'Spring', year: 2010 } }, { $group: { _id: \"$ID\" } }, { $count: \"distinct_instructors\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 896,
        "spider_question_id": 1494,
        "db_id": "debate",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "query": "db.debate.find({}, {Venue: 1}).sort({Num_of_Audience: 1})",
        "gpt4 answer": "db.debate.find({}, { Venue: 1 }).sort({ Num_of_Audience: 1 })",
        "deepseek answer": "db.debate.find({}, {Venue: 1}).sort({Num_of_Audience: 1})"
    },
    {
        "question_id": 897,
        "spider_question_id": 1495,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date , Venue FROM debate",
        "question": "What are the date and venue of each debate?",
        "query": "db.debate.find({}, {Date: 1, Venue: 1})",
        "gpt4 answer": "db.debate.find({}, {Date: 1, Venue: 1})",
        "deepseek answer": "db.debate.find({}, {Date: 1, Venue: 1})"
    },
    {
        "question_id": 898,
        "spider_question_id": 1496,
        "db_id": "debate",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Date FROM debate WHERE Num_of_Audience > 150",
        "question": "List the dates of debates with number of audience bigger than 150",
        "query": "db.debate.find({Num_of_Audience: {$gt: 150}}, {Date: 1})",
        "gpt4 answer": "db.debate.find({ Num_of_Audience: { $gt: 150 } }, { Date: 1 })",
        "deepseek answer": "db.debate.find({Num_of_Audience: {$gt: 150}}, {Date: 1})"
    },
    {
        "question_id": 899,
        "spider_question_id": 1497,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM people WHERE Age = 35 OR Age = 36",
        "question": "Show the names of people aged either 35 or 36.",
        "query": "db.people.find({Age: {$in: [35, 36]}}, {Name: 1})",
        "gpt4 answer": "db.people.find( { Age: { $in: [35, 36] } }, { Name: 1 } )",
        "deepseek answer": "db.people.find({Age: {$in: [35, 36]}}, {Name: 1})"
    },
    {
        "question_id": 900,
        "spider_question_id": 1498,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "question": "What is the party of the youngest people?",
        "query": "db.people.find({}, { Party: 1}).sort({Age: 1}).limit(1)",
        "gpt4 answer": "db.people.find({}, {Party: 1}).sort({Age: 1}).limit(1)",
        "deepseek answer": "db.people.find({}, { Party: 1}).sort({Age: 1}).limit(1)"
    },
    {
        "question_id": 901,
        "spider_question_id": 1499,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Party , COUNT(*) FROM people GROUP BY Party",
        "question": "Show different parties of people along with the number of people in each party.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $project: { Party: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Party\", NumberOfPeople: { $sum: 1 } }} ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $project: { Party: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 902,
        "spider_question_id": 1500,
        "db_id": "debate",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the party that has the most people.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Party: \"$_id\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Party: \"$_id\" } } ])"
    },
    {
        "question_id": 903,
        "spider_question_id": 1502,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID",
        "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "query": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$debate_info\" }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\", Date: \"$debate_info.Date\", Venue: \"$debate_info.Venue\" } } ])",
        "gpt4 answer": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debateInfo\" } }, { $unwind: \"$debateInfo\" }, { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"affirmativePeople\" } }, { $unwind: \"$affirmativePeople\" }, { $project: { \"Name\": \"$affirmativePeople.Name\", \"Date\": \"$debateInfo.Date\", \"Venue\": \"$debateInfo.Venue\" } } ])",
        "deepseek answer": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$debate_info\" }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\", Date: \"$debate_info.Date\", Venue: \"$debate_info.Venue\" } } ])"
    },
    {
        "question_id": 904,
        "spider_question_id": 1503,
        "db_id": "debate",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , T2.Date , T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name ASC",
        "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "query": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $lookup: { from: \"people\", localField: \"Negative\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $unwind: \"$debate_info\" }, { $project: { Name: \"$people_info.Name\", Date: \"$debate_info.Date\", Venue: \"$debate_info.Venue\" } }, { $sort: { Name: 1 } } ])",
        "gpt4 answer": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debateDetails\" } }, { $unwind: \"$debateDetails\" }, { $lookup: { from: \"people\", localField: \"Negative\", foreignField: \"People_ID\", as: \"personDetails\" } }, { $unwind: \"$personDetails\" }, { $project: { Name: \"$personDetails.Name\", Date: \"$debateDetails.Date\", Venue: \"$debateDetails.Venue\" } }, { $sort: { \"Name\": 1 } } ])",
        "deepseek answer": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $lookup: { from: \"people\", localField: \"Negative\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $unwind: \"$debate_info\" }, { $project: { Name: \"$people_info.Name\", Date: \"$debate_info.Date\", Venue: \"$debate_info.Venue\" } }, { $sort: { Name: 1 } } ])"
    },
    {
        "question_id": 905,
        "spider_question_id": 1504,
        "db_id": "debate",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200",
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "query": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $unwind: \"$debate_info\" }, { $match: { \"debate_info.Num_of_Audience\": { $gt: 200 } } }, { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\" } } ])",
        "gpt4 answer": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $unwind: \"$debate_info\" }, { $match: { \"debate_info.Num_of_Audience\": { $gt: 200 } } }, { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"affirmative_people\" } }, { $unwind: \"$affirmative_people\" }, { $project: { Name: \"$affirmative_people.Name\" } } ])",
        "deepseek answer": "db.debate_people.aggregate([ { $lookup: { from: \"debate\", localField: \"Debate_ID\", foreignField: \"Debate_ID\", as: \"debate_info\" } }, { $unwind: \"$debate_info\" }, { $match: { \"debate_info.Num_of_Audience\": { $gt: 200 } } }, { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\" } } ])"
    },
    {
        "question_id": 906,
        "spider_question_id": 1505,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name",
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "query": "db.debate_people.aggregate([ { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"affirmative_people\" } }, { $unwind: \"$affirmative_people\" }, { $group: { _id: \"$affirmative_people.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Count: \"$count\" } } ])",
        "gpt4 answer": "db.debate_people.aggregate([ { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"affirmative_people\" } }, { $unwind: \"$affirmative_people\" }, { $group: { _id: \"$affirmative_people.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.debate_people.aggregate([ { $lookup: { from: \"people\", localField: \"Affirmative\", foreignField: \"People_ID\", as: \"affirmative_people\" } }, { $unwind: \"$affirmative_people\" }, { $group: { _id: \"$affirmative_people.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Count: \"$count\" } } ])"
    },
    {
        "question_id": 907,
        "spider_question_id": 1506,
        "db_id": "debate",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "query": "db.debate_people.aggregate([ { $lookup: { from: \"people\", localField: \"Negative\", foreignField: \"People_ID\", as: \"negative_people\" } }, { $unwind: \"$negative_people\" }, { $group: { _id: \"$negative_people.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.debate_people.aggregate([ { $lookup: { from: \"people\", localField: \"Negative\", foreignField: \"People_ID\", as: \"negative_people\" } }, { $unwind: \"$negative_people\" }, { $group: { _id: \"$negative_people.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "db.debate_people.aggregate([ { $lookup: { from: \"people\", localField: \"Negative\", foreignField: \"People_ID\", as: \"negative_people\" } }, { $unwind: \"$negative_people\" }, { $group: { _id: \"$negative_people.Name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Name: \"$_id\" } } ])"
    },
    {
        "question_id": 908,
        "spider_question_id": 1507,
        "db_id": "debate",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "query": "db.people.find( { People_ID: { $nin: db.debate_people.distinct(\"Affirmative\") } }, { Name: 1 } )",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"debate_people\", localField: \"People_ID\", foreignField: \"Affirmative\", as: \"affirmative_debates\" } }, { $match: { \"affirmative_debates\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.people.find( { People_ID: { $nin: db.debate_people.distinct(\"Affirmative\") } }, { Name: 1 } )"
    },
    {
        "question_id": 909,
        "spider_question_id": 1508,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_details FROM customers ORDER BY customer_details",
        "question": "List the names of all the customers in alphabetical order.",
        "query": "db.Customers.find({}, { Customer_Details: 1}).sort({Customer_Details: 1})",
        "gpt4 answer": "db.Customers.find({}, { Customer_Details: 1 }).sort({ Customer_Details: 1 })",
        "deepseek answer": "db.Customers.find({}, { Customer_Details: 1}).sort({Customer_Details: 1})"
    },
    {
        "question_id": 910,
        "spider_question_id": 1509,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_details FROM customers ORDER BY customer_details",
        "question": "Sort the customer names in alphabetical order.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $lookup: { from: \"Claim_Headers\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"claims\" } }, { $sort: { \"Customer_Details\": 1 } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.find({}, { Customer_Details: 1 }).sort({ Customer_Details: 1 })",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $lookup: { from: \"Claim_Headers\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"claims\" } }, { $sort: { \"Customer_Details\": 1 } }, { $project: { Customer_Details: 1 } } ])"
    },
    {
        "question_id": 911,
        "spider_question_id": 1510,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = 'Dayana Robel'",
        "question": "Find all the policy type codes associated with the customer 'Dayana Robel'",
        "query": "db.Customers.aggregate([ { $match: { \"Customer_Details\": \"Dayana Robel\" } }, { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $project: { \"_id\": 0, \"Policy_Type_Code\": \"$policies.Policy_Type_Code\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $match: { \"Customer_Details\": \"Dayana Robel\" } }, { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $project: { \"_id\": 0, \"Policy_Type_Code\": \"$policies.Policy_Type_Code\" } } ])"
    },
    {
        "question_id": 912,
        "spider_question_id": 1511,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = 'Dayana Robel'",
        "question": "What are the type codes of the policies used by the customer 'Dayana Robel'?",
        "query": "db.Customers.aggregate([ { $match: { \"Customer_Details\": \"Dayana Robel\" } }, { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $project: { \"_id\": 0, \"Policy_Type_Code\": \"$policies.Policy_Type_Code\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $match: { \"Customer_Details\": \"Dayana Robel\" } }, { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $project: { \"_id\": 0, \"Policy_Type_Code\": \"$policies.Policy_Type_Code\" } } ])"
    },
    {
        "question_id": 913,
        "spider_question_id": 1512,
        "db_id": "insurance_and_eClaims",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "query": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 }} ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 914,
        "spider_question_id": 1513,
        "db_id": "insurance_and_eClaims",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the type code of the most frequently used policy.",
        "query": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Policy_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Policy_Type_Code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 915,
        "spider_question_id": 1514,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "query": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Policy_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", uniqueCustomers: { $addToSet: \"$Customer_ID\" } } }, { $project: { Policy_Type_Code: \"$_id\", numberOfCustomers: { $size: \"$uniqueCustomers\" } } }, { $match: { numberOfCustomers: { $gt: 2 } } }, { $project: { Policy_Type_Code: 1 } } ])",
        "deepseek answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Policy_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 916,
        "spider_question_id": 1515,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*) > 2",
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "query": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Policy_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Policy_Type_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Policy_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 917,
        "spider_question_id": 1516,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers",
        "question": "Find the total and average amount paid in claim headers.",
        "query": "db.Claim_Headers.aggregate([ { $group: { _id: null, totalAmountPaid: { $sum: \"$Amount_Piad\" }, averageAmountPaid: { $avg: \"$Amount_Piad\" } } }, { $project: { totalAmountPaid: 1, averageAmountPaid: 1 } } ])",
        "gpt4 answer": "db.Claim_Headers.aggregate([ { $group: { _id: null, totalAmountPaid: { $sum: \"$Amount_Piad\" }, averageAmountPaid: { $avg: \"$Amount_Piad\" } } }, { $project: { totalAmountPaid: 1, averageAmountPaid: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 918,
        "spider_question_id": 1517,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers",
        "question": "What are the total amount and average amount paid in claim headers?",
        "query": "db.Claim_Headers.aggregate([ { $group: { _id: null, totalAmountPaid: { $sum: \"$Amount_Piad\" }, averageAmountPaid: { $avg: \"$Amount_Piad\" } } }, { $project: { totalAmountPaid: 1, averageAmountPaid: 1 } } ])",
        "gpt4 answer": "db.Claim_Headers.aggregate([ { $group: { _id: null, totalAmountPaid: { $sum: \"$Amount_Piad\" }, averageAmountPaid: { $avg: \"$Amount_Piad\" } } }, { $project: { totalAmountPaid: 1, averageAmountPaid: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 919,
        "spider_question_id": 1520,
        "db_id": "insurance_and_eClaims",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $lookup: { from: \"Claim_Headers\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"claims\" } }, { $unwind: \"$claims\" }, { $group: { _id: \"$Customer_ID\", maxClaim: { $max: \"$claims.Amount_Claimed\" }, customerDetails: { $first: \"$Customer_Details\" } } }, { $sort: { maxClaim: -1 } }, { $limit: 1 }, { $project: { customerDetails: \"$customerDetails\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $unwind: \"$policies\" }, { $lookup: { from: \"Claim_Headers\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"claims\" } }, { $unwind: \"$claims\" }, { $group: { _id: \"$Customer_ID\", maxClaim: { $max: \"$claims.Amount_Claimed\" }, customerDetails: { $first: \"$Customer_Details\" } } }, { $sort: { maxClaim: -1 } }, { $limit: 1 }, { $project: { customerDetails: \"$customerDetails\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 920,
        "spider_question_id": 1522,
        "db_id": "insurance_and_eClaims",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT min(amount_piad) FROM claim_headers)",
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $unwind: \"$Policies\" }, { $lookup: { from: \"Claim_Headers\", localField: \"Policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"Claim_Headers\" } }, { $unwind: \"$Claim_Headers\" }, { $group: { _id: \"$Customer_Details\", minAmountPaid: { $min: \"$Claim_Headers.Amount_Piad\" } } }, { $sort: { minAmountPaid: 1 } }, { $limit: 1 }, { $project: { Customer_Details: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $unwind: \"$Policies\" }, { $lookup: { from: \"Claim_Headers\", localField: \"Policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"Claim_Headers\" } }, { $unwind: \"$Claim_Headers\" }, { $group: { _id: \"$Customer_Details\", minAmountPaid: { $min: \"$Claim_Headers.Amount_Piad\" } } }, { $sort: { minAmountPaid: 1 } }, { $limit: 1 }, { $project: { Customer_Details: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 921,
        "spider_question_id": 1524,
        "db_id": "insurance_and_eClaims",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "question": "Find the names of customers who have no policies associated.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Customer_Policies\" } }, { $match: { Customer_Policies: { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])"
    },
    {
        "question_id": 922,
        "spider_question_id": 1525,
        "db_id": "insurance_and_eClaims",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
        "question": "What are the names of customers who do not have any policies?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $match: { Policies: { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])"
    },
    {
        "question_id": 923,
        "spider_question_id": 1528,
        "db_id": "insurance_and_eClaims",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "query": "db.Claims_Processing.aggregate([ { $group: { _id: \"$Claim_Stage_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Claims_Processing_Stages\", localField: \"_id\", foreignField: \"Claim_Stage_ID\", as: \"stage_details\" } }, { $unwind: \"$stage_details\" }, { $project: { claim_status_name: \"$stage_details.Claim_Status_Name\" } } ])",
        "gpt4 answer": "db.Claims_Processing.aggregate([ { $group: { _id: \"$Claim_Stage_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Claims_Processing_Stages\", localField: \"_id\", foreignField: \"Claim_Stage_ID\", as: \"stage_details\" } }, { $unwind: \"$stage_details\" }, { $project: { claim_status_name: \"$stage_details.Claim_Status_Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 924,
        "spider_question_id": 1529,
        "db_id": "insurance_and_eClaims",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "query": "db.Claims_Processing.aggregate([ { $lookup: { from: \"Claims_Processing_Stages\", localField: \"Claim_Stage_ID\", foreignField: \"Claim_Stage_ID\", as: \"claim_stage\" } }, { $unwind: \"$claim_stage\" }, { $group: { _id: \"$Claim_Stage_ID\", count: { $sum: 1 }, claim_status_name: { $first: \"$claim_stage.Claim_Status_Name\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { claim_status_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Claims_Processing.aggregate([ { $lookup: { from: \"Claims_Processing_Stages\", localField: \"Claim_Stage_ID\", foreignField: \"Claim_Stage_ID\", as: \"claim_stage\" } }, { $unwind: \"$claim_stage\" }, { $group: { _id: \"$Claim_Stage_ID\", count: { $sum: 1 }, claim_status_name: { $first: \"$claim_stage.Claim_Status_Name\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { claim_status_name: 1 } } ])"
    },
    {
        "question_id": 925,
        "spider_question_id": 1530,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%'",
        "question": "Find the names of customers whose name contains 'Diana'.",
        "query": "db.Customers.find( { Customer_Details: { $regex: /Diana/, $options: 'i' } }, { Customer_Details: 1 } )",
        "gpt4 answer": "db.Customers.find({ Customer_Details: /Diana/ }, { Customer_Details: 1 })",
        "deepseek answer": "db.Customers.find( { Customer_Details: { $regex: /Diana/, $options: 'i' } }, { Customer_Details: 1 } )"
    },
    {
        "question_id": 926,
        "spider_question_id": 1531,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%'",
        "question": "Which customers have the substring 'Diana' in their names? Return the customer details.",
        "query": "db.Customers.find( { Customer_Details: { $regex: /Diana/, $options: 'i' } }, { Customer_Details: 1 } )",
        "gpt4 answer": "db.Customers.find({ \"Customer_Details\": { $regex: \"Diana\" } }, { \"Customer_Details\": 1, \"_id\": 0 })",
        "deepseek answer": "db.Customers.find( { Customer_Details: { $regex: /Diana/, $options: 'i' } }, { Customer_Details: 1 } )"
    },
    {
        "question_id": 927,
        "spider_question_id": 1532,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy'",
        "question": "Find the names of the customers who have an deputy policy.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.Policy_Type_Code\": \"Deputy\" } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"CustomerPolicies\" } }, { $unwind: \"$CustomerPolicies\" }, { $match: { \"CustomerPolicies.Policy_Type_Code\": \"Deputy\" } }, { $group: { _id: \"$Customer_Details\" } }, { $project: { Customer_Details: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.Policy_Type_Code\": \"Deputy\" } }, { $project: { Customer_Details: 1 } } ])"
    },
    {
        "question_id": 928,
        "spider_question_id": 1533,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy'",
        "question": "Which customers have an insurance policy with the type code 'Deputy'? Give me the customer details.",
        "query": "db.Policies.aggregate([ { $match: { Policy_Type_Code: 'Deputy' } }, { $lookup: { from: 'Customers', localField: 'Customer_ID', foreignField: 'Customer_ID', as: 'customer_details' } }, { $unwind: '$customer_details' }, { $project: { 'customer_details.Customer_Details': 1 } }, { $group: { _id: '$customer_details.Customer_Details' } }, { $project: { Customer_Details: '$_id' } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $match: { Policy_Type_Code: 'Deputy' } }, { $lookup: { from: 'Customers', localField: 'Customer_ID', foreignField: 'Customer_ID', as: 'customer_details' } }, { $unwind: '$customer_details' }, { $project: { 'customer_details.Customer_Details': 1 } }, { $group: { _id: '$customer_details.Customer_Details' } }, { $project: { Customer_Details: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 929,
        "spider_question_id": 1534,
        "db_id": "insurance_and_eClaims",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy' OR t1.policy_type_code = 'Uniform'",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policy_info\" } }, { $match: { \"policy_info.Policy_Type_Code\": { $in: [\"Deputy\", \"Uniform\"] } } }, { $group: { _id: \"$Customer_ID\", Customer_Details: { $first: \"$Customer_Details\" } } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policy_info\" } }, { $match: { \"policy_info.Policy_Type_Code\": { $in: [\"Deputy\", \"Uniform\"] } } }, { $group: { _id: \"$Customer_ID\", Customer_Details: { $first: \"$Customer_Details\" } } }, { $project: { Customer_Details: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 930,
        "spider_question_id": 1535,
        "db_id": "insurance_and_eClaims",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy' OR t1.policy_type_code = 'Uniform'",
        "question": "Which customers have an insurance policy with the type code 'Deputy' or 'Uniform'? Return the customer details.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.Policy_Type_Code\": { $in: [\"Deputy\", \"Uniform\"] } } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"CustomerPolicies\" } }, { $match: { \"CustomerPolicies.Policy_Type_Code\": { $in: [\"Deputy\", \"Uniform\"] } } }, { $project: { Customer_Details: 1 } }, { $group: { _id: \"$Customer_Details\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.Policy_Type_Code\": { $in: [\"Deputy\", \"Uniform\"] } } }, { $project: { Customer_Details: 1 } } ])"
    },
    {
        "question_id": 931,
        "spider_question_id": 1538,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT policy_type_code , count(*) FROM policies GROUP BY policy_type_code",
        "question": "Find the number of records of each policy type and its type code.",
        "query": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $project: { policy_type_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $project: { policy_type_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 932,
        "spider_question_id": 1539,
        "db_id": "insurance_and_eClaims",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT policy_type_code , count(*) FROM policies GROUP BY policy_type_code",
        "question": "For each policy type, return its type code and its count in the record.",
        "query": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $project: { policy_type_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 933,
        "spider_question_id": 1541,
        "db_id": "insurance_and_eClaims",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "query": "db.Policies.aggregate([ { $lookup: { from: \"Customers\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_details\" } }, { $unwind: \"$customer_details\" }, { $group: { _id: \"$customer_details.Customer_Details\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { customer_details: \"$_id\" } } ])",
        "gpt4 answer": "db.Policies.aggregate([ { $group: { _id: \"$Customer_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"Customer_ID\", as: \"CustomerDetails\" } }, { $unwind: \"$CustomerDetails\" }, { $project: { Customer_Details: \"$CustomerDetails.Customer_Details\" } } ])",
        "deepseek answer": "db.Policies.aggregate([ { $lookup: { from: \"Customers\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"customer_details\" } }, { $unwind: \"$customer_details\" }, { $group: { _id: \"$customer_details.Customer_Details\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { customer_details: \"$_id\" } } ])"
    },
    {
        "question_id": 934,
        "spider_question_id": 1542,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = 'Open'",
        "question": "What is the description of the claim status 'Open'?",
        "query": "db.Claims_Processing_Stages.findOne({ Claim_Status_Name: 'Open' }, { Claim_Status_Description: 1 })",
        "gpt4 answer": "db.Claims_Processing_Stages.findOne({ Claim_Status_Name: 'Open' }, { Claim_Status_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 935,
        "spider_question_id": 1543,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = 'Open'",
        "question": "Find the description of the claim status 'Open'.",
        "query": "db.Claims_Processing_Stages.find({ Claim_Status_Name: 'Open' }, { Claim_Status_Description: 1 })",
        "gpt4 answer": "db.Claims_Processing_Stages.find({ Claim_Status_Name: 'Open' }, { Claim_Status_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 936,
        "spider_question_id": 1545,
        "db_id": "insurance_and_eClaims",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "question": "Count the number of distinct claim outcome codes.",
        "query": "db.Claims_Processing.aggregate([ { $group: { _id: \"$Claim_Outcome_Code\" } }, { $count: \"distinct_claim_outcome_codes\" } ])",
        "gpt4 answer": "db.Claims_Processing.aggregate([ { $group: { _id: \"$Claim_Outcome_Code\" } }, { $count: \"distinct_claim_outcome_codes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 937,
        "spider_question_id": 1556,
        "db_id": "customers_and_invoices",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'",
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "query": "db.Customers.aggregate([ { $match: { customer_first_name: \"Meaghan\", customer_last_name: \"Keeling\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $unwind: \"$accounts\" }, { $project: { account_name: \"$accounts.account_name\", other_account_details: \"$accounts.other_account_details\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_first_name: \"Meaghan\", customer_last_name: \"Keeling\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_accounts\" } }, { $unwind: \"$customer_accounts\" }, { $project: { account_name: \"$customer_accounts.account_name\", other_account_details: \"$customer_accounts.other_account_details\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_first_name: \"Meaghan\", customer_last_name: \"Keeling\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $unwind: \"$accounts\" }, { $project: { account_name: \"$accounts.account_name\", other_account_details: \"$accounts.other_account_details\" } } ])"
    },
    {
        "question_id": 938,
        "spider_question_id": 1557,
        "db_id": "customers_and_invoices",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.account_name , T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'",
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "query": "db.Customers.aggregate([ { $match: { customer_first_name: \"Meaghan\", customer_last_name: \"Keeling\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $unwind: \"$accounts\" }, { $project: { account_name: \"$accounts.account_name\", other_account_details: \"$accounts.other_account_details\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_first_name: \"Meaghan\", customer_last_name: \"Keeling\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accountDetails\" } }, { $unwind: \"$accountDetails\" }, { $project: { account_name: \"$accountDetails.account_name\", other_account_details: \"$accountDetails.other_account_details\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_first_name: \"Meaghan\", customer_last_name: \"Keeling\" } }, { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $unwind: \"$accounts\" }, { $project: { account_name: \"$accounts.account_name\", other_account_details: \"$accounts.other_account_details\" } } ])"
    },
    {
        "question_id": 939,
        "spider_question_id": 1558,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '900'",
        "question": "Show the first name and last name for the customer with account name 900.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.account_name\": \"900\" } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"account\" } }, { $match: { \"account.account_name\": \"900\" } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.account_name\": \"900\" } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])"
    },
    {
        "question_id": 940,
        "spider_question_id": 1559,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '900'",
        "question": "What are the full names of customers with the account name 900?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.account_name\": \"900\" } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"joined_accounts\" } }, { $match: { \"joined_accounts.account_name\": \"900\" } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.account_name\": \"900\" } }, { $project: { customer_first_name: 1, customer_last_name: 1 } } ])"
    },
    {
        "question_id": 941,
        "spider_question_id": 1560,
        "db_id": "customers_and_invoices",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "How many customers don't have an account?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_accounts\" } }, { $match: { customer_accounts: { $size: 0 } } }, { $count: \"no_account_customers\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_accounts\" } }, { $match: { customer_accounts: { $size: 0 } } }, { $count: \"no_account_customers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 942,
        "spider_question_id": 1561,
        "db_id": "customers_and_invoices",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "Count the number of customers who do not have an account.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $count: \"no_account_customers\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $count: \"no_account_customers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 943,
        "spider_question_id": 1562,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_last_name: 1, phone_number: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $group: { _id: { first_name: \"$customer_first_name\", last_name: \"$customer_last_name\", phone: \"$phone_number\" } } }, { $project: { first_name: \"$_id.first_name\", last_name: \"$_id.last_name\", phone_number: \"$_id.phone\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_last_name: 1, phone_number: 1 } } ])"
    },
    {
        "question_id": 944,
        "spider_question_id": 1563,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_last_name: 1, phone_number: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $ne: [] } } }, { $group: { _id: { first_name: \"$customer_first_name\", last_name: \"$customer_last_name\", phone_number: \"$phone_number\" } } }, { $project: { first_name: \"$_id.first_name\", last_name: \"$_id.last_name\", phone_number: \"$_id.phone_number\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.0\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_last_name: 1, phone_number: 1 } } ])"
    },
    {
        "question_id": 945,
        "spider_question_id": 1564,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "question": "Show customer ids who don't have an account.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $project: { customer_id: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { accounts: { $size: 0 } } }, { $project: { customer_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 946,
        "spider_question_id": 1565,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "question": "What are the customer ids for customers who do not have an account?",
        "query": "db.Customers.find({ customer_id: { $nin: db.Accounts.distinct(\"customer_id\") } }, { customer_id: 1 })",
        "gpt4 answer": "db.Customers.find({ customer_id: { $nin: db.Accounts.distinct(\"customer_id\") } }, { customer_id: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 947,
        "spider_question_id": 1566,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", numberOfAccounts: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", numberOfAccounts: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 948,
        "spider_question_id": 1567,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
        "question": "Count the number of accounts corresponding to each customer id.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", accountsCount: { $sum: 1 } } }, { $project: { customer_id: \"$_id\", accountsCount: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 949,
        "spider_question_id": 1569,
        "db_id": "customers_and_invoices",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and full name of the customer with the most accounts.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customerDetails\" }}, { $unwind: \"$customerDetails\" }, { $project: { customer_id: \"$_id\", customer_first_name: \"$customerDetails.customer_first_name\", customer_last_name: \"$customerDetails.customer_last_name\" }} ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customerDetails\" }}, { $unwind: \"$customerDetails\" }, { $project: { customer_id: \"$_id\", customer_first_name: \"$customerDetails.customer_first_name\", customer_last_name: \"$customerDetails.customer_last_name\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 950,
        "spider_question_id": 1572,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.2\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.2\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_id: 1 } } ])"
    },
    {
        "question_id": 951,
        "spider_question_id": 1573,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.1\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_id: 1 } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$customer_id\", num_accounts: { $sum: 1 } } }, { $match: { num_accounts: { $gte: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $project: { customer_first_name: \"$customer_info.customer_first_name\", customer_id: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Accounts\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"accounts\" } }, { $match: { \"accounts.1\": { $exists: true } } }, { $project: { customer_first_name: 1, customer_id: 1 } } ])"
    },
    {
        "question_id": 952,
        "spider_question_id": 1576,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gender , count(*) FROM Customers GROUP BY gender",
        "question": "Show the number of customers for each gender.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 953,
        "spider_question_id": 1577,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gender , count(*) FROM Customers GROUP BY gender",
        "question": "How many customers are there of each gender?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 954,
        "spider_question_id": 1582,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'",
        "question": "How many transaction does account with name 337 have?",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $match: { \"account_info.account_name\": \"337\" } }, { $count: \"transaction_count\" } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $match: { \"account_info.account_name\": \"337\" } }, { $count: \"transaction_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 955,
        "spider_question_id": 1583,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"acc\" } }, { $match: { \"acc.account_name\": \"337\" } }, { $count: \"transaction_count\" } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"acc\" } }, { $match: { \"acc.account_name\": \"337\" } }, { $count: \"transaction_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 956,
        "spider_question_id": 1586,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: null, average: { $avg: \"$transaction_amount\" } } }, { $lookup: { from: \"Financial_Transactions\", let: { avgAmount: \"$average\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$transaction_amount\", \"$$avgAmount\" ] } } }, { $project: { transaction_id: \"$transaction_id\" } } ], as: \"transactions\" } }, { $unwind: \"$transactions\" }, { $replaceRoot: { newRoot: \"$transactions\" } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, averageAmount: { $avg: \"$transaction_amount\" } } }, { $lookup: { from: \"Financial_Transactions\", let: { averageAmount: \"$averageAmount\" }, pipeline: [ { $match: { $expr: { $gt: [\"$transaction_amount\", \"$$averageAmount\"] } } }, { $project: { transaction_id: 1 } } ], as: \"transactionsAboveAverage\" }}, { $unwind: \"$transactionsAboveAverage\" }, { $replaceRoot: { newRoot: \"$transactionsAboveAverage\" } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, average: { $avg: \"$transaction_amount\" } } }, { $lookup: { from: \"Financial_Transactions\", let: { avgAmount: \"$average\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$transaction_amount\", \"$$avgAmount\" ] } } }, { $project: { transaction_id: \"$transaction_id\" } } ], as: \"transactions\" } }, { $unwind: \"$transactions\" }, { $replaceRoot: { newRoot: \"$transactions\" } } ])"
    },
    {
        "question_id": 957,
        "spider_question_id": 1587,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: null, averageAmount: { $avg: \"$transaction_amount\" } } }, { $lookup: { from: \"Financial_Transactions\", let: { avgAmount: \"$averageAmount\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$transaction_amount\", \"$$avgAmount\" ] } } }, { $project: { transaction_id: 1 } } ], as: \"transactions\" } }, { $unwind: \"$transactions\" }, { $replaceRoot: { newRoot: \"$transactions\" } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, avgAmount: { $avg: \"$transaction_amount\" } } }, { $lookup: { from: \"Financial_Transactions\", let: { averageAmt: \"$avgAmount\" }, pipeline: [ { $match: { $expr: { $gt: [\"$transaction_amount\", \"$$averageAmt\"] } } }, { $project: { transaction_id: 1 } } ], as: \"transactionsAboveAverage\" } }, { $unwind: \"$transactionsAboveAverage\" }, { $replaceRoot: { newRoot: \"$transactionsAboveAverage\" } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: null, averageAmount: { $avg: \"$transaction_amount\" } } }, { $lookup: { from: \"Financial_Transactions\", let: { avgAmount: \"$averageAmount\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$transaction_amount\", \"$$avgAmount\" ] } } }, { $project: { transaction_id: 1 } } ], as: \"transactions\" } }, { $unwind: \"$transactions\" }, { $replaceRoot: { newRoot: \"$transactions\" } } ])"
    },
    {
        "question_id": 958,
        "spider_question_id": 1590,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.account_name , T1.account_id , count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
        "question": "Show the account name, id and the number of transactions for each account.",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, transaction_count: { $sum: 1 } } }, { $project: { account_name: 1, account_id: \"$_id\", transaction_count: 1 } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, number_of_transactions: { $sum: 1 } } }, { $project: { account_id: \"$_id\", account_name: 1, number_of_transactions: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, transaction_count: { $sum: 1 } } }, { $project: { account_name: 1, account_id: \"$_id\", transaction_count: 1 } } ])"
    },
    {
        "question_id": 959,
        "spider_question_id": 1591,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.account_name , T1.account_id , count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, count: { $sum: 1 } } }, { $project: { account_name: 1, account_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, numberOfTransactions: { $sum: 1 } } }, { $project: { account_id: \"$_id\", account_name: 1, numberOfTransactions: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, count: { $sum: 1 } } }, { $project: { account_name: 1, account_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 960,
        "spider_question_id": 1592,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the account id with most number of transactions.",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { account_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", transactionCount: { $sum: 1 } } }, { $sort: { transactionCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { account_id: \"$_id\" } } ])"
    },
    {
        "question_id": 961,
        "spider_question_id": 1593,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the account with the most transactions?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { account_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", transactionsCount: { $sum: 1 } } }, { $sort: { transactionsCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { account_id: \"$_id\" } } ])"
    },
    {
        "question_id": 962,
        "spider_question_id": 1594,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4",
        "question": "Show the account id and name with at least 4 transactions.",
        "query": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { account_id: \"$_id\", account_name: 1 } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", transactionCount: { $sum: 1 } } }, { $match: { transactionCount: { $gte: 4 } } }, { $lookup: { from: \"Accounts\", localField: \"_id\", foreignField: \"account_id\", as: \"accountDetails\" } }, { $unwind: \"$accountDetails\" }, { $project: { account_id: \"$_id\", account_name: \"$accountDetails.account_name\" } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $lookup: { from: \"Accounts\", localField: \"account_id\", foreignField: \"account_id\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_id\", account_name: { $first: \"$account_info.account_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $project: { account_id: \"$_id\", account_name: 1 } } ])"
    },
    {
        "question_id": 963,
        "spider_question_id": 1595,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count(*) >= 4",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $lookup: { from: \"Accounts\", localField: \"_id\", foreignField: \"account_id\", as: \"account\" } }, { $project: { account_id: \"$_id\", account_name: { $arrayElemAt: [\"$account.account_name\", 0] } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$account_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 4 } } }, { $lookup: { from: \"Accounts\", localField: \"_id\", foreignField: \"account_id\", as: \"account\" } }, { $project: { account_id: \"$_id\", account_name: { $arrayElemAt: [\"$account.account_name\", 0] } } } ])"
    },
    {
        "question_id": 964,
        "spider_question_id": 1600,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$invoice_number\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$invoice_number\", numberOfTransactions: { $sum: 1 } } }, { $project: { invoice_number: \"$_id\", numberOfTransactions: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$invoice_number\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 965,
        "spider_question_id": 1601,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT invoice_number , count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "How many transactions correspond to each invoice number?",
        "query": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$invoice_number\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$invoice_number\", totalTransactions: {$sum: 1} } }, { $project: { invoice_number: \"$_id\", totalTransactions: 1 } } ])",
        "deepseek answer": "db.Financial_Transactions.aggregate([ { $group: { _id: \"$invoice_number\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 966,
        "spider_question_id": 1608,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
        "question": "Show the order ids and the number of invoices for each order.",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Invoices.aggregate([ { $group: { _id: \"$order_id\", numberOfInvoices: { $sum: 1 } } }, { $project: { order_id: \"$_id\", numberOfInvoices: 1 } } ])",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 967,
        "spider_question_id": 1609,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
        "question": "How many invoices correspond to each order id?",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Invoices.aggregate([ { $group: { _id: \"$order_id\", total_invoices: { $sum: 1 } } } ])",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 968,
        "spider_question_id": 1614,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
        "question": "Show all product names without an order.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"order_items\" } }, { $match: { \"order_items\": { $size: 0 } } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.find( { product_id: { $nin: db.Order_Items.distinct(\"product_id\") } }, { product_name: 1 } )",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"order_items\" } }, { $match: { \"order_items\": { $size: 0 } } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 969,
        "spider_question_id": 1615,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
        "question": "What are the names of products that have never been ordered?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"order_items\" } }, { $match: { \"order_items\": { $size: 0 } } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"ordered_products\" } }, { $match: { \"ordered_products\": { $size: 0 } } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"order_items\" } }, { $match: { \"order_items\": { $size: 0 } } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 970,
        "spider_question_id": 1618,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "question": "Show the order ids and the number of items in each order.",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } }, { $project: { order_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", itemCount: { $sum: 1 } }}, { $project: { order_id: \"$_id\", itemCount: 1 }} ])",
        "deepseek answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } }, { $project: { order_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 971,
        "spider_question_id": 1619,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "question": "How many order items correspond to each order id?",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 972,
        "spider_question_id": 1620,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_id , count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", uniqueOrders: { $addToSet: \"$order_id\" } } }, { $project: { _id: 1, uniqueOrders: { $size: \"$uniqueOrders\" } } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", uniqueOrderCount: { $addToSet: \"$order_id\" } } }, { $project: { product_id: \"$_id\", uniqueOrderCount: { $size: \"$uniqueOrderCount\" } } }, { $project: { product_id: 1, uniqueOrderCount: 1 } } ])",
        "deepseek answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", uniqueOrders: { $addToSet: \"$order_id\" } } }, { $project: { _id: 1, uniqueOrders: { $size: \"$uniqueOrders\" } } } ])"
    },
    {
        "question_id": 973,
        "spider_question_id": 1621,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_id , count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "question": "How many distinct order ids correspond to each product?",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", count: { $addToSet: \"$order_id\" } } }, { $project: { product_id: \"$_id\", count: { $size: \"$count\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", count: { $addToSet: \"$order_id\" } } }, { $project: { product_id: \"$_id\", count: { $size: \"$count\" } } } ])"
    },
    {
        "question_id": 974,
        "spider_question_id": 1623,
        "db_id": "customers_and_invoices",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"OrderItems\" } }, { $unwind: \"$OrderItems\" }, { $lookup: { from: \"Orders\", localField: \"OrderItems.order_id\", foreignField: \"order_id\", as: \"Orders\" } }, { $unwind: \"$Orders\" }, { $group: { _id: \"$product_name\", customerCount: { $sum: 1 } } }, { $project: { product_name: \"$_id\", customerCount: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"OrderItems\" } }, { $unwind: \"$OrderItems\" }, { $lookup: { from: \"Orders\", localField: \"OrderItems.order_id\", foreignField: \"order_id\", as: \"Orders\" } }, { $unwind: \"$Orders\" }, { $group: { _id: \"$product_name\", customerCount: { $sum: 1 } } }, { $project: { product_name: \"$_id\", customerCount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 975,
        "spider_question_id": 1624,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "question": "Show order ids and the number of products in each order.",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", product_count: { $addToSet: \"$product_id\" } } }, { $project: { order_id: \"$_id\", product_count: { $size: \"$product_count\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", product_count: { $addToSet: \"$product_id\" } } }, { $project: { order_id: \"$_id\", product_count: { $size: \"$product_count\" } } } ])"
    },
    {
        "question_id": 976,
        "spider_question_id": 1625,
        "db_id": "customers_and_invoices",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "question": "How many different products correspond to each order id?",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", uniqueProducts: { $addToSet: \"$product_id\" } } }, { $project: { order_id: \"$_id\", productCount: { $size: \"$uniqueProducts\" } } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", distinctProducts: { $addToSet: \"$product_id\" } } }, { $project: { order_id: \"$_id\", productCount: { $size: \"$distinctProducts\" } } } ])",
        "deepseek answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", uniqueProducts: { $addToSet: \"$product_id\" } } }, { $project: { order_id: \"$_id\", productCount: { $size: \"$uniqueProducts\" } } } ])"
    },
    {
        "question_id": 977,
        "spider_question_id": 1628,
        "db_id": "customers_and_invoices",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many products were not included in any order?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"order_items\" } }, { $match: { \"order_items\": { $size: 0 } } }, { $count: \"not_ordered_products\" } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"product_id\", foreignField: \"product_id\", as: \"order_items\" } }, { $match: { \"order_items\": { $size: 0 } } }, { $count: \"not_ordered_products\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 978,
        "spider_question_id": 1632,
        "db_id": "wedding",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM church ORDER BY open_date DESC",
        "question": "List all church names in descending order of opening date.",
        "query": "db.church.find({}, { Name: 1 }).sort({ Open_Date: -1 })",
        "gpt4 answer": "db.church.find({}, { Name: 1 }).sort({ Open_Date: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 979,
        "spider_question_id": 1634,
        "db_id": "wedding",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "query": "db.church.find( { Open_Date: { $gte: 1830, $lte: 1840 } }, { Organized_by: 1, Name: 1 } )",
        "gpt4 answer": "db.church.find( { Open_Date: { $gte: 1830, $lte: 1840 } }, { Organized_by: 1, Name: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 980,
        "spider_question_id": 1635,
        "db_id": "wedding",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT open_date , count(*) FROM church GROUP BY open_date",
        "question": "Show all opening years and the number of churches that opened in that year.",
        "query": "db.church.aggregate([ { $group: { _id: \"$Open_Date\", count: { $sum: 1 } } }, { $project: { Open_Date: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.church.aggregate([ { $group: { _id: \"$Open_Date\", count: { $sum: 1 } } }, { $project: { open_date: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.church.aggregate([ { $group: { _id: \"$Open_Date\", count: { $sum: 1 } } }, { $project: { Open_Date: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 981,
        "spider_question_id": 1636,
        "db_id": "wedding",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3",
        "question": "Show the name and opening year for three churches that opened most recently.",
        "query": "db.church.find({}, {Name: 1, Open_Date: 1}).sort({Open_Date: -1}).limit(3)",
        "gpt4 answer": "db.church.find({}, {Name: 1, Open_Date: 1}).sort({Open_Date: -1}).limit(3)",
        "deepseek answer": "."
    },
    {
        "question_id": 982,
        "spider_question_id": 1639,
        "db_id": "wedding",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(age) , max(age) , avg(age) FROM people",
        "question": "Show the minimum, maximum, and average age for all people.",
        "query": "db.people.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" }, avgAge: { $avg: \"$Age\" } } }, { $project: { minAge:1, maxAge:1, avgAge:1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" }, avgAge: { $avg: \"$Age\" } } }, { $project: { minAge: 1, maxAge: 1, avgAge: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: null, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" }, avgAge: { $avg: \"$Age\" } } }, { $project: { minAge:1, maxAge:1, avgAge:1 } } ])"
    },
    {
        "question_id": 983,
        "spider_question_id": 1640,
        "db_id": "wedding",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , country FROM people WHERE age < (SELECT avg(age) FROM people)",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "query": "db.people.aggregate([ { $group: { _id: null, avgAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"people\", let: { avgAge: \"$avgAge\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Age\", \"$$avgAge\"] } } }, { $project: { Name: 1, Country: 1 } } ], as: \"peopleBelowAvgAge\" } }, { $unwind: \"$peopleBelowAvgAge\" }, { $replaceRoot: { newRoot: \"$peopleBelowAvgAge\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: null, avgAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"people\", let: { avgAge: \"$avgAge\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Age\", \"$$avgAge\"] } } }, { $project: { Name: 1, Country: 1 } } ], as: \"peopleBelowAvgAge\" } }, { $unwind: \"$peopleBelowAvgAge\" }, { $replaceRoot: { newRoot: \"$peopleBelowAvgAge\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 984,
        "spider_question_id": 1641,
        "db_id": "wedding",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.name , T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014",
        "question": "Show the pair of male and female names in all weddings after year 2014",
        "query": "db.wedding.aggregate([ { $lookup: { from: \"people\", let: { male_id: \"$Male_ID\", female_id: \"$Female_ID\" }, pipeline: [ { $match: { $expr: { $or: [{ $eq: [\"$People_ID\", \"$$male_id\"] }, { $eq: [\"$People_ID\", \"$$female_id\"] }] } } }, { $project: { Name: 1 } } ], as: \"people\" } }, { $match: { Year: { $gt: 2014 } } }, { $project: { Male_Name: { $arrayElemAt: [\"$people.Name\", 0] }, Female_Name: { $arrayElemAt: [\"$people.Name\", 1] } } } ])",
        "gpt4 answer": "db.wedding.aggregate([ { $match: { Year: { $gt: 2014 } } }, { $lookup: { from: \"people\", localField: \"Male_ID\", foreignField: \"People_ID\", as: \"male\" } }, { $unwind: \"$male\" }, { $lookup: { from: \"people\", localField: \"Female_ID\", foreignField: \"People_ID\", as: \"female\" } }, { $unwind: \"$female\" }, { $project: { maleName: \"$male.Name\", femaleName: \"$female.Name\" } } ])",
        "deepseek answer": "db.wedding.aggregate([ { $lookup: { from: \"people\", let: { male_id: \"$Male_ID\", female_id: \"$Female_ID\" }, pipeline: [ { $match: { $expr: { $or: [{ $eq: [\"$People_ID\", \"$$male_id\"] }, { $eq: [\"$People_ID\", \"$$female_id\"] }] } } }, { $project: { Name: 1 } } ], as: \"people\" } }, { $match: { Year: { $gt: 2014 } } }, { $project: { Male_Name: { $arrayElemAt: [\"$people.Name\", 0] }, Female_Name: { $arrayElemAt: [\"$people.Name\", 1] } } } ])"
    },
    {
        "question_id": 985,
        "spider_question_id": 1647,
        "db_id": "wedding",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30",
        "question": "Show the church names for the weddings of all people older than 30.",
        "query": "db.wedding.aggregate([ { $lookup: { from: \"people\", localField: \"Male_ID\", foreignField: \"People_ID\", as: \"male\" } }, { $lookup: { from: \"people\", localField: \"Female_ID\", foreignField: \"People_ID\", as: \"female\" } }, { $lookup: { from: \"church\", localField: \"Church_ID\", foreignField: \"Church_ID\", as: \"church\" } }, { $match: { $or: [ { \"male.Age\": { $gt: 30 } }, { \"female.Age\": { $gt: 30 } } ] } }, { $project: { \"church.Name\": 1 } }, { $unwind: \"$church\" }, { $replaceRoot: { newRoot: \"$church\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.wedding.aggregate([ { $lookup: { from: \"people\", localField: \"Male_ID\", foreignField: \"People_ID\", as: \"male\" } }, { $lookup: { from: \"people\", localField: \"Female_ID\", foreignField: \"People_ID\", as: \"female\" } }, { $lookup: { from: \"church\", localField: \"Church_ID\", foreignField: \"Church_ID\", as: \"church\" } }, { $match: { $or: [ { \"male.Age\": { $gt: 30 } }, { \"female.Age\": { $gt: 30 } } ] } }, { $project: { \"church.Name\": 1 } }, { $unwind: \"$church\" }, { $replaceRoot: { newRoot: \"$church\" } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 986,
        "spider_question_id": 1648,
        "db_id": "wedding",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country , count(*) FROM people GROUP BY country",
        "question": "Show all countries and the number of people from each country.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { country: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Country\", numberOfPeople: { $sum: 1 } } }, { $project: { Country: \"$_id\", Count: \"$numberOfPeople\" } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { country: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 987,
        "spider_question_id": 1649,
        "db_id": "wedding",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR = 2016",
        "question": "How many churches have a wedding in year 2016?",
        "query": "db.wedding.aggregate([ { $match: { Year: 2016 } }, { $group: { _id: \"$Church_ID\" } }, { $count: \"total_churches\" } ])",
        "gpt4 answer": "db.wedding.aggregate([ { $match: { Year: 2016 } }, { $group: { _id: \"$Church_ID\" } }, { $count: \"total_churches\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 988,
        "spider_question_id": 1652,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , age , country FROM artist ORDER BY Year_Join",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "query": "db.artist.find({}, { Name: 1, Age: 1, Country: 1}).sort({Year_Join: 1})",
        "gpt4 answer": "db.artist.find({}, { Name: 1, Age: 1, Country: 1 }).sort({ Year_Join: 1 })",
        "deepseek answer": "db.artist.find({}, { Name: 1, Age: 1, Country: 1}).sort({Year_Join: 1})"
    },
    {
        "question_id": 989,
        "spider_question_id": 1653,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , age , country FROM artist ORDER BY Year_Join",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "query": "db.artist.find({}, { Name: 1, Age: 1, Country: 1}).sort({Year_Join: 1})",
        "gpt4 answer": "db.artist.find({}, { Name: 1, Age: 1, Country: 1 }).sort({ Year_Join: 1 })",
        "deepseek answer": "db.artist.find({}, { Name: 1, Age: 1, Country: 1}).sort({Year_Join: 1})"
    },
    {
        "question_id": 990,
        "spider_question_id": 1656,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , year_join FROM artist WHERE country != 'United States'",
        "question": "Show all artist names and the year joined who are not from United States.",
        "query": "db.artist.find({Country: {$ne: 'United States'}}, {Name: 1, Year_Join: 1})",
        "gpt4 answer": "db.artist.find({ Country: { $ne: 'United States' } }, { Name: 1, Year_Join: 1 })",
        "deepseek answer": "db.artist.find({Country: {$ne: 'United States'}}, {Name: 1, Year_Join: 1})"
    },
    {
        "question_id": 991,
        "spider_question_id": 1657,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , year_join FROM artist WHERE country != 'United States'",
        "question": "What are the names and year of joining for artists that do not have the country 'United States'?",
        "query": "db.artist.find( { \"Country\": { \"$ne\": \"United States\" } }, { \"_id\": 0, \"Name\": 1, \"Year_Join\": 1 } )",
        "gpt4 answer": "db.artist.find({ Country: { $ne: \"United States\" }}, { Name: 1, Year_Join: 1 })",
        "deepseek answer": "db.artist.find( { \"Country\": { \"$ne\": \"United States\" } }, { \"_id\": 0, \"Name\": 1, \"Year_Join\": 1 } )"
    },
    {
        "question_id": 992,
        "spider_question_id": 1660,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , min(age) FROM artist WHERE country = 'United States'",
        "question": "What is the average and minimum age of all artists from United States.",
        "query": "db.artist.aggregate([ { $match: { Country: \"United States\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { avgAge:1, minAge:1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { Country: \"United States\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { avgAge: 1, minAge: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { Country: \"United States\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { avgAge:1, minAge:1 } } ])"
    },
    {
        "question_id": 993,
        "spider_question_id": 1661,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , min(age) FROM artist WHERE country = 'United States'",
        "question": "Return the average and minimum ages across artists from the United States.",
        "query": "db.artist.aggregate([ { $match: { Country: \"United States\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" } }}, { $project: { avgAge:1, minAge:1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { Country: \"United States\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { avgAge: 1, minAge: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { Country: \"United States\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" } }}, { $project: { avgAge:1, minAge:1 } } ])"
    },
    {
        "question_id": 994,
        "spider_question_id": 1662,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "question": "What is the name of the artist who joined latest?",
        "query": "db.artist.find({}, { Name: 1}).sort({Year_Join: -1}).limit(1)",
        "gpt4 answer": "db.artist.find({}, { Name: 1 }).sort({ Year_Join: -1 }).limit(1)",
        "deepseek answer": "db.artist.find({}, { Name: 1}).sort({Year_Join: -1}).limit(1)"
    },
    {
        "question_id": 995,
        "spider_question_id": 1663,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
        "question": "Return the name of the artist who has the latest join year.",
        "query": "db.artist.find({}, { Name: 1}).sort({Year_Join: -1}).limit(1)",
        "gpt4 answer": "db.artist.find({}, { Name: 1 }).sort({ Year_Join: -1 }).limit(1)",
        "deepseek answer": "db.artist.find({}, { Name: 1}).sort({Year_Join: -1}).limit(1)"
    },
    {
        "question_id": 996,
        "spider_question_id": 1665,
        "db_id": "theme_gallery",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM exhibition WHERE YEAR >= 2005",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "query": "db.exhibition.aggregate([ { $match: { Year: { $gte: 2005 } } }, { $count: \"total_exhibitions\" } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $match: { Year: { $gte: 2005 } } }, { $count: \"total_exhibitions\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 997,
        "spider_question_id": 1666,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "query": "db.exhibition.find({ Ticket_Price: { $lt: 15 } }, { Theme: 1, Year: 1 })",
        "gpt4 answer": "db.exhibition.find({ Ticket_Price: { $lt: 15 } }, { Theme: 1, Year: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 998,
        "spider_question_id": 1667,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT theme , YEAR FROM exhibition WHERE ticket_price < 15",
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "query": "db.exhibition.find({ \"Ticket_Price\": { \"$lt\": 15 } }, { \"Theme\": 1, \"Year\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.exhibition.find({ \"Ticket_Price\": { \"$lt\": 15 } }, { \"Theme\": 1, \"Year\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 999,
        "spider_question_id": 1671,
        "db_id": "theme_gallery",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "query": "db.exhibition.aggregate([ { $lookup: { from: \"artist\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: \"$Artist_ID\", name: { $first: \"$artist_info.Name\" }, country: { $first: \"$artist_info.Country\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1, country: 1 } } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $group: { _id: \"$Artist_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"artist\", localField: \"_id\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $project: { name: \"$artist_info.Name\", country: \"$artist_info.Country\" } } ])",
        "deepseek answer": "db.exhibition.aggregate([ { $lookup: { from: \"artist\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: \"$Artist_ID\", name: { $first: \"$artist_info.Name\" }, country: { $first: \"$artist_info.Country\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1, country: 1 } } ])"
    },
    {
        "question_id": 1000,
        "spider_question_id": 1672,
        "db_id": "theme_gallery",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "question": "Show names for artists without any exhibition.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { exhibitions: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { exhibitions: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1001,
        "spider_question_id": 1673,
        "db_id": "theme_gallery",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
        "question": "What are the names of artists that have not had any exhibitions?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { exhibitions: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { exhibitions: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1002,
        "spider_question_id": 1674,
        "db_id": "theme_gallery",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.theme , T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT avg(ticket_price) FROM exhibition)",
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "query": "db.exhibition.aggregate([ { $lookup: { from: \"artist\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: null, averageTicketPrice: { $avg: \"$Ticket_Price\" } } }, { $lookup: { from: \"exhibition\", let: { avgPrice: \"$averageTicketPrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Ticket_Price\", \"$$avgPrice\"] } } }, { $lookup: { from: \"artist\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $project: { theme: \"$Theme\", name: \"$artist_info.Name\" } } ], as: \"exhibitions_above_avg\" } }, { $unwind: \"$exhibitions_above_avg\" }, { $replaceRoot: { newRoot: \"$exhibitions_above_avg\" } } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $lookup: { from: \"artist\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $group: { _id: null, averageTicketPrice: { $avg: \"$Ticket_Price\" } } }, { $lookup: { from: \"exhibition\", let: { avgPrice: \"$averageTicketPrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Ticket_Price\", \"$$avgPrice\"] } } }, { $lookup: { from: \"artist\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $project: { theme: \"$Theme\", name: \"$artist_info.Name\" } } ], as: \"exhibitions_above_avg\" } }, { $unwind: \"$exhibitions_above_avg\" }, { $replaceRoot: { newRoot: \"$exhibitions_above_avg\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1003,
        "spider_question_id": 1676,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(ticket_price) , min(ticket_price) , max(ticket_price) FROM exhibition WHERE YEAR < 2009",
        "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "query": "db.exhibition.aggregate([ { $match: { Year: { $lt: 2009 } } }, { $group: { _id: null, avgTicketPrice: { $avg: \"$Ticket_Price\" }, minTicketPrice: { $min: \"$Ticket_Price\" }, maxTicketPrice: { $max: \"$Ticket_Price\" } } }, { $project: { avgTicketPrice: 1, minTicketPrice: 1, maxTicketPrice: 1 } } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $match: { Year: { $lt: 2009 } } }, { $group: { _id: null, averageTicketPrice: { $avg: \"$Ticket_Price\" }, minimumTicketPrice: { $min: \"$Ticket_Price\" }, maximumTicketPrice: { $max: \"$Ticket_Price\" } }}, { $project: { averageTicketPrice: 1, minimumTicketPrice: 1, maximumTicketPrice: 1 }} ])",
        "deepseek answer": "db.exhibition.aggregate([ { $match: { Year: { $lt: 2009 } } }, { $group: { _id: null, avgTicketPrice: { $avg: \"$Ticket_Price\" }, minTicketPrice: { $min: \"$Ticket_Price\" }, maxTicketPrice: { $max: \"$Ticket_Price\" } } }, { $project: { avgTicketPrice: 1, minTicketPrice: 1, maxTicketPrice: 1 } } ])"
    },
    {
        "question_id": 1004,
        "spider_question_id": 1677,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(ticket_price) , min(ticket_price) , max(ticket_price) FROM exhibition WHERE YEAR < 2009",
        "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
        "query": "db.exhibition.aggregate([ { $match: { Year: { $lt: 2009 } } }, { $group: { _id: null, avgTicketPrice: { $avg: \"$Ticket_Price\" }, minTicketPrice: { $min: \"$Ticket_Price\" }, maxTicketPrice: { $max: \"$Ticket_Price\" } } }, { $project: { avgTicketPrice: 1, minTicketPrice: 1, maxTicketPrice: 1 } } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $match: { Year: { $lt: 2009 } } }, { $group: { _id: null, averageTicketPrice: { $avg: \"$Ticket_Price\" }, minimumTicketPrice: { $min: \"$Ticket_Price\" }, maximumTicketPrice: { $max: \"$Ticket_Price\" } } }, { $project: { averageTicketPrice: 1, minimumTicketPrice: 1, maximumTicketPrice: 1 } } ])",
        "deepseek answer": "db.exhibition.aggregate([ { $match: { Year: { $lt: 2009 } } }, { $group: { _id: null, avgTicketPrice: { $avg: \"$Ticket_Price\" }, minTicketPrice: { $min: \"$Ticket_Price\" }, maxTicketPrice: { $max: \"$Ticket_Price\" } } }, { $project: { avgTicketPrice: 1, minTicketPrice: 1, maxTicketPrice: 1 } } ])"
    },
    {
        "question_id": 1005,
        "spider_question_id": 1678,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC",
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "query": "db.exhibition.aggregate([ { $sort: { Ticket_Price: -1 } }, { $project: { Theme: 1, Year: 1 } } ])",
        "gpt4 answer": "db.exhibition.find({}, { Theme: 1, Year: 1 }).sort({ Ticket_Price: -1 })",
        "deepseek answer": "db.exhibition.aggregate([ { $sort: { Ticket_Price: -1 } }, { $project: { Theme: 1, Year: 1 } } ])"
    },
    {
        "question_id": 1006,
        "spider_question_id": 1679,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT theme , YEAR FROM exhibition ORDER BY ticket_price DESC",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "query": "db.exhibition.aggregate([ { $sort: { \"Ticket_Price\": -1 } }, { $project: { \"_id\": 0, \"Theme\": 1, \"Year\": 1 } } ])",
        "gpt4 answer": "db.exhibition.find({}, { Theme: 1, Year: 1 }).sort({ Ticket_Price: -1 })",
        "deepseek answer": "db.exhibition.aggregate([ { $sort: { \"Ticket_Price\": -1 } }, { $project: { \"_id\": 0, \"Theme\": 1, \"Year\": 1 } } ])"
    },
    {
        "question_id": 1007,
        "spider_question_id": 1680,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004",
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "query": "db.exhibition.aggregate([ { $match: { Year: 2004 } }, { $lookup: { from: \"exhibition_record\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"record\" } }, { $unwind: \"$record\" }, { $project: { Theme: 1, Date: \"$record.Date\", Attendance: \"$record.Attendance\" } } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $match: { Year: 2004 } }, { $lookup: { from: \"exhibition_record\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"record\" } }, { $unwind: \"$record\" }, { $project: { Theme: 1, Date: \"$record.Date\", Attendance: \"$record.Attendance\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1008,
        "spider_question_id": 1681,
        "db_id": "theme_gallery",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.theme , T1.date , T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004",
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "query": "db.exhibition.aggregate([ { $match: { Year: 2004 } }, { $lookup: { from: \"exhibition_record\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"recordDetails\" } }, { $unwind: \"$recordDetails\" }, { $project: { theme: \"$Theme\", date: \"$recordDetails.Date\", attendance: \"$recordDetails.Attendance\" } } ])",
        "gpt4 answer": "db.exhibition.aggregate([ { $match: { Year: 2004 } }, { $lookup: { from: \"exhibition_record\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"recordDetails\" } }, { $unwind: \"$recordDetails\" }, { $project: { theme: \"$Theme\", date: \"$recordDetails.Date\", attendance: \"$recordDetails.Attendance\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1009,
        "spider_question_id": 1682,
        "db_id": "theme_gallery",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { \"exhibitions.Year\": { $ne: 2004 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { \"exhibitions\": { $not: { $elemMatch: { \"Year\": 2004 } } } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { \"exhibitions.Year\": { $ne: 2004 } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 1010,
        "spider_question_id": 1683,
        "db_id": "theme_gallery",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { \"exhibitions.Year\": { $ne: 2004 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $match: { \"exhibitions.Year\": { $ne: 2004 } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 1011,
        "spider_question_id": 1687,
        "db_id": "theme_gallery",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "query": "db.exhibition_record.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"exhibition_info\" } }, { $match: { $or: [ {\"exhibition_info.Ticket_Price\": {$lt: 10}}, {\"Attendance\": {$gt: 100}} ] } }, { $group: { _id: null, count: {$sum: 1} } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.exhibition_record.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"exhibition_info\" } }, { $unwind: \"$exhibition_info\" }, { $match: { $or: [ { \"Attendance\": { $gt: 100 } }, { \"exhibition_info.Ticket_Price\": { $lt: 10 } } ] } }, { $count: \"num_exhibitions\" } ])",
        "deepseek answer": "db.exhibition_record.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"exhibition_info\" } }, { $match: { $or: [ {\"exhibition_info.Ticket_Price\": {$lt: 10}}, {\"Attendance\": {$gt: 100}} ] } }, { $group: { _id: null, count: {$sum: 1} } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 1012,
        "spider_question_id": 1688,
        "db_id": "theme_gallery",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance) > 200",
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $unwind: \"$exhibitions\" }, { $lookup: { from: \"exhibition_record\", localField: \"exhibitions.Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"exhibition_records\" } }, { $unwind: \"$exhibition_records\" }, { $group: { _id: \"$Artist_ID\", name: { $first: \"$Name\" }, avgAttendance: { $avg: \"$exhibition_records.Attendance\" } } }, { $match: { avgAttendance: { $gt: 200 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.exhibition_record.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"exhibitionInfo\" } }, { $unwind: \"$exhibitionInfo\" }, { $lookup: { from: \"artist\", localField: \"exhibitionInfo.Artist_ID\", foreignField: \"Artist_ID\", as: \"artistInfo\" } }, { $unwind: \"$artistInfo\" }, { $group: { _id: \"$artistInfo.Artist_ID\", avgAttendance: { $avg: \"$Attendance\" }, name: { $first: \"$artistInfo.Name\" } } }, { $match: { avgAttendance: { $gt: 200 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"exhibition\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"exhibitions\" } }, { $unwind: \"$exhibitions\" }, { $lookup: { from: \"exhibition_record\", localField: \"exhibitions.Exhibition_ID\", foreignField: \"Exhibition_ID\", as: \"exhibition_records\" } }, { $unwind: \"$exhibition_records\" }, { $group: { _id: \"$Artist_ID\", name: { $first: \"$Name\" }, avgAttendance: { $avg: \"$exhibition_records.Attendance\" } } }, { $match: { avgAttendance: { $gt: 200 } } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1013,
        "spider_question_id": 1690,
        "db_id": "epinions_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT i_id FROM item WHERE title = 'orange'",
        "question": "Find the id of the item whose title is 'orange'.",
        "query": "db.item.find({title: 'orange'}, { i_id: 1})",
        "gpt4 answer": "db.item.find({ title: 'orange' }, { i_id: 1 })",
        "deepseek answer": "db.item.find({title: 'orange'}, { i_id: 1})"
    },
    {
        "question_id": 1014,
        "spider_question_id": 1691,
        "db_id": "epinions_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM item",
        "question": "List all information in the item table.",
        "query": "db.item.find({})",
        "gpt4 answer": "db.item.find({})",
        "deepseek answer": "db.item.find({})"
    },
    {
        "question_id": 1015,
        "spider_question_id": 1694,
        "db_id": "epinions_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(rating) , max(rating) FROM review",
        "question": "Find the average and maximum rating of all reviews.",
        "query": "db.review.aggregate([ { $group: { _id: null, averageRating: { $avg: \"$rating\" }, maxRating: { $max: \"$rating\" } } }, { $project: { averageRating: 1, maxRating:1 } } ])",
        "gpt4 answer": "db.review.aggregate([ { $group: { _id: null, averageRating: { $avg: \"$rating\" }, maxRating: { $max: \"$rating\" } } }, { $project: { averageRating: 1, maxRating: 1 } } ])",
        "deepseek answer": "db.review.aggregate([ { $group: { _id: null, averageRating: { $avg: \"$rating\" }, maxRating: { $max: \"$rating\" } } }, { $project: { averageRating: 1, maxRating:1 } } ])"
    },
    {
        "question_id": 1016,
        "spider_question_id": 1695,
        "db_id": "epinions_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT min(rank) FROM review",
        "question": "Find the highest rank of all reviews.",
        "query": "db.review.aggregate([ { $group: { _id: null, highestRank: { $min: \"$rank\" } } }, { $project: { highestRank: 1 } } ])",
        "gpt4 answer": "db.review.aggregate([ { $group: { _id: null, highestRank: { $min: \"$rank\" } } }, { $project: { highestRank: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1017,
        "spider_question_id": 1698,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the number of items that did not receive any review.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $count: \"no_reviews_count\" } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $count: \"no_reviews_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1018,
        "spider_question_id": 1699,
        "db_id": "epinions_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "question": "Find the names of users who did not leave any review.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"user_reviews\" } }, { $match: { \"user_reviews\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"user_reviews\" } }, { $match: { \"user_reviews\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1019,
        "spider_question_id": 1700,
        "db_id": "epinions_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10",
        "question": "Find the names of goods that receive a rating of 10.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"review_info\" } }, { $match: { \"review_info.rating\": 10 } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $match: { \"reviews.rating\": 10 } }, { $project: { title: 1 } } ])",
        "deepseek answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"review_info\" } }, { $match: { \"review_info.rating\": 10 } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 1020,
        "spider_question_id": 1704,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating) > 5",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $match: { \"reviews.rank\": { $gt: 3 }, \"reviews.rating\": { $gt: 5 } } }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" } } }, { $project: { title:1 } } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"item_reviews\" } }, { $unwind: \"$item_reviews\" }, { $match: { \"item_reviews.rank\": { $gt: 3 } } }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, averageRating: { $avg: \"$item_reviews.rating\" } } }, { $match: { averageRating: { $gt: 5 } } }, { $project: { title: 1 } } ])",
        "deepseek answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $match: { \"reviews.rank\": { $gt: 3 }, \"reviews.rating\": { $gt: 5 } } }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" } } }, { $project: { title:1 } } ])"
    },
    {
        "question_id": 1021,
        "spider_question_id": 1705,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
        "question": "Find the name of the item with the lowest average rating.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, avgRating: { $avg: \"$reviews.rating\" } } }, { $sort: { avgRating: 1 } }, { $limit: 1 }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, averageRating: { $avg: \"$reviews.rating\" } } }, { $sort: { averageRating: 1 } }, { $limit: 1 }, { $project: { title: 1 } } ])",
        "deepseek answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, avgRating: { $avg: \"$reviews.rating\" } } }, { $sort: { avgRating: 1 } }, { $limit: 1 }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 1022,
        "spider_question_id": 1706,
        "db_id": "epinions_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT title FROM item ORDER BY title",
        "question": "List the titles of all items in alphabetic order .",
        "query": "db.item.find({}, {title: 1}).sort({title: 1})",
        "gpt4 answer": "db.item.find({}, { title: 1 }).sort({ title: 1 })",
        "deepseek answer": "db.item.find({}, {title: 1}).sort({title: 1})"
    },
    {
        "question_id": 1023,
        "spider_question_id": 1707,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the user who gives the most reviews.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $project: { name: 1 } }, { $sort: { reviewCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$u_id\", name: { $first: \"$name\" }, reviewCount: { $sum: 1 } } }, { $sort: { reviewCount: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $project: { name: 1 } }, { $sort: { reviewCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1024,
        "spider_question_id": 1708,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
        "question": "Find the name and id of the item with the highest average rating.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $project: { title: 1, i_id: 1} }, { $sort: { avgRating: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, averageRating: { $avg: \"$reviews.rating\" } } }, { $sort: { averageRating: -1 } }, { $limit: 1 }, { $project: { title: 1, i_id: \"$_id\" } } ])",
        "deepseek answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $project: { title: 1, i_id: 1} }, { $sort: { avgRating: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1025,
        "spider_question_id": 1709,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.title , T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Find the name and id of the good with the highest average rank.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, avgRank: { $avg: \"$reviews.rank\" } } }, { $sort: { avgRank: -1 } }, { $limit: 1 }, { $project: { title: 1, i_id: 1} } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, averageRank: { $avg: \"$reviews.rank\" } } }, { $sort: { averageRank: -1 } }, { $limit: 1 }, { $project: { i_id: \"$_id\", title: 1 } } ])",
        "deepseek answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$i_id\", title: { $first: \"$title\" }, avgRank: { $avg: \"$reviews.rank\" } } }, { $sort: { avgRank: -1 } }, { $limit: 1 }, { $project: { title: 1, i_id: 1} } ])"
    },
    {
        "question_id": 1026,
        "spider_question_id": 1710,
        "db_id": "epinions_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$u_id\", name: { $first: \"$name\" }, averageRating: { $avg: \"$reviews.rating\" } } }, { $project: { name: 1, averageRating: 1 } } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $group: { _id: \"$u_id\", name: { $first: \"$name\" }, averageRating: { $avg: \"$reviews.rating\" } } }, { $project: { name: 1, averageRating: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1027,
        "spider_question_id": 1712,
        "db_id": "epinions_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "question": "Find the name of the user who gave the highest rating.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $sort: { \"reviews.rating\": -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $sort: { \"reviews.rating\": -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $unwind: \"$reviews\" }, { $sort: { \"reviews.rating\": -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1028,
        "spider_question_id": 1713,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "question": "Find the name of the source user with the highest average trust score.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"trust\", localField: \"u_id\", foreignField: \"source_u_id\", as: \"trust_info\" } }, { $unwind: \"$trust_info\" }, { $group: { _id: \"$u_id\", name: { $first: \"$name\" }, avgTrust: { $avg: \"$trust_info.trust\" } } }, { $sort: { avgTrust: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"trust\", localField: \"u_id\", foreignField: \"source_u_id\", as: \"trust_info\" } }, { $unwind: \"$trust_info\" }, { $group: { _id: \"$u_id\", name: { $first: \"$name\" }, averageTrust: { $avg: \"$trust_info.trust\" } } }, { $sort: { averageTrust: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.useracct.aggregate([ { $lookup: { from: \"trust\", localField: \"u_id\", foreignField: \"source_u_id\", as: \"trust_info\" } }, { $unwind: \"$trust_info\" }, { $group: { _id: \"$u_id\", name: { $first: \"$name\" }, avgTrust: { $avg: \"$trust_info.trust\" } } }, { $sort: { avgTrust: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1029,
        "spider_question_id": 1715,
        "db_id": "epinions_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1",
        "question": "Find the name of the target user with the lowest trust score.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"trust\", localField: \"u_id\", foreignField: \"target_u_id\", as: \"trust_info\" } }, { $unwind: \"$trust_info\" }, { $sort: { \"trust_info.trust\": 1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.useracct.aggregate([ { $lookup: { from: \"trust\", localField: \"u_id\", foreignField: \"target_u_id\", as: \"trust_info\" } }, { $unwind: \"$trust_info\" }, { $sort: { \"trust_info.trust\": 1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1030,
        "spider_question_id": 1716,
        "db_id": "epinions_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the names of the items that did not receive any review.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $match: { \"reviews\": { $size: 0 } } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $match: { \"reviews\": { $size: 0 } } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1031,
        "spider_question_id": 1717,
        "db_id": "epinions_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "question": "Find the names of users who did not leave any review.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1032,
        "spider_question_id": 1718,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
        "question": "Find the number of users who did not write any review.",
        "query": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $count: \"no_reviews\" } ])",
        "gpt4 answer": "db.useracct.aggregate([ { $lookup: { from: \"review\", localField: \"u_id\", foreignField: \"u_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $count: \"no_reviews\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1033,
        "spider_question_id": 1719,
        "db_id": "epinions_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the number of items without any review.",
        "query": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $count: \"num_items_without_reviews\" } ])",
        "gpt4 answer": "db.item.aggregate([ { $lookup: { from: \"review\", localField: \"i_id\", foreignField: \"i_id\", as: \"reviews\" } }, { $match: { reviews: { $size: 0 } } }, { $count: \"num_items_without_reviews\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1034,
        "spider_question_id": 1721,
        "db_id": "riding_club",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Player_name FROM player ORDER BY Votes ASC",
        "question": "List the names of players in ascending order of votes.",
        "query": "db.player.find({}, {Player_name: 1}).sort({Votes: 1})",
        "gpt4 answer": "db.player.find({}, { Player_name: 1 }).sort({ Votes: 1 })",
        "deepseek answer": "db.player.find({}, {Player_name: 1}).sort({Votes: 1})"
    },
    {
        "question_id": 1035,
        "spider_question_id": 1722,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Gender , Occupation FROM player",
        "question": "What are the gender and occupation of players?",
        "query": "db.player.find({}, {Gender: 1, Occupation: 1})",
        "gpt4 answer": "db.player.find({}, {Gender: 1, Occupation: 1})",
        "deepseek answer": "db.player.find({}, {Gender: 1, Occupation: 1})"
    },
    {
        "question_id": 1036,
        "spider_question_id": 1723,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Player_name , residence FROM player WHERE Occupation != 'Researcher'",
        "question": "List the name and residence for players whose occupation is not 'Researcher'.",
        "query": "db.player.find({Occupation: {$ne: 'Researcher'}}, {Player_name: 1, Residence: 1})",
        "gpt4 answer": "db.player.find({ Occupation: { $ne: 'Researcher' } }, { Player_name: 1, Residence: 1 })",
        "deepseek answer": "db.player.find({Occupation: {$ne: 'Researcher'}}, {Player_name: 1, Residence: 1})"
    },
    {
        "question_id": 1037,
        "spider_question_id": 1724,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Sponsor_name FROM player WHERE Residence = 'Brandon' OR Residence = 'Birtle'",
        "question": "Show the names of sponsors of players whose residence is either 'Brandon' or 'Birtle'.",
        "query": "db.player.find( { Residence: { $in: ['Brandon', 'Birtle'] } }, { Sponsor_name: 1 } )",
        "gpt4 answer": "db.player.find({ Residence: { $in: ['Brandon', 'Birtle'] } }, { Sponsor_name: 1 })",
        "deepseek answer": "db.player.find( { Residence: { $in: ['Brandon', 'Birtle'] } }, { Sponsor_name: 1 } )"
    },
    {
        "question_id": 1038,
        "spider_question_id": 1725,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
        "question": "What is the name of the player with the largest number of votes?",
        "query": "db.player.find({}, {Player_name: 1}).sort({Votes: -1}).limit(1)",
        "gpt4 answer": "db.player.find({}, { Player_name: 1 }).sort({ Votes: -1 }).limit(1)",
        "deepseek answer": "db.player.find({}, {Player_name: 1}).sort({Votes: -1}).limit(1)"
    },
    {
        "question_id": 1039,
        "spider_question_id": 1726,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Occupation , COUNT(*) FROM player GROUP BY Occupation",
        "question": "Show different occupations along with the number of players in each occupation.",
        "query": "db.player.aggregate([ { $group: { _id: \"$Occupation\", count: { $sum: 1 } } }, { $project: { Occupation: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: \"$Occupation\", NumberOfPlayers: { $sum: 1 } } }, { $project: { Occupation: \"$_id\", NumberOfPlayers: \"$NumberOfPlayers\" } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: \"$Occupation\", count: { $sum: 1 } } }, { $project: { Occupation: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1040,
        "spider_question_id": 1728,
        "db_id": "riding_club",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2",
        "question": "Show the residences that have at least two players.",
        "query": "db.player.aggregate([ { $group: { _id: \"$Residence\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Residence: \"$_id\" } } ])",
        "gpt4 answer": "db.player.aggregate([ {$group: {_id: \"$Residence\", numPlayers: {$sum: 1}}}, {$match: {numPlayers: {$gte: 2}}}, {$project: {Residence: \"$_id\"}} ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: \"$Residence\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Residence: \"$_id\" } } ])"
    },
    {
        "question_id": 1041,
        "spider_question_id": 1729,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
        "question": "Show the names of players and names of their coaches.",
        "query": "db.player_coach.aggregate([ { $lookup: { from: \"coach\", localField: \"Coach_ID\", foreignField: \"Coach_ID\", as: \"coach_info\" } }, { $lookup: { from: \"player\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"player_info\" } }, { $project: { Player_name: { $arrayElemAt: [\"$player_info.Player_name\", 0] }, Coach_name: { $arrayElemAt: [\"$coach_info.Coach_name\", 0] } } } ])",
        "gpt4 answer": "db.player_coach.aggregate([ { $lookup: { from: \"coach\", localField: \"Coach_ID\", foreignField: \"Coach_ID\", as: \"coach_info\" } }, { $unwind: \"$coach_info\" }, { $lookup: { from: \"player\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $project: { Player_name: \"$player_info.Player_name\", Coach_name: \"$coach_info.Coach_name\" } } ])",
        "deepseek answer": "db.player_coach.aggregate([ { $lookup: { from: \"coach\", localField: \"Coach_ID\", foreignField: \"Coach_ID\", as: \"coach_info\" } }, { $lookup: { from: \"player\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"player_info\" } }, { $project: { Player_name: { $arrayElemAt: [\"$player_info.Player_name\", 0] }, Coach_name: { $arrayElemAt: [\"$coach_info.Coach_name\", 0] } } } ])"
    },
    {
        "question_id": 1042,
        "spider_question_id": 1732,
        "db_id": "riding_club",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "query": "db.player.aggregate([ { $lookup: { from: \"player_coach\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"player_coach\" } }, { $unwind: \"$player_coach\" }, { $lookup: { from: \"coach\", localField: \"player_coach.Coach_ID\", foreignField: \"Coach_ID\", as: \"coach\" } }, { $unwind: \"$coach\" }, { $project: { Player_name: 1, Coach_name: \"$coach.Coach_name\" } }, { $sort: { Votes: -1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"player_coach\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"player_coach_info\" } }, { $unwind: \"$player_coach_info\" }, { $lookup: { from: \"coach\", localField: \"player_coach_info.Coach_ID\", foreignField: \"Coach_ID\", as: \"coach_info\" } }, { $unwind: \"$coach_info\" }, { $project: { Player_name: 1, coach_name: \"$coach_info.Coach_name\" } }, { $sort: { Votes: -1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"player_coach\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"player_coach\" } }, { $unwind: \"$player_coach\" }, { $lookup: { from: \"coach\", localField: \"player_coach.Coach_ID\", foreignField: \"Coach_ID\", as: \"coach\" } }, { $unwind: \"$coach\" }, { $project: { Player_name: 1, Coach_name: \"$coach.Coach_name\" } }, { $sort: { Votes: -1 } } ])"
    },
    {
        "question_id": 1043,
        "spider_question_id": 1733,
        "db_id": "riding_club",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "question": "List the names of players that do not have coaches.",
        "query": "db.player.find( { Player_ID: { $nin: db.player_coach.distinct(\"Player_ID\") } }, { Player_name: 1 } )",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"player_coach\", localField: \"Player_ID\", foreignField: \"Player_ID\", as: \"coaching_info\" } }, { $match: { coaching_info: { $size: 0 } } }, { $project: { Player_name: 1 } } ])",
        "deepseek answer": "db.player.find( { Player_ID: { $nin: db.player_coach.distinct(\"Player_ID\") } }, { Player_name: 1 } )"
    },
    {
        "question_id": 1044,
        "spider_question_id": 1734,
        "db_id": "riding_club",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Residence FROM player WHERE gender = 'M' INTERSECT SELECT Residence FROM player WHERE gender = 'F'",
        "question": "Show the residences that have both a player of gender 'M' and a player of gender 'F'.",
        "query": "db.player.aggregate([ { $match: { Gender: { $in: [\"M\", \"F\"] } } }, { $group: { _id: \"$Residence\", genders: { $addToSet: \"$Gender\" } } }, { $match: { genders: { $all: [\"M\", \"F\"] } } }, { $project: { Residence: \"$_id\" } } ])",
        "gpt4 answer": "db.player.aggregate([ { $match: { $or: [ { Gender: 'M' }, { Gender: 'F' } ] } }, { $group: { _id: \"$Residence\", genders: { $addToSet: \"$Gender\" }, } }, { $match: { genders: { $all: [\"M\", \"F\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $match: { Gender: { $in: [\"M\", \"F\"] } } }, { $group: { _id: \"$Residence\", genders: { $addToSet: \"$Gender\" } } }, { $match: { genders: { $all: [\"M\", \"F\"] } } }, { $project: { Residence: \"$_id\" } } ])"
    },
    {
        "question_id": 1045,
        "spider_question_id": 1735,
        "db_id": "riding_club",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.club_id , T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id",
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "query": "db.coach.aggregate([ { $group: { _id: \"$Club_ID\", coachesCount: { $sum: 1 } } }, { $lookup: { from: \"club\", localField: \"_id\", foreignField: \"Club_ID\", as: \"clubInfo\" } }, { $project: { Club_ID: \"$_id\", Club_name: { $arrayElemAt: [\"$clubInfo.Club_name\", 0] }, Number_of_Coaches: \"$coachesCount\" } } ])",
        "gpt4 answer": "db.coach.aggregate([ { $group: { _id: \"$Club_ID\", coachesCount: { $sum: 1 } } }, { $lookup: { from: \"club\", localField: \"_id\", foreignField: \"Club_ID\", as: \"clubInfo\" } }, { $project: { Club_ID: \"$_id\", Club_name: { $arrayElemAt: [\"$clubInfo.Club_name\", 0] }, Number_of_Coaches: \"$coachesCount\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1046,
        "spider_question_id": 1736,
        "db_id": "riding_club",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.club_id , T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many gold medals has the club with the most coaches won?",
        "query": "db.coach.aggregate([ { $group: { _id: \"$Club_ID\", numCoaches: { $sum: 1 } } }, { $sort: { numCoaches: -1 } }, { $limit: 1 }, { $lookup: { from: \"match_result\", localField: \"_id\", foreignField: \"Club_ID\", as: \"matchResults\" } }, { $unwind: \"$matchResults\" }, { $project: { club_id: \"$_id\", gold: \"$matchResults.Gold\" } } ])",
        "gpt4 answer": "db.coach.aggregate([ { $group: { _id: \"$Club_ID\", numCoaches: { $sum: 1 } } }, { $sort: { numCoaches: -1 } }, { $limit: 1 }, { $lookup: { from: \"match_result\", localField: \"_id\", foreignField: \"Club_ID\", as: \"matchResults\" } }, { $unwind: \"$matchResults\" }, { $project: { club_id: \"$_id\", gold: \"$matchResults.Gold\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1047,
        "spider_question_id": 1739,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "question": "List the total points of gymnasts in descending order.",
        "query": "db.gymnast.find({}, {Total_Points: 1}).sort({Total_Points: -1})",
        "gpt4 answer": "db.gymnast.find({}, { Total_Points: 1 }).sort({ Total_Points: -1 })",
        "deepseek answer": "db.gymnast.find({}, {Total_Points: 1}).sort({Total_Points: -1})"
    },
    {
        "question_id": 1048,
        "spider_question_id": 1740,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "question": "What are the total points for all gymnasts, ordered by total points descending?",
        "query": "db.gymnast.find({}, {Total_Points: 1}).sort({Total_Points: -1})",
        "gpt4 answer": "db.gymnast.find({}, { Total_Points: 1 }).sort({ Total_Points: -1 })",
        "deepseek answer": "db.gymnast.find({}, {Total_Points: 1}).sort({Total_Points: -1})"
    },
    {
        "question_id": 1049,
        "spider_question_id": 1741,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "query": "db.gymnast.find({}, {Total_Points: 1}).sort({Floor_Exercise_Points: -1})",
        "gpt4 answer": "db.gymnast.find({}, { Total_Points: 1 }).sort({ Floor_Exercise_Points: -1 })",
        "deepseek answer": "db.gymnast.find({}, {Total_Points: 1}).sort({Floor_Exercise_Points: -1})"
    },
    {
        "question_id": 1050,
        "spider_question_id": 1742,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "query": "db.gymnast.find({}, {Total_Points: 1}).sort({Floor_Exercise_Points: -1})",
        "gpt4 answer": "db.gymnast.find({}, { Total_Points: 1 }).sort({ Floor_Exercise_Points: -1 })",
        "deepseek answer": "db.gymnast.find({}, {Total_Points: 1}).sort({Floor_Exercise_Points: -1})"
    },
    {
        "question_id": 1051,
        "spider_question_id": 1743,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
        "question": "What is the average horizontal bar points for all gymnasts?",
        "query": "db.gymnast.aggregate([ { $group: { _id: null, averageHorizontalBarPoints: { $avg: \"$Horizontal_Bar_Points\" } } }, { $project: { averageHorizontalBarPoints: 1 } } ])",
        "gpt4 answer": "db.gymnast.aggregate([ { $group: { _id: null, averageHorizontalBarPoints: { $avg: \"$Horizontal_Bar_Points\" } }}, { $project: { averageHorizontalBarPoints: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $group: { _id: null, averageHorizontalBarPoints: { $avg: \"$Horizontal_Bar_Points\" } } }, { $project: { averageHorizontalBarPoints: 1 } } ])"
    },
    {
        "question_id": 1052,
        "spider_question_id": 1744,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
        "question": "Return the average horizontal bar points across all gymnasts.",
        "query": "db.gymnast.aggregate([ { $group: { _id: null, averageHorizontalBarPoints: { $avg: \"$Horizontal_Bar_Points\" } } }, { $project: { averageHorizontalBarPoints: 1 } } ])",
        "gpt4 answer": "db.gymnast.aggregate([ { $group: { _id: null, averageHorizontalBarPoints: { $avg: \"$Horizontal_Bar_Points\" } }}, { $project: { averageHorizontalBarPoints: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $group: { _id: null, averageHorizontalBarPoints: { $avg: \"$Horizontal_Bar_Points\" } } }, { $project: { averageHorizontalBarPoints: 1 } } ])"
    },
    {
        "question_id": 1053,
        "spider_question_id": 1745,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Name ASC",
        "question": "What are the names of people in ascending alphabetical order?",
        "query": "db.people.find({}, { Name: 1 }).sort({ Name: 1 })",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1054,
        "spider_question_id": 1746,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Name ASC",
        "question": "Return the names of people, ordered alphabetically.",
        "query": "db.people.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.people.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 1055,
        "spider_question_id": 1747,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
        "question": "What are the names of gymnasts?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } } ])"
    },
    {
        "question_id": 1056,
        "spider_question_id": 1748,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
        "question": "Return the names of the gymnasts.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } } ])"
    },
    {
        "question_id": 1057,
        "spider_question_id": 1749,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != 'Santo Domingo'",
        "question": "What are the names of gymnasts whose hometown is not 'Santo Domingo'?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $match: { \"gymnast_info.Hometown\": { $ne: \"Santo Domingo\" } } }, { $project: { Name: \"$gymnast_info.Name\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { \"Hometown\": { $ne: \"Santo Domingo\" }, \"gymnast_info\": { $ne: [] } } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $match: { \"gymnast_info.Hometown\": { $ne: \"Santo Domingo\" } } }, { $project: { Name: \"$gymnast_info.Name\" } } ])"
    },
    {
        "question_id": 1058,
        "spider_question_id": 1750,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != 'Santo Domingo'",
        "question": "Return the names of gymnasts who did not grow up in Santo Domingo.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $match: { \"gymnast_info.Hometown\": { $ne: \"Santo Domingo\" } } }, { $project: { Name: \"$gymnast_info.Name\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Hometown: { $ne: 'Santo Domingo' } } }, { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { \"gymnast_info\": { $ne: [] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $match: { \"gymnast_info.Hometown\": { $ne: \"Santo Domingo\" } } }, { $project: { Name: \"$gymnast_info.Name\" } } ])"
    },
    {
        "question_id": 1059,
        "spider_question_id": 1751,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "question": "What is the age of the tallest person?",
        "query": "db.people.find({}, {Age: 1}).sort({Height: -1}).limit(1)",
        "gpt4 answer": "db.people.find({}, { Age: 1 }).sort({ Height: -1 }).limit(1)",
        "deepseek answer": "db.people.find({}, {Age: 1}).sort({Height: -1}).limit(1)"
    },
    {
        "question_id": 1060,
        "spider_question_id": 1752,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
        "question": "Return the age of the person with the greatest height.",
        "query": "db.people.find({}, {Age: 1}).sort({Height: -1}).limit(1)",
        "gpt4 answer": "db.people.find({}, { Age: 1 }).sort({ Height: -1 }).limit(1)",
        "deepseek answer": "db.people.find({}, {Age: 1}).sort({Height: -1}).limit(1)"
    },
    {
        "question_id": 1061,
        "spider_question_id": 1753,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "question": "List the names of the top 5 oldest people.",
        "query": "db.people.find({}, { Name: 1}).sort({Age: -1}).limit(5)",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Age: -1 }).limit(5)",
        "deepseek answer": "db.people.find({}, { Name: 1}).sort({Age: -1}).limit(5)"
    },
    {
        "question_id": 1062,
        "spider_question_id": 1754,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
        "question": "What are the names of the five oldest people?",
        "query": "db.people.find({}, {Name: 1}).sort({Age: -1}).limit(5)",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Age: -1 }).limit(5)",
        "deepseek answer": "db.people.find({}, {Name: 1}).sort({Age: -1}).limit(5)"
    },
    {
        "question_id": 1063,
        "spider_question_id": 1755,
        "db_id": "gymnast",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "What is the total point count of the youngest gymnast?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $sort: { \"gymnast_info.Age\": 1 } }, { $limit: 1 }, { $project: { Total_Points: 1 } } ])",
        "gpt4 answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $sort: { \"gymnast_info.Age\": 1 } }, { $limit: 1 }, { $project: { Total_Points: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $sort: { \"gymnast_info.Age\": 1 } }, { $limit: 1 }, { $project: { Total_Points: 1 } } ])"
    },
    {
        "question_id": 1064,
        "spider_question_id": 1756,
        "db_id": "gymnast",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Return the total points of the gymnast with the lowest age.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $sort: { \"gymnast_info.Age\": 1 } }, { $limit: 1 }, { $project: { Total_Points: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $sort: { \"gymnast_info.Age\": 1 } }, { $limit: 1 }, { $project: { Total_Points: 1 } } ])"
    },
    {
        "question_id": 1065,
        "spider_question_id": 1757,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
        "question": "What is the average age of all gymnasts?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: null, averageAge: { $avg: \"$gymnast_info.Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { gymnast_info: { $ne: [] } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: null, averageAge: { $avg: \"$gymnast_info.Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 1066,
        "spider_question_id": 1758,
        "db_id": "gymnast",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
        "question": "Return the average age across all gymnasts.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: null, averageAge: { $avg: \"$gymnast_info.Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { \"People_ID\": { $exists: true } } }, { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { \"gymnast_info\": { $ne: [] } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: null, averageAge: { $avg: \"$gymnast_info.Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 1067,
        "spider_question_id": 1759,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5",
        "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "query": "db.gymnast.aggregate([ { $match: { Total_Points: { $gt: 57.5 } } }, { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\" } }, { $project: { Hometown: \"$_id\" } } ])",
        "gpt4 answer": "db.gymnast.aggregate([ { $match: { Total_Points: { $gt: 57.5 } } }, { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\" } }, { $project: { Hometown: \"$_id\" } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $match: { Total_Points: { $gt: 57.5 } } }, { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\" } }, { $project: { Hometown: \"$_id\" } } ])"
    },
    {
        "question_id": 1068,
        "spider_question_id": 1760,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5",
        "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.",
        "query": "db.gymnast.aggregate([ { $match: { Total_Points: { $gt: 57.5 } } }, { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\" } }, { $project: { Hometown: \"$_id\" } } ])",
        "gpt4 answer": "db.gymnast.aggregate([ { $match: { Total_Points: { $gt: 57.5 } } }, { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\" } }, { $project: { Hometown: \"$_id\" } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $match: { Total_Points: { $gt: 57.5 } } }, { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\" } }, { $project: { Hometown: \"$_id\" } } ])"
    },
    {
        "question_id": 1069,
        "spider_question_id": 1761,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown",
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnastData\" } }, { $match: { \"gymnastData\": { $ne: [] } } }, { $group: { _id: \"$Hometown\", numberOfGymnasts: { $sum: 1 } } }, { $project: { Hometown: \"$_id\", numberOfGymnasts: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1070,
        "spider_question_id": 1762,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Hometown , COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown",
        "question": "How many gymnasts are from each hometown?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1071,
        "spider_question_id": 1763,
        "db_id": "gymnast",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common hometown of gymnasts?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { hometown: \"$_id\" } }])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: {\"gymnast_info\": {$ne: []}} }, { $group: { _id: \"$Hometown\", count: {$sum: 1} } }, { $sort: {count: -1} }, { $limit: 1 }, { $project: {_id: 1} } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { hometown: \"$_id\" } }])"
    },
    {
        "question_id": 1072,
        "spider_question_id": 1764,
        "db_id": "gymnast",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the hometown that is most common among gymnasts.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { hometown: \"$_id\" } } ])",
        "gpt4 answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Hometown: \"$_id\" } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { hometown: \"$_id\" } } ])"
    },
    {
        "question_id": 1073,
        "spider_question_id": 1765,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Hometown: \"$_id\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { \"gymnast_info\": { $not: { $size: 0 } } } }, { $group: { _id: \"$Hometown\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Hometown: \"$_id\" } } ])"
    },
    {
        "question_id": 1074,
        "spider_question_id": 1766,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Hometown: \"$_id\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { \"gymnast_info.0\": {$exists: true} } }, { $group: { _id: \"$Hometown\", gymnastCount: {$sum: 1} } }, { $match: { gymnastCount: {$gte: 2} } }, { $project: { Hometown: \"$_id\" } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $group: { _id: \"$gymnast_info.Hometown\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Hometown: \"$_id\" } } ])"
    },
    {
        "question_id": 1075,
        "spider_question_id": 1767,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC",
        "question": "List the names of gymnasts in ascending order by their heights.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } }, { $sort: { Height: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { gymnast_info: { $ne: [] } } }, { $sort: { Height: 1 } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } }, { $sort: { Height: 1 } } ])"
    },
    {
        "question_id": 1076,
        "spider_question_id": 1768,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } }, { $sort: { Height: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"gymnast\", localField: \"People_ID\", foreignField: \"Gymnast_ID\", as: \"gymnast_info\" } }, { $match: { \"gymnast_info\": { $ne: [] } } }, { $sort: { \"Height\": 1 } }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Name: \"$gymnast_info.Name\" } }, { $sort: { Height: 1 } } ])"
    },
    {
        "question_id": 1077,
        "spider_question_id": 1771,
        "db_id": "gymnast",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "query": "db.people.aggregate([ { $match: { Age: { $gt: 23 } } }, { $group: { _id: null, oldHometowns: { $addToSet: \"$Hometown\" } } }, { $lookup: { from: \"people\", let: { oldHometowns: \"$oldHometowns\" }, pipeline: [ { $match: { $expr: { $and: [{ $lt: [\"$Age\", 20] }, { $in: [\"$Hometown\", \"$$oldHometowns\"] }] } } }, { $group: { _id: null, youngHometowns: { $addToSet: \"$Hometown\" } } } ], as: \"youngData\" } }, { $unwind: \"$youngData\" }, { $project: { sharedHometowns: { $setIntersection: [\"$oldHometowns\", \"$youngData.youngHometowns\"] } } }, { $unwind: \"$sharedHometowns\" }, { $replaceRoot: { newRoot: { Hometown: \"$sharedHometowns\" } } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Age: { $gt: 23 } } }, { $group: { _id: null, oldHometowns: { $addToSet: \"$Hometown\" } } }, { $lookup: { from: \"people\", let: { oldHometowns: \"$oldHometowns\" }, pipeline: [ { $match: { $expr: { $and: [{ $lt: [\"$Age\", 20] }, { $in: [\"$Hometown\", \"$$oldHometowns\"] }] } } }, { $group: { _id: null, youngHometowns: { $addToSet: \"$Hometown\" } } } ], as: \"youngData\" } }, { $unwind: \"$youngData\" }, { $project: { sharedHometowns: { $setIntersection: [\"$oldHometowns\", \"$youngData.youngHometowns\"] } } }, { $unwind: \"$sharedHometowns\" }, { $replaceRoot: { newRoot: { Hometown: \"$sharedHometowns\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1078,
        "spider_question_id": 1772,
        "db_id": "gymnast",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
        "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
        "query": "db.people.aggregate([ { $match: { $or: [ { Age: { $gt: 23 } }, { Age: { $lt: 20 } } ] } }, { $group: { _id: \"$Hometown\", ageCategories: { $addToSet: { $cond: [{ $gt: [\"$Age\", 23] }, \"older\", \"younger\"] } } } }, { $match: { ageCategories: { $all: [\"older\", \"younger\"] } } }, { $project: { Hometown: \"$_id\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { $or: [ { Age: { $gt: 23 } }, { Age: { $lt: 20 } } ] } }, { $group: { _id: \"$Hometown\", ageCategories: { $addToSet: { $cond: [{ $gt: [\"$Age\", 23] }, \"older\", \"younger\"] } } } }, { $match: { ageCategories: { $all: [\"older\", \"younger\"] } } }, { $project: { Hometown: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1079,
        "spider_question_id": 1775,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Age: \"$gymnast_info.Age\"} }, { $sort: { Total_Points: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { Age: \"$gymnast_info.Age\"} }, { $sort: { Total_Points: -1 } } ])"
    },
    {
        "question_id": 1080,
        "spider_question_id": 1776,
        "db_id": "gymnast",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC",
        "question": "What are the ages of the gymnasts, ordered descending by their total points?",
        "query": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { \"_id\": 0, \"Age\": \"$gymnast_info.Age\" } }, { $sort: { \"Total_Points\": -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.gymnast.aggregate([ { $lookup: { from: \"people\", localField: \"Gymnast_ID\", foreignField: \"People_ID\", as: \"gymnast_info\" } }, { $unwind: \"$gymnast_info\" }, { $project: { \"_id\": 0, \"Age\": \"$gymnast_info.Age\" } }, { $sort: { \"Total_Points\": -1 } } ])"
    },
    {
        "question_id": 1081,
        "spider_question_id": 1781,
        "db_id": "small_bank_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(balance) FROM checking",
        "question": "What is the total checking balance in all accounts?",
        "query": "db.CHECKING.aggregate([ { $group: { _id: null, totalCheckingBalance: { $sum: \"$balance\" } } }, { $project: { totalCheckingBalance: 1 } } ])",
        "gpt4 answer": "db.CHECKING.aggregate([ { $group: { _id: null, totalCheckingBalance: { $sum: \"$balance\" } } }, { $project: { totalCheckingBalance: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1082,
        "spider_question_id": 1782,
        "db_id": "small_bank_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(balance) FROM checking",
        "question": "Find the total balance across checking accounts.",
        "query": "db.CHECKING.aggregate([ { $group: { _id: null, totalBalance: { $sum: \"$balance\" } } }, { $project: { totalBalance: 1 } } ])",
        "gpt4 answer": "db.CHECKING.aggregate([ { $group: { _id: null, totalBalance: { $sum: \"$balance\" } } }, { $project: { totalBalance: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1083,
        "spider_question_id": 1783,
        "db_id": "small_bank_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(balance) FROM checking",
        "question": "Find the average checking balance.",
        "query": "db.CHECKING.aggregate([ { $group: { _id: null, averageBalance: { $avg: \"$balance\" } } }, { $project: { averageBalance: 1 } } ])",
        "gpt4 answer": "db.CHECKING.aggregate([ { $group: { _id: null, averageBalance: { $avg: \"$balance\" } } }, { $project: { averageBalance: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1084,
        "spider_question_id": 1784,
        "db_id": "small_bank_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(balance) FROM checking",
        "question": "What is the average balance in checking accounts?",
        "query": "db.CHECKING.aggregate([ { $group: { _id: null, averageBalance: { $avg: \"$balance\" } } }, { $project: { averageBalance: 1 } } ])",
        "gpt4 answer": "db.CHECKING.aggregate([ { $group: { _id: null, averageBalance: { $avg: \"$balance\" } } }, { $project: { averageBalance: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1085,
        "spider_question_id": 1790,
        "db_id": "small_bank_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'",
        "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
        "query": "db.ACCOUNTS.aggregate([ { $match: { name: /ee/ } }, { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checking_info\" } }, { $unwind: \"$checking_info\" }, { $project: { balance: \"$checking_info.balance\" } } ])",
        "gpt4 answer": "db.ACCOUNTS.aggregate([ { $match: { name: /ee/ } }, { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checking_info\" } }, { $unwind: \"$checking_info\" }, { $project: { balance: \"$checking_info.balance\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1086,
        "spider_question_id": 1797,
        "db_id": "small_bank_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM accounts ORDER BY name",
        "question": "List all customers\u2019 names in the alphabetical order.",
        "query": "db.ACCOUNTS.find({}, { name: 1 }).sort({ name: 1 })",
        "gpt4 answer": "db.ACCOUNTS.find({}, { name: 1 }).sort({ name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1087,
        "spider_question_id": 1806,
        "db_id": "small_bank_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "query": "db.ACCOUNTS.aggregate([ { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checking_accounts\" } }, { $group: { _id: \"$name\", num_checking_accounts: { $sum: { $size: \"$checking_accounts\" } } } }, { $project: { name: \"$_id\", num_checking_accounts: 1 } } ])",
        "gpt4 answer": "db.ACCOUNTS.aggregate([ { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checking_accounts\" } }, { $group: { _id: \"$name\", num_checking_accounts: { $sum: { $size: \"$checking_accounts\" } } } }, { $project: { name: \"$_id\", num_checking_accounts: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1088,
        "spider_question_id": 1807,
        "db_id": "small_bank_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T2.balance) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
        "question": "Find the total saving balance for each account name.",
        "query": "db.SAVINGS.aggregate([ { $lookup: { from: \"ACCOUNTS\", localField: \"custid\", foreignField: \"custid\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_info.name\", totalBalance: { $sum: \"$balance\" } } }, { $project: { name: \"$_id\", totalBalance: 1 } } ])",
        "gpt4 answer": "db.SAVINGS.aggregate([ { $lookup: { from: \"ACCOUNTS\", localField: \"custid\", foreignField: \"custid\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $group: { _id: \"$account_info.name\", totalBalance: { $sum: \"$balance\" } } }, { $project: { name: \"$_id\", totalBalance: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1089,
        "spider_question_id": 1811,
        "db_id": "small_bank_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "query": "db.CHECKING.aggregate([ { $sort: { balance: -1 } }, { $limit: 1 }, { $lookup: { from: \"SAVINGS\", localField: \"custid\", foreignField: \"custid\", as: \"savings_info\" } }, { $unwind: \"$savings_info\" }, { $project: { balance: \"$savings_info.balance\" } } ])",
        "gpt4 answer": "db.CHECKING.aggregate([ { $sort: { balance: -1 } }, { $limit: 1 }, { $lookup: { from: \"SAVINGS\", localField: \"custid\", foreignField: \"custid\", as: \"savings_info\" } }, { $unwind: \"$savings_info\" }, { $project: { balance: \"$savings_info.balance\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1090,
        "spider_question_id": 1812,
        "db_id": "small_bank_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "query": "db.CHECKING.aggregate([ { $sort: { balance: -1 } }, { $limit: 1 }, { $lookup: { from: \"SAVINGS\", localField: \"custid\", foreignField: \"custid\", as: \"savings_info\" } }, { $unwind: \"$savings_info\" }, { $project: { balance: \"$savings_info.balance\" } } ])",
        "gpt4 answer": "db.CHECKING.aggregate([ { $sort: { balance: -1 } }, { $limit: 1 }, { $lookup: { from: \"SAVINGS\", localField: \"custid\", foreignField: \"custid\", as: \"savings_info\" } }, { $unwind: \"$savings_info\" }, { $project: { balance: \"$savings_info.balance\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1091,
        "spider_question_id": 1816,
        "db_id": "small_bank_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "query": "db.SAVINGS.aggregate([ { $sort: { balance: 1 } }, { $limit: 1 }, { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checking\" } }, { $unwind: \"$checking\" }, { $lookup: { from: \"ACCOUNTS\", localField: \"custid\", foreignField: \"custid\", as: \"account\" } }, { $unwind: \"$account\" }, { $project: { balance: \"$checking.balance\", name: \"$account.name\" } } ])",
        "gpt4 answer": "db.SAVINGS.aggregate([ { $sort: { balance: 1 } }, { $limit: 1 }, { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checking\" } }, { $unwind: \"$checking\" }, { $lookup: { from: \"ACCOUNTS\", localField: \"custid\", foreignField: \"custid\", as: \"account\" } }, { $unwind: \"$account\" }, { $project: { balance: \"$checking.balance\", name: \"$account.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1092,
        "spider_question_id": 1821,
        "db_id": "small_bank_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "query": "db.ACCOUNTS.aggregate([ { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checkingInfo\" } }, { $lookup: { from: \"SAVINGS\", localField: \"custid\", foreignField: \"custid\", as: \"savingsInfo\" } }, { $unwind: \"$checkingInfo\" }, { $unwind: \"$savingsInfo\" }, { $match: { $expr: { $gt: [\"$checkingInfo.balance\", \"$savingsInfo.balance\"] } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.ACCOUNTS.aggregate([ { $lookup: { from: \"CHECKING\", localField: \"custid\", foreignField: \"custid\", as: \"checkingInfo\" } }, { $lookup: { from: \"SAVINGS\", localField: \"custid\", foreignField: \"custid\", as: \"savingsInfo\" } }, { $unwind: \"$checkingInfo\" }, { $unwind: \"$savingsInfo\" }, { $match: { $expr: { $gt: [\"$checkingInfo.balance\", \"$savingsInfo.balance\"] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1093,
        "spider_question_id": 1825,
        "db_id": "small_bank_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name , T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "query": "db.SAVINGS.aggregate([ { $sort: { balance: -1 } }, { $limit: 3 }, { $lookup: { from: \"ACCOUNTS\", localField: \"custid\", foreignField: \"custid\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $project: { name: \"$account_info.name\", balance: 1 } } ])",
        "gpt4 answer": "db.SAVINGS.aggregate([ { $sort: { balance: -1 } }, { $limit: 3 }, { $lookup: { from: \"ACCOUNTS\", localField: \"custid\", foreignField: \"custid\", as: \"account_info\" } }, { $unwind: \"$account_info\" }, { $project: { name: \"$account_info.name\", balance: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1094,
        "spider_question_id": 1828,
        "db_id": "browser_web",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM browser ORDER BY market_share DESC",
        "question": "List the name of browsers in descending order by market share.",
        "query": "db.browser.find({}, {name: 1}).sort({market_share: -1})",
        "gpt4 answer": "db.browser.find({}, { name: 1 }).sort({ market_share: -1 })",
        "deepseek answer": "db.browser.find({}, {name: 1}).sort({market_share: -1})"
    },
    {
        "question_id": 1095,
        "spider_question_id": 1829,
        "db_id": "browser_web",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT id , name , market_share FROM browser",
        "question": "List the ids, names and market shares of all browsers.",
        "query": "db.browser.find({}, { id: 1, name: 1, market_share: 1})",
        "gpt4 answer": "db.browser.find({}, { id: 1, name: 1, market_share: 1 })",
        "deepseek answer": "db.browser.find({}, { id: 1, name: 1, market_share: 1})"
    },
    {
        "question_id": 1096,
        "spider_question_id": 1830,
        "db_id": "browser_web",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(market_share) , min(market_share) , avg(market_share) FROM browser",
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "query": "db.browser.aggregate([ { $group: { _id: null, max_market_share: { $max: \"$market_share\" }, min_market_share: { $min: \"$market_share\" }, avg_market_share: { $avg: \"$market_share\" } } }, { $project: { max_market_share: 1, min_market_share:1, avg_market_share:1 } } ])",
        "gpt4 answer": "db.browser.aggregate([ { $group: { _id: null, maxMarketShare: { $max: \"$market_share\" }, minMarketShare: { $min: \"$market_share\" }, avgMarketShare: { $avg: \"$market_share\" } } }, { $project: { maxMarketShare: 1, minMarketShare: 1, avgMarketShare: 1 } } ])",
        "deepseek answer": "db.browser.aggregate([ { $group: { _id: null, max_market_share: { $max: \"$market_share\" }, min_market_share: { $min: \"$market_share\" }, avg_market_share: { $avg: \"$market_share\" } } }, { $project: { max_market_share: 1, min_market_share:1, avg_market_share:1 } } ])"
    },
    {
        "question_id": 1097,
        "spider_question_id": 1832,
        "db_id": "browser_web",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "db.Web_client_accelerator.find( { Connection: { $ne: 'Broadband' } }, { name: 1, Operating_system: 1 } )",
        "gpt4 answer": "db.Web_client_accelerator.find({ Connection: { $ne: \"Broadband\" } }, { name: 1, Operating_system: 1 })",
        "deepseek answer": "db.Web_client_accelerator.find( { Connection: { $ne: 'Broadband' } }, { name: 1, Operating_system: 1 } )"
    },
    {
        "question_id": 1098,
        "spider_question_id": 1833,
        "db_id": "browser_web",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "query": "db.Web_client_accelerator.aggregate([ { $match: { name: 'CProxy' } }, { $lookup: { from: 'accelerator_compatible_browser', localField: 'id', foreignField: 'accelerator_id', as: 'compatible_browsers' } }, { $unwind: '$compatible_browsers' }, { $match: { 'compatible_browsers.compatible_since_year': { $gt: 1998 } } }, { $lookup: { from: 'browser', localField: 'compatible_browsers.browser_id', foreignField: 'id', as: 'browser_details' } }, { $unwind: '$browser_details' }, { $project: { name: '$browser_details.name' } } ])",
        "gpt4 answer": "db.Web_client_accelerator.aggregate([ { $match: { name: 'CProxy' } }, { $lookup: { from: 'accelerator_compatible_browser', localField: 'id', foreignField: 'accelerator_id', as: 'compatible_browsers' } }, { $unwind: '$compatible_browsers' }, { $match: { 'compatible_browsers.compatible_since_year': { $gt: 1998 } } }, { $lookup: { from: 'browser', localField: 'compatible_browsers.browser_id', foreignField: 'id', as: 'browser_details' } }, { $unwind: '$browser_details' }, { $project: { name: '$browser_details.name' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1099,
        "spider_question_id": 1834,
        "db_id": "browser_web",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count(*) >= 2",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "query": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $match: { \"compatible_browsers\": { $exists: true, $ne: [] } } }, { $addFields: { num_compatible_browsers: { $size: \"$compatible_browsers\" } } }, { $match: { num_compatible_browsers: { $gte: 2 } } }, { $project: { id: 1, name: 1 } } ])",
        "gpt4 answer": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $project: { id: 1, name: 1, num_browsers: { $size: \"$compatible_browsers\" } } }, { $match: { num_browsers: { $gte: 2 } } }, { $project: { id: 1, name: 1 } } ])",
        "deepseek answer": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $match: { \"compatible_browsers\": { $exists: true, $ne: [] } } }, { $addFields: { num_compatible_browsers: { $size: \"$compatible_browsers\" } } }, { $match: { num_compatible_browsers: { $gte: 2 } } }, { $project: { id: 1, name: 1 } } ])"
    },
    {
        "question_id": 1100,
        "spider_question_id": 1835,
        "db_id": "browser_web",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.id , T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "query": "db.accelerator_compatible_browser.aggregate([ { $group: { _id: \"$browser_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"browser\", localField: \"_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $project: { _id: \"$browser_info.id\", name: \"$browser_info.name\" } } ])",
        "gpt4 answer": "db.accelerator_compatible_browser.aggregate([ { $group: { _id: \"$browser_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"browser\", localField: \"_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $project: { _id: \"$browser_info.id\", name: \"$browser_info.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1101,
        "spider_question_id": 1838,
        "db_id": "browser_web",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "query": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $match: { \"compatible_browsers\": { $eq: [] } } }, { $count: \"num_incompatible_accelerators\" } ])",
        "gpt4 answer": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $match: { \"compatible_browsers\": { $eq: [] } } }, { $count: \"num_incompatible_accelerators\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1102,
        "spider_question_id": 1839,
        "db_id": "browser_web",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "query": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"accelerator_compatible_browser\" } }, { $unwind: \"$accelerator_compatible_browser\" }, { $lookup: { from: \"browser\", localField: \"accelerator_compatible_browser.browser_id\", foreignField: \"id\", as: \"browser\" } }, { $unwind: \"$browser\" }, { $match: { \"browser.market_share\": { $gt: 15 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $unwind: \"$compatible_browsers\" }, { $lookup: { from: \"browser\", localField: \"compatible_browsers.browser_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $match: { \"browser_info.market_share\": { $gt: 15 } } }, { $group: { _id: \"$name\" } } ])",
        "deepseek answer": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"accelerator_compatible_browser\" } }, { $unwind: \"$accelerator_compatible_browser\" }, { $lookup: { from: \"browser\", localField: \"accelerator_compatible_browser.browser_id\", foreignField: \"id\", as: \"browser\" } }, { $unwind: \"$browser\" }, { $match: { \"browser.market_share\": { $gt: 15 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 1103,
        "spider_question_id": 1840,
        "db_id": "browser_web",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "query": "db.Web_client_accelerator.aggregate([ { $match: { name: { $in: [\"CACHEbox\", \"Fasterfox\"] } } }, { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $unwind: \"$compatible_browsers\" }, { $lookup: { from: \"browser\", localField: \"compatible_browsers.browser_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $group: { _id: \"$browser_info.name\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.browser.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"browser_id\", as: \"compatibility\" } }, { $lookup: { from: \"Web_client_accelerator\", localField: \"compatibility.accelerator_id\", foreignField: \"id\", as: \"accelerator\" } }, { $match: { \"accelerator.name\": { $all: [\"CACHEbox\", \"Fasterfox\"] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Web_client_accelerator.aggregate([ { $match: { name: { $in: [\"CACHEbox\", \"Fasterfox\"] } } }, { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatible_browsers\" } }, { $unwind: \"$compatible_browsers\" }, { $lookup: { from: \"browser\", localField: \"compatible_browsers.browser_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $group: { _id: \"$browser_info.name\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 1104,
        "spider_question_id": 1841,
        "db_id": "browser_web",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "query": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatibilities\" } }, { $lookup: { from: \"browser\", localField: \"compatibilities.browser_id\", foreignField: \"id\", as: \"compatible_browsers\" } }, { $match: { \"compatible_browsers.name\": { $ne: \"Opera\" } } }, { $project: { name: 1, Operating_system: 1 } } ])",
        "gpt4 answer": "db.Web_client_accelerator.aggregate([ { $lookup: { from: \"accelerator_compatible_browser\", localField: \"id\", foreignField: \"accelerator_id\", as: \"compatibilities\" } }, { $lookup: { from: \"browser\", localField: \"compatibilities.browser_id\", foreignField: \"id\", as: \"compatible_browsers\" } }, { $match: { \"compatible_browsers.name\": { $ne: \"Opera\" } } }, { $project: { name: 1, Operating_system: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1105,
        "spider_question_id": 1842,
        "db_id": "browser_web",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE '%Opera%'",
        "question": "Which accelerator name contains substring 'Opera'?",
        "query": "db.Web_client_accelerator.find( { name: { $regex: /Opera/, $options: 'i' } }, { name: 1 } )",
        "gpt4 answer": "db.Web_client_accelerator.find({ name: /Opera/ }, { name: 1 })",
        "deepseek answer": "db.Web_client_accelerator.find( { name: { $regex: /Opera/, $options: 'i' } }, { name: 1 } )"
    },
    {
        "question_id": 1106,
        "spider_question_id": 1843,
        "db_id": "browser_web",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Operating_system , count(*) FROM web_client_accelerator GROUP BY Operating_system",
        "question": "Find the number of web accelerators used for each Operating system.",
        "query": "db.Web_client_accelerator.aggregate([ { $group: { _id: \"$Operating_system\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Web_client_accelerator.aggregate([ { $group: { _id: \"$Operating_system\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1107,
        "spider_question_id": 1844,
        "db_id": "browser_web",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "query": "db.accelerator_compatible_browser.aggregate([ { $lookup: { from: \"browser\", localField: \"browser_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $lookup: { from: \"Web_client_accelerator\", localField: \"accelerator_id\", foreignField: \"id\", as: \"accelerator_info\" } }, { $unwind: \"$accelerator_info\" }, { $project: { \"browser_name\": \"$browser_info.name\", \"accelerator_name\": \"$accelerator_info.name\", \"compatible_since_year\": 1 } }, { $sort: { \"compatible_since_year\": -1 } }, { $project: { \"browser_name\": 1, \"accelerator_name\": 1 } } ])",
        "gpt4 answer": "db.accelerator_compatible_browser.aggregate([ { $lookup: { from: \"browser\", localField: \"browser_id\", foreignField: \"id\", as: \"browser_info\" } }, { $unwind: \"$browser_info\" }, { $lookup: { from: \"Web_client_accelerator\", localField: \"accelerator_id\", foreignField: \"id\", as: \"accelerator_info\" } }, { $unwind: \"$accelerator_info\" }, { $project: { \"browser_name\": \"$browser_info.name\", \"accelerator_name\": \"$accelerator_info.name\", \"compatible_since_year\": 1 } }, { $sort: { \"compatible_since_year\": -1 } }, { $project: { \"browser_name\": 1, \"accelerator_name\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1108,
        "spider_question_id": 1847,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "question": "List the names of wrestlers in descending order of days held.",
        "query": "db.wrestler.find({}, {Name: 1}).sort({Days_held: -1})",
        "gpt4 answer": "db.wrestler.find({}, { Name: 1 }).sort({ Days_held: -1 })",
        "deepseek answer": "db.wrestler.find({}, {Name: 1}).sort({Days_held: -1})"
    },
    {
        "question_id": 1109,
        "spider_question_id": 1848,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "query": "db.wrestler.find({}, {Name: 1}).sort({Days_held: -1})",
        "gpt4 answer": "db.wrestler.find({}, { Name: 1 }).sort({ Days_held: -1 })",
        "deepseek answer": "db.wrestler.find({}, {Name: 1}).sort({Days_held: -1})"
    },
    {
        "question_id": 1110,
        "spider_question_id": 1849,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "question": "What is the name of the wrestler with the fewest days held?",
        "query": "db.wrestler.find({}, {Name: 1}).sort({Days_held: 1}).limit(1)",
        "gpt4 answer": "db.wrestler.find({}, { Name: 1 }).sort({ Days_held: 1 }).limit(1)",
        "deepseek answer": "db.wrestler.find({}, {Name: 1}).sort({Days_held: 1}).limit(1)"
    },
    {
        "question_id": 1111,
        "spider_question_id": 1850,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "query": "db.wrestler.find({}, {Name: 1}).sort({Days_held: 1}).limit(1)",
        "gpt4 answer": "db.wrestler.find({}, {Name: 1}).sort({Days_held: 1}).limit(1)",
        "deepseek answer": "db.wrestler.find({}, {Name: 1}).sort({Days_held: 1}).limit(1)"
    },
    {
        "question_id": 1112,
        "spider_question_id": 1853,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , LOCATION FROM wrestler",
        "question": "What are the names and location of the wrestlers?",
        "query": "db.wrestler.find({}, {Name: 1, Location: 1})",
        "gpt4 answer": "db.wrestler.find({}, { Name: 1, Location: 1 })",
        "deepseek answer": "db.wrestler.find({}, {Name: 1, Location: 1})"
    },
    {
        "question_id": 1113,
        "spider_question_id": 1854,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , LOCATION FROM wrestler",
        "question": "Give the names and locations of all wrestlers.",
        "query": "db.wrestler.find({}, {Name: 1, Location: 1})",
        "gpt4 answer": "db.wrestler.find({}, { Name: 1, Location: 1 })",
        "deepseek answer": "db.wrestler.find({}, {Name: 1, Location: 1})"
    },
    {
        "question_id": 1114,
        "spider_question_id": 1855,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Elimination_Move FROM Elimination WHERE Team = 'Team Orton'",
        "question": "What are the elimination moves of wrestlers whose team is 'Team Orton'?",
        "query": "db.Elimination.find({Team: 'Team Orton'}, {Elimination_Move: 1})",
        "gpt4 answer": "db.Elimination.find({ Team: 'Team Orton' }, { Elimination_Move: 1 })",
        "deepseek answer": "db.Elimination.find({Team: 'Team Orton'}, {Elimination_Move: 1})"
    },
    {
        "question_id": 1115,
        "spider_question_id": 1856,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Elimination_Move FROM Elimination WHERE Team = 'Team Orton'",
        "question": "Return the elimination movies of wrestlers on Team Orton.",
        "query": "db.Elimination.find({Team: 'Team Orton'}, {Elimination_Move: 1})",
        "gpt4 answer": "db.Elimination.find({ Team: 'Team Orton' }, { Elimination_Move: 1 })",
        "deepseek answer": "db.Elimination.find({Team: 'Team Orton'}, {Elimination_Move: 1})"
    },
    {
        "question_id": 1116,
        "spider_question_id": 1866,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team , COUNT(*) FROM elimination GROUP BY Team",
        "question": "How many eliminations did each team have?",
        "query": "db.Elimination.aggregate([ { $group: { _id: \"$Team\", NumberOfEliminations: { $sum: 1 } }} ])",
        "gpt4 answer": "db.Elimination.aggregate([ { $group: { _id: \"$Team\", NumberOfEliminations: { $sum: 1 } }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1117,
        "spider_question_id": 1867,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3",
        "question": "Show teams that have suffered more than three eliminations.",
        "query": "db.Elimination.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { Team: \"$_id\" } } ])",
        "gpt4 answer": "db.Elimination.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { Team: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1118,
        "spider_question_id": 1869,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Reign , Days_held FROM wrestler",
        "question": "Show the reign and days held of wrestlers.",
        "query": "db.wrestler.find({}, {Reign: 1, Days_held: 1})",
        "gpt4 answer": "db.wrestler.find({}, {Reign: 1, Days_held: 1})",
        "deepseek answer": "db.wrestler.find({}, {Reign: 1, Days_held: 1})"
    },
    {
        "question_id": 1119,
        "spider_question_id": 1870,
        "db_id": "wrestler",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Reign , Days_held FROM wrestler",
        "question": "What are the reigns and days held of all wrestlers?",
        "query": "db.wrestler.find({}, {Reign: 1, Days_held: 1})",
        "gpt4 answer": "db.wrestler.find({}, { Reign: 1, Days_held: 1 })",
        "deepseek answer": "db.wrestler.find({}, {Reign: 1, Days_held: 1})"
    },
    {
        "question_id": 1120,
        "spider_question_id": 1873,
        "db_id": "wrestler",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common reigns of wrestlers.",
        "query": "db.wrestler.aggregate([ { $group: { _id: \"$Reign\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { reign: \"$_id\" } } ])",
        "gpt4 answer": "db.wrestler.aggregate([ { $group: { _id: \"$Reign\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Reign: \"$_id\" } } ])",
        "deepseek answer": "db.wrestler.aggregate([ { $group: { _id: \"$Reign\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { reign: \"$_id\" } } ])"
    },
    {
        "question_id": 1121,
        "spider_question_id": 1874,
        "db_id": "wrestler",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which reign is the most common among wrestlers?",
        "query": "db.wrestler.aggregate([ { $group: { _id: \"$Reign\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Reign: \"$_id\" } } ])",
        "gpt4 answer": "db.wrestler.aggregate([ { $group: { _id: \"$Reign\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Reign: \"$_id\" } } ])",
        "deepseek answer": "db.wrestler.aggregate([ { $group: { _id: \"$Reign\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Reign: \"$_id\" } } ])"
    },
    {
        "question_id": 1122,
        "spider_question_id": 1875,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2",
        "question": "List the locations that are shared by more than two wrestlers.",
        "query": "db.wrestler.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.wrestler.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "deepseek answer": "db.wrestler.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 1123,
        "spider_question_id": 1876,
        "db_id": "wrestler",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2",
        "question": "Which locations are shared by more than two wrestlers?",
        "query": "db.wrestler.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.wrestler.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "deepseek answer": "db.wrestler.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 1124,
        "spider_question_id": 1879,
        "db_id": "wrestler",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Team FROM Elimination WHERE Eliminated_By = 'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = 'Benjamin'",
        "question": "Show the teams that have both wrestlers eliminated by 'Orton' and wrestlers eliminated by 'Benjamin'.",
        "query": "db.Elimination.aggregate([ { $match: { $or: [ { Eliminated_By: \"Orton\" }, { Eliminated_By: \"Benjamin\" } ] } }, { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Team: \"$_id\" } } ])",
        "gpt4 answer": "db.Elimination.aggregate([ { $match: { $or: [ { Eliminated_By: 'Orton' }, { Eliminated_By: 'Benjamin' } ] } }, { $group: { _id: \"$Team\", eliminatedBy: { $addToSet: \"$Eliminated_By\" } } }, { $match: { eliminatedBy: { $all: [\"Orton\", \"Benjamin\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Elimination.aggregate([ { $match: { $or: [ { Eliminated_By: \"Orton\" }, { Eliminated_By: \"Benjamin\" } ] } }, { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Team: \"$_id\" } } ])"
    },
    {
        "question_id": 1125,
        "spider_question_id": 1880,
        "db_id": "wrestler",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Team FROM Elimination WHERE Eliminated_By = 'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = 'Benjamin'",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "query": "db.Elimination.aggregate([ { $match: { $or: [ { Eliminated_By: \"Orton\" }, { Eliminated_By: \"Benjamin\" } ] } }, { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Team: \"$_id\" } } ])",
        "gpt4 answer": "db.Elimination.aggregate([ { $match: { $or: [ { Eliminated_By: 'Orton' }, { Eliminated_By: 'Benjamin' } ] } }, { $group: { _id: \"$Team\", eliminatedBy: { $addToSet: \"$Eliminated_By\" } } }, { $match: { eliminatedBy: { $all: [\"Orton\", \"Benjamin\"] } } }, { $project: { Team: \"$_id\" } } ])",
        "deepseek answer": "db.Elimination.aggregate([ { $match: { $or: [ { Eliminated_By: \"Orton\" }, { Eliminated_By: \"Benjamin\" } ] } }, { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Team: \"$_id\" } } ])"
    },
    {
        "question_id": 1126,
        "spider_question_id": 1887,
        "db_id": "school_finance",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT school_name FROM school ORDER BY school_name",
        "question": "Show all school names in alphabetical order.",
        "query": "db.School.find({}, {School_name: 1}).sort({School_name: 1})",
        "gpt4 answer": "db.School.find({}, {School_name: 1}).sort({School_name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1127,
        "spider_question_id": 1888,
        "db_id": "school_finance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT school_name , LOCATION , mascot FROM school",
        "question": "List the name, location, mascot for all schools.",
        "query": "db.School.find({}, {School_name: 1, Location: 1, Mascot: 1})",
        "gpt4 answer": "db.School.find({}, {School_name: 1, Location: 1, Mascot: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1128,
        "spider_question_id": 1889,
        "db_id": "school_finance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(enrollment) , avg(enrollment) FROM school",
        "question": "What are the total and average enrollment of all schools?",
        "query": "db.School.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { totalEnrollment: 1, averageEnrollment: 1 } } ])",
        "gpt4 answer": "db.School.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$Enrollment\" }, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { totalEnrollment: 1, averageEnrollment: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1129,
        "spider_question_id": 1891,
        "db_id": "school_finance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
        "question": "List the name of the school with the smallest enrollment.",
        "query": "db.School.find({}, {School_name: 1}).sort({Enrollment: 1}).limit(1)",
        "gpt4 answer": "db.School.find({}, { \"School_name\": 1, \"_id\": 0 }).sort({ \"Enrollment\": 1 }).limit(1)",
        "deepseek answer": "db.School.find({}, {School_name: 1}).sort({Enrollment: 1}).limit(1)"
    },
    {
        "question_id": 1130,
        "spider_question_id": 1892,
        "db_id": "school_finance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(enrollment) , max(enrollment) , min(enrollment) FROM school",
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "query": "db.School.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" }, maximumEnrollment: { $max: \"$Enrollment\" }, minimumEnrollment: { $min: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1, maximumEnrollment: 1, minimumEnrollment: 1 } } ])",
        "gpt4 answer": "db.School.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" }, maximumEnrollment: { $max: \"$Enrollment\" }, minimumEnrollment: { $min: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1, maximumEnrollment: 1, minimumEnrollment: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1131,
        "spider_question_id": 1893,
        "db_id": "school_finance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT county , count(*) , sum(enrollment) FROM school GROUP BY county",
        "question": "Show each county along with the number of schools and total enrollment in each county.",
        "query": "db.School.aggregate([ { $group: { _id: \"$County\", numberOfSchools: { $sum: 1 }, totalEnrollment: { $sum: \"$Enrollment\" } } }, { $project: { county: \"$_id\", numberOfSchools: 1, totalEnrollment: 1 } } ])",
        "gpt4 answer": "db.School.aggregate([ { $group: { _id: \"$County\", numberOfSchools: { $sum: 1 }, totalEnrollment: { $sum: \"$Enrollment\" } } }, { $project: { county: \"$_id\", numberOfSchools: 1, totalEnrollment: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1132,
        "spider_question_id": 1895,
        "db_id": "school_finance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "query": "db.endowment.aggregate([ { $group: { _id: \"$donator_name\", totalAmount: { $sum: \"$amount\" } } }, { $sort: { totalAmount: -1 } } ])",
        "gpt4 answer": "db.endowment.aggregate([ { $group: { _id: \"$donator_name\", total_amount: { $sum: \"$amount\" } } }, { $sort: { total_amount: -1 } }, { $project: { donator_name: \"$_id\", amount: \"$total_amount\" } } ])",
        "deepseek answer": "db.endowment.aggregate([ { $group: { _id: \"$donator_name\", totalAmount: { $sum: \"$amount\" } } }, { $sort: { totalAmount: -1 } } ])"
    },
    {
        "question_id": 1133,
        "spider_question_id": 1899,
        "db_id": "school_finance",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "query": "db.endowment.aggregate([ { $group: { _id: \"$donator_name\", minAmount: { $min: \"$amount\" } } }, { $match: { minAmount: { $gte: 9 } } }, { $project: { donator_name: \"$_id\" } } ])",
        "gpt4 answer": "db.endowment.aggregate([ { $group: { _id: \"$donator_name\", minAmount: { $min: \"$amount\" } } }, { $match: { minAmount: { $gte: 9 } } }, { $project: { donator_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1134,
        "spider_question_id": 1900,
        "db_id": "school_finance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT amount , donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "db.endowment.find({}, {amount: 1, donator_name: 1}).sort({amount: -1}).limit(1)",
        "gpt4 answer": "db.endowment.find({}, {amount: 1, donator_name: 1}).sort({amount: -1}).limit(1)",
        "deepseek answer": "db.endowment.find({}, {amount: 1, donator_name: 1}).sort({amount: -1}).limit(1)"
    },
    {
        "question_id": 1135,
        "spider_question_id": 1912,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , street_address , floors FROM building ORDER BY floors",
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "query": "db.building.find({}, { Name: 1, Street_address: 1, Floors: 1}).sort({Floors: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.building.find({}, { Name: 1, Street_address: 1, Floors: 1}).sort({Floors: 1})"
    },
    {
        "question_id": 1136,
        "spider_question_id": 1913,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
        "question": "What is the name of the tallest building?",
        "query": "db.building.find({}, { Name: 1}).sort({Height_feet: -1}).limit(1)",
        "gpt4 answer": "db.building.find({}, {Name: 1}).sort({Height_feet: -1}).limit(1)",
        "deepseek answer": "db.building.find({}, { Name: 1}).sort({Height_feet: -1}).limit(1)"
    },
    {
        "question_id": 1137,
        "spider_question_id": 1914,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(floors) , max(floors) , min(floors) FROM building",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "query": "db.building.aggregate([ { $group: { _id: null, averageFloors: { $avg: \"$Floors\" }, maxFloors: { $max: \"$Floors\" }, minFloors: { $min: \"$Floors\" } } } , { $project: { averageFloors: 1, maxFloors:1, minFloors:1 } }])",
        "gpt4 answer": "db.building.aggregate([ { $group: { _id: null, averageFloors: { $avg: \"$Floors\" }, maximumFloors: { $max: \"$Floors\" }, minimumFloors: { $min: \"$Floors\" } } }, { $project: { averageFloors: 1, maximumFloors: 1, minimumFloors: 1 } } ])",
        "deepseek answer": "db.building.aggregate([ { $group: { _id: null, averageFloors: { $avg: \"$Floors\" }, maxFloors: { $max: \"$Floors\" }, minFloors: { $min: \"$Floors\" } } } , { $project: { averageFloors: 1, maxFloors:1, minFloors:1 } }])"
    },
    {
        "question_id": 1138,
        "spider_question_id": 1915,
        "db_id": "protein_institute",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM building WHERE height_feet > (SELECT avg(height_feet) FROM building) OR floors > (SELECT avg(floors) FROM building)",
        "question": "Show the number of buildings with a height above the average or a number of floors above the average.",
        "query": "db.building.aggregate([ { $group: { _id: null, avgHeight: { $avg: \"$Height_feet\" }, avgFloors: { $avg: \"$Floors\" } } }, { $project: { avgHeight: 1, avgFloors: 1 } }, { $lookup: { from: \"building\", let: { avgHeight: \"$avgHeight\", avgFloors: \"$avgFloors\" }, pipeline: [ { $match: { $expr: { $or: [ { $gt: [\"$Height_feet\", \"$$avgHeight\"] }, { $gt: [\"$Floors\", \"$$avgFloors\"] } ] } } } ], as: \"buildings\" } }, { $project: { count: { $size: \"$buildings\" } } } ])",
        "gpt4 answer": "db.building.aggregate([ { $facet: { \"avgHeight\": [{ $group: { _id: null, avgHeight: { $avg: \"$Height_feet\" } } }], \"avgFloors\": [{ $group: { _id: null, avgFloors: { $avg: \"$Floors\" } } }] } }, { $unwind: \"$avgHeight\" }, { $unwind: \"$avgFloors\" }, { $lookup: { from: \"building\", let: { avgHeight: \"$avgHeight.avgHeight\", avgFloors: \"$avgFloors.avgFloors\" }, pipeline: [ { $match: { $expr: { $or: [ { $gt: [\"$Height_feet\", \"$$avgHeight\"] }, { $gt: [\"$Floors\", \"$$avgFloors\"] } ] } } }, { $count: \"count\" } ], as: \"buildings_above_avg\" } }, { $unwind: \"$buildings_above_avg\" }, { $replaceRoot: { newRoot: \"$buildings_above_avg\" } } ])",
        "deepseek answer": "db.building.aggregate([ { $group: { _id: null, avgHeight: { $avg: \"$Height_feet\" }, avgFloors: { $avg: \"$Floors\" } } }, { $project: { avgHeight: 1, avgFloors: 1 } }, { $lookup: { from: \"building\", let: { avgHeight: \"$avgHeight\", avgFloors: \"$avgFloors\" }, pipeline: [ { $match: { $expr: { $or: [ { $gt: [\"$Height_feet\", \"$$avgHeight\"] }, { $gt: [\"$Floors\", \"$$avgFloors\"] } ] } } } ], as: \"buildings\" } }, { $project: { count: { $size: \"$buildings\" } } } ])"
    },
    {
        "question_id": 1139,
        "spider_question_id": 1916,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "query": "db.building.find( { \"Height_feet\": {$gte: 200}, \"Floors\": {$gte: 20} }, { \"Name\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.building.find({ Height_feet: { $gte: 200 }, Floors: { $gte: 20 } }, { Name: 1 })",
        "deepseek answer": "db.building.find( { \"Height_feet\": {$gte: 200}, \"Floors\": {$gte: 20} }, { \"Name\": 1, \"_id\": 0 } )"
    },
    {
        "question_id": 1140,
        "spider_question_id": 1917,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT institution , LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type 'Private'.",
        "query": "db.Institution.find( { Founded: { $gt: 1990 }, Type: 'Private' }, { Institution: 1, Location: 1 } )",
        "gpt4 answer": "db.Institution.find( { Founded: { $gt: 1990 }, Type: 'Private' }, { Institution: 1, Location: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1141,
        "spider_question_id": 1918,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , count(*) , sum(enrollment) FROM institution GROUP BY TYPE",
        "question": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "query": "db.Institution.aggregate([ { $group: { _id: \"$Type\", NumberOfInstitutions: { $sum: 1 }, TotalEnrollment: { $sum: \"$Enrollment\" } } }, { $project: { InstitutionType: \"$_id\", NumberOfInstitutions: 1, TotalEnrollment: 1 } } ])",
        "gpt4 answer": "db.Institution.aggregate([ { $group: { _id: \"$Type\", NumberOfInstitutions: { $sum: 1 }, TotalEnrollment: { $sum: \"$Enrollment\" } } }, { $project: { InstitutionType: \"$_id\", NumberOfInstitutions: 1, TotalEnrollment: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1142,
        "spider_question_id": 1920,
        "db_id": "protein_institute",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "query": "db.Institution.find( { $and: [ { Founded: { $gt: 1990 } }, { Enrollment: { $gte: 1000 } } ] }, { Type: 1 } )",
        "gpt4 answer": "db.Institution.find( { $and: [ { Founded: { $gt: 1990 } }, { Enrollment: { $gte: 1000 } } ] }, { Type: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1143,
        "spider_question_id": 1930,
        "db_id": "protein_institute",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
        "question": "How many institutions do not have an associated protein in our record?",
        "query": "db.Institution.aggregate([ { $lookup: { from: \"protein\", localField: \"Institution_id\", foreignField: \"Institution_id\", as: \"protein_data\" } }, { $match: { \"protein_data\": { $size: 0 } } }, { $count: \"no_protein_institutions\" } ])",
        "gpt4 answer": "db.Institution.aggregate([ { $lookup: { from: \"protein\", localField: \"Institution_id\", foreignField: \"Institution_id\", as: \"protein_data\" } }, { $match: { \"protein_data\": { $size: 0 } } }, { $count: \"no_protein_institutions\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1144,
        "spider_question_id": 1931,
        "db_id": "cinema",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
        "question": "Show all the locations where no cinema has capacity over 800.",
        "query": "db.cinema.aggregate([ { $group: { _id: \"$Location\", maxCapacity: { $max: \"$Capacity\" } } }, { $match: { maxCapacity: { $lte: 800 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.cinema.aggregate([ { $group: { _id: \"$Location\", maxCapacity: { $max: \"$Capacity\" } } }, { $match: { maxCapacity: { $lte: 800 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1145,
        "spider_question_id": 1932,
        "db_id": "cinema",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "query": "db.cinema.aggregate([ { $match: { Openning_year: { $in: [2010, 2011] } } }, { $group: { _id: \"$Location\", openingYears: { $addToSet: \"$Openning_year\" } } }, { $match: { openingYears: { $all: [2010, 2011] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.cinema.aggregate([ { $match: { Openning_year: { $in: [2010, 2011] } } }, { $group: { _id: \"$Location\", openingYears: { $addToSet: \"$Openning_year\" } } }, { $match: { openingYears: { $all: [2010, 2011] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1146,
        "spider_question_id": 1935,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , openning_year , capacity FROM cinema",
        "question": "Show name, opening year, and capacity for each cinema.",
        "query": "db.cinema.find({}, { Name: 1, Openning_year: 1, Capacity: 1 })",
        "gpt4 answer": "db.cinema.find({}, { Name: 1, Openning_year: 1, Capacity: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1147,
        "spider_question_id": 1936,
        "db_id": "cinema",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , LOCATION FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "query": "db.cinema.aggregate([ { $group: { _id: null, avgCapacity: { $avg: \"$Capacity\" } } }, { $lookup: { from: \"cinema\", let: { averageCapacity: \"$avgCapacity\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Capacity\", \"$$averageCapacity\" ] } } }, { $project: { Name: 1, Location: 1 } } ], as: \"cinemasWithMoreCapacity\" } }, { $unwind: \"$cinemasWithMoreCapacity\" }, { $replaceRoot: { newRoot: \"$cinemasWithMoreCapacity\" } } ])",
        "gpt4 answer": "db.cinema.aggregate([ { $group: { _id: null, avgCapacity: { $avg: \"$Capacity\" } } }, { $lookup: { from: \"cinema\", let: { averageCapacity: \"$avgCapacity\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Capacity\", \"$$averageCapacity\" ] } } }, { $project: { Name: 1, Location: 1 } } ], as: \"cinemasWithMoreCapacity\" } }, { $unwind: \"$cinemasWithMoreCapacity\" }, { $replaceRoot: { newRoot: \"$cinemasWithMoreCapacity\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1148,
        "spider_question_id": 1939,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , openning_year FROM cinema ORDER BY openning_year DESC",
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "query": "db.cinema.find({}, { Name: 1, Openning_year: 1}).sort({Openning_year: -1})",
        "gpt4 answer": "db.cinema.find({}, { Name: 1, Openning_year: 1 }).sort({ Openning_year: -1 })",
        "deepseek answer": "db.cinema.find({}, { Name: 1, Openning_year: 1}).sort({Openning_year: -1})"
    },
    {
        "question_id": 1149,
        "spider_question_id": 1940,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "question": "What are the name and location of the cinema with the largest capacity?",
        "query": "db.cinema.find({}, { Name: 1, Location: 1}).sort({Capacity: -1}).limit(1)",
        "gpt4 answer": "db.cinema.find({}, { Name: 1, Location: 1 }).sort({ Capacity: -1 }).limit(1)",
        "deepseek answer": "db.cinema.find({}, { Name: 1, Location: 1}).sort({Capacity: -1}).limit(1)"
    },
    {
        "question_id": 1150,
        "spider_question_id": 1941,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(capacity) , min(capacity) , max(capacity) FROM cinema WHERE openning_year >= 2011",
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "query": "db.cinema.aggregate([ { $match: { Openning_year: { $gte: 2011 } } }, { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" }, minimumCapacity: { $min: \"$Capacity\" }, maximumCapacity: { $max: \"$Capacity\" } } }, { $project: { avgCapacity: \"$averageCapacity\", minCapacity: \"$minimumCapacity\", maxCapacity: \"$maximumCapacity\" } } ])",
        "gpt4 answer": "db.cinema.aggregate([ { $match: { Openning_year: { $gte: 2011 } } }, { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" }, minimumCapacity: { $min: \"$Capacity\" }, maximumCapacity: { $max: \"$Capacity\" } } }, { $project: { avgCapacity: \"$averageCapacity\", minCapacity: \"$minimumCapacity\", maxCapacity: \"$maximumCapacity\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1151,
        "spider_question_id": 1942,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION , count(*) FROM cinema GROUP BY LOCATION",
        "question": "Show each location and the number of cinemas there.",
        "query": "db.cinema.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $project: { Location: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.cinema.aggregate([ { $group: { _id: \"$Location\", numberOfCinemas: { $sum: 1 } } }, { $project: { Location: \"$_id\", numberOfCinemas: 1 } } ])",
        "deepseek answer": "db.cinema.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $project: { Location: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1152,
        "spider_question_id": 1944,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) >= 2",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "query": "db.cinema.aggregate([ { $match: { Capacity: { $gt: 300 } } }, { $group: { _id: \"$Location\", numOfCinemas: { $sum: 1 } } }, { $match: { numOfCinemas: { $gte: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.cinema.aggregate([ { $match: { Capacity: { $gt: 300 } } }, { $group: { _id: \"$Location\", numOfCinemas: { $sum: 1 } } }, { $match: { numOfCinemas: { $gte: 2 } } }, { $project: { Location: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1153,
        "spider_question_id": 1950,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT directed_by , count(*) FROM film GROUP BY directed_by",
        "question": "List all directors along with the number of films directed by each director.",
        "query": "db.film.aggregate([ { $group: { _id: \"$Directed_by\", count: { $sum: 1 } } }, { $project: { Director: \"$_id\", Number_of_films: \"$count\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Directed_by\", numberOfFilms: { $sum: 1 } } }, { $project: { directed_by: \"$_id\", count: \"$numberOfFilms\" } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Directed_by\", count: { $sum: 1 } } }, { $project: { Director: \"$_id\", Number_of_films: \"$count\" } } ])"
    },
    {
        "question_id": 1154,
        "spider_question_id": 1951,
        "db_id": "cinema",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
        "question": "What is total number of show times per dat for each cinema?",
        "query": "db.schedule.aggregate([ { $lookup: { from: \"cinema\", localField: \"Cinema_ID\", foreignField: \"Cinema_ID\", as: \"cinema_info\" } }, { $unwind: \"$cinema_info\" }, { $group: { _id: \"$cinema_info.Name\", totalShowTimes: { $sum: \"$Show_times_per_day\" } } }, { $project: { name: \"$_id\", totalShowTimes: 1 } } ])",
        "gpt4 answer": "db.schedule.aggregate([ { $group: { _id: \"$Cinema_ID\", totalShowTimesPerDay: { $sum: \"$Show_times_per_day\" } } }, { $lookup: { from: \"cinema\", localField: \"_id\", foreignField: \"Cinema_ID\", as: \"cinemaDetails\" } }, { $unwind: \"$cinemaDetails\" }, { $project: { Name: \"$cinemaDetails.Name\", totalShowTimesPerDay: 1 } } ])",
        "deepseek answer": "db.schedule.aggregate([ { $lookup: { from: \"cinema\", localField: \"Cinema_ID\", foreignField: \"Cinema_ID\", as: \"cinema_info\" } }, { $unwind: \"$cinema_info\" }, { $group: { _id: \"$cinema_info.Name\", totalShowTimes: { $sum: \"$Show_times_per_day\" } } }, { $project: { name: \"$_id\", totalShowTimes: 1 } } ])"
    },
    {
        "question_id": 1155,
        "spider_question_id": 1956,
        "db_id": "cinema",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "question": "Show director with the largest number of show times in total.",
        "query": "db.schedule.aggregate([ { $lookup: { from: \"film\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"film_info\" } }, { $unwind: \"$film_info\" }, { $group: { _id: \"$film_info.Directed_by\", totalShowTimes: { $sum: \"$Show_times_per_day\" } } }, { $sort: { totalShowTimes: -1 } }, { $limit: 1 }, { $project: { Director: \"$_id\" } } ])",
        "gpt4 answer": "db.schedule.aggregate([ { $lookup: { from: \"film\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"film_info\" } }, { $unwind: \"$film_info\" }, { $group: { _id: \"$film_info.Directed_by\", totalShowTimes: { $sum: \"$Show_times_per_day\" } } }, { $sort: { totalShowTimes: -1 } }, { $limit: 1 }, { $project: { directed_by: \"$_id\" } } ])",
        "deepseek answer": "db.schedule.aggregate([ { $lookup: { from: \"film\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"film_info\" } }, { $unwind: \"$film_info\" }, { $group: { _id: \"$film_info.Directed_by\", totalShowTimes: { $sum: \"$Show_times_per_day\" } } }, { $sort: { totalShowTimes: -1 } }, { $limit: 1 }, { $project: { Director: \"$_id\" } } ])"
    },
    {
        "question_id": 1156,
        "spider_question_id": 1961,
        "db_id": "products_for_hire",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Discount_Coupons\", localField: \"coupon_id\", foreignField: \"coupon_id\", as: \"coupon_info\" } }, { $match: { \"coupon_info.coupon_amount\": 500 } }, { $project: { good_or_bad_customer: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Discount_Coupons\", localField: \"coupon_id\", foreignField: \"coupon_id\", as: \"coupon_info\" } }, { $match: { \"coupon_info.coupon_amount\": 500 } }, { $project: { good_or_bad_customer: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Discount_Coupons\", localField: \"coupon_id\", foreignField: \"coupon_id\", as: \"coupon_info\" } }, { $match: { \"coupon_info.coupon_amount\": 500 } }, { $project: { good_or_bad_customer: 1 } } ])"
    },
    {
        "question_id": 1157,
        "spider_question_id": 1963,
        "db_id": "products_for_hire",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_id , sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "question": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "query": "db.Payments.aggregate([ { $group: { _id: \"$customer_id\", totalAmountPaid: { $sum: \"$amount_paid\" } } }, { $sort: { totalAmountPaid: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", totalAmountPaid: 1 } } ])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: \"$customer_id\", totalAmountPaid: { $sum: \"$amount_paid\" } } }, { $sort: { totalAmountPaid: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", amount: \"$totalAmountPaid\" } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: \"$customer_id\", totalAmountPaid: { $sum: \"$amount_paid\" } } }, { $sort: { totalAmountPaid: -1 } }, { $limit: 1 }, { $project: { customer_id: \"$_id\", totalAmountPaid: 1 } } ])"
    },
    {
        "question_id": 1158,
        "spider_question_id": 1965,
        "db_id": "products_for_hire",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*) = 3",
        "question": "What is the id of the product that is booked for 3 times?",
        "query": "db.Products_Booked.aggregate([ { $group: { _id: \"$product_id\", totalBooked: { $sum: 1 } } }, { $match: { totalBooked: 3 } }, { $project: { product_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Products_Booked.aggregate([ { $group: { _id: \"$product_id\", totalBooked: { $sum: 1 } } }, { $match: { totalBooked: 3 } }, { $project: { product_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1159,
        "spider_question_id": 1966,
        "db_id": "products_for_hire",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "query": "db.Products_Booked.aggregate([ { $match: { booked_amount: 102.76 } }, { $lookup: { from: \"Products_for_Hire\", localField: \"product_id\", foreignField: \"product_id\", as: \"product\" } }, { $unwind: \"$product\" }, { $project: { product_description: \"$product.product_description\" } } ])",
        "gpt4 answer": "db.Products_Booked.aggregate([ { $match: { booked_amount: 102.76 } }, { $lookup: { from: \"Products_for_Hire\", localField: \"product_id\", foreignField: \"product_id\", as: \"product\" } }, { $unwind: \"$product\" }, { $project: { product_description: \"$product.product_description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1160,
        "spider_question_id": 1970,
        "db_id": "products_for_hire",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name , gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "query": "db.Customers.find( { good_or_bad_customer: 'good' }, { first_name: 1, last_name: 1, gender_mf: 1 } ).sort({ last_name: 1 })",
        "gpt4 answer": "db.Customers.find( { good_or_bad_customer: 'good' }, { first_name: 1, last_name: 1, gender_mf: 1 } ).sort({ last_name: 1 })",
        "deepseek answer": "db.Customers.find( { good_or_bad_customer: 'good' }, { first_name: 1, last_name: 1, gender_mf: 1 } ).sort({ last_name: 1 })"
    },
    {
        "question_id": 1161,
        "spider_question_id": 1971,
        "db_id": "products_for_hire",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(amount_due) FROM payments",
        "question": "What is the average amount due for all the payments?",
        "query": "db.Payments.aggregate([ { $group: { _id: null, averageAmountDue: { $avg: \"$amount_due\" } } }, { $project: { averageAmountDue: 1 } } ])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: null, averageAmountDue: { $avg: \"$amount_due\" } } }, { $project: { averageAmountDue: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1162,
        "spider_question_id": 1972,
        "db_id": "products_for_hire",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(booked_count) , min(booked_count) , avg(booked_count) FROM products_booked",
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "query": "db.Products_Booked.aggregate([ { $group: { _id: null, max_booked_count: { $max: \"$booked_count\" }, min_booked_count: { $min: \"$booked_count\" }, avg_booked_count: { $avg: \"$booked_count\" } } } , { $project: { max_booked_count: 1, min_booked_count:1, avg_booked_count:1 } }])",
        "gpt4 answer": "db.Products_Booked.aggregate([ { $group: { _id: null, max_booked_count: { $max: \"$booked_count\" }, min_booked_count: { $min: \"$booked_count\" }, avg_booked_count: { $avg: \"$booked_count\" } } }, { $project: { max_booked_count: 1, min_booked_count: 1, avg_booked_count: 1 } } ])",
        "deepseek answer": "db.Products_Booked.aggregate([ { $group: { _id: null, max_booked_count: { $max: \"$booked_count\" }, min_booked_count: { $min: \"$booked_count\" }, avg_booked_count: { $avg: \"$booked_count\" } } } , { $project: { max_booked_count: 1, min_booked_count:1, avg_booked_count:1 } }])"
    },
    {
        "question_id": 1163,
        "spider_question_id": 1974,
        "db_id": "products_for_hire",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "query": "db.Products_for_Hire.find( { product_name: { $regex: /Book/ } }, { daily_hire_cost: 1 } )",
        "gpt4 answer": "db.Products_for_Hire.find({ product_name: /Book/ }, { daily_hire_cost: 1 })",
        "deepseek answer": "db.Products_for_Hire.find( { product_name: { $regex: /Book/ } }, { daily_hire_cost: 1 } )"
    },
    {
        "question_id": 1164,
        "spider_question_id": 1975,
        "db_id": "products_for_hire",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount > 200 )",
        "question": "How many products are never booked with amount higher than 200?",
        "query": "db.Products_for_Hire.aggregate([ { $lookup: { from: \"Products_Booked\", localField: \"product_id\", foreignField: \"product_id\", as: \"bookings\" } }, { $match: { \"bookings\": { $not: { $elemMatch: { \"booked_amount\": { $gt: 200 } } } } } }, { $count: \"numProductsNeverBookedOver200\" } ])",
        "gpt4 answer": "db.Products_for_Hire.aggregate([ { $lookup: { from: \"Products_Booked\", localField: \"product_id\", foreignField: \"product_id\", as: \"bookings\" } }, { $match: { \"bookings\": { $not: { $elemMatch: { \"booked_amount\": { $gt: 200 } } } } } }, { $count: \"numProductsNeverBookedOver200\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1165,
        "spider_question_id": 1976,
        "db_id": "products_for_hire",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "query": "db.Discount_Coupons.aggregate([ { $lookup: { from: \"Customers\", localField: \"coupon_id\", foreignField: \"coupon_id\", as: \"coupon_holders\" } }, { $unwind: \"$coupon_holders\" }, { $match: { \"coupon_holders.good_or_bad_customer\": { $in: [\"good\", \"bad\"] } } }, { $group: { _id: \"$coupon_amount\", good_or_bad_customers: { $addToSet: \"$coupon_holders.good_or_bad_customer\" } } }, { $match: { good_or_bad_customers: { $all: [\"good\", \"bad\"] } } }, { $project: { coupon_amount: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Discount_Coupons.aggregate([ { $lookup: { from: \"Customers\", localField: \"coupon_id\", foreignField: \"coupon_id\", as: \"coupon_holders\" } }, { $unwind: \"$coupon_holders\" }, { $match: { \"coupon_holders.good_or_bad_customer\": { $in: [\"good\", \"bad\"] } } }, { $group: { _id: \"$coupon_amount\", good_or_bad_customers: { $addToSet: \"$coupon_holders.good_or_bad_customer\" } } }, { $match: { good_or_bad_customers: { $all: [\"good\", \"bad\"] } } }, { $project: { coupon_amount: \"$_id\" } } ])"
    },
    {
        "question_id": 1166,
        "spider_question_id": 1978,
        "db_id": "products_for_hire",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "query": "db.Products_for_Hire.find( { product_type_code: 'Cutlery', daily_hire_cost: { $lt: 20 } }, { product_name: 1, product_description: 1 } )",
        "gpt4 answer": "db.Products_for_Hire.find( { product_type_code: 'Cutlery', daily_hire_cost: { $lt: 20 } }, { product_name: 1, product_description: 1 } )",
        "deepseek answer": "db.Products_for_Hire.find( { product_type_code: 'Cutlery', daily_hire_cost: { $lt: 20 } }, { product_name: 1, product_description: 1 } )"
    },
    {
        "question_id": 1167,
        "spider_question_id": 1980,
        "db_id": "phone_market",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM phone ORDER BY Price ASC",
        "question": "List the names of phones in ascending order of price.",
        "query": "db.phone.find({}, { Name: 1 }).sort({ Price: 1 })",
        "gpt4 answer": "db.phone.find({}, { Name: 1 }).sort({ Price: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1168,
        "spider_question_id": 1981,
        "db_id": "phone_market",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Memory_in_G , Carrier FROM phone",
        "question": "What are the memories and carriers of phones?",
        "query": "db.phone.find({}, {Memory_in_G: 1, Carrier: 1})",
        "gpt4 answer": "db.phone.find({}, { Memory_in_G: 1, Carrier: 1 })",
        "deepseek answer": "db.phone.find({}, {Memory_in_G: 1, Carrier: 1})"
    },
    {
        "question_id": 1169,
        "spider_question_id": 1982,
        "db_id": "phone_market",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "query": "db.phone.aggregate([ { $match: { Memory_in_G: { $gt: 32 } } }, { $group: { _id: \"$Carrier\" } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $match: { Memory_in_G: { $gt: 32 } } }, { $group: { _id: \"$Carrier\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1170,
        "spider_question_id": 1983,
        "db_id": "phone_market",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM phone WHERE Carrier = 'Sprint' OR Carrier = 'TMobile'",
        "question": "Show the names of phones with carrier either 'Sprint' or 'TMobile'.",
        "query": "db.phone.find({Carrier: {$in: ['Sprint', 'TMobile']}}, {Name: 1})",
        "gpt4 answer": "db.phone.find({ Carrier: { $in: [\"Sprint\", \"TMobile\"] } }, { Name: 1 })",
        "deepseek answer": "db.phone.find({Carrier: {$in: ['Sprint', 'TMobile']}}, {Name: 1})"
    },
    {
        "question_id": 1171,
        "spider_question_id": 1984,
        "db_id": "phone_market",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "question": "What is the carrier of the most expensive phone?",
        "query": "db.phone.find({}, {Carrier: 1}).sort({Price: -1}).limit(1)",
        "gpt4 answer": "db.phone.find({}, { Carrier: 1 }).sort({ Price: -1 }).limit(1)",
        "deepseek answer": "db.phone.find({}, {Carrier: 1}).sort({Price: -1}).limit(1)"
    },
    {
        "question_id": 1172,
        "spider_question_id": 1985,
        "db_id": "phone_market",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Carrier\", count: { $sum: 1 } } }, { $project: { Carrier: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Carrier\", NumberOfPhones: { $sum: 1 } }} ])",
        "deepseek answer": "db.phone.aggregate([ { $group: { _id: \"$Carrier\", count: { $sum: 1 } } }, { $project: { Carrier: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1173,
        "spider_question_id": 1986,
        "db_id": "phone_market",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most frequently used carrier of the phones.",
        "query": "db.phone.aggregate([ { $group: { _id: \"$Carrier\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Carrier: \"$_id\" } } ])",
        "gpt4 answer": "db.phone.aggregate([ { $group: { _id: \"$Carrier\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.phone.aggregate([ { $group: { _id: \"$Carrier\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Carrier: \"$_id\" } } ])"
    },
    {
        "question_id": 1174,
        "spider_question_id": 1996,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company , rank FROM company ORDER BY Sales_billion DESC",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "query": "db.company.find({}, { Company: 1, Rank: 1 }).sort({ Sales_billion: -1 })",
        "gpt4 answer": "db.company.find({}, { Company: 1, Rank: 1 }).sort({ Sales_billion: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1175,
        "spider_question_id": 1997,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company , rank FROM company ORDER BY Sales_billion DESC",
        "question": "What is the name and rank of every company ordered by descending number of sales?",
        "query": "db.company.find({}, { Company: 1, Rank: 1 }).sort({ Sales_billion: -1 })",
        "gpt4 answer": "db.company.find({}, { Company: 1, Rank: 1 }).sort({ Sales_billion: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1176,
        "spider_question_id": 1998,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company , main_industry FROM company WHERE headquarters != 'USA'",
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "query": "db.company.find({ Headquarters: { $ne: \"USA\" } }, { Company: 1, Main_Industry: 1 })",
        "gpt4 answer": "db.company.find({ Headquarters: { $ne: \"USA\" } }, { Company: 1, Main_Industry: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1177,
        "spider_question_id": 2000,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
        "question": "Show all company names and headquarters in the descending order of market value.",
        "query": "db.company.find({}, {Company: 1, Headquarters: 1}).sort({Market_Value: -1})",
        "gpt4 answer": "db.company.find({}, {Company: 1, Headquarters: 1}).sort({Market_Value: -1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1178,
        "spider_question_id": 2001,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT company , headquarters FROM company ORDER BY market_value DESC",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "query": "db.company.find({}, { Company: 1, Headquarters: 1 }).sort({ Market_Value: -1 })",
        "gpt4 answer": "db.company.find({}, { Company: 1, Headquarters: 1 }).sort({ Market_Value: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1179,
        "spider_question_id": 2002,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "query": "db.company.aggregate([ { $group: { _id: null, minMarketValue: { $min: \"$Market_Value\" }, maxMarketValue: { $max: \"$Market_Value\" }, avgMarketValue: { $avg: \"$Market_Value\" } } }, { $project: { minMarketValue: 1, maxMarketValue: 1, avgMarketValue: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: null, minMarketValue: { $min: \"$Market_Value\" }, maxMarketValue: { $max: \"$Market_Value\" }, avgMarketValue: { $avg: \"$Market_Value\" } } }, { $project: { minMarketValue: 1, maxMarketValue: 1, avgMarketValue: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: null, minMarketValue: { $min: \"$Market_Value\" }, maxMarketValue: { $max: \"$Market_Value\" }, avgMarketValue: { $avg: \"$Market_Value\" } } }, { $project: { minMarketValue: 1, maxMarketValue: 1, avgMarketValue: 1 } } ])"
    },
    {
        "question_id": 1180,
        "spider_question_id": 2003,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(market_value) , max(market_value) , avg(market_value) FROM company",
        "question": "What is the minimum, maximum, and average market value for every company?",
        "query": "db.company.aggregate([ { $group: { _id: null, minMarketValue: { $min: \"$Market_Value\" }, maxMarketValue: { $max: \"$Market_Value\" }, avgMarketValue: { $avg: \"$Market_Value\" } } }, { $project: { minMarketValue: 1, maxMarketValue: 1, avgMarketValue: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: null, minMarketValue: { $min: \"$Market_Value\" }, maxMarketValue: { $max: \"$Market_Value\" }, avgMarketValue: { $avg: \"$Market_Value\" } } }, { $project: { minMarketValue: 1, maxMarketValue: 1, avgMarketValue: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1181,
        "spider_question_id": 2006,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
        "question": "List all headquarters and the number of companies in each headquarter.",
        "query": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $project: { headquarters: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $project: { headquarters: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1182,
        "spider_question_id": 2007,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT headquarters , count(*) FROM company GROUP BY headquarters",
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "query": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $project: { headquarters: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", total: { $sum: 1 } } }, { $project: { Headquarters: \"$_id\", NumberOfCompanies: \"$total\" } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $project: { headquarters: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1183,
        "spider_question_id": 2010,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT main_industry , count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "question": "List the main industry with highest total market value and its number of companies.",
        "query": "db.company.aggregate([ { $group: { _id: \"$Main_Industry\", totalMarketValue: { $sum: \"$Market_Value\" }, count: { $sum: 1 } } }, { $sort: { totalMarketValue: -1 } }, { $limit: 1 } , { $project: { Main_Industry: \"$_id\" , count:1 } }])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Main_Industry\", totalMarketValue: { $sum: \"$Market_Value\" }, numberOfCompanies: { $sum: 1 } } }, { $sort: { totalMarketValue: -1 } }, { $limit: 1 }, { $project: { Main_Industry: \"$_id\", numberOfCompanies: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Main_Industry\", totalMarketValue: { $sum: \"$Market_Value\" }, count: { $sum: 1 } } }, { $sort: { totalMarketValue: -1 } }, { $limit: 1 } , { $project: { Main_Industry: \"$_id\" , count:1 } }])"
    },
    {
        "question_id": 1184,
        "spider_question_id": 2011,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT main_industry , count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?",
        "query": "db.company.aggregate([ { $group: { _id: \"$Main_Industry\", totalMarketValue: { $sum: \"$Market_Value\" }, companies: { $push: \"$Company_ID\" } } }, { $sort: { totalMarketValue: -1 } }, { $limit: 1 }, { $project: { mainIndustry: \"$_id\", totalCompanies: { $size: \"$companies\" } } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Main_Industry\", TotalMarketValue: { $sum: \"$Market_Value\" }, NumberOfCompanies: { $sum: 1 } } }, { $sort: { TotalMarketValue: -1 } }, { $limit: 1 }, { $project: { _id: 1, NumberOfCompanies: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Main_Industry\", totalMarketValue: { $sum: \"$Market_Value\" }, companies: { $push: \"$Company_ID\" } } }, { $sort: { totalMarketValue: -1 } }, { $limit: 1 }, { $project: { mainIndustry: \"$_id\", totalCompanies: { $size: \"$companies\" } } } ])"
    },
    {
        "question_id": 1185,
        "spider_question_id": 2014,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "query": "db.gas_station.find({}, { Station_ID: 1, Location: 1, Manager_Name: 1 }).sort({ Open_Year: 1 })",
        "gpt4 answer": "db.gas_station.find({}, { Station_ID: 1, Location: 1, Manager_Name: 1 }).sort({ Open_Year: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1186,
        "spider_question_id": 2015,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
        "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
        "query": "db.gas_station.find({}, { Station_ID: 1, Location: 1, Manager_Name: 1}).sort({Open_Year: 1})",
        "gpt4 answer": "db.gas_station.find({}, { Station_ID: 1, Location: 1, Manager_Name: 1}).sort({Open_Year: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1187,
        "spider_question_id": 2018,
        "db_id": "gas_company",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "query": "db.gas_station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Location: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.gas_station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Location: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.gas_station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $project: { Location: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1188,
        "spider_question_id": 2019,
        "db_id": "gas_company",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT LOCATION , count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "question": "For each location, how many gas stations are there in order?",
        "query": "db.gas_station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $project: { Location: \"$_id\", count: 1 } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.gas_station.aggregate([ { $group: { _id: \"$Location\", numberOfStations: { $sum: 1 } } }, { $sort: { numberOfStations: -1 } }, { $project: { Location: \"$_id\", numberOfStations: 1 } } ])",
        "deepseek answer": "db.gas_station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $project: { Location: \"$_id\", count: 1 } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 1189,
        "spider_question_id": 2020,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "query": "db.company.aggregate([ { $match: { $or: [ { Main_Industry: \"Banking\" }, { Main_Industry: \"Oil and gas\" } ] } }, { $group: { _id: \"$Headquarters\", industries: { $addToSet: \"$Main_Industry\" } } }, { $match: { industries: { $all: [\"Banking\", \"Oil and gas\"] } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.company.aggregate([ { $match: { $or: [ { Main_Industry: 'Banking' }, { Main_Industry: 'Oil and gas' } ] } }, { $group: { _id: \"$Headquarters\", industries: { $addToSet: \"$Main_Industry\" } } }, { $match: { industries: { $all: [\"Banking\", \"Oil and gas\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $match: { $or: [ { Main_Industry: \"Banking\" }, { Main_Industry: \"Oil and gas\" } ] } }, { $group: { _id: \"$Headquarters\", industries: { $addToSet: \"$Main_Industry\" } } }, { $match: { industries: { $all: [\"Banking\", \"Oil and gas\"] } } }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 1190,
        "spider_question_id": 2021,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "query": "db.company.aggregate([ { $match: { $or: [ { Main_Industry: 'Banking' }, { Main_Industry: 'Oil and gas' } ] } }, { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.company.aggregate([ { $match: { $or: [ { Main_Industry: 'Banking' }, { Main_Industry: 'Oil and gas' } ] } }, { $group: { _id: \"$Headquarters\", industries: { $addToSet: \"$Main_Industry\" } } }, { $match: { industries: { $all: [\"Banking\", \"Oil and gas\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $match: { $or: [ { Main_Industry: 'Banking' }, { Main_Industry: 'Oil and gas' } ] } }, { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 1191,
        "spider_question_id": 2024,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
        "question": "Show the company name with the number of gas station.",
        "query": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $group: { _id: \"$company_info.Company\", count: { $sum: 1 } } }, { $project: { company: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.station_company.aggregate([ { $group: { _id: \"$Company_ID\", NumberOfStations: { $sum: 1 } } }, { $lookup: { from: \"company\", localField: \"_id\", foreignField: \"Company_ID\", as: \"companyInfo\" } }, { $unwind: \"$companyInfo\" }, { $project: { Company: \"$companyInfo.Company\", NumberOfStations: 1 } } ])",
        "deepseek answer": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $group: { _id: \"$company_info.Company\", count: { $sum: 1 } } }, { $project: { company: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1192,
        "spider_question_id": 2025,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "query": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" }}, { $unwind: \"$company_info\" }, { $group: { _id: \"$Company_ID\", company: { $first: \"$company_info.Company\" }, numberOfStations: { $sum: 1 } }}, { $project: { company: 1, numberOfStations: 1 }} ])",
        "gpt4 answer": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" }}, { $unwind: \"$company_info\" }, { $group: { _id: \"$Company_ID\", company: { $first: \"$company_info.Company\" }, numberOfStations: { $sum: 1 } }}, { $project: { company: 1, numberOfStations: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1193,
        "spider_question_id": 2026,
        "db_id": "gas_company",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Show company name and main industry without a gas station.",
        "query": "db.company.aggregate([ { $lookup: { from: \"station_company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"station_info\" } }, { $match: { \"station_info\": { $size: 0 } } }, { $project: { Company: 1, Main_Industry: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $lookup: { from: \"station_company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"station_info\" } }, { $match: { \"station_info\": { $size: 0 } } }, { $project: { Company: 1, Main_Industry: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1194,
        "spider_question_id": 2027,
        "db_id": "gas_company",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT company , main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "query": "db.company.aggregate([ { $lookup: { from: 'station_company', localField: 'Company_ID', foreignField: 'Company_ID', as: 'station_info' } }, { $match: { 'station_info': { $size: 0 } } }, { $project: { Company: 1, Main_Industry: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $lookup: { from: 'station_company', localField: 'Company_ID', foreignField: 'Company_ID', as: 'station_info' } }, { $match: { 'station_info': { $size: 0 } } }, { $project: { Company: 1, Main_Industry: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1195,
        "spider_question_id": 2028,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'",
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "query": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$company_info\" }, { $unwind: \"$station_info\" }, { $match: { \"company_info.Company\": \"ExxonMobil\" } }, { $project: { Manager_Name: \"$station_info.Manager_Name\" } } ])",
        "gpt4 answer": "db.gas_station.aggregate([ { $lookup: { from: \"station_company\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_rel\" } }, { $unwind: \"$station_rel\" }, { $lookup: { from: \"company\", localField: \"station_rel.Company_ID\", foreignField: \"Company_ID\", as: \"company_rel\" } }, { $unwind: \"$company_rel\" }, { $match: { \"company_rel.Company\": \"ExxonMobil\" } }, { $project: { Manager_Name: \"$Manager_Name\" } } ])",
        "deepseek answer": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$company_info\" }, { $unwind: \"$station_info\" }, { $match: { \"company_info.Company\": \"ExxonMobil\" } }, { $project: { Manager_Name: \"$station_info.Manager_Name\" } } ])"
    },
    {
        "question_id": 1196,
        "spider_question_id": 2029,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'",
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "query": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$company_info\" }, { $unwind: \"$station_info\" }, { $match: { \"company_info.Company\": \"ExxonMobil\" } }, { $project: { Manager_Name: \"$station_info.Manager_Name\" } } ])",
        "gpt4 answer": "db.gas_station.aggregate([ { $lookup: { from: \"station_company\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $lookup: { from: \"company\", localField: \"station_info.Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $match: { \"company_info.Company\": \"ExxonMobil\" } }, { $project: { Manager_Name: 1 } } ])",
        "deepseek answer": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$company_info\" }, { $unwind: \"$station_info\" }, { $match: { \"company_info.Company\": \"ExxonMobil\" } }, { $project: { Manager_Name: \"$station_info.Manager_Name\" } } ])"
    },
    {
        "question_id": 1197,
        "spider_question_id": 2030,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "query": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$company_info\" }, { $unwind: \"$station_info\" }, { $match: { \"company_info.Market_Value\": { $gt: 100 } } }, { $project: { location: \"$station_info.Location\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$company_info\" }, { $unwind: \"$station_info\" }, { $match: { \"company_info.Market_Value\": { $gt: 100 } } }, { $project: { location: \"$station_info.Location\" } } ])"
    },
    {
        "question_id": 1198,
        "spider_question_id": 2031,
        "db_id": "gas_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100",
        "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
        "query": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_data\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_data\" } }, { $unwind: \"$company_data\" }, { $unwind: \"$station_data\" }, { $match: { \"company_data.Market_Value\": { $gt: 100 } } }, { $project: { location: \"$station_data.Location\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.station_company.aggregate([ { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_data\" } }, { $lookup: { from: \"gas_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_data\" } }, { $unwind: \"$company_data\" }, { $unwind: \"$station_data\" }, { $match: { \"company_data.Market_Value\": { $gt: 100 } } }, { $project: { location: \"$station_data.Location\" } } ])"
    },
    {
        "question_id": 1199,
        "spider_question_id": 2032,
        "db_id": "gas_company",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "query": "db.gas_station.aggregate([ { $match: { Open_Year: { $gt: 2000 } } }, { $group: { _id: \"$Manager_Name\", stationCount: { $sum: 1 } } }, { $sort: { stationCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.gas_station.aggregate([ { $match: { Open_Year: { $gt: 2000 } } }, { $group: { _id: \"$Manager_Name\", stationCount: { $sum: 1 } } }, { $sort: { stationCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1200,
        "spider_question_id": 2033,
        "db_id": "gas_company",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the manager with the most gas stations that opened after 2000?",
        "query": "db.gas_station.aggregate([ { $match: { Open_Year: { $gt: 2000 } } }, { $group: { _id: \"$Manager_Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Manager_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.gas_station.aggregate([ { $match: { Open_Year: { $gt: 2000 } } }, { $group: { _id: \"$Manager_Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Manager_Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1201,
        "spider_question_id": 2034,
        "db_id": "gas_company",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "question": "order all gas station locations by the opening year.",
        "query": "db.gas_station.aggregate([ { $sort: { Open_Year: 1 } }, { $project: { Location: 1 } } ])",
        "gpt4 answer": "db.gas_station.find({}, { Location: 1 }).sort({ Open_Year: 1 })",
        "deepseek answer": "db.gas_station.aggregate([ { $sort: { Open_Year: 1 } }, { $project: { Location: 1 } } ])"
    },
    {
        "question_id": 1202,
        "spider_question_id": 2035,
        "db_id": "gas_company",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "question": "What are the locations of all the gas stations ordered by opening year?",
        "query": "db.gas_station.find({}, { Location: 1}).sort({Open_Year: 1})",
        "gpt4 answer": "db.gas_station.find({}, { Location: 1 }).sort({ Open_Year: 1 })",
        "deepseek answer": "db.gas_station.find({}, { Location: 1}).sort({Open_Year: 1})"
    },
    {
        "question_id": 1203,
        "spider_question_id": 2036,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "query": "db.company.find( { Main_Industry: 'Banking' }, { Rank: 1, Company: 1, Market_Value: 1 } ).sort({ Sales_billion: 1, Profits_billion: 1 })",
        "gpt4 answer": "db.company.find( { Main_Industry: 'Banking' }, { Rank: 1, Company: 1, Market_Value: 1 } ).sort({ Sales_billion: 1, Profits_billion: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1204,
        "spider_question_id": 2037,
        "db_id": "gas_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rank , company , market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion , profits_billion",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "query": "db.company.find( { Main_Industry: 'Banking' }, { Rank: 1, Company: 1, Market_Value: 1 } ).sort({ Sales_billion: 1, Profits_billion: 1 })",
        "gpt4 answer": "db.company.find( { Main_Industry: 'Banking' }, { Rank: 1, Company: 1, Market_Value: 1 } ).sort({ Sales_billion: 1, Profits_billion: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1205,
        "spider_question_id": 2042,
        "db_id": "party_people",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label",
        "question": "Show all distinct region names ordered by their labels.",
        "query": "db.region.aggregate([ { $group: { _id: \"$Region_name\" }}, { $sort: { Label: 1 }}, { $project: { Region_name: \"$_id\" }} ])",
        "gpt4 answer": "db.region.aggregate([ { $group: { _id: \"$Region_name\" }}, { $sort: { Label: 1 }}, { $project: { Region_name: \"$_id\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1206,
        "spider_question_id": 2044,
        "db_id": "party_people",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT party_name) FROM party",
        "question": "How many parties do we have?",
        "query": "db.party.aggregate([ { $group: { _id: \"$Party_name\" } }, { $count: \"unique_parties\" } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Party_name\" } }, { $count: \"unique_parties\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1207,
        "spider_question_id": 2051,
        "db_id": "party_people",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
        "question": "Which ministers are not a part of the Progress Party?",
        "query": "db.party.find({ Party_name: { $ne: \"Progress Party\" } }, { Minister: 1 })",
        "gpt4 answer": "db.party.find({ Party_name: { $ne: \"Progress Party\" } }, { Minister: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1208,
        "spider_question_id": 2052,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT minister , party_name FROM party ORDER BY took_office DESC",
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "query": "db.party.aggregate([ { $sort: { Took_office: -1 } }, { $project: { Minister: 1, Party_name: 1 } } ])",
        "gpt4 answer": "db.party.aggregate([ { $sort: { Took_office: -1 } }, { $project: { Minister: 1, Party_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1209,
        "spider_question_id": 2053,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT minister , party_name FROM party ORDER BY took_office DESC",
        "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
        "query": "db.party.aggregate([ { $lookup: { from: \"member\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"members\" } }, { $sort: { \"Took_office\": -1 } }, { $project: { Minister: 1, Party_name: 1 } } ])",
        "gpt4 answer": "db.party.aggregate([ { $lookup: { from: \"member\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"members\" } }, { $sort: { \"Took_office\": -1 } }, { $project: { Minister: 1, Party_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1210,
        "spider_question_id": 2054,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "question": "Return the minister who left office at the latest time.",
        "query": "db.party.find({}, { \"Minister\": 1, \"_id\": 0 }).sort({ \"Left_office\": -1 }).limit(1)",
        "gpt4 answer": "db.party.find({}, { \"Minister\": 1, \"_id\": 0 }).sort({ \"Left_office\": -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1211,
        "spider_question_id": 2055,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "question": "Which minister left office the latest?",
        "query": "db.party.find({}, { Minister: 1 }).sort({ Left_office: -1 }).limit(1)",
        "gpt4 answer": "db.party.find({}, { Minister: 1 }).sort({ Left_office: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1212,
        "spider_question_id": 2062,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.party_name , T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id",
        "question": "Show all party names and their region names.",
        "query": "db.party.aggregate([ { $lookup: { from: \"region\", localField: \"Region_ID\", foreignField: \"Region_ID\", as: \"region_info\" } }, { $unwind: \"$region_info\" }, { $project: { party_name: \"$Party_name\", region_name: \"$region_info.Region_name\" } } ])",
        "gpt4 answer": "db.party.aggregate([ { $lookup: { from: \"region\", localField: \"Region_ID\", foreignField: \"Region_ID\", as: \"region_info\" } }, { $unwind: \"$region_info\" }, { $project: { party_name: \"$Party_name\", region_name: \"$region_info.Region_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1213,
        "spider_question_id": 2072,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
        "question": "Show party names and the number of events for each party.",
        "query": "db.party_events.aggregate([ { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"partyDetails\" } }, { $unwind: \"$partyDetails\" }, { $group: { _id: \"$Party_ID\", party_name: { $first: \"$partyDetails.Party_name\" }, numberOfEvents: { $sum: 1 } } }, { $project: { party_name: \"$party_name\", numberOfEvents: \"$numberOfEvents\" } } ])",
        "gpt4 answer": "db.party_events.aggregate([ { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"partyDetails\" } }, { $unwind: \"$partyDetails\" }, { $group: { _id: \"$Party_ID\", party_name: { $first: \"$partyDetails.Party_name\" }, numberOfEvents: { $sum: 1 } } }, { $project: { party_name: \"$party_name\", numberOfEvents: \"$numberOfEvents\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1214,
        "spider_question_id": 2073,
        "db_id": "party_people",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
        "question": "How many events are there for each party?",
        "query": "db.party_events.aggregate([ { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $group: { _id: \"$party_info.Party_name\", totalEvents: { $sum: 1 } } }, { $project: { Party_name: \"$_id\", EventCount: \"$totalEvents\" } } ])",
        "gpt4 answer": "db.party_events.aggregate([ { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $group: { _id: \"$party_info.Party_name\", totalEvents: { $sum: 1 } } }, { $project: { Party_name: \"$_id\", EventCount: \"$totalEvents\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1215,
        "spider_question_id": 2074,
        "db_id": "party_people",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id",
        "question": "Show all member names who are not in charge of any event.",
        "query": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { Member_Name: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events_in_charge\" } }, { $match: { \"events_in_charge\": { $size: 0 } } }, { $project: { Member_Name: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { Member_Name: 1 } } ])"
    },
    {
        "question_id": 1216,
        "spider_question_id": 2075,
        "db_id": "party_people",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id",
        "question": "What are the names of members who are not in charge of any events?",
        "query": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { Member_Name: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { Member_Name: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { Member_Name: 1 } } ])"
    },
    {
        "question_id": 1217,
        "spider_question_id": 2078,
        "db_id": "party_people",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of member in charge of greatest number of events?",
        "query": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $project: { Member_Name: 1 } }, { $sort: { eventCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $unwind: \"$events\" }, { $group: { _id: \"$Member_ID\", member_name: { $first: \"$Member_Name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { member_name: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $project: { Member_Name: 1 } }, { $sort: { eventCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1218,
        "spider_question_id": 2079,
        "db_id": "party_people",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the member who is in charge of the most events.",
        "query": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $project: { Member_Name: 1 } }, { $sort: { eventCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $project: { Member_Name: 1, numberOfEvents: { $size: \"$events\" } } }, { $sort: { numberOfEvents: -1 } }, { $limit: 1 }, { $project: { Member_Name: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"party_events\", localField: \"Member_ID\", foreignField: \"Member_in_charge_ID\", as: \"events\" } }, { $project: { Member_Name: 1 } }, { $sort: { eventCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1219,
        "spider_question_id": 2080,
        "db_id": "party_people",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*) > 2",
        "question": "find the event names that have more than 2 records.",
        "query": "db.party_events.aggregate([ { $group: { _id: \"$Event_Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Event_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.party_events.aggregate([ { $group: { _id: \"$Event_Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Event_Name: \"$_id\" } } ])",
        "deepseek answer": "db.party_events.aggregate([ { $group: { _id: \"$Event_Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Event_Name: \"$_id\" } } ])"
    },
    {
        "question_id": 1220,
        "spider_question_id": 2081,
        "db_id": "party_people",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*) > 2",
        "question": "Which event names were used more than twice for party events?",
        "query": "db.party_events.aggregate([ { $group: { _id: \"$Event_Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Event_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.party_events.aggregate([ { $group: { _id: \"$Event_Name\", count: { $sum: 1 } }}, { $match: { count: { $gt: 2 } }}, { $project: { Event_Name: \"$_id\" }} ])",
        "deepseek answer": "db.party_events.aggregate([ { $group: { _id: \"$Event_Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Event_Name: \"$_id\" } } ])"
    },
    {
        "question_id": 1221,
        "spider_question_id": 2085,
        "db_id": "pilot_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
        "question": "List the names of pilots in ascending order of rank.",
        "query": "db.pilot.aggregate([ { $sort: { Rank: 1 } }, { $project: { Pilot_name: 1 } } ])",
        "gpt4 answer": "db.pilot.find({}, {Pilot_name: 1}).sort({Rank: 1})",
        "deepseek answer": "db.pilot.aggregate([ { $sort: { Rank: 1 } }, { $project: { Pilot_name: 1 } } ])"
    },
    {
        "question_id": 1222,
        "spider_question_id": 2086,
        "db_id": "pilot_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT POSITION , Team FROM pilot",
        "question": "What are the positions and teams of pilots?",
        "query": "db.pilot.find({}, { Position: 1, Team: 1})",
        "gpt4 answer": "db.pilot.find({}, { Position: 1, Team: 1 })",
        "deepseek answer": "db.pilot.find({}, { Position: 1, Team: 1})"
    },
    {
        "question_id": 1223,
        "spider_question_id": 2088,
        "db_id": "pilot_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Pilot_name FROM pilot WHERE Team = 'Bradley' OR Team = 'Fordham'",
        "question": "Show the names of pilots from team 'Bradley' or 'Fordham'.",
        "query": "db.pilot.find({Team: {$in: ['Bradley', 'Fordham']}}, {Pilot_name: 1})",
        "gpt4 answer": "db.pilot.find({ $or: [{ Team: 'Bradley' }, { Team: 'Fordham' }] }, { Pilot_name: 1 })",
        "deepseek answer": "db.pilot.find({Team: {$in: ['Bradley', 'Fordham']}}, {Pilot_name: 1})"
    },
    {
        "question_id": 1224,
        "spider_question_id": 2089,
        "db_id": "pilot_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
        "question": "What is the joined year of the pilot of the highest rank?",
        "query": "db.pilot.find({}, {Join_Year: 1}).sort({Rank: 1}).limit(1)",
        "gpt4 answer": "db.pilot.find({}, {Join_Year: 1}).sort({Rank: 1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1225,
        "spider_question_id": 2090,
        "db_id": "pilot_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality",
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "query": "db.pilot.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.pilot.aggregate([ { $group: { _id: \"$Nationality\", NumberOfPilots: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", NumberOfPilots: 1 } } ])",
        "deepseek answer": "db.pilot.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1226,
        "spider_question_id": 2091,
        "db_id": "pilot_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality of pilots.",
        "query": "db.pilot.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])",
        "gpt4 answer": "db.pilot.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.pilot.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])"
    },
    {
        "question_id": 1227,
        "spider_question_id": 2092,
        "db_id": "pilot_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "query": "db.pilot.aggregate([ { $match: { $or: [ { Join_Year: { $lt: 2000 } }, { Join_Year: { $gt: 2005 } } ] } }, { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Position: \"$_id\" } } ])",
        "gpt4 answer": "db.pilot.aggregate([ { $facet: { before2000: [ { $match: { Join_Year: { $lt: 2000 } } }, { $group: { _id: \"$Position\" } } ], after2005: [ { $match: { Join_Year: { $gt: 2005 } } }, { $group: { _id: \"$Position\" } } ] } }, { $project: { commonPositions: { $setIntersection: [\"$before2000._id\", \"$after2005._id\"] } } }, { $unwind: \"$commonPositions\" }, { $replaceRoot: { newRoot: { Position: \"$commonPositions\" } } } ])",
        "deepseek answer": "db.pilot.aggregate([ { $match: { $or: [ { Join_Year: { $lt: 2000 } }, { Join_Year: { $gt: 2005 } } ] } }, { $group: { _id: \"$Position\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Position: \"$_id\" } } ])"
    },
    {
        "question_id": 1228,
        "spider_question_id": 2094,
        "db_id": "pilot_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Pilot_name , T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank",
        "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "query": "db.pilot_record.aggregate([ { $lookup: { from: \"aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $lookup: { from: \"pilot\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"pilot_info\" } }, { $unwind: \"$pilot_info\" }, { $project: { Pilot_name: \"$pilot_info.Pilot_name\", Fleet_Series: \"$aircraft_info.Fleet_Series\" } }, { $sort: { Rank: 1 } } ])",
        "gpt4 answer": "db.pilot.aggregate([ { $lookup: { from: \"pilot_record\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"pilot_record_docs\" } }, { $unwind: \"$pilot_record_docs\" }, { $lookup: { from: \"aircraft\", localField: \"pilot_record_docs.Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"aircraft_docs\" } }, { $unwind: \"$aircraft_docs\" }, { $project: { Pilot_name: 1, Fleet_Series: \"$aircraft_docs.Fleet_Series\" } }, { $sort : { Rank: 1 } } ])",
        "deepseek answer": "db.pilot_record.aggregate([ { $lookup: { from: \"aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"aircraft_info\" } }, { $unwind: \"$aircraft_info\" }, { $lookup: { from: \"pilot\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"pilot_info\" } }, { $unwind: \"$pilot_info\" }, { $project: { Pilot_name: \"$pilot_info.Pilot_name\", Fleet_Series: \"$aircraft_info.Fleet_Series\" } }, { $sort: { Rank: 1 } } ])"
    },
    {
        "question_id": 1229,
        "spider_question_id": 2096,
        "db_id": "pilot_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Pilot_name , COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
        "question": "Show the names of pilots and the number of records they have.",
        "query": "db.pilot_record.aggregate([ { $lookup: { from: \"pilot\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"pilot_info\" } }, { $unwind: \"$pilot_info\" }, { $group: { _id: \"$pilot_info.Pilot_name\", count: { $sum: 1 } } }, { $project: { Pilot_name: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.pilot_record.aggregate([ { $lookup: { from: \"pilot\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"pilot_info\" } }, { $unwind: \"$pilot_info\" }, { $group: { _id: \"$pilot_info.Pilot_name\", totalRecords: { $sum: 1 } } }, { $project: { Pilot_name: \"$_id\", Number_of_Records: \"$totalRecords\" } } ])",
        "deepseek answer": "db.pilot_record.aggregate([ { $lookup: { from: \"pilot\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"pilot_info\" } }, { $unwind: \"$pilot_info\" }, { $group: { _id: \"$pilot_info.Pilot_name\", count: { $sum: 1 } } }, { $project: { Pilot_name: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1230,
        "spider_question_id": 2098,
        "db_id": "pilot_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "question": "List the names of pilots that do not have any record.",
        "query": "db.pilot.aggregate([ { $lookup: { from: \"pilot_record\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"records\" } }, { $match: { records: { $size: 0 } } }, { $project: { Pilot_name: 1 } } ])",
        "gpt4 answer": "db.pilot.aggregate([ { $lookup: { from: \"pilot_record\", localField: \"Pilot_ID\", foreignField: \"Pilot_ID\", as: \"records\" } }, { $match: { records: { $size: 0 } } }, { $project: { Pilot_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1231,
        "spider_question_id": 2099,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_status_code FROM Ref_Document_Status",
        "question": "What document status codes do we have?",
        "query": "db.Ref_Document_Status.find({}, { document_status_code: 1 })",
        "gpt4 answer": "db.Ref_Document_Status.find({}, { document_status_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1232,
        "spider_question_id": 2100,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working'",
        "question": "What is the description of document status code 'working'?",
        "query": "db.Ref_Document_Status.findOne({document_status_code: 'working'}, {document_status_description: 1})",
        "gpt4 answer": "db.Ref_Document_Status.find({ document_status_code: 'working' }, { document_status_description: 1 })",
        "deepseek answer": "db.Ref_Document_Status.findOne({document_status_code: 'working'}, {document_status_description: 1})"
    },
    {
        "question_id": 1233,
        "spider_question_id": 2101,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM Ref_Document_Types",
        "question": "What document type codes do we have?",
        "query": "db.Ref_Document_Types.find({}, { document_type_code: 1 })",
        "gpt4 answer": "db.Ref_Document_Types.find({}, { document_type_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1234,
        "spider_question_id": 2102,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper'",
        "question": "What is the description of document type 'Paper'?",
        "query": "db.Ref_Document_Types.find({document_type_code: 'Paper'}, {document_type_description: 1})",
        "gpt4 answer": "db.Ref_Document_Types.findOne({document_type_code: 'Paper'}, {document_type_description: 1})",
        "deepseek answer": "db.Ref_Document_Types.find({document_type_code: 'Paper'}, {document_type_description: 1})"
    },
    {
        "question_id": 1235,
        "spider_question_id": 2103,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents",
        "question": "What are the shipping agent names?",
        "query": "db.Ref_Shipping_Agents.find({}, {shipping_agent_name: 1})",
        "gpt4 answer": "db.Ref_Shipping_Agents.find({}, { shipping_agent_name: 1 })",
        "deepseek answer": "db.Ref_Shipping_Agents.find({}, {shipping_agent_name: 1})"
    },
    {
        "question_id": 1236,
        "spider_question_id": 2104,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'UPS'",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "query": "db.Ref_Shipping_Agents.findOne({shipping_agent_name: 'UPS'}, {shipping_agent_code: 1})",
        "gpt4 answer": "db.Ref_Shipping_Agents.findOne({ shipping_agent_name: 'UPS' }, { shipping_agent_code: 1 })",
        "deepseek answer": "db.Ref_Shipping_Agents.findOne({shipping_agent_name: 'UPS'}, {shipping_agent_code: 1})"
    },
    {
        "question_id": 1237,
        "spider_question_id": 2105,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_code FROM ROLES",
        "question": "What are all role codes?",
        "query": "db.Roles.find({}, { role_code: 1 })",
        "gpt4 answer": "db.Roles.find({}, { role_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1238,
        "spider_question_id": 2106,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_description FROM ROLES WHERE role_code = 'ED'",
        "question": "What is the description of role code ED?",
        "query": "db.Roles.find({role_code: 'ED'}, {role_description: 1})",
        "gpt4 answer": "db.Roles.find({ role_code: 'ED' }, { role_description: 1 })",
        "deepseek answer": "db.Roles.find({role_code: 'ED'}, {role_description: 1})"
    },
    {
        "question_id": 1239,
        "spider_question_id": 2108,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = 'Koby'",
        "question": "What is the role of the employee named Koby?",
        "query": "db.Employees.aggregate([ { $match: { employee_name: 'Koby' } }, { $lookup: { from: 'Roles', localField: 'role_code', foreignField: 'role_code', as: 'role' } }, { $unwind: '$role' }, { $project: { role_description: '$role.role_description' } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $match: { employee_name: 'Koby' } }, { $lookup: { from: 'Roles', localField: 'role_code', foreignField: 'role_code', as: 'role' } }, { $unwind: '$role' }, { $project: { role_description: '$role.role_description' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1240,
        "spider_question_id": 2110,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.role_description , T2.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "query": "db.Roles.aggregate([ { $lookup: { from: \"Employees\", localField: \"role_code\", foreignField: \"role_code\", as: \"employees\" } }, { $project: { role_description: 1, role_code: 1, employeeCount: { $size: \"$employees\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Roles.aggregate([ { $lookup: { from: \"Employees\", localField: \"role_code\", foreignField: \"role_code\", as: \"employees\" } }, { $project: { role_description: 1, role_code: 1, employeeCount: { $size: \"$employees\" } } } ])"
    },
    {
        "question_id": 1241,
        "spider_question_id": 2111,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id) > 1",
        "question": "List roles that have more than one employee. List the role description and number of employees.",
        "query": "db.Roles.aggregate([ { $lookup: { from: \"Employees\", localField: \"role_code\", foreignField: \"role_code\", as: \"employees\" } }, { $project: { role_description: 1, employeeCount: { $size: \"$employees\" } } }, { $match: { employeeCount: { $gt: 1 } } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$role_code\", num_of_employees: { $sum: 1 } } }, { $match: { num_of_employees: { $gt: 1 } } }, { $lookup: { from: \"Roles\", localField: \"_id\", foreignField: \"role_code\", as: \"role_info\" } }, { $unwind: \"$role_info\" }, { $project: { role_description: \"$role_info.role_description\", num_of_employees: 1 } } ])",
        "deepseek answer": "db.Roles.aggregate([ { $lookup: { from: \"Employees\", localField: \"role_code\", foreignField: \"role_code\", as: \"employees\" } }, { $project: { role_description: 1, employeeCount: { $size: \"$employees\" } } }, { $match: { employeeCount: { $gt: 1 } } } ])"
    },
    {
        "question_id": 1242,
        "spider_question_id": 2112,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1",
        "question": "What is the document status description of the document with id 1?",
        "query": "db.Documents.aggregate([ { $match: { document_id: 1 } }, { $lookup: { from: \"Ref_Document_Status\", localField: \"document_status_code\", foreignField: \"document_status_code\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $project: { document_status_description: \"$status_info.document_status_description\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { document_id: 1 } }, { $lookup: { from: \"Ref_Document_Status\", localField: \"document_status_code\", foreignField: \"document_status_code\", as: \"status_info\" } }, { $unwind: \"$status_info\" }, { $project: { document_status_description: \"$status_info.document_status_description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1243,
        "spider_question_id": 2114,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM Documents WHERE document_id = 2",
        "question": "List the document type code for the document with the id 2.",
        "query": "db.Documents.find({document_id: 2}, {document_type_code: 1})",
        "gpt4 answer": "db.Documents.find({ document_id: 2 }, { document_type_code: 1 })",
        "deepseek answer": "db.Documents.find({document_id: 2}, {document_type_code: 1})"
    },
    {
        "question_id": 1244,
        "spider_question_id": 2115,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper'",
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "query": "db.Documents.find( { document_status_code: 'done', document_type_code: 'Paper' }, { document_id: 1 } )",
        "gpt4 answer": "db.Documents.find({ document_status_code: 'done', document_type_code: 'Paper' }, { document_id: 1 })",
        "deepseek answer": "db.Documents.find( { document_status_code: 'done', document_type_code: 'Paper' }, { document_id: 1 } )"
    },
    {
        "question_id": 1245,
        "spider_question_id": 2117,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'",
        "question": "How many documents were shipped by USPS?",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $match: { \"shipping_agent.shipping_agent_name\": \"USPS\" } }, { $count: \"number_of_documents\" } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $match: { \"shipping_agent.shipping_agent_name\": \"USPS\" } }, { $count: \"number_of_documents\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1246,
        "spider_question_id": 2118,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $unwind: \"$shipping_agent\" }, { $group: { _id: \"$shipping_agent.shipping_agent_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$shipping_agent_code\", total: { $sum: 1 } } }, { $sort: { total: -1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"_id\", foreignField: \"shipping_agent_code\", as: \"agent_info\" } }, { $project: { \"agent_info.shipping_agent_name\": 1, total: 1 } }, { $unwind: \"$agent_info\" }, { $project: { shipping_agent_name: \"$agent_info.shipping_agent_name\", total: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $unwind: \"$shipping_agent\" }, { $group: { _id: \"$shipping_agent.shipping_agent_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1247,
        "spider_question_id": 2120,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4",
        "question": "What address was the document with id 4 mailed to?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Documents_Mailed\", localField: \"address_id\", foreignField: \"mailed_to_address_id\", as: \"documents_mailed\" } }, { $match: { \"documents_mailed.document_id\": 4 } }, { $project: { address_details: 1 } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"Documents_Mailed\", localField: \"address_id\", foreignField: \"mailed_to_address_id\", as: \"Documents_Mailed\" } }, { $match: { \"Documents_Mailed.document_id\": 4 } }, { $project: { address_details: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Documents_Mailed\", localField: \"address_id\", foreignField: \"mailed_to_address_id\", as: \"documents_mailed\" } }, { $match: { \"documents_mailed.document_id\": 4 } }, { $project: { address_details: 1 } } ])"
    },
    {
        "question_id": 1248,
        "spider_question_id": 2122,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper' EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "query": "db.Documents.aggregate([ { $match: { document_status_code: \"done\", document_type_code: \"Paper\" } }, { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $match: { \"shipping_agent.shipping_agent_name\": { $ne: \"USPS\" } } }, { $project: { document_id: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"agent_info\" } }, { $match: { document_status_code: \"done\", document_type_code: \"Paper\", \"agent_info.shipping_agent_name\": { $ne: \"USPS\" } } }, { $project: { document_id: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $match: { document_status_code: \"done\", document_type_code: \"Paper\" } }, { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $match: { \"shipping_agent.shipping_agent_name\": { $ne: \"USPS\" } } }, { $project: { document_id: 1 } } ])"
    },
    {
        "question_id": 1249,
        "spider_question_id": 2123,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper' INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "query": "db.Documents.aggregate([ { $match: { document_status_code: \"done\", document_type_code: \"Paper\" } }, { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $match: { \"shipping_agent.shipping_agent_name\": \"USPS\" } }, { $project: { document_id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Documents.aggregate([ { $match: { document_status_code: \"done\", document_type_code: \"Paper\" } }, { $lookup: { from: \"Ref_Shipping_Agents\", localField: \"shipping_agent_code\", foreignField: \"shipping_agent_code\", as: \"shipping_agent\" } }, { $match: { \"shipping_agent.shipping_agent_name\": \"USPS\" } }, { $project: { document_id: 1 } } ])"
    },
    {
        "question_id": 1250,
        "spider_question_id": 2124,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7",
        "question": "What is draft detail of the document with id 7?",
        "query": "db.Document_Drafts.find({document_id: 7}, {draft_details: 1})",
        "gpt4 answer": "db.Document_Drafts.find({ document_id: 7 }, { draft_details: 1 })",
        "deepseek answer": "db.Document_Drafts.find({document_id: 7}, {draft_details: 1})"
    },
    {
        "question_id": 1251,
        "spider_question_id": 2126,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1",
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "query": "db.Draft_Copies.aggregate([ { $group: { _id: \"$document_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Draft_Copies.aggregate([ { $group: { _id: \"$document_id\", numOfDraftCopies: { $sum: 1 } } }, { $sort: { numOfDraftCopies: -1 } }, { $limit: 1 }, { $project: { document_id: \"$_id\", numOfDraftCopies: 1 } } ])",
        "deepseek answer": "db.Draft_Copies.aggregate([ { $group: { _id: \"$document_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1252,
        "spider_question_id": 2127,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*) > 1",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "query": "db.Draft_Copies.aggregate([ { $group: { _id: \"$document_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { document_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Draft_Copies.aggregate([ { $group: { _id: \"$document_id\", numDraftCopies: { $sum: 1 } } }, { $match: { numDraftCopies: { $gt: 1 } } }, { $project: { document_id: \"$_id\", numDraftCopies: 1 } } ])",
        "deepseek answer": "db.Draft_Copies.aggregate([ { $group: { _id: \"$document_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { document_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1253,
        "spider_question_id": 2128,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Circulation_History\", localField: \"employee_id\", foreignField: \"employee_id\", as: \"circulation_history\" } }, { $match: { \"circulation_history.document_id\": 1 } }, { $project: { employee_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Circulation_History\", localField: \"employee_id\", foreignField: \"employee_id\", as: \"circulation_history\" } }, { $match: { \"circulation_history.document_id\": 1 } }, { $project: { employee_name: 1 } } ])"
    },
    {
        "question_id": 1254,
        "spider_question_id": 2129,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Circulation_History\", localField: \"employee_id\", foreignField: \"employee_id\", as: \"circulation_history\" } }, { $match: { \"circulation_history\": { $size: 0 } } }, { $project: { employee_name: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Circulation_History\", localField: \"employee_id\", foreignField: \"employee_id\", as: \"history\" } }, { $match: { \"history\": { $size: 0 } } }, { $project: { employee_name: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Circulation_History\", localField: \"employee_id\", foreignField: \"employee_id\", as: \"circulation_history\" } }, { $match: { \"circulation_history\": { $size: 0 } } }, { $project: { employee_name: 1 } } ])"
    },
    {
        "question_id": 1255,
        "spider_question_id": 2131,
        "db_id": "cre_Doc_Control_Systems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "query": "db.Circulation_History.aggregate([ { $group: { _id: \"$document_id\", count: { $sum: 1 } } }, { $project: { document_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Circulation_History.aggregate([ { $group: { _id: \"$document_id\", numOfEmployees: { $addToSet: \"$employee_id\" } } }, { $project: { document_id: \"$_id\", numOfEmployees: { $size: \"$numOfEmployees\" } } } ])",
        "deepseek answer": "db.Circulation_History.aggregate([ { $group: { _id: \"$document_id\", count: { $sum: 1 } } }, { $project: { document_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1256,
        "spider_question_id": 2132,
        "db_id": "company_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dname FROM department ORDER BY mgr_start_date",
        "question": "List all department names ordered by their starting date.",
        "query": "db.department.find({}, { Dname: 1 }).sort({ Mgr_start_date: 1 })",
        "gpt4 answer": "db.department.find({}, { Dname: 1 }).sort({ Mgr_start_date: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1257,
        "spider_question_id": 2133,
        "db_id": "company_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "query": "db.dependent.find({ Relationship: 'Spouse' }, { Dependent_name: 1 })",
        "gpt4 answer": "db.dependent.find({ Relationship: 'Spouse' }, { Dependent_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1258,
        "spider_question_id": 2135,
        "db_id": "company_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'",
        "question": "Find the names of departments that are located in Houston.",
        "query": "db.department.aggregate([ { $lookup: { from: \"dept_locations\", localField: \"Dnumber\", foreignField: \"Dnumber\", as: \"locations\" } }, { $match: { \"locations.Dlocation\": \"Houston\" } }, { $project: { Dname: 1 } } ])",
        "gpt4 answer": "db.department.aggregate([ { $lookup: { from: \"dept_locations\", localField: \"Dnumber\", foreignField: \"Dnumber\", as: \"locations\" } }, { $match: { \"locations.Dlocation\": \"Houston\" } }, { $project: { Dname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1259,
        "spider_question_id": 2136,
        "db_id": "company_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT fname , lname FROM employee WHERE salary > 30000",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "query": "db.employee.find({ \"Salary\": { $gt: 30000 } }, { \"Fname\": 1, \"Lname\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.employee.find({ \"Salary\": { $gt: 30000 } }, { \"Fname\": 1, \"Lname\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1260,
        "spider_question_id": 2137,
        "db_id": "company_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , sex FROM employee WHERE salary < 50000 GROUP BY sex",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "query": "db.employee.aggregate([ { $match: { Salary: { $lt: 50000 } } }, { $group: { _id: \"$Sex\", count: { $sum: 1 } } }, { $project: { sex: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.employee.aggregate([ { $match: { Salary: { $lt: 50000 } } }, { $group: { _id: \"$Sex\", count: { $sum: 1 } } }, { $project: { sex: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1261,
        "spider_question_id": 2138,
        "db_id": "company_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT fname , lname , address FROM employee ORDER BY Bdate",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "query": "db.employee.find({}, { Fname: 1, Lname: 1, Address: 1 }).sort({ Bdate: 1 })",
        "gpt4 answer": "db.employee.find({}, { Fname: 1, Lname: 1, Address: 1 }).sort({ Bdate: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1262,
        "spider_question_id": 2139,
        "db_id": "local_govt_in_alabama",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'",
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "query": "db.Events.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_ID\", foreignField: \"Service_ID\", as: \"services\" } }, { $match: { \"services.Service_Type_Code\": \"Marriage\" } }, { $project: { Event_Details: 1 } } ])",
        "gpt4 answer": "db.Services.aggregate([ { $match: { Service_Type_Code: 'Marriage' } }, { $lookup: { from: 'Events', localField: 'Service_ID', foreignField: 'Service_ID', as: 'MarriageEvents' } }, { $unwind: '$MarriageEvents' }, { $project: { event_details: '$MarriageEvents.Event_Details' } } ])",
        "deepseek answer": "db.Events.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_ID\", foreignField: \"Service_ID\", as: \"services\" } }, { $match: { \"services.Service_Type_Code\": \"Marriage\" } }, { $project: { Event_Details: 1 } } ])"
    },
    {
        "question_id": 1263,
        "spider_question_id": 2140,
        "db_id": "local_govt_in_alabama",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count(*) > 1",
        "question": "What are the ids and details of events that have more than one participants?",
        "query": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"participants\" } }, { $match: { \"participants.1\": { $exists: true } } }, { $project: { Event_ID: 1, Event_Details: 1 } } ])",
        "gpt4 answer": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"Participants\" } }, { $project: { Event_ID: 1, Event_Details: 1, NumberOfParticipants: { $size: \"$Participants\" } } }, { $match: { NumberOfParticipants: { $gt: 1 } } }, { $project: { Event_ID: 1, Event_Details: 1 } } ])",
        "deepseek answer": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"participants\" } }, { $match: { \"participants.1\": { $exists: true } } }, { $project: { Event_ID: 1, Event_Details: 1 } } ])"
    },
    {
        "question_id": 1264,
        "spider_question_id": 2142,
        "db_id": "local_govt_in_alabama",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants",
        "question": "What are all the the participant ids, type code and details?",
        "query": "db.Participants.find({}, { Participant_ID: 1, Participant_Type_Code: 1, Participant_Details: 1})",
        "gpt4 answer": "db.Participants.find({}, { Participant_ID: 1, Participant_Type_Code: 1, Participant_Details: 1 })",
        "deepseek answer": "db.Participants.find({}, { Participant_ID: 1, Participant_Type_Code: 1, Participant_Details: 1})"
    },
    {
        "question_id": 1265,
        "spider_question_id": 2144,
        "db_id": "local_govt_in_alabama",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT service_type_code FROM services ORDER BY service_type_code",
        "question": "List the type of the services in alphabetical order.",
        "query": "db.Services.find({}, { Service_Type_Code: 1 }).sort({ Service_Type_Code: 1 })",
        "gpt4 answer": "db.Services.find({}, { Service_Type_Code: 1 }).sort({ Service_Type_Code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1266,
        "spider_question_id": 2146,
        "db_id": "local_govt_in_alabama",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "query": "db.Participants.aggregate([ { $match: { \"Participant_Details\": { $regex: /Dr\\./ } } }, { $lookup: { from: \"Participants_in_Events\", localField: \"Participant_ID\", foreignField: \"Participant_ID\", as: \"events\" } }, { $unwind: \"$events\" }, { $group: { _id: \"$events.Event_ID\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Participants.aggregate([ { $match: { \"Participant_Details\": { $regex: /Dr\\./ } } }, { $lookup: { from: \"Participants_in_Events\", localField: \"Participant_ID\", foreignField: \"Participant_ID\", as: \"events\" } }, { $unwind: \"$events\" }, { $group: { _id: \"$events.Event_ID\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 1267,
        "spider_question_id": 2148,
        "db_id": "local_govt_in_alabama",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Which service id and type has the least number of participants?",
        "query": "db.Participants.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Participant_ID\", foreignField: \"Participant_ID\", as: \"participant_events\" } }, { $unwind: \"$participant_events\" }, { $lookup: { from: \"Events\", localField: \"participant_events.Event_ID\", foreignField: \"Event_ID\", as: \"event_details\" } }, { $unwind: \"$event_details\" }, { $lookup: { from: \"Services\", localField: \"event_details.Service_ID\", foreignField: \"Service_ID\", as: \"service_details\" } }, { $unwind: \"$service_details\" }, { $group: { _id: \"$service_details.Service_ID\", count: { $sum: 1 }, service_type: { $first: \"$service_details.Service_Type_Code\" } } }, { $sort: { count: 1 } }, { $limit: 1 } , { $project: { Service_ID: \"$_id\" , Service_Type_Code: \"$service_type\"} }])",
        "gpt4 answer": "db.Participants.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Participant_ID\", foreignField: \"Participant_ID\", as: \"participants_in_events\" } }, { $unwind: \"$participants_in_events\" }, { $lookup: { from: \"Events\", localField: \"participants_in_events.Event_ID\", foreignField: \"Event_ID\", as: \"events_info\" } }, { $unwind: \"$events_info\" }, { $lookup: { from: \"Services\", localField: \"events_info.Service_ID\", foreignField: \"Service_ID\", as: \"services_info\" } }, { $unwind: \"$services_info\" }, { $group: { _id: { service_id: \"$services_info.Service_ID\", service_type_code: \"$services_info.Service_Type_Code\" }, participantsCount: { $sum: 1 } } }, { $sort: { participantsCount: 1 } }, { $limit: 1 }, { $project: { service_id: \"$_id.service_id\", service_type_code: \"$_id.service_type_code\" } } ])",
        "deepseek answer": "db.Participants.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Participant_ID\", foreignField: \"Participant_ID\", as: \"participant_events\" } }, { $unwind: \"$participant_events\" }, { $lookup: { from: \"Events\", localField: \"participant_events.Event_ID\", foreignField: \"Event_ID\", as: \"event_details\" } }, { $unwind: \"$event_details\" }, { $lookup: { from: \"Services\", localField: \"event_details.Service_ID\", foreignField: \"Service_ID\", as: \"service_details\" } }, { $unwind: \"$service_details\" }, { $group: { _id: \"$service_details.Service_ID\", count: { $sum: 1 }, service_type: { $first: \"$service_details.Service_Type_Code\" } } }, { $sort: { count: 1 } }, { $limit: 1 } , { $project: { Service_ID: \"$_id\" , Service_Type_Code: \"$service_type\"} }])"
    },
    {
        "question_id": 1268,
        "spider_question_id": 2149,
        "db_id": "local_govt_in_alabama",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the event with the most participants?",
        "query": "db.Participants_in_Events.aggregate([ { $group: { _id: \"$Event_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Participants_in_Events.aggregate([ { $group: { _id: \"$Event_ID\", participantCount: { $sum: 1 } } }, { $sort: { participantCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Participants_in_Events.aggregate([ { $group: { _id: \"$Event_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])"
    },
    {
        "question_id": 1269,
        "spider_question_id": 2150,
        "db_id": "local_govt_in_alabama",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "query": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_participants\" } }, { $lookup: { from: \"Participants\", localField: \"event_participants.Participant_ID\", foreignField: \"Participant_ID\", as: \"participant_details\" } }, { $match: { \"participant_details.Participant_Details\": { $ne: \"Kenyatta Kuhn\" } } }, { $group: { _id: \"$Event_ID\" } }, { $project: { Event_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_participants\" } }, { $lookup: { from: \"Participants\", localField: \"event_participants.Participant_ID\", foreignField: \"Participant_ID\", as: \"participant_details\" } }, { $match: { \"participant_details.Participant_Details\": { $ne: \"Kenyatta Kuhn\" } } }, { $group: { _id: \"$Event_ID\" } }, { $project: { Event_ID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1270,
        "spider_question_id": 2152,
        "db_id": "local_govt_in_alabama",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "question": "How many events did not have any participants?",
        "query": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"Participants\" } }, { $match: { Participants: { $size: 0 } } }, { $count: \"EventsWithoutParticipants\" } ])",
        "gpt4 answer": "db.Events.aggregate([ { $lookup: { from: \"Participants_in_Events\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"Participants\" } }, { $match: { Participants: { $size: 0 } } }, { $count: \"EventsWithoutParticipants\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1271,
        "spider_question_id": 2154,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name of the race held most recently?",
        "query": "db.races.find({}, {name: 1}).sort({date: -1}).limit(1)",
        "gpt4 answer": "db.races.find({}, { name: 1 }).sort({ date: -1 }).limit(1)",
        "deepseek answer": "db.races.find({}, {name: 1}).sort({date: -1}).limit(1)"
    },
    {
        "question_id": 1272,
        "spider_question_id": 2155,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name of the race that occurred most recently?",
        "query": "db.races.find({}, {name: 1}).sort({date: -1}).limit(1)",
        "gpt4 answer": "db.races.find({}, {name: 1}).sort({date: -1}).limit(1)",
        "deepseek answer": "db.races.find({}, {name: 1}).sort({date: -1}).limit(1)"
    },
    {
        "question_id": 1273,
        "spider_question_id": 2156,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name and date of the most recent race?",
        "query": "db.races.find({}, {name: 1, date: 1}).sort({date: -1}).limit(1)",
        "gpt4 answer": "db.races.find({}, {name: 1, date: 1}).sort({date: -1}).limit(1)",
        "deepseek answer": "db.races.find({}, {name: 1, date: 1}).sort({date: -1}).limit(1)"
    },
    {
        "question_id": 1274,
        "spider_question_id": 2157,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name and date of the race that occurred most recently?",
        "query": "db.races.find({}, {name: 1, date: 1}).sort({date: -1}).limit(1)",
        "gpt4 answer": "db.races.find({}, { name: 1, date: 1 }).sort({ date: -1 }).limit(1)",
        "deepseek answer": "db.races.find({}, {name: 1, date: 1}).sort({date: -1}).limit(1)"
    },
    {
        "question_id": 1275,
        "spider_question_id": 2158,
        "db_id": "formula_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM races WHERE YEAR = 2017",
        "question": "Find the names of all races held in 2017.",
        "query": "db.races.find({year: 2017}, {name: 1})",
        "gpt4 answer": "db.races.find({year: 2017}, {name: 1})",
        "deepseek answer": "db.races.find({year: 2017}, {name: 1})"
    },
    {
        "question_id": 1276,
        "spider_question_id": 2159,
        "db_id": "formula_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM races WHERE YEAR = 2017",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "query": "db.races.find({year: 2017}, {name: 1})",
        "gpt4 answer": "db.races.find({ year: 2017 }, { name: 1 })",
        "deepseek answer": "db.races.find({year: 2017}, {name: 1})"
    },
    {
        "question_id": 1277,
        "spider_question_id": 2172,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "query": "db.results.aggregate([ { $lookup: { from: \"races\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_data\" } }, { $match: { \"race_data.name\": \"Australian Grand Prix\", \"race_data.year\": 2009 } }, { $group: { _id: \"$driverId\" } }, { $count: \"num_drivers\" } ])",
        "gpt4 answer": "db.results.aggregate([ { $lookup: { from: \"races\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_data\" } }, { $match: { \"race_data.name\": \"Australian Grand Prix\", \"race_data.year\": 2009 } }, { $group: { _id: \"$driverId\" } }, { $count: \"num_drivers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1278,
        "spider_question_id": 2173,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "query": "db.results.aggregate([ { $lookup: { from: \"races\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_info\" } }, { $match: { \"race_info.name\": \"Australian Grand Prix\", \"race_info.year\": 2009 } }, { $group: { _id: \"$driverId\" } }, { $count: \"num_drivers\" } ])",
        "gpt4 answer": "db.results.aggregate([ { $lookup: { from: \"races\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_info\" } }, { $match: { \"race_info.name\": \"Australian Grand Prix\", \"race_info.year\": 2009 } }, { $group: { _id: \"$driverId\" } }, { $count: \"num_drivers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1279,
        "spider_question_id": 2192,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "query": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", \"year\": { $gt: 2017 } } }, { $project: { \"_id\": 0, \"name\": 1 } } ])",
        "gpt4 answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit\" } }, { $match: { \"circuit.country\": \"Spain\", \"year\": { $gt: 2017 } } }, { $project: { \"name\": 1 } } ])",
        "deepseek answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", \"year\": { $gt: 2017 } } }, { $project: { \"_id\": 0, \"name\": 1 } } ])"
    },
    {
        "question_id": 1280,
        "spider_question_id": 2193,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017",
        "question": "What are the names of the races held after 2017 in Spain?",
        "query": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", \"year\": { $gt: 2017 } } }, { $project: { \"_id\": 0, \"name\": 1 } } ])",
        "gpt4 answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $match: { \"circuit_info.country\": \"Spain\", year: { $gt: 2017 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", \"year\": { $gt: 2017 } } }, { $project: { \"_id\": 0, \"name\": 1 } } ])"
    },
    {
        "question_id": 1281,
        "spider_question_id": 2194,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "query": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", \"year\": { $gt: 2000 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $match: { \"circuit_info.country\": \"Spain\", year: { $gt: 2000 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", \"year\": { $gt: 2000 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 1282,
        "spider_question_id": 2195,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000",
        "question": "What are the names of all races held after 2000 in Spain?",
        "query": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", year: { $gt: 2000 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.races.aggregate([ { $lookup: { from: \"circuits\", localField: \"circuitId\", foreignField: \"circuitId\", as: \"circuit_info\" } }, { $unwind: \"$circuit_info\" }, { $match: { \"circuit_info.country\": \"Spain\", year: { $gt: 2000 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1283,
        "spider_question_id": 2212,
        "db_id": "formula_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "query": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"results\" } }, { $unwind: \"$results\" }, { $lookup: { from: \"races\", localField: \"results.raceId\", foreignField: \"raceId\", as: \"races\" } }, { $unwind: \"$races\" }, { $match: { \"races.year\": { $gt: 2010 } } }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, surname: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"results\" } }, { $unwind: \"$results\" }, { $lookup: { from: \"races\", localField: \"results.raceId\", foreignField: \"raceId\", as: \"races\" } }, { $unwind: \"$races\" }, { $match: { \"races.year\": { $gt: 2010 } } }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, surname: 1 } } ])"
    },
    {
        "question_id": 1284,
        "spider_question_id": 2213,
        "db_id": "formula_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "query": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"results\" } }, { $unwind: \"$results\" }, { $lookup: { from: \"races\", localField: \"results.raceId\", foreignField: \"raceId\", as: \"races\" } }, { $unwind: \"$races\" }, { $match: { \"races.year\": { $gt: 2010 } } }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, surname: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"results\" } }, { $unwind: \"$results\" }, { $lookup: { from: \"races\", localField: \"results.raceId\", foreignField: \"raceId\", as: \"races\" } }, { $unwind: \"$races\" }, { $match: { \"races.year\": { $gt: 2010 } } }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, surname: 1 } } ])"
    },
    {
        "question_id": 1285,
        "spider_question_id": 2214,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'",
        "question": "What are the names of circuits that belong to UK or Malaysia?",
        "query": "db.circuits.find({country: {$in: ['UK', 'Malaysia']}}, { name: 1})",
        "gpt4 answer": "db.circuits.find({ $or: [{ country: 'UK' }, { country: 'Malaysia' }] }, { name: 1 })",
        "deepseek answer": "db.circuits.find({country: {$in: ['UK', 'Malaysia']}}, { name: 1})"
    },
    {
        "question_id": 1286,
        "spider_question_id": 2215,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'",
        "question": "What are the names of all the circuits that are in the UK or Malaysia?",
        "query": "db.circuits.find({country: {$in: ['UK', 'Malaysia']}}, { name: 1})",
        "gpt4 answer": "db.circuits.find({ country: { $in: ['UK', 'Malaysia'] }}, { name: 1 })",
        "deepseek answer": "db.circuits.find({country: {$in: ['UK', 'Malaysia']}}, { name: 1})"
    },
    {
        "question_id": 1287,
        "spider_question_id": 2216,
        "db_id": "formula_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT circuitid , LOCATION FROM circuits WHERE country = 'France' OR country = 'Belgium'",
        "question": "Find the id and location of circuits that belong to France or Belgium?",
        "query": "db.circuits.find({country: {$in: ['France', 'Belgium']}}, {circuitId: 1, location: 1})",
        "gpt4 answer": "db.circuits.find({ country: { $in: ['France', 'Belgium'] } }, { circuitId: 1, location: 1 })",
        "deepseek answer": "db.circuits.find({country: {$in: ['France', 'Belgium']}}, {circuitId: 1, location: 1})"
    },
    {
        "question_id": 1288,
        "spider_question_id": 2217,
        "db_id": "formula_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT circuitid , LOCATION FROM circuits WHERE country = 'France' OR country = 'Belgium'",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "query": "db.circuits.find( { country: { $in: [\"France\", \"Belgium\"] } }, { circuitId: 1, location: 1 } )",
        "gpt4 answer": "db.circuits.find( { country: { $in: [\"France\", \"Belgium\"] } }, { circuitId: 1, location: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1289,
        "spider_question_id": 2222,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "query": "db.races.aggregate([ { $match: { year: 2008, name: \"Monaco Grand Prix\" } }, { $lookup: { from: \"results\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_results\" } }, { $unwind: \"$race_results\" }, { $group: { _id: null, max_fastestlapspeed: { $max: \"$race_results.fastestLapSpeed\" } } } , { $project: { max_fastestlapspeed: 1 } }])",
        "gpt4 answer": "db.races.aggregate([ { $match: { year: 2008, name: 'Monaco Grand Prix' } }, { $lookup: { from: \"results\", localField: \"raceId\", foreignField: \"raceId\", as: \"resultsData\" } }, { $unwind: \"$resultsData\" }, { $group: { _id: null, maxFastestLapSpeed: { $max: \"$resultsData.fastestLapSpeed\" } } }, { $project: { maxFastestLapSpeed: 1 } } ])",
        "deepseek answer": "db.races.aggregate([ { $match: { year: 2008, name: \"Monaco Grand Prix\" } }, { $lookup: { from: \"results\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_results\" } }, { $unwind: \"$race_results\" }, { $group: { _id: null, max_fastestlapspeed: { $max: \"$race_results.fastestLapSpeed\" } } } , { $project: { max_fastestlapspeed: 1 } }])"
    },
    {
        "question_id": 1290,
        "spider_question_id": 2223,
        "db_id": "formula_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'",
        "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?",
        "query": "db.races.aggregate([ { $match: { year: 2008, name: \"Monaco Grand Prix\" } }, { $lookup: { from: \"results\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_results\" } }, { $unwind: \"$race_results\" }, { $group: { _id: null, max_fastestlapspeed: { $max: \"$race_results.fastestLapSpeed\" } } } , { $project: { max_fastestlapspeed: 1 } }])",
        "gpt4 answer": "db.races.aggregate([ { $match: { year: 2008, name: 'Monaco Grand Prix' } }, { $lookup: { from: \"results\", localField: \"raceId\", foreignField: \"raceId\", as: \"results\" } }, { $unwind: \"$results\" }, { $group: { _id: null, maxFastestLapSpeed: { $max: \"$results.fastestLapSpeed\" } } }, { $project: { maxFastestLapSpeed: 1 } } ])",
        "deepseek answer": "db.races.aggregate([ { $match: { year: 2008, name: \"Monaco Grand Prix\" } }, { $lookup: { from: \"results\", localField: \"raceId\", foreignField: \"raceId\", as: \"race_results\" } }, { $unwind: \"$race_results\" }, { $group: { _id: null, max_fastestlapspeed: { $max: \"$race_results.fastestLapSpeed\" } } } , { $project: { max_fastestlapspeed: 1 } }])"
    },
    {
        "question_id": 1291,
        "spider_question_id": 2232,
        "db_id": "formula_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "query": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"races\" } }, { $unwind: \"$races\" }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { driverId: \"$_id\", surname: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"races\" } }, { $unwind: \"$races\" }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { driverId: \"$_id\", surname: 1 } } ])"
    },
    {
        "question_id": 1292,
        "spider_question_id": 2233,
        "db_id": "formula_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the ids and last names of all drivers who participated in the most races?",
        "query": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"raceResults\" } }, { $unwind: \"$raceResults\" }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, surname: 1 } } ])",
        "gpt4 answer": "db.drivers.aggregate([ { $lookup: { from: \"results\", localField: \"driverId\", foreignField: \"driverId\", as: \"raceResults\" } }, { $unwind: \"$raceResults\" }, { $group: { _id: \"$driverId\", surname: { $first: \"$surname\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1, surname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1293,
        "spider_question_id": 2236,
        "db_id": "machine_repair",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM technician ORDER BY Age ASC",
        "question": "List the names of technicians in ascending order of age.",
        "query": "db.technician.find({}, {Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.technician.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.technician.find({}, {Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 1294,
        "spider_question_id": 2237,
        "db_id": "machine_repair",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM technician ORDER BY Age ASC",
        "question": "What are the names of the technicians by ascending order of age?",
        "query": "db.technician.find({}, { Name: 1}).sort({Age: 1})",
        "gpt4 answer": "db.technician.find({}, { Name: 1 }).sort({ Age: 1 })",
        "deepseek answer": "db.technician.find({}, { Name: 1}).sort({Age: 1})"
    },
    {
        "question_id": 1295,
        "spider_question_id": 2238,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team , Starting_Year FROM technician",
        "question": "What are the team and starting year of technicians?",
        "query": "db.technician.find({}, { Team: 1, Starting_Year: 1})",
        "gpt4 answer": "db.technician.find({}, {Team: 1, Starting_Year: 1})",
        "deepseek answer": "db.technician.find({}, { Team: 1, Starting_Year: 1})"
    },
    {
        "question_id": 1296,
        "spider_question_id": 2239,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team , Starting_Year FROM technician",
        "question": "What is the team and starting year for each technician?",
        "query": "db.technician.find({}, { Team: 1, Starting_Year: 1})",
        "gpt4 answer": "db.technician.find({}, { Team: 1, Starting_Year: 1 })",
        "deepseek answer": "db.technician.find({}, { Team: 1, Starting_Year: 1})"
    },
    {
        "question_id": 1297,
        "spider_question_id": 2240,
        "db_id": "machine_repair",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM technician WHERE Team != 'NYY'",
        "question": "List the name of technicians whose team is not 'NYY'.",
        "query": "db.technician.find({Team: {$ne: 'NYY'}}, {Name: 1})",
        "gpt4 answer": "db.technician.find({ Team: { $ne: 'NYY' }}, { Name: 1 })",
        "deepseek answer": "db.technician.find({Team: {$ne: 'NYY'}}, {Name: 1})"
    },
    {
        "question_id": 1298,
        "spider_question_id": 2241,
        "db_id": "machine_repair",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM technician WHERE Team != 'NYY'",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "query": "db.technician.find({Team: {$ne: 'NYY'}}, {Name: 1})",
        "gpt4 answer": "db.technician.find({ Team: { $ne: 'NYY' } }, { Name: 1 })",
        "deepseek answer": "db.technician.find({Team: {$ne: 'NYY'}}, {Name: 1})"
    },
    {
        "question_id": 1299,
        "spider_question_id": 2242,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
        "question": "Show the name of technicians aged either 36 or 37",
        "query": "db.technician.find({Age: {$in: [36, 37]}}, {Name: 1})",
        "gpt4 answer": "db.technician.find({ Age: { $in: [36, 37] } }, { Name: 1 })",
        "deepseek answer": "db.technician.find({Age: {$in: [36, 37]}}, {Name: 1})"
    },
    {
        "question_id": 1300,
        "spider_question_id": 2243,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "query": "db.technician.find({Age: {$in: [36, 37]}}, {Name: 1})",
        "gpt4 answer": "db.technician.find({ Age: { $in: [36, 37] } }, { Name: 1 })",
        "deepseek answer": "db.technician.find({Age: {$in: [36, 37]}}, {Name: 1})"
    },
    {
        "question_id": 1301,
        "spider_question_id": 2244,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "question": "What is the starting year of the oldest technicians?",
        "query": "db.technician.find({}, {Starting_Year: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.technician.find({}, { Starting_Year: 1 }).sort({ Age: -1 }).limit(1)",
        "deepseek answer": "db.technician.find({}, {Starting_Year: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 1302,
        "spider_question_id": 2245,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "question": "What is the starting year for the oldest technician?",
        "query": "db.technician.find({}, {Starting_Year: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.technician.find({}, {Starting_Year: 1}).sort({Age: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1303,
        "spider_question_id": 2246,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "query": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $project: { Team: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", numberOfTechnicians: { $sum: 1 } } } ])",
        "deepseek answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $project: { Team: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1304,
        "spider_question_id": 2247,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "question": "For each team, how many technicians are there?",
        "query": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1305,
        "spider_question_id": 2248,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the team that has the most number of technicians.",
        "query": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Team: \"$_id\" } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Team: \"$_id\" } } ])"
    },
    {
        "question_id": 1306,
        "spider_question_id": 2249,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What are the teams with the most technicians?",
        "query": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Team: \"$_id\" } }])",
        "gpt4 answer": "db.technician.aggregate([ { $group: {_id: \"$Team\", count: {$sum: 1}} }, { $sort: {count: -1} }, { $limit: 1 }, { $project: {_id: 1} } ])",
        "deepseek answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Team: \"$_id\" } }])"
    },
    {
        "question_id": 1307,
        "spider_question_id": 2250,
        "db_id": "machine_repair",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2",
        "question": "Show the team that have at least two technicians.",
        "query": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Team: \"$_id\" } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Team: \"$_id\" } } ])",
        "deepseek answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Team: \"$_id\" } } ])"
    },
    {
        "question_id": 1308,
        "spider_question_id": 2251,
        "db_id": "machine_repair",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2",
        "question": "What is the team with at least 2 technicians?",
        "query": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Team: \"$_id\" } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.technician.aggregate([ { $group: { _id: \"$Team\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Team: \"$_id\" } } ])"
    },
    {
        "question_id": 1309,
        "spider_question_id": 2254,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank",
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "query": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $sort: { \"machine_info.quality_rank\": 1 } }, { $project: { technician_name: \"$technician_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $sort: { \"machine_info.quality_rank\": 1 } }, { $project: { technician_name: \"$technician_info.Name\" } } ])"
    },
    {
        "question_id": 1310,
        "spider_question_id": 2255,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank",
        "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
        "query": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $sort: { \"machine_info.quality_rank\": 1 } }, { $project: { Name: \"$technician_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $sort: { \"machine_info.quality_rank\": 1 } }, { $project: { Name: \"$technician_info.Name\" } } ])"
    },
    {
        "question_id": 1311,
        "spider_question_id": 2256,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70",
        "question": "Show names of technicians who are assigned to repair machines with value point more than 70.",
        "query": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $match: { \"machine_info.value_points\": { $gt: 70 } } }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $project: { Name: \"$technician_info.Name\" } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $lookup: { from: \"repair_assignment\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"assignments\" } }, { $unwind: \"$assignments\" }, { $lookup: { from: \"machine\", localField: \"assignments.Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $match: { \"machine_info.value_points\": { $gt: 70 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $match: { \"machine_info.value_points\": { $gt: 70 } } }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $project: { Name: \"$technician_info.Name\" } } ])"
    },
    {
        "question_id": 1312,
        "spider_question_id": 2257,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70",
        "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?",
        "query": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $match: { \"machine_info.value_points\": { $gt: 70 } } }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $project: { Name: \"$technician_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"machine\", localField: \"Machine_ID\", foreignField: \"Machine_ID\", as: \"machine_info\" } }, { $unwind: \"$machine_info\" }, { $match: { \"machine_info.value_points\": { $gt: 70 } } }, { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $project: { Name: \"$technician_info.Name\" } } ])"
    },
    {
        "question_id": 1313,
        "spider_question_id": 2258,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "query": "db.repair_assignment.aggregate([ { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $group: { _id: \"$technician_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"tech_info\" } }, { $unwind: \"$tech_info\" }, { $group: { _id: \"$tech_info.Name\", num_machines_assigned: { $sum: 1 } } }, { $project: { Name: \"$_id\", num_machines_assigned: 1 } } ])",
        "deepseek answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $group: { _id: \"$technician_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1314,
        "spider_question_id": 2259,
        "db_id": "machine_repair",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name",
        "question": "What are the names of the technicians and how many machines are they assigned to repair?",
        "query": "db.repair_assignment.aggregate([ { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $group: { _id: \"$technician_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Count: \"$count\" } } ])",
        "gpt4 answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $group: { _id: \"$technician_info.Name\", machines_assigned: {$sum: 1} } }, { $project: { Name: \"$_id\", machines_assigned: 1 } } ])",
        "deepseek answer": "db.repair_assignment.aggregate([ { $lookup: { from: \"technician\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"technician_info\" } }, { $unwind: \"$technician_info\" }, { $group: { _id: \"$technician_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Count: \"$count\" } } ])"
    },
    {
        "question_id": 1315,
        "spider_question_id": 2260,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "query": "db.technician.find({ technician_id: { $nin: db.repair_assignment.distinct(\"technician_id\") } }, { Name: 1 })",
        "gpt4 answer": "db.technician.aggregate([ { $lookup: { from: \"repair_assignment\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"assignment\" } }, { $match: { assignment: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.technician.find({ technician_id: { $nin: db.repair_assignment.distinct(\"technician_id\") } }, { Name: 1 })"
    },
    {
        "question_id": 1316,
        "spider_question_id": 2261,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "query": "db.technician.find({ technician_id: { $nin: db.repair_assignment.distinct(\"technician_id\") } }, { Name: 1 })",
        "gpt4 answer": "db.technician.aggregate([ { $lookup: { from: \"repair_assignment\", localField: \"technician_id\", foreignField: \"technician_id\", as: \"assignments\" } }, { $match: { assignments: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.technician.find({ technician_id: { $nin: db.repair_assignment.distinct(\"technician_id\") } }, { Name: 1 })"
    },
    {
        "question_id": 1317,
        "spider_question_id": 2262,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team = 'CWS'",
        "question": "Show the starting years shared by technicians from team 'CLE' and 'CWS'.",
        "query": "db.technician.aggregate([ { $match: { Team: \"CLE\" } }, { $lookup: { from: \"technician\", localField: \"Starting_Year\", foreignField: \"Starting_Year\", as: \"CWS_technicians\" } }, { $unwind: \"$CWS_technicians\" }, { $match: { \"CWS_technicians.Team\": \"CWS\" } }, { $group: { _id: \"$Starting_Year\" } }, { $project: { Starting_Year: \"$_id\" } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $match: { Team: \"CLE\" } }, { $lookup: { from: \"technician\", localField: \"Starting_Year\", foreignField: \"Starting_Year\", as: \"CWS_technicians\" } }, { $unwind: \"$CWS_technicians\" }, { $match: { \"CWS_technicians.Team\": \"CWS\" } }, { $group: { _id: \"$Starting_Year\" } }, { $project: { Starting_Year: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1318,
        "spider_question_id": 2263,
        "db_id": "machine_repair",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team = 'CWS'",
        "question": "What are the starting years shared by the technicians from the team 'CLE' or 'CWS'?",
        "query": "db.technician.aggregate([ { $match: { $or: [ { Team: 'CLE' }, { Team: 'CWS' } ] } }, { $group: { _id: '$Starting_Year', teams: { $addToSet: '$Team' } } }, { $match: { teams: { $all: ['CLE', 'CWS'] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.technician.aggregate([ { $match: { $or: [ { Team: 'CLE' }, { Team: 'CWS' } ] } }, { $group: { _id: '$Starting_Year', teams: { $addToSet: '$Team' } } }, { $match: { teams: { $all: ['CLE', 'CWS'] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1319,
        "spider_question_id": 2266,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Company: 1 } }, { $sort: { Money_Requested: -1 } } ])",
        "gpt4 answer": "db.entrepreneur.find({}, { Company: 1 }).sort({ Money_Requested: -1 })",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Company: 1 } }, { $sort: { Money_Requested: -1 } } ])"
    },
    {
        "question_id": 1320,
        "spider_question_id": 2267,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Company: 1 } }, { $sort: { Money_Requested: -1 } } ])",
        "gpt4 answer": "db.entrepreneur.find({}, { Company: 1 }).sort({ Money_Requested: -1 })",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Company: 1 } }, { $sort: { Money_Requested: -1 } } ])"
    },
    {
        "question_id": 1321,
        "spider_question_id": 2268,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Company , Investor FROM entrepreneur",
        "question": "List the companies and the investors of entrepreneurs.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $project: { Company: 1, Investor: 1 } } ])",
        "gpt4 answer": "db.entrepreneur.find({}, { Company: 1, Investor: 1 })",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $project: { Company: 1, Investor: 1 } } ])"
    },
    {
        "question_id": 1322,
        "spider_question_id": 2269,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Company , Investor FROM entrepreneur",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "query": "db.entrepreneur.find({}, { Company: 1, Investor: 1 })",
        "gpt4 answer": "db.entrepreneur.find({}, { Company: 1, Investor: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1323,
        "spider_question_id": 2270,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Money_Requested) FROM entrepreneur",
        "question": "What is the average money requested by all entrepreneurs?",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: null, averageMoneyRequested: { $avg: \"$Money_Requested\" } } } , { $project: { averageMoneyRequested: 1 } }])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: null, averageMoneyRequested: { $avg: \"$Money_Requested\" } } }, { $project: { averageMoneyRequested: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: null, averageMoneyRequested: { $avg: \"$Money_Requested\" } } } , { $project: { averageMoneyRequested: 1 } }])"
    },
    {
        "question_id": 1324,
        "spider_question_id": 2271,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Money_Requested) FROM entrepreneur",
        "question": "Return the average money requested across all entrepreneurs.",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: null, averageMoneyRequested: { $avg: \"$Money_Requested\" } } } , { $project: { averageMoneyRequested: 1 } }])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: null, averageMoneyRequested: { $avg: \"$Money_Requested\" } } }, { $project: { averageMoneyRequested: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: null, averageMoneyRequested: { $avg: \"$Money_Requested\" } } } , { $project: { averageMoneyRequested: 1 } }])"
    },
    {
        "question_id": 1325,
        "spider_question_id": 2272,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Weight ASC",
        "question": "What are the names of people in ascending order of weight?",
        "query": "db.people.find({}, { Name: 1 }).sort({ Weight: 1 })",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Weight: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1326,
        "spider_question_id": 2273,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Weight ASC",
        "question": "Return the names of people, ordered by weight ascending.",
        "query": "db.people.find({}, {Name: 1}).sort({Weight: 1})",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Weight: 1 })",
        "deepseek answer": "db.people.find({}, {Name: 1}).sort({Weight: 1})"
    },
    {
        "question_id": 1327,
        "spider_question_id": 2274,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "question": "What are the names of entrepreneurs?",
        "query": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneurs\" } }, { $match: { \"entrepreneurs\": { $not: { $size: 0 } } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneurs\" } }, { $match: { \"entrepreneurs\": { $not: { $size: 0 } } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1328,
        "spider_question_id": 2275,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "question": "Return the names of entrepreneurs.",
        "query": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneurs\" } }, { $match: { \"entrepreneurs\": { $ne: [] } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneurs\" } }, { $match: { \"entrepreneurs\": { $ne: [] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1329,
        "spider_question_id": 2276,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != 'Rachel Elnaugh'",
        "question": "What are the names of entrepreneurs whose investor is not 'Rachel Elnaugh'?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { Investor: { $ne: \"Rachel Elnaugh\" } } }, { $project: { Name: \"$people_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { Investor: { $ne: \"Rachel Elnaugh\" } } }, { $project: { Name: \"$people_info.Name\" } } ])"
    },
    {
        "question_id": 1330,
        "spider_question_id": 2277,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor != 'Rachel Elnaugh'",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { Investor: { $ne: \"Rachel Elnaugh\" } } }, { $project: { Name: \"$people_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { Investor: { $ne: \"Rachel Elnaugh\" } } }, { $project: { Name: \"$people_info.Name\" } } ])"
    },
    {
        "question_id": 1331,
        "spider_question_id": 2278,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "question": "What is the weight of the shortest person?",
        "query": "db.people.find({}, { Weight: 1 }).sort({ Height: 1 }).limit(1)",
        "gpt4 answer": "db.people.find({}, { Weight: 1 }).sort({ Height: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1332,
        "spider_question_id": 2279,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "question": "Return the weight of the shortest person.",
        "query": "db.people.aggregate([ { $sort: { Height: 1 } }, { $limit: 1 }, { $project: { Weight: 1 } } ])",
        "gpt4 answer": "db.people.find({}, { Weight: 1 }).sort({ Height: 1 }).limit(1)",
        "deepseek answer": "db.people.aggregate([ { $sort: { Height: 1 } }, { $limit: 1 }, { $project: { Weight: 1 } } ])"
    },
    {
        "question_id": 1333,
        "spider_question_id": 2280,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $unwind: \"$entrepreneur_info\" }, { $sort: { \"entrepreneur_info.Weight\": -1 } }, { $limit: 1 }, { $project: { Name: \"$entrepreneur_info.Name\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur\" } }, { $match: { \"entrepreneur\": { $ne: [] } } }, { $sort: { \"Weight\": -1 } }, { $limit: 1 }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $unwind: \"$entrepreneur_info\" }, { $sort: { \"entrepreneur_info.Weight\": -1 } }, { $limit: 1 }, { $project: { Name: \"$entrepreneur_info.Name\" } } ])"
    },
    {
        "question_id": 1334,
        "spider_question_id": 2281,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $unwind: \"$entrepreneur_info\" }, { $sort: { \"entrepreneur_info.Weight\": -1 } }, { $limit: 1 }, { $project: { Name: \"$entrepreneur_info.Name\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $match: { \"entrepreneur_info\": { $ne: [] } } }, { $sort: { Weight: -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $unwind: \"$entrepreneur_info\" }, { $sort: { \"entrepreneur_info.Weight\": -1 } }, { $limit: 1 }, { $project: { Name: \"$entrepreneur_info.Name\" } } ])"
    },
    {
        "question_id": 1335,
        "spider_question_id": 2282,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
        "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.85 } } }, { $group: { _id: null, totalMoneyRequested: { $sum: \"$Money_Requested\" } } } , { $project: { totalMoneyRequested: 1 } }])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.85 } } }, { $group: { _id: null, totalMoneyRequested: { $sum: \"$Money_Requested\" } } }, { $project: { totalMoneyRequested: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.85 } } }, { $group: { _id: null, totalMoneyRequested: { $sum: \"$Money_Requested\" } } } , { $project: { totalMoneyRequested: 1 } }])"
    },
    {
        "question_id": 1336,
        "spider_question_id": 2283,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
        "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.85 } } }, { $group: { _id: null, totalMoneyRequested: { $sum: \"$Money_Requested\" } } } , { $project: { totalMoneyRequested: 1 } }])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.85 } } }, { $group: { _id: null, totalMoneyRequested: { $sum: \"$Money_Requested\" } } }, { $project: { totalMoneyRequested: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.85 } } }, { $group: { _id: null, totalMoneyRequested: { $sum: \"$Money_Requested\" } } } , { $project: { totalMoneyRequested: 1 } }])"
    },
    {
        "question_id": 1337,
        "spider_question_id": 2284,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'",
        "question": "What are the dates of birth of entrepreneurs with investor 'Simon Woodroffe' or 'Peter Jones'?",
        "query": "db.entrepreneur.aggregate([ { $match: { $or: [ { Investor: \"Simon Woodroffe\" }, { Investor: \"Peter Jones\" } ] } }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Date_of_Birth: \"$people_info.Date_of_Birth\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $match: { $or: [ { Investor: \"Simon Woodroffe\" }, { Investor: \"Peter Jones\" } ] } }, { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Date_of_Birth: \"$people_info.Date_of_Birth\" } } ])"
    },
    {
        "question_id": 1338,
        "spider_question_id": 2286,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Weight: \"$people_info.Weight\" } }, { $sort: { Money_Requested: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Weight: \"$people_info.Weight\" } }, { $sort: { Money_Requested: -1 } } ])"
    },
    {
        "question_id": 1339,
        "spider_question_id": 2287,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Weight: \"$people_info.Weight\" } }, { $sort: { Money_Requested: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Weight: \"$people_info.Weight\" } }, { $sort: { Money_Requested: -1 } } ])"
    },
    {
        "question_id": 1340,
        "spider_question_id": 2288,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $project: { Investor: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", NumberOfEntrepreneurs: { $sum: 1 } }} ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $project: { Investor: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1341,
        "spider_question_id": 2289,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
        "question": "How many entrepreneurs correspond to each investor?",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1342,
        "spider_question_id": 2290,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Investor: \"$_id\" } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Investor: \"$_id\" } } ])"
    },
    {
        "question_id": 1343,
        "spider_question_id": 2291,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Investor: \"$_id\" } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Investor: \"$_id\" } } ])"
    },
    {
        "question_id": 1344,
        "spider_question_id": 2292,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Investor: \"$_id\" } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Investor: \"$_id\" } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Investor: \"$_id\" } } ])"
    },
    {
        "question_id": 1345,
        "spider_question_id": 2293,
        "db_id": "entrepreneur",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "query": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Investor: \"$_id\" } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Investor: \"$_id\" } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Investor: \"$_id\" } } ])"
    },
    {
        "question_id": 1346,
        "spider_question_id": 2294,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\", Company: 1 } }, { $sort: { Money_Requested: 1 } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $unwind: \"$entrepreneur_info\" }, { $project: { Name: \"$entrepreneur_info.Name\", Company: 1 } }, { $sort: { Money_Requested: -1 } } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\", Company: 1 } }, { $sort: { Money_Requested: 1 } } ])"
    },
    {
        "question_id": 1347,
        "spider_question_id": 2295,
        "db_id": "entrepreneur",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\", Company: 1 } }, { $sort: { Money_Requested: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Name: \"$people_info.Name\", Company: 1 } }, { $sort: { Money_Requested: -1 } } ])"
    },
    {
        "question_id": 1348,
        "spider_question_id": 2296,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "question": "List the names of people that are not entrepreneurs.",
        "query": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $match: { entrepreneur_info: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_info\" } }, { $match: { entrepreneur_info: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1349,
        "spider_question_id": 2297,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "question": "What are the names of people who are not entrepreneurs?",
        "query": "db.people.find( { People_ID: { $nin: db.entrepreneur.distinct(\"People_ID\") } }, { Name: 1 } )",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"entrepreneur\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneurs\" } }, { $match: { \"entrepreneurs\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.people.find( { People_ID: { $nin: db.entrepreneur.distinct(\"People_ID\") } }, { Name: 1 } )"
    },
    {
        "question_id": 1350,
        "spider_question_id": 2298,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "query": "db.entrepreneur.aggregate([ { $match: { $or: [ { Money_Requested: { $gt: 140000 } }, { Money_Requested: { $lt: 120000 } } ] } }, { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Investor: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $match: { $or: [ { Money_Requested: { $gt: 140000 } }, { Money_Requested: { $lt: 120000 } } ] } }, { $group: { _id: \"$Investor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Investor: \"$_id\" } } ])"
    },
    {
        "question_id": 1351,
        "spider_question_id": 2302,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "question": "Show the company of the tallest entrepreneur.",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $sort: { \"people_info.Height\": -1 } }, { $limit: 1 }, { $project: { Company: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $sort: { \"people_info.Height\": -1 } }, { $limit: 1 }, { $project: { Company: 1 } } ])"
    },
    {
        "question_id": 1352,
        "spider_question_id": 2303,
        "db_id": "entrepreneur",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "query": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $sort: { \"people_info.Height\": -1 } }, { $limit: 1 }, { $project: { Company: 1 } } ])",
        "gpt4 answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"entrepreneur_details\" } }, { $unwind: \"$entrepreneur_details\" }, { $sort: {\"entrepreneur_details.Height\": -1} }, { $limit: 1 }, { $project: {Company: 1} } ])",
        "deepseek answer": "db.entrepreneur.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $sort: { \"people_info.Height\": -1 } }, { $limit: 1 }, { $project: { Company: 1 } } ])"
    },
    {
        "question_id": 1353,
        "spider_question_id": 2305,
        "db_id": "perpetrator",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Date: 1 } }, { $sort: { Killed: -1 } } ])",
        "gpt4 answer": "db.perpetrator.find({}, { Date: 1 }).sort({ Killed: -1 })",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Date: 1 } }, { $sort: { Killed: -1 } } ])"
    },
    {
        "question_id": 1354,
        "spider_question_id": 2306,
        "db_id": "perpetrator",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "query": "db.perpetrator.find({}, { Injured: 1 }).sort({ Injured: 1 })",
        "gpt4 answer": "db.perpetrator.find({}, { Injured: 1 }).sort({ Injured: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1355,
        "spider_question_id": 2307,
        "db_id": "perpetrator",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Injured) FROM perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "query": "db.perpetrator.aggregate([ { $group: { _id: null, averageInjured: { $avg: \"$Injured\" } } } , { $project: { averageInjured: 1 } }])",
        "gpt4 answer": "db.perpetrator.aggregate([ { $group: { _id: null, avgInjured: { $avg: \"$Injured\" } } }, { $project: { avgInjured: 1 } } ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $group: { _id: null, averageInjured: { $avg: \"$Injured\" } } } , { $project: { averageInjured: 1 } }])"
    },
    {
        "question_id": 1356,
        "spider_question_id": 2308,
        "db_id": "perpetrator",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "question": "What is the location of the perpetrator with the largest kills.",
        "query": "db.perpetrator.aggregate([ { $sort: { Killed: -1 } }, { $limit: 1 }, { $project: { Location: 1 } } ])",
        "gpt4 answer": "db.perpetrator.find({}, {Location: 1}).sort({Killed: -1}).limit(1)",
        "deepseek answer": "db.perpetrator.aggregate([ { $sort: { Killed: -1 } }, { $limit: 1 }, { $project: { Location: 1 } } ])"
    },
    {
        "question_id": 1357,
        "spider_question_id": 2309,
        "db_id": "perpetrator",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM People ORDER BY Height ASC",
        "question": "What are the names of people in ascending order of height?",
        "query": "db.people.find({}, { Name: 1 }).sort({ Height: 1 })",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Height: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1358,
        "spider_question_id": 2310,
        "db_id": "perpetrator",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID",
        "question": "What are the names of perpetrators?",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $project: { Name: \"$perpetrator_info.Name\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"perpetrator\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $match: { \"perpetrator_info\": { $ne: [] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $project: { Name: \"$perpetrator_info.Name\" } } ])"
    },
    {
        "question_id": 1359,
        "spider_question_id": 2312,
        "db_id": "perpetrator",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $sort: { \"perpetrator_info.Weight\": -1 } }, { $limit: 1 }, { $project: { Name: \"$perpetrator_info.Name\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"perpetrator\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrators\" } }, { $match: { \"perpetrators\": { $ne: [] } } }, { $sort: { \"Weight\": -1 } }, { $limit: 1 }, { $project: { \"Name\": 1 } } ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $sort: { \"perpetrator_info.Weight\": -1 } }, { $limit: 1 }, { $project: { Name: \"$perpetrator_info.Name\" } } ])"
    },
    {
        "question_id": 1360,
        "spider_question_id": 2313,
        "db_id": "perpetrator",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.84 } } }, { $group: { _id: null, totalKills: { $sum: \"$Killed\" } } } , { $project: { totalKills: 1 } }])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Height: { $gt: 1.84 } } }, { $lookup: { from: \"perpetrator\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetratorDetails\" } }, { $unwind: \"$perpetratorDetails\" }, { $group: { _id: null, totalKills: { $sum: \"$perpetratorDetails.Killed\" } } }, { $project: { totalKills: 1 } } ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $match: { \"people_info.Height\": { $gt: 1.84 } } }, { $group: { _id: null, totalKills: { $sum: \"$Killed\" } } } , { $project: { totalKills: 1 } }])"
    },
    {
        "question_id": 1361,
        "spider_question_id": 2315,
        "db_id": "perpetrator",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $group: { _id: \"$perpetrator_info.People_ID\", Height: { $first: \"$perpetrator_info.Height\" }, Injured: { $sum: \"$Injured\" } } }, { $sort: { Injured: -1 } }, { $project: { Height: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $group: { _id: \"$perpetrator_info.People_ID\", Height: { $first: \"$perpetrator_info.Height\" }, Injured: { $sum: \"$Injured\" } } }, { $sort: { Injured: -1 } }, { $project: { Height: 1 } } ])"
    },
    {
        "question_id": 1362,
        "spider_question_id": 2316,
        "db_id": "perpetrator",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country",
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "query": "db.perpetrator.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { Country: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.perpetrator.aggregate([ { $group: { _id: \"$Country\", NumberOfPerpetrators: { $sum: 1 } }} ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { Country: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1363,
        "spider_question_id": 2317,
        "db_id": "perpetrator",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the country that has the most perpetrators?",
        "query": "db.perpetrator.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.perpetrator.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1364,
        "spider_question_id": 2319,
        "db_id": "perpetrator",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC",
        "question": "List the names of perpetrators in descending order of the year.",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $project: { Name: \"$perpetrator_info.Name\" } }, { $sort: { Year: -1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"perpetrator\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $sort: {\"perpetrator_info.Year\": -1} }, { $project: { Name: 1} } ])",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetrator_info\" } }, { $unwind: \"$perpetrator_info\" }, { $project: { Name: \"$perpetrator_info.Name\" } }, { $sort: { Year: -1 } } ])"
    },
    {
        "question_id": 1365,
        "spider_question_id": 2320,
        "db_id": "perpetrator",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
        "question": "List the names of people that are not perpetrators.",
        "query": "db.people.find({ People_ID: { $nin: db.perpetrator.distinct(\"People_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"perpetrator\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"perpetratorInfo\" } }, { $match: { perpetratorInfo: [] } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.people.find({ People_ID: { $nin: db.perpetrator.distinct(\"People_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 1366,
        "spider_question_id": 2321,
        "db_id": "perpetrator",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20",
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "query": "db.perpetrator.aggregate([ { $match: { $or: [ { Injured: { $gt: 50 } }, { Injured: { $lt: 20 } }, ] } }, { $group: { _id: \"$Country\", injuryRanges: { $addToSet: { $cond: [{ $gt: [\"$Injured\", 50] }, \"high\", \"low\"] } } } }, { $match: { injuryRanges: { $all: [\"high\", \"low\"] } } }, { $project: { Country: \"$_id\" } } ])",
        "gpt4 answer": "db.perpetrator.aggregate([ { $match: { $or: [ { Injured: { $gt: 50 } }, { Injured: { $lt: 20 } }, ] } }, { $group: { _id: \"$Country\", injuryRanges: { $addToSet: { $cond: [{ $gt: [\"$Injured\", 50] }, \"high\", \"low\"] } } } }, { $match: { injuryRanges: { $all: [\"high\", \"low\"] } } }, { $project: { Country: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1367,
        "spider_question_id": 2323,
        "db_id": "perpetrator",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Show the date of the tallest perpetrator.",
        "query": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $sort: { \"people_info.Height\": -1 } }, { $limit: 1 }, { $project: { Date: \"$Date\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.perpetrator.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $sort: { \"people_info.Height\": -1 } }, { $limit: 1 }, { $project: { Date: \"$Date\" } } ])"
    },
    {
        "question_id": 1368,
        "spider_question_id": 2324,
        "db_id": "perpetrator",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(YEAR) FROM perpetrator",
        "question": "In which year did the most recent crime happen?",
        "query": "db.perpetrator.aggregate([ { $group: { _id: null, maxYear: { $max: \"$Year\" } } }, { $project: { maxYear: 1 } } ])",
        "gpt4 answer": "db.perpetrator.find({}, { Year: 1 }).sort({ Year: -1 }).limit(1)",
        "deepseek answer": "db.perpetrator.aggregate([ { $group: { _id: null, maxYear: { $max: \"$Year\" } } }, { $project: { maxYear: 1 } } ])"
    },
    {
        "question_id": 1369,
        "spider_question_id": 2326,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'",
        "question": "What campuses are located in the county of Los Angeles?",
        "query": "db.Campuses.find({ County: 'Los Angeles' }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ County: 'Los Angeles' }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1370,
        "spider_question_id": 2327,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Chico'",
        "question": "What are the names of all campuses located at Chico?",
        "query": "db.Campuses.find({ Location: 'Chico' }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ Location: 'Chico' }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1371,
        "spider_question_id": 2328,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Chico'",
        "question": "What campuses are located in Chico?",
        "query": "db.Campuses.find({ Location: 'Chico' }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ Location: 'Chico' }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1372,
        "spider_question_id": 2329,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE YEAR = 1958",
        "question": "Find all the campuses opened in 1958.",
        "query": "db.Campuses.find({ Year: 1958 }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ Year: 1958 }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1373,
        "spider_question_id": 2330,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE YEAR = 1958",
        "question": "What are the campuses that opened in 1958?",
        "query": "db.Campuses.find({ Year: 1958 }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ Year: 1958 }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1374,
        "spider_question_id": 2333,
        "db_id": "csu_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
        "question": "Which campus was opened between 1935 and 1939?",
        "query": "db.Campuses.find( { Year: { $gte: 1935, $lte: 1939 } }, { Campus: 1 } )",
        "gpt4 answer": "db.Campuses.find( { Year: { $gte: 1935, $lte: 1939 } }, { Campus: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1375,
        "spider_question_id": 2334,
        "db_id": "csu_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939",
        "question": "What campuses opened between 1935 and 1939?",
        "query": "db.Campuses.find({ Year: { $gte: 1935, $lte: 1939 } }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ Year: { $gte: 1935, $lte: 1939 } }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1376,
        "spider_question_id": 2335,
        "db_id": "csu_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Northridge' AND county = 'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION = 'San Francisco' AND county = 'San Francisco'",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "query": "db.Campuses.find( { $or: [ { Location: 'Northridge', County: 'Los Angeles' }, { Location: 'San Francisco', County: 'San Francisco' } ] }, { Campus: 1 } )",
        "gpt4 answer": "db.Campuses.find( { $or: [ { Location: 'Northridge', County: 'Los Angeles' }, { Location: 'San Francisco', County: 'San Francisco' } ] }, { Campus: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1377,
        "spider_question_id": 2336,
        "db_id": "csu_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Northridge' AND county = 'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION = 'San Francisco' AND county = 'San Francisco'",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "query": "db.Campuses.find( { $or: [ { Location: \"Northridge\", County: \"Los Angeles\" }, { Location: \"San Francisco\", County: \"San Francisco\" } ] }, { Campus: 1 } )",
        "gpt4 answer": "db.Campuses.find( { $or: [ { Location: \"Northridge\", County: \"Los Angeles\" }, { Location: \"San Francisco\", County: \"San Francisco\" } ] }, { Campus: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1378,
        "spider_question_id": 2340,
        "db_id": "csu_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = 'San Francisco State University' AND T2.year = 1996",
        "question": "What is the campus fee for San Francisco State University in 1996?",
        "query": "db.Campuses.aggregate([ { $match: { Campus: \"San Francisco State University\" } }, { $lookup: { from: \"csu_fees\", localField: \"Id\", foreignField: \"Campus\", as: \"fees\" } }, { $unwind: \"$fees\" }, { $match: { \"fees.Year\": 1996 } }, { $project: { CampusFee: \"$fees.CampusFee\" } } ])",
        "gpt4 answer": "db.Campuses.aggregate([ { $match: { Campus: \"San Francisco State University\" } }, { $lookup: { from: \"csu_fees\", localField: \"Id\", foreignField: \"Campus\", as: \"fees\" } }, { $unwind: \"$fees\" }, { $match: { \"fees.Year\": 1996 } }, { $project: { CampusFee: \"$fees.CampusFee\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1379,
        "spider_question_id": 2341,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "query": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgCampusFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgCampusFee\" ] } } }, { $count: \"count\" } ], as: \"count\" } }, { $unwind: \"$count\" }, { $project: { count: \"$count.count\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgCampusFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgCampusFee\" ] } } }, { $count: \"count\" } ], as: \"count\" } }, { $unwind: \"$count\" }, { $project: { count: \"$count.count\" } } ])"
    },
    {
        "question_id": 1380,
        "spider_question_id": 2342,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
        "question": "How many universities have a campus fee higher than average?",
        "query": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgCampusFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgCampusFee\" ] } } } ], as: \"higherThanAvg\" } }, { $project: { count: { $size: \"$higherThanAvg\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgCampusFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgCampusFee\" ] } } } ], as: \"higherThanAvg\" } }, { $project: { count: { $size: \"$higherThanAvg\" } } } ])"
    },
    {
        "question_id": 1381,
        "spider_question_id": 2343,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "query": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgCampusFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgCampusFee\" ] } } }, { $count: \"count\" } ], as: \"count\" } }, { $unwind: \"$count\" }, { $project: { count: \"$count.count\" } } ])",
        "gpt4 answer": "db.csu_fees.aggregate([ { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { averageFee: \"$averageFee\" }, pipeline: [ { $match: { $expr: { $gt: [\"$CampusFee\", \"$$averageFee\"] } } }, { $count: \"count\" } ], as: \"higherThanAverage\" } }, { $unwind: \"$higherThanAverage\" }, { $replaceRoot: { newRoot: \"$higherThanAverage\" } } ])",
        "deepseek answer": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgCampusFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgCampusFee\" ] } } }, { $count: \"count\" } ], as: \"count\" } }, { $unwind: \"$count\" }, { $project: { count: \"$count.count\" } } ])"
    },
    {
        "question_id": 1382,
        "spider_question_id": 2344,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee > (SELECT avg(campusfee) FROM csu_fees)",
        "question": "How many universities have a campus fee greater than the average?",
        "query": "db.csu_fees.aggregate([ { $group: { _id: null, average: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgFee: \"$average\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgFee\" ] } } } ], as: \"above_average\" } }, { $project: { count: { $size: \"$above_average\" } } } ])",
        "gpt4 answer": "db.csu_fees.aggregate([ { $group: { _id: null, avgCampusFee: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { averageFee: \"$avgCampusFee\" }, pipeline: [ { $match: { $expr: { $gt: [\"$CampusFee\", \"$$averageFee\"] } } }, { $group: { _id: null, count: { $sum: 1 } } } ], as: \"campusesAboveAverage\" }}, { $unwind: \"$campusesAboveAverage\" }, { $replaceRoot: { newRoot: \"$campusesAboveAverage\" } } ])",
        "deepseek answer": "db.csu_fees.aggregate([ { $group: { _id: null, average: { $avg: \"$CampusFee\" } } }, { $lookup: { from: \"csu_fees\", let: { avgFee: \"$average\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$CampusFee\", \"$$avgFee\" ] } } } ], as: \"above_average\" } }, { $project: { count: { $size: \"$above_average\" } } } ])"
    },
    {
        "question_id": 1383,
        "spider_question_id": 2346,
        "db_id": "csu_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles' AND YEAR > 1950",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "query": "db.Campuses.find({ County: \"Los Angeles\", Year: { $gt: 1950 } }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ County: \"Los Angeles\", Year: { $gt: 1950 } }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1384,
        "spider_question_id": 2347,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "Which year has the most degrees conferred?",
        "query": "db.degrees.aggregate([ { $group: { _id: \"$Year\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } } ])",
        "gpt4 answer": "db.degrees.aggregate([ { $group: { _id: \"$Year\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } } ])",
        "deepseek answer": "db.degrees.aggregate([ { $group: { _id: \"$Year\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } } ])"
    },
    {
        "question_id": 1385,
        "spider_question_id": 2348,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "In what year was the most degrees conferred?",
        "query": "db.degrees.aggregate([ { $group: { _id: \"$Year\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } } ])",
        "gpt4 answer": "db.degrees.aggregate([ { $group: { _id: \"$Year\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } } ])",
        "deepseek answer": "db.degrees.aggregate([ { $group: { _id: \"$Year\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Year: \"$_id\" } } ])"
    },
    {
        "question_id": 1386,
        "spider_question_id": 2349,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "Which campus has the most degrees conferred in all times?",
        "query": "db.degrees.aggregate([ { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 } , { $project: { Campus: \"$_id\" } }])",
        "gpt4 answer": "db.degrees.aggregate([ { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Campus: \"$_id\" } } ])",
        "deepseek answer": "db.degrees.aggregate([ { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 } , { $project: { Campus: \"$_id\" } }])"
    },
    {
        "question_id": 1387,
        "spider_question_id": 2350,
        "db_id": "csu_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "What campus has the most degrees conferrred over its entire existence?",
        "query": "db.degrees.aggregate([ { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Campus: \"$_id\" } } ])",
        "gpt4 answer": "db.degrees.aggregate([ { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.degrees.aggregate([ { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $project: { Campus: \"$_id\" } } ])"
    },
    {
        "question_id": 1388,
        "spider_question_id": 2351,
        "db_id": "csu_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1",
        "question": "Which campus has the most faculties in year 2003?",
        "query": "db.faculty.aggregate([ { $match: { Year: 2003 } }, { $group: { _id: \"$Campus\", totalFaculty: { $sum: \"$Faculty\" } } }, { $sort: { totalFaculty: -1 } }, { $limit: 1 }, { $lookup: { from: \"Campuses\", localField: \"_id\", foreignField: \"Id\", as: \"campusInfo\" } }, { $project: { campus: { $arrayElemAt: [\"$campusInfo.Campus\", 0] } } } ])",
        "gpt4 answer": "db.faculty.aggregate([ { $match: { Year: 2003 } }, { $group: { _id: \"$Campus\", totalFaculty: { $sum: \"$Faculty\" } } }, { $sort: { totalFaculty: -1 } }, { $limit: 1 }, { $lookup: { from: \"Campuses\", localField: \"_id\", foreignField: \"Id\", as: \"campusInfo\" } }, { $project: { campus: { $arrayElemAt: [\"$campusInfo.Campus\", 0] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1389,
        "spider_question_id": 2353,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996",
        "question": "Find the average fee on a CSU campus in 1996",
        "query": "db.csu_fees.aggregate([ { $match: { Year: 1996 } }, { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $project: { averageFee: 1 } } ])",
        "gpt4 answer": "db.csu_fees.aggregate([ { $match: { Year: 1996 } }, { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $project: { averageFee: 1 } } ])",
        "deepseek answer": "db.csu_fees.aggregate([ { $match: { Year: 1996 } }, { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $project: { averageFee: 1 } } ])"
    },
    {
        "question_id": 1390,
        "spider_question_id": 2354,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR = 1996",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "query": "db.csu_fees.aggregate([ { $match: { Year: 1996 } }, { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $project: { averageFee:1 } } ])",
        "gpt4 answer": "db.csu_fees.aggregate([ { $match: { Year: 1996 } }, { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $project: { averageFee: 1 } } ])",
        "deepseek answer": "db.csu_fees.aggregate([ { $match: { Year: 1996 } }, { $group: { _id: null, averageFee: { $avg: \"$CampusFee\" } } }, { $project: { averageFee:1 } } ])"
    },
    {
        "question_id": 1391,
        "spider_question_id": 2367,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'",
        "question": "List the campuses in Los Angeles county.",
        "query": "db.Campuses.find({ County: 'Los Angeles' }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ County: 'Los Angeles' }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1392,
        "spider_question_id": 2368,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'",
        "question": "What campuses are in Los Angeles county?",
        "query": "db.Campuses.find({ County: 'Los Angeles' }, { Campus: 1 })",
        "gpt4 answer": "db.Campuses.find({ County: 'Los Angeles' }, { Campus: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1393,
        "spider_question_id": 2373,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002",
        "question": "How many faculty is there in total in the year of 2002?",
        "query": "db.faculty.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: null, totalFaculty: { $sum: \"$Faculty\" } } }, { $project: { totalFaculty: 1 } } ])",
        "gpt4 answer": "db.faculty.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: null, totalFaculty: { $sum: \"$Faculty\" } } }, { $project: { totalFaculty: 1 } } ])",
        "deepseek answer": "db.faculty.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: null, totalFaculty: { $sum: \"$Faculty\" } } }, { $project: { totalFaculty: 1 } } ])"
    },
    {
        "question_id": 1394,
        "spider_question_id": 2374,
        "db_id": "csu_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(faculty) FROM faculty WHERE YEAR = 2002",
        "question": "How many faculty, in total, are there in the year 2002?",
        "query": "db.faculty.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: null, totalFaculty: { $sum: \"$Faculty\" } } } , { $project: { totalFaculty: 1 } }])",
        "gpt4 answer": "db.faculty.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: null, totalFaculty: { $sum: \"$Faculty\" } } }, { $project: { totalFaculty: 1 } } ])",
        "deepseek answer": "db.faculty.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: null, totalFaculty: { $sum: \"$Faculty\" } } } , { $project: { totalFaculty: 1 } }])"
    },
    {
        "question_id": 1395,
        "spider_question_id": 2375,
        "db_id": "csu_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = 'Long Beach State University'",
        "question": "What is the number of faculty lines in campus 'Long Beach State University' in 2002?",
        "query": "db.faculty.aggregate([ { $lookup: { from: \"Campuses\", localField: \"Campus\", foreignField: \"Id\", as: \"campus_info\" } }, { $match: { Year: 2002, \"campus_info.Campus\": \"Long Beach State University\" } }, { $project: { Faculty: 1 } } ])",
        "gpt4 answer": "db.faculty.aggregate([ { $lookup: { from: \"Campuses\", localField: \"Campus\", foreignField: \"Id\", as: \"campus_info\" } }, { $match: { Year: 2002, \"campus_info.Campus\": \"Long Beach State University\" } }, { $project: { Faculty: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1396,
        "spider_question_id": 2381,
        "db_id": "csu_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "query": "db.faculty.aggregate([ { $lookup: { from: \"degrees\", localField: \"Campus\", foreignField: \"Campus\", as: \"degree_data\" } }, { $unwind: \"$degree_data\" }, { $match: { \"degree_data.Year\": 2002, \"Year\": 2002 } }, { $sort: { \"degree_data.Degrees\": -1 } }, { $limit: 1 }, { $project: { Faculty: 1 } } ])",
        "gpt4 answer": "db.faculty.aggregate([ { $lookup: { from: \"degrees\", localField: \"Campus\", foreignField: \"Campus\", as: \"degree_data\" } }, { $unwind: \"$degree_data\" }, { $match: { \"degree_data.Year\": 2002, \"Year\": 2002 } }, { $sort: { \"degree_data.Degrees\": -1 } }, { $limit: 1 }, { $project: { Faculty: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1397,
        "spider_question_id": 2382,
        "db_id": "csu_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1",
        "question": "How many faculty members did the university that conferred the most degrees in 2002 have?",
        "query": "db.degrees.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $lookup: { from: \"faculty\", localField: \"_id\", foreignField: \"Campus\", as: \"facultyData\" } }, { $unwind: \"$facultyData\" }, { $match: { \"facultyData.Year\": 2002 } }, { $project: { faculty: \"$facultyData.Faculty\" } } ])",
        "gpt4 answer": "db.degrees.aggregate([ { $match: { Year: 2002 } }, { $group: { _id: \"$Campus\", totalDegrees: { $sum: \"$Degrees\" } } }, { $sort: { totalDegrees: -1 } }, { $limit: 1 }, { $lookup: { from: \"faculty\", localField: \"_id\", foreignField: \"Campus\", as: \"facultyData\" } }, { $unwind: \"$facultyData\" }, { $match: { \"facultyData.Year\": 2002 } }, { $project: { faculty: \"$facultyData.Faculty\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1398,
        "spider_question_id": 2388,
        "db_id": "csu_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = 'San Francisco State University'",
        "question": "How many people graduated from San Francisco State University in 2004?",
        "query": "db.discipline_enrollments.aggregate([ { $lookup: { from: \"Campuses\", localField: \"Campus\", foreignField: \"Id\", as: \"campus_info\" } }, { $match: { \"campus_info.Campus\": \"San Francisco State University\", \"Year\": 2004 } }, { $group: { _id: null, totalGraduates: { $sum: \"$Graduate\" } } }, { $project: { totalGraduates: 1 } } ])",
        "gpt4 answer": "db.discipline_enrollments.aggregate([ { $lookup: { from: \"Campuses\", localField: \"Campus\", foreignField: \"Id\", as: \"campus_info\" } }, { $match: { \"campus_info.Campus\": \"San Francisco State University\", \"Year\": 2004 } }, { $group: { _id: null, totalGraduates: { $sum: \"$Graduate\" } } }, { $project: { totalGraduates: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1399,
        "spider_question_id": 2397,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "question": "Which poll resource provided the most number of candidate information?",
        "query": "db.candidate.aggregate([ { $group: { _id: \"$Poll_Source\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Poll_Source: \"$_id\" } } ])",
        "gpt4 answer": "db.candidate.aggregate([ { $group: { _id: \"$Poll_Source\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Poll_Source: \"$_id\" } } ])",
        "deepseek answer": "db.candidate.aggregate([ { $group: { _id: \"$Poll_Source\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Poll_Source: \"$_id\" } } ])"
    },
    {
        "question_id": 1400,
        "spider_question_id": 2398,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the poll resource associated with the most candidates.",
        "query": "db.candidate.aggregate([ { $group: { _id: \"$Poll_Source\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { poll_source: \"$_id\" } } ])",
        "gpt4 answer": "db.candidate.aggregate([ { $group: { _id: \"$Poll_Source\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.candidate.aggregate([ { $group: { _id: \"$Poll_Source\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { poll_source: \"$_id\" } } ])"
    },
    {
        "question_id": 1401,
        "spider_question_id": 2399,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "question": "what are the top 3 highest support rates?",
        "query": "db.candidate.find({}, { Support_rate: 1 }).sort({ Support_rate: -1 }).limit(3)",
        "gpt4 answer": "db.candidate.find({}, { Support_rate: 1 }).sort({ Support_rate: -1 }).limit(3)",
        "deepseek answer": "."
    },
    {
        "question_id": 1402,
        "spider_question_id": 2401,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "query": "db.candidate.find({}, {Candidate_ID: 1}).sort({Oppose_rate: 1}).limit(1)",
        "gpt4 answer": "db.candidate.find({}, { Candidate_ID: 1 }).sort({ Oppose_rate: 1 }).limit(1)",
        "deepseek answer": "db.candidate.find({}, {Candidate_ID: 1}).sort({Oppose_rate: 1}).limit(1)"
    },
    {
        "question_id": 1403,
        "spider_question_id": 2402,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "query": "db.candidate.find({}, { Candidate_ID: 1 }).sort({ Oppose_rate: 1 }).limit(1)",
        "gpt4 answer": "db.candidate.find({}, { Candidate_ID: 1 }).sort({ Oppose_rate: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1404,
        "spider_question_id": 2403,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "db.candidate.find({}, { Support_rate: 1, Consider_rate: 1, Oppose_rate: 1 }).sort({ Unsure_rate: 1 })",
        "gpt4 answer": "db.candidate.find({}, { Support_rate: 1, Consider_rate: 1, Oppose_rate: 1 }).sort({ Unsure_rate: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1405,
        "spider_question_id": 2404,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Support_rate: 1, Consider_rate: 1, Oppose_rate: 1, } }, { $sort: { Unsure_rate: 1 } } ])",
        "gpt4 answer": "db.candidate.find({}, { Support_rate: 1, Consider_rate: 1, Oppose_rate: 1 }).sort({ Unsure_rate: 1 })",
        "deepseek answer": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $project: { Support_rate: 1, Consider_rate: 1, Oppose_rate: 1, } }, { $sort: { Unsure_rate: 1 } } ])"
    },
    {
        "question_id": 1406,
        "spider_question_id": 2405,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "question": "which poll source does the highest oppose rate come from?",
        "query": "db.candidate.aggregate([ { $sort: { Oppose_rate: -1 } }, { $limit: 1 }, { $project: { Poll_Source: 1 } } ])",
        "gpt4 answer": "db.candidate.find({}, { Poll_Source: 1 }).sort({ Oppose_rate: -1 }).limit(1)",
        "deepseek answer": "db.candidate.aggregate([ { $sort: { Oppose_rate: -1 } }, { $limit: 1 }, { $project: { Poll_Source: 1 } } ])"
    },
    {
        "question_id": 1407,
        "spider_question_id": 2406,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "query": "db.candidate.find({}, { Poll_Source: 1}).sort({Oppose_rate: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.candidate.find({}, { Poll_Source: 1}).sort({Oppose_rate: -1}).limit(1)"
    },
    {
        "question_id": 1408,
        "spider_question_id": 2407,
        "db_id": "candidate_poll",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM people ORDER BY date_of_birth",
        "question": "List all people names in the order of their date of birth from old to young.",
        "query": "db.people.find({}, { Name: 1}).sort({Date_of_Birth: 1})",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Date_of_Birth: 1 })",
        "deepseek answer": "db.people.find({}, { Name: 1}).sort({Date_of_Birth: 1})"
    },
    {
        "question_id": 1409,
        "spider_question_id": 2408,
        "db_id": "candidate_poll",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM people ORDER BY date_of_birth",
        "question": "What are the names of all people, ordered by their date of birth?",
        "query": "db.people.find({}, { Name: 1}).sort({Date_of_Birth: 1})",
        "gpt4 answer": "db.people.find({}, { Name: 1 }).sort({ Date_of_Birth: 1 })",
        "deepseek answer": "db.people.find({}, { Name: 1}).sort({Date_of_Birth: 1})"
    },
    {
        "question_id": 1410,
        "spider_question_id": 2409,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
        "question": "Find the average height and weight for all males (sex is M).",
        "query": "db.people.aggregate([ { $match: { Sex: \"M\" } }, { $group: { _id: null, avgHeight: { $avg: \"$Height\" }, avgWeight: { $avg: \"$Weight\" } } }, { $project: { avgHeight: 1, avgWeight:1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Sex: 'M' } }, { $group: { _id: null, avgHeight: { $avg: \"$Height\" }, avgWeight: { $avg: \"$Weight\" } } }, { $project: { avgHeight: 1, avgWeight: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $match: { Sex: \"M\" } }, { $group: { _id: null, avgHeight: { $avg: \"$Height\" }, avgWeight: { $avg: \"$Weight\" } } }, { $project: { avgHeight: 1, avgWeight:1 } } ])"
    },
    {
        "question_id": 1411,
        "spider_question_id": 2410,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(height) , avg(weight) FROM people WHERE sex = 'M'",
        "question": "What are the average height and weight across males (sex is M)?",
        "query": "db.people.aggregate([ { $match: { Sex: 'M' } }, { $group: { _id: null, avgHeight: { $avg: \"$Height\" }, avgWeight: { $avg: \"$Weight\" } }}, { $project: { avgHeight: 1, avgWeight:1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Sex: 'M' } }, { $group: { _id: null, avgHeight: { $avg: \"$Height\" }, avgWeight: { $avg: \"$Weight\" } } }, { $project: { avgHeight: 1, avgWeight: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $match: { Sex: 'M' } }, { $group: { _id: null, avgHeight: { $avg: \"$Height\" }, avgWeight: { $avg: \"$Weight\" } }}, { $project: { avgHeight: 1, avgWeight:1 } } ])"
    },
    {
        "question_id": 1412,
        "spider_question_id": 2413,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex",
        "question": "Find the average and minimum weight for each gender.",
        "query": "db.people.aggregate([ { $group: { _id: \"$Sex\", avgWeight: { $avg: \"$Weight\" }, minWeight: { $min: \"$Weight\" } } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Sex\", avgWeight: { $avg: \"$Weight\" }, minWeight: { $min: \"$Weight\" } } }, { $project: { sex: \"$_id\", avgWeight: 1, minWeight: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Sex\", avgWeight: { $avg: \"$Weight\" }, minWeight: { $min: \"$Weight\" } } } ])"
    },
    {
        "question_id": 1413,
        "spider_question_id": 2414,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(weight) , min(weight) , sex FROM people GROUP BY sex",
        "question": "What are the average and minimum weights for people of each sex?",
        "query": "db.people.aggregate([ { $group: { _id: \"$Sex\", avgWeight: { $avg: \"$Weight\" }, minWeight: { $min: \"$Weight\" } } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: \"$Sex\", AverageWeight: { $avg: \"$Weight\" }, MinimumWeight: { $min: \"$Weight\" } } }, { $project: { Sex: \"$_id\", AverageWeight: 1, MinimumWeight: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $group: { _id: \"$Sex\", avgWeight: { $avg: \"$Weight\" }, minWeight: { $min: \"$Weight\" } } } ])"
    },
    {
        "question_id": 1414,
        "spider_question_id": 2415,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "query": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $sort: { \"Support_rate\": -1 } }, { $limit: 1 }, { $project: { name: \"$candidate_info.Name\", sex: \"$candidate_info.Sex\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $sort: { \"Support_rate\": -1 } }, { $limit: 1 }, { $project: { name: \"$candidate_info.Name\", sex: \"$candidate_info.Sex\" } } ])"
    },
    {
        "question_id": 1415,
        "spider_question_id": 2416,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.name , t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $sort: { \"Support_rate\": -1 } }, { $limit: 1 }, { $project: { name: \"$candidate_info.Name\", sex: \"$candidate_info.Sex\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $sort: { \"Support_rate\": -1 } }, { $limit: 1 }, { $project: { name: \"$candidate_info.Name\", sex: \"$candidate_info.Sex\" } } ])"
    },
    {
        "question_id": 1416,
        "spider_question_id": 2419,
        "db_id": "candidate_poll",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "question": "which gender got the highest average uncertain ratio.",
        "query": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $group: { _id: \"$Sex\", avgUnsureRate: { $avg: \"$candidate_info.Unsure_rate\" } } }, { $sort: { avgUnsureRate: -1 } }, { $limit: 1 }, { $project: { Sex:\"$_id\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $group: { _id: \"$Sex\", averageUnsureRate: { $avg: \"$candidate_info.Unsure_rate\" } } }, { $sort: { averageUnsureRate: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $group: { _id: \"$Sex\", avgUnsureRate: { $avg: \"$candidate_info.Unsure_rate\" } } }, { $sort: { avgUnsureRate: -1 } }, { $limit: 1 }, { $project: { Sex:\"$_id\" } } ])"
    },
    {
        "question_id": 1417,
        "spider_question_id": 2420,
        "db_id": "candidate_poll",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "question": "What is the sex of the candidate who had the highest unsure rate?",
        "query": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $group: { _id: \"$people_info.Sex\", avgUnsureRate: { $avg: \"$Unsure_rate\" } } }, { $sort: { avgUnsureRate: -1 } }, { $limit: 1 }, { $project: { sex: \"$_id\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $group: { _id: \"$Sex\", averageUnsureRate: { $avg: \"$candidate_info.Unsure_rate\" } } }, { $sort: { averageUnsureRate: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.candidate.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $unwind: \"$people_info\" }, { $group: { _id: \"$people_info.Sex\", avgUnsureRate: { $avg: \"$Unsure_rate\" } } }, { $sort: { avgUnsureRate: -1 } }, { $limit: 1 }, { $project: { sex: \"$_id\" } } ])"
    },
    {
        "question_id": 1418,
        "spider_question_id": 2421,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "question": "what are the names of people who did not participate in the candidate election.",
        "query": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"electionParticipation\" } }, { $match: { electionParticipation: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"electionParticipation\" } }, { $match: { electionParticipation: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1419,
        "spider_question_id": 2422,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
        "question": "Give the names of people who did not participate in the candidate election.",
        "query": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_data\" } }, { $match: { \"candidate_data\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_data\" } }, { $match: { \"candidate_data\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1420,
        "spider_question_id": 2427,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "query": "db.candidate.aggregate([ { $group: { _id: null, maxSupportRate: { $max: \"$Support_rate\" }, minConsiderRate: { $min: \"$Consider_rate\" }, minOpposeRate: { $min: \"$Oppose_rate\" } } }, { $project: { maxSupportRate: 1, minConsiderRate: 1, minOpposeRate: 1 } } ])",
        "gpt4 answer": "db.candidate.aggregate([ { $group: { _id: null, highestSupportRate: { $max: \"$Support_rate\" }, lowestConsiderRate: { $min: \"$Consider_rate\" }, lowestOpposeRate: { $min: \"$Oppose_rate\" } } }, { $project: { highestSupportRate: 1, lowestConsiderRate: 1, lowestOpposeRate: 1 } } ])",
        "deepseek answer": "db.candidate.aggregate([ { $group: { _id: null, maxSupportRate: { $max: \"$Support_rate\" }, minConsiderRate: { $min: \"$Consider_rate\" }, minOpposeRate: { $min: \"$Oppose_rate\" } } }, { $project: { maxSupportRate: 1, minConsiderRate: 1, minOpposeRate: 1 } } ])"
    },
    {
        "question_id": 1421,
        "spider_question_id": 2428,
        "db_id": "candidate_poll",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(support_rate) , min(consider_rate) , min(oppose_rate) FROM candidate",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "query": "db.candidate.aggregate([ { $group: { _id: null, maxSupportRate: { $max: \"$Support_rate\" }, minConsiderRate: { $min: \"$Consider_rate\" }, minOpposeRate: { $min: \"$Oppose_rate\" } } }, { $project: { maxSupportRate: 1, minConsiderRate: 1, minOpposeRate: 1 } } ])",
        "gpt4 answer": "db.candidate.aggregate([ { $group: { _id: null, maxSupportRate: { $max: \"$Support_rate\" }, minConsiderRate: { $min: \"$Consider_rate\" }, minOpposeRate: { $min: \"$Oppose_rate\" } } }, { $project: { maxSupportRate:1, minConsiderRate:1, minOpposeRate:1 } } ])",
        "deepseek answer": "db.candidate.aggregate([ { $group: { _id: null, maxSupportRate: { $max: \"$Support_rate\" }, minConsiderRate: { $min: \"$Consider_rate\" }, minOpposeRate: { $min: \"$Oppose_rate\" } } }, { $project: { maxSupportRate: 1, minConsiderRate: 1, minOpposeRate: 1 } } ])"
    },
    {
        "question_id": 1422,
        "spider_question_id": 2429,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "query": "db.people.aggregate([ { $match: { Sex: \"F\" } }, { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $project: { Name: 1 } }, { $sort: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $project: { Name: 1 } }, { $sort: { Name: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $match: { Sex: \"F\" } }, { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $project: { Name: 1 } }, { $sort: { Name: 1 } } ])"
    },
    {
        "question_id": 1423,
        "spider_question_id": 2430,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "query": "db.people.aggregate([ { $match: { Sex: \"F\" } }, { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $sort: { Name: 1 } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $match: { Sex: 'F' } }, { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidates\" } }, { $match: { \"candidates\": { $ne: [] } } }, { $sort: { Name: 1 } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.people.aggregate([ { $match: { Sex: \"F\" } }, { $lookup: { from: \"candidate\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"candidate_info\" } }, { $unwind: \"$candidate_info\" }, { $sort: { Name: 1 } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 1424,
        "spider_question_id": 2431,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)",
        "question": "find the name of people whose height is lower than the average.",
        "query": "db.people.aggregate([ { $group: { _id: null, avgHeight: { $avg: \"$Height\" } } }, { $lookup: { from: \"people\", let: { avgHeight: \"$avgHeight\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Height\", \"$$avgHeight\"] } } }, { $project: { Name: 1 } } ], as: \"peopleWithLowerHeight\" }}, { $unwind: \"$peopleWithLowerHeight\" }, { $replaceRoot: { newRoot: \"$peopleWithLowerHeight\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: null, avgHeight: { $avg: \"$Height\" } } }, { $lookup: { from: \"people\", let: { avgHeight: \"$avgHeight\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Height\", \"$$avgHeight\"] } } }, { $project: { Name: 1 } } ], as: \"peopleWithLowerHeight\" }}, { $unwind: \"$peopleWithLowerHeight\" }, { $replaceRoot: { newRoot: \"$peopleWithLowerHeight\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1425,
        "spider_question_id": 2432,
        "db_id": "candidate_poll",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM people WHERE height < (SELECT avg(height) FROM people)",
        "question": "What are the names of people who are shorter than average?",
        "query": "db.people.aggregate([ { $group: { _id: null, avgHeight: { $avg: \"$Height\" } } }, { $lookup: { from: \"people\", let: { avgHeight: \"$avgHeight\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Height\", \"$$avgHeight\"] } } }, { $project: { Name: 1 } } ], as: \"peopleShorterThanAverage\" }}, { $unwind: \"$peopleShorterThanAverage\" }, { $replaceRoot: { newRoot: \"$peopleShorterThanAverage\" } } ])",
        "gpt4 answer": "db.people.aggregate([ { $group: { _id: null, avgHeight: { $avg: \"$Height\" } } }, { $lookup: { from: \"people\", let: { avgHeight: \"$avgHeight\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Height\", \"$$avgHeight\"] } } }, { $project: { Name: 1 } } ], as: \"peopleShorterThanAverage\" }}, { $unwind: \"$peopleShorterThanAverage\" }, { $replaceRoot: { newRoot: \"$peopleShorterThanAverage\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1426,
        "spider_question_id": 2433,
        "db_id": "candidate_poll",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM people",
        "question": "List all info about all people.",
        "query": "db.people.find({})",
        "gpt4 answer": "db.people.find({})",
        "deepseek answer": "db.people.find({})"
    },
    {
        "question_id": 1427,
        "spider_question_id": 2434,
        "db_id": "candidate_poll",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM people",
        "question": "What is all the information about all people?",
        "query": "db.people.find({})",
        "gpt4 answer": "db.people.find({})",
        "deepseek answer": "db.people.find({})"
    },
    {
        "question_id": 1428,
        "spider_question_id": 2435,
        "db_id": "movie_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "query": "db.Movie.find({director: 'Steven Spielberg'}, {title: 1})",
        "gpt4 answer": "db.Movie.find({ director: \"Steven Spielberg\" }, { title: 1 })",
        "deepseek answer": "db.Movie.find({director: 'Steven Spielberg'}, {title: 1})"
    },
    {
        "question_id": 1429,
        "spider_question_id": 2436,
        "db_id": "movie_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "query": "db.Movie.find({director: 'Steven Spielberg'}, {title: 1})",
        "gpt4 answer": "db.Movie.find({ director: 'Steven Spielberg' }, { title: 1 })",
        "deepseek answer": "db.Movie.find({director: 'Steven Spielberg'}, {title: 1})"
    },
    {
        "question_id": 1430,
        "spider_question_id": 2437,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "query": "db.Movie.find( { director: \"James Cameron\", year: { $gt: 2000 } }, { title: 1 } )",
        "gpt4 answer": "db.Movie.find({ director: \"James Cameron\", year: { $gt: 2000 } }, { title: 1 })",
        "deepseek answer": "db.Movie.find( { director: \"James Cameron\", year: { $gt: 2000 } }, { title: 1 } )"
    },
    {
        "question_id": 1431,
        "spider_question_id": 2438,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "query": "db.Movie.find({director: 'James Cameron', year: {$gt: 2000}}, {title: 1})",
        "gpt4 answer": "db.Movie.find({ director: \"James Cameron\", year: { $gt: 2000 }}, { title: 1 })",
        "deepseek answer": "db.Movie.find({director: 'James Cameron', year: {$gt: 2000}}, {title: 1})"
    },
    {
        "question_id": 1432,
        "spider_question_id": 2441,
        "db_id": "movie_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT director FROM Movie WHERE title = 'Avatar'",
        "question": "Who is the director of movie Avatar?",
        "query": "db.Movie.find({title: 'Avatar'}, {director: 1})",
        "gpt4 answer": "db.Movie.findOne({ title: 'Avatar' }, { director: 1 })",
        "deepseek answer": "db.Movie.find({title: 'Avatar'}, {director: 1})"
    },
    {
        "question_id": 1433,
        "spider_question_id": 2442,
        "db_id": "movie_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT director FROM Movie WHERE title = 'Avatar'",
        "question": "Who directed Avatar?",
        "query": "db.Movie.find({title: 'Avatar'}, {director: 1})",
        "gpt4 answer": "db.Movie.find({ title: 'Avatar' }, { director: 1 })",
        "deepseek answer": "db.Movie.find({title: 'Avatar'}, {director: 1})"
    },
    {
        "question_id": 1434,
        "spider_question_id": 2445,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'",
        "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "query": "db.Reviewer.find({\"name\": /Mike/}, {\"_id\": 0, \"rID\": 1})",
        "gpt4 answer": "db.Reviewer.find({\"name\": /Mike/}, {\"_id\": 0, \"rID\": 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1435,
        "spider_question_id": 2446,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'",
        "question": "What is the id of the reviewer whose name includes the word 'Mike'?",
        "query": "db.Reviewer.find({name: {$regex: /Mike/}}, { rID: 1})",
        "gpt4 answer": "db.Reviewer.find({ name: /Mike/ }, { rID: 1 })",
        "deepseek answer": "db.Reviewer.find({name: {$regex: /Mike/}}, { rID: 1})"
    },
    {
        "question_id": 1436,
        "spider_question_id": 2447,
        "db_id": "movie_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis'",
        "question": "What is the reviewer id of Daniel Lewis?",
        "query": "db.Reviewer.find({name: 'Daniel Lewis'}, { rID: 1})",
        "gpt4 answer": "db.Reviewer.findOne({ name: 'Daniel Lewis' }, { rID: 1 })",
        "deepseek answer": "db.Reviewer.find({name: 'Daniel Lewis'}, { rID: 1})"
    },
    {
        "question_id": 1437,
        "spider_question_id": 2448,
        "db_id": "movie_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis'",
        "question": "What is the id of the reviewer named Daniel Lewis?",
        "query": "db.Reviewer.findOne({ name: \"Daniel Lewis\" }, { rID: 1 })",
        "gpt4 answer": "db.Reviewer.findOne({ name: \"Daniel Lewis\" }, { rID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1438,
        "spider_question_id": 2451,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(stars) , min(stars) FROM Rating",
        "question": "What is the lowest and highest rating star?",
        "query": "db.Rating.aggregate([ { $group: { _id: null, max_stars: { $max: \"$stars\" }, min_stars: { $min: \"$stars\" } } }, { $project: { max_stars: 1, min_stars: 1 } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $group: { _id: null, maxStars: { $max: \"$stars\" }, minStars: { $min: \"$stars\" } } }, { $project: { maxStars: 1, minStars: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $group: { _id: null, max_stars: { $max: \"$stars\" }, min_stars: { $min: \"$stars\" } } }, { $project: { max_stars: 1, min_stars: 1 } } ])"
    },
    {
        "question_id": 1439,
        "spider_question_id": 2452,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(stars) , min(stars) FROM Rating",
        "question": "What is the maximum and mininum number of stars a rating can receive?",
        "query": "db.Rating.aggregate([ { $group: { _id: null, maxStars: { $max: \"$stars\" }, minStars: { $min: \"$stars\" } } }, { $project: { maxStars: 1, minStars: 1 } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $group: { _id: null, maxStars: { $max: \"$stars\" }, minStars: { $min: \"$stars\" } } }, { $project: { maxStars: 1, minStars: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $group: { _id: null, maxStars: { $max: \"$stars\" }, minStars: { $min: \"$stars\" } } }, { $project: { maxStars: 1, minStars: 1 } } ])"
    },
    {
        "question_id": 1440,
        "spider_question_id": 2453,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year",
        "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { \"ratings.stars\": { $gte: 4 } } }, { $project: { year: 1 } }, { $sort: { year: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $match: { \"ratings.stars\": { $gte: 4 } } }, { $group: { _id: \"$year\" } }, { $sort: { _id: 1 } }, { $project: { year: \"$_id\" } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { \"ratings.stars\": { $gte: 4 } } }, { $project: { year: 1 } }, { $sort: { year: 1 } } ])"
    },
    {
        "question_id": 1441,
        "spider_question_id": 2454,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { \"ratings.stars\": { $gte: 4 } } }, { $project: { year: 1 } }, { $sort: { year: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $match: { \"ratings.stars\": { $in: [4, 5] } } }, { $group: { _id: \"$year\" } }, { $sort: { _id: 1 } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { \"ratings.stars\": { $gte: 4 } } }, { $project: { year: 1 } }, { $sort: { year: 1 } } ])"
    },
    {
        "question_id": 1442,
        "spider_question_id": 2457,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
        "question": "What is the average rating star for each reviewer?",
        "query": "db.Rating.aggregate([ { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $group: { _id: \"$reviewer_info.name\", averageStars: { $avg: \"$stars\" } } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$reviewer\" }, { $group: { _id: \"$reviewer.name\", averageRating: { $avg: \"$stars\" } } }, { $project: { name: \"$_id\", averageRating: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $group: { _id: \"$reviewer_info.name\", averageStars: { $avg: \"$stars\" } } } ])"
    },
    {
        "question_id": 1443,
        "spider_question_id": 2458,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "query": "db.Rating.aggregate([ { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $group: { _id: \"$reviewer_info.name\", averageStars: { $avg: \"$stars\" } } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $group: { _id: \"$name\", averageStars: { $avg: \"$ratings.stars\" } } }, { $project: { name: \"$_id\", averageStars: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $group: { _id: \"$reviewer_info.name\", averageStars: { $avg: \"$stars\" } } } ])"
    },
    {
        "question_id": 1444,
        "spider_question_id": 2459,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "question": "Find the titles of all movies that have no ratings.",
        "query": "db.Movie.find( { mID: { $nin: db.Rating.distinct(\"mID\") } }, { title: 1 } )",
        "gpt4 answer": "db.Movie.find( { mID: { $nin: db.Rating.distinct(\"mID\") } }, { title: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1445,
        "spider_question_id": 2460,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
        "question": "What are the titles of all movies that have not been rated?",
        "query": "db.Movie.find({ mID: { $nin: db.Rating.distinct(\"mID\") } }, { title: 1 })",
        "gpt4 answer": "db.Movie.find({ mID: { $nin: db.Rating.distinct(\"mID\") } }, { title: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1446,
        "spider_question_id": 2463,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(T1.stars) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)",
        "question": "What is the average rating stars and title for the oldest movie?",
        "query": "db.Movie.aggregate([ { $sort: { year: 1 } }, { $limit: 1 }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $project: { title: 1, averageStars: { $avg: \"$ratings.stars\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Movie.aggregate([ { $sort: { year: 1 } }, { $limit: 1 }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $project: { title: 1, averageStars: { $avg: \"$ratings.stars\" } } } ])"
    },
    {
        "question_id": 1447,
        "spider_question_id": 2464,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(T1.stars) , T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT min(YEAR) FROM Movie)",
        "question": "For the oldest movie listed, what is its average rating and title?",
        "query": "db.Movie.aggregate([ { $sort: { year: 1 } }, { $limit: 1 }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $project: { title: 1, averageRating: { $avg: \"$ratings.stars\" } } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { year: { $eq: (db.Movie.find().sort({ year: 1 }).limit(1).toArray()[0].year) } } }, { $unwind: \"$ratings\" }, { $group: { _id: \"$title\", avgRating: { $avg: \"$ratings.stars\" } } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $sort: { year: 1 } }, { $limit: 1 }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $project: { title: 1, averageRating: { $avg: \"$ratings.stars\" } } } ])"
    },
    {
        "question_id": 1448,
        "spider_question_id": 2465,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM Movie WHERE YEAR = (SELECT max(YEAR) FROM Movie)",
        "question": "What is the name of the most recent movie?",
        "query": "db.Movie.find({}, {title: 1}).sort({year: -1}).limit(1)",
        "gpt4 answer": "db.Movie.find({}, {\"title\": 1, \"_id\": 0}).sort({\"year\": -1}).limit(1)",
        "deepseek answer": "db.Movie.find({}, {title: 1}).sort({year: -1}).limit(1)"
    },
    {
        "question_id": 1449,
        "spider_question_id": 2466,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM Movie WHERE YEAR = (SELECT max(YEAR) FROM Movie)",
        "question": "What is the title of the newest movie?",
        "query": "db.Movie.find({}, {title: 1}).sort({year: -1}).limit(1)",
        "gpt4 answer": "db.Movie.aggregate([ { $group: { _id: null, maxYear: { $max: \"$year\" } } }, { $lookup: { from: \"Movie\", localField: \"maxYear\", foreignField: \"year\", as: \"newestMovies\" } }, { $unwind: \"$newestMovies\" }, { $replaceRoot: { newRoot: \"$newestMovies\" } }, { $project: { title: 1 } } ])",
        "deepseek answer": "db.Movie.find({}, {title: 1}).sort({year: -1}).limit(1)"
    },
    {
        "question_id": 1450,
        "spider_question_id": 2467,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(T1.stars) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)",
        "question": "What is the maximum stars and year for the most recent movie?",
        "query": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $sort: { \"movie_info.year\": -1, \"stars\": -1 } }, { $group: { _id: \"$movie_info.year\", max_stars: { $max: \"$stars\" } } }, { $sort: { _id: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $sort: { \"movie_info.year\": -1, \"stars\": -1 } }, { $group: { _id: \"$movie_info.year\", max_stars: { $max: \"$stars\" } } }, { $sort: { _id: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1451,
        "spider_question_id": 2468,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(T1.stars) , T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT max(YEAR) FROM Movie)",
        "question": "What is highest rating for the most recent movie and when was it released?",
        "query": "db.Movie.aggregate([ { $sort: { year: -1 } }, { $limit: 1 }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" }}, { $unwind: \"$ratings\" }, { $group: { _id: \"$year\", highestRating: { $max: \"$ratings.stars\" } }}, { $project: { highestRating: 1, year: \"$_id\" }} ])",
        "gpt4 answer": "db.Movie.aggregate([ { $sort: { year: -1 } }, { $limit: 1 }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" }}, { $unwind: \"$ratings\" }, { $group: { _id: \"$year\", highestRating: { $max: \"$ratings.stars\" } }}, { $project: { highestRating: 1, year: \"$_id\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1452,
        "spider_question_id": 2469,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = 'Steven Spielberg')",
        "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
        "query": "db.Movie.aggregate([ { $match: { director: \"Steven Spielberg\" } }, { $group: { _id: null, maxYear: { $max: \"$year\" } } }, { $lookup: { from: \"Movie\", let: { maxSpielbergYear: \"$maxYear\" }, pipeline: [ { $match: { $expr: { $gt: [\"$year\", \"$$maxSpielbergYear\"] } } }, { $project: { title: 1 } } ], as: \"moviesAfterSpielberg\" } }, { $unwind: \"$moviesAfterSpielberg\" }, { $replaceRoot: { newRoot: \"$moviesAfterSpielberg\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $match: { director: \"Steven Spielberg\" } }, { $group: { _id: null, maxYear: { $max: \"$year\" } } }, { $lookup: { from: \"Movie\", let: { maxSpielbergYear: \"$maxYear\" }, pipeline: [ { $match: { $expr: { $gt: [\"$year\", \"$$maxSpielbergYear\"] } } }, { $project: { title: 1 } } ], as: \"moviesAfterSpielberg\" } }, { $unwind: \"$moviesAfterSpielberg\" }, { $replaceRoot: { newRoot: \"$moviesAfterSpielberg\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1453,
        "spider_question_id": 2470,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title FROM Movie WHERE YEAR > (SELECT max(YEAR) FROM Movie WHERE director = 'Steven Spielberg')",
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?",
        "query": "db.Movie.find( { year: { $gt: db.Movie.find({ director: \"Steven Spielberg\" }).sort({ year: -1 }).limit(1).next().year } }, { title: 1 } )",
        "gpt4 answer": "db.Movie.aggregate([ { $match: { director: \"Steven Spielberg\" } }, { $group: { _id: null, mostRecentYear: { $max: \"$year\" } } }, { $lookup: { from: \"Movie\", let: { recentYear: \"$mostRecentYear\" }, pipeline: [ { $match: { $expr: { $gt: [\"$year\", \"$$recentYear\"] } } }, { $project: { title: 1 } } ], as: \"moviesAfter\" }}, { $unwind: \"$moviesAfter\" }, { $replaceRoot: { newRoot: \"$moviesAfter\" } }, { $project: { title: 1 } } ])",
        "deepseek answer": "db.Movie.find( { year: { $gt: db.Movie.find({ director: \"Steven Spielberg\" }).sort({ year: -1 }).limit(1).next().year } }, { title: 1 } )"
    },
    {
        "question_id": 1454,
        "spider_question_id": 2475,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3",
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "query": "db.Rating.aggregate([ { $group: { _id: \"$rID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $lookup: { from: \"Reviewer\", localField: \"_id\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$reviewer\" }, { $project: { name: \"$reviewer.name\" } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $group: { _id: \"$rID\", count: { $sum: 1 } }}, { $match: { count: { $gte: 3 } }}, { $lookup: { from: \"Reviewer\", localField: \"_id\", foreignField: \"rID\", as: \"reviewer_info\" }}, { $unwind: \"$reviewer_info\" }, { $project: { name: \"$reviewer_info.name\" }} ])",
        "deepseek answer": "db.Rating.aggregate([ { $group: { _id: \"$rID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $lookup: { from: \"Reviewer\", localField: \"_id\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$reviewer\" }, { $project: { name: \"$reviewer.name\" } } ])"
    },
    {
        "question_id": 1455,
        "spider_question_id": 2476,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "query": "db.Rating.aggregate([ { $group: { _id: \"$rID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $lookup: { from: \"Reviewer\", localField: \"_id\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$reviewer\" }, { $project: { name: \"$reviewer.name\" } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratings\" } }, { $project: { name: 1, numberOfRatings: { $size: \"$ratings\" } } }, { $match: { numberOfRatings: { $gte: 3 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $group: { _id: \"$rID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $lookup: { from: \"Reviewer\", localField: \"_id\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$reviewer\" }, { $project: { name: \"$reviewer.name\" } } ])"
    },
    {
        "question_id": 1456,
        "spider_question_id": 2477,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "query": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"rating_info\" } }, { $unwind: \"$rating_info\" }, { $lookup: { from: \"Movie\", localField: \"rating_info.mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $match: { \"movie_info.title\": \"Gone with the Wind\" } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"rating_info\" } }, { $unwind: \"$rating_info\" }, { $lookup: { from: \"Movie\", localField: \"rating_info.mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $match: { \"movie_info.title\": \"Gone with the Wind\" } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1457,
        "spider_question_id": 2478,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
        "question": "What are the names of all the different reviewers who rates Gone with the Wind?",
        "query": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"RatingInfo\" } }, { $unwind: \"$RatingInfo\" }, { $lookup: { from: \"Movie\", localField: \"RatingInfo.mID\", foreignField: \"mID\", as: \"MovieInfo\" } }, { $unwind: \"$MovieInfo\" }, { $match: { \"MovieInfo.title\": \"Gone with the Wind\" } }, { $project: { name: 1 } }, { $group: { _id: \"$name\" } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"RatingInfo\" } }, { $unwind: \"$RatingInfo\" }, { $lookup: { from: \"Movie\", localField: \"RatingInfo.mID\", foreignField: \"mID\", as: \"MovieInfo\" } }, { $unwind: \"$MovieInfo\" }, { $match: { \"MovieInfo.title\": \"Gone with the Wind\" } }, { $project: { name: 1 } }, { $group: { _id: \"$name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1458,
        "spider_question_id": 2479,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'",
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $unwind: \"$reviewers\" }, { $match: { \"reviewers.name\": \"Sarah Martinez\" } }, { $group: { _id: \"$director\" } }, { $project: { director: \"$_id\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $unwind: \"$reviewers\" }, { $match: { \"reviewers.name\": \"Sarah Martinez\" } }, { $group: { _id: \"$director\" } }, { $project: { director: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1459,
        "spider_question_id": 2480,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "query": "db.Reviewer.aggregate([ { $match: { name: \"Sarah Martinez\" } }, { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"rating_info\" } }, { $unwind: \"$rating_info\" }, { $lookup: { from: \"Movie\", localField: \"rating_info.mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $project: { director: \"$movie_info.director\" } }, { $group: { _id: \"$director\" } }, { $project: { director: \"$_id\" } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $match: { name: \"Sarah Martinez\" } }, { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"rating_info\" } }, { $unwind: \"$rating_info\" }, { $lookup: { from: \"Movie\", localField: \"rating_info.mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $project: { director: \"$movie_info.director\" } }, { $group: { _id: \"$director\" } }, { $project: { director: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1460,
        "spider_question_id": 2481,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name",
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "query": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $match: { $expr: { $eq: [\"$movie_info.director\", \"$reviewer_info.name\"] } } }, { $group: { _id: { name: \"$reviewer_info.name\", title: \"$movie_info.title\", stars: \"$stars\" } } }, { $project: { \"reviewer name\": \"$_id.name\", \"movie title\": \"$_id.title\", \"number of stars\": \"$_id.stars\" } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $match: { $expr: { $eq: [\"$movie_info.director\", \"$reviewer_info.name\"] } } }, { $group: { _id: { name: \"$reviewer_info.name\", title: \"$movie_info.title\", stars: \"$stars\" } } }, { $project: { \"reviewer name\": \"$_id.name\", \"movie title\": \"$_id.title\", \"number of stars\": \"$_id.stars\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1461,
        "spider_question_id": 2482,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T3.name , T2.title , T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name",
        "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
        "query": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie\" } }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$movie\" }, { $unwind: \"$reviewer\" }, { $match: { $expr: { $eq: [\"$movie.director\", \"$reviewer.name\"] } } }, { $project: { name: \"$reviewer.name\", title: \"$movie.title\", stars: \"$stars\" } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie\" } }, { $unwind: \"$movie\" }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$reviewer\" }, { $match: { $expr: { $eq: [\"$reviewer.name\", \"$movie.director\"] } } }, { $group: { _id: { name: \"$reviewer.name\", title: \"$movie.title\", stars: \"$stars\" } } }, { $project: { name: \"$_id.name\", title: \"$_id.title\", stars: \"$_id.stars\" } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie\" } }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer\" } }, { $unwind: \"$movie\" }, { $unwind: \"$reviewer\" }, { $match: { $expr: { $eq: [\"$movie.director\", \"$reviewer.name\"] } } }, { $project: { name: \"$reviewer.name\", title: \"$movie.title\", stars: \"$stars\" } } ])"
    },
    {
        "question_id": 1462,
        "spider_question_id": 2483,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "question": "Return all reviewer names and movie names together in a single list.",
        "query": "db.Reviewer.aggregate([ { $project: { name: 1 } }, { $unionWith: { coll: \"Movie\", pipeline: [{ $project: { title: 1 } }] } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $project: { name: 1 } }, { $unionWith: { coll: \"Movie\", pipeline: [{ $project: { title: 1 } }] } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1463,
        "spider_question_id": 2485,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
        "question": "Find the titles of all movies not reviewed by Chris Jackson.",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { \"reviewers.name\": { $ne: \"Chris Jackson\" } } }, { $project: { \"_id\": 0, \"title\": 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { \"reviewers.name\": { $ne: \"Chris Jackson\" } } }, { $group: { _id: \"$title\" } }, { $project: { title: \"$_id\" } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { \"reviewers.name\": { $ne: \"Chris Jackson\" } } }, { $project: { \"_id\": 0, \"title\": 1 } } ])"
    },
    {
        "question_id": 1464,
        "spider_question_id": 2486,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
        "question": "What are the titles of all movies that were not reviewed by Chris Jackson?",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewer_ratings\" } }, { $match: { \"reviewer_ratings.name\": { $ne: \"Chris Jackson\" } } }, { $project: { title: 1 } }, { $group: { _id: \"$title\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewer_ratings\" } }, { $match: { \"reviewer_ratings.name\": { $ne: \"Chris Jackson\" } } }, { $project: { title: 1 } }, { $group: { _id: \"$title\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1465,
        "spider_question_id": 2487,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title",
        "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.",
        "query": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $push: \"$title\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $project: { title: \"$movies\", director: \"$_id\" } }, { $sort: { director: 1, title: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $push: \"$title\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $project: { title: \"$movies\", director: \"$_id\" } }, { $sort: { director: 1, title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1466,
        "spider_question_id": 2488,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director , T1.title",
        "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?",
        "query": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $addToSet: { title: \"$title\" } }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $project: { director: \"$_id\", title: \"$movies.title\" } }, { $sort: { director: 1, title: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $addToSet: { title: \"$title\" } }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $project: { director: \"$_id\", title: \"$movies.title\" } }, { $sort: { director: 1, title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1467,
        "spider_question_id": 2489,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title",
        "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.",
        "query": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $push: { title: \"$title\", year: \"$year\" } }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $replaceRoot: { newRoot: \"$movies\" } }, { $project: { title: 1, year: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $push: { title: \"$title\", year: \"$year\" } }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $replaceRoot: { newRoot: \"$movies\" } }, { $project: { title: 1, year: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1468,
        "spider_question_id": 2490,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.title , T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title",
        "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?",
        "query": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $push: { title: \"$title\", year: \"$year\" } }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $project: { title: \"$movies.title\", year: \"$movies.year\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $group: { _id: \"$director\", movies: { $push: { title: \"$title\", year: \"$year\" } }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $unwind: \"$movies\" }, { $project: { title: \"$movies.title\", year: \"$movies.year\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1469,
        "spider_question_id": 2493,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT director FROM Movie WHERE director != 'null' GROUP BY director HAVING count(*) = 1",
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "query": "db.Movie.aggregate([ { $match: { director: { $ne: null } } }, { $group: { _id: \"$director\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { director: \"$_id\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $match: { director: { $ne: null } } }, { $group: { _id: \"$director\", movieCount: { $sum: 1 } } }, { $match: { movieCount: 1 } }, { $project: { director: \"$_id\" } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $match: { director: { $ne: null } } }, { $group: { _id: \"$director\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { director: \"$_id\" } } ])"
    },
    {
        "question_id": 1470,
        "spider_question_id": 2494,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT director FROM Movie WHERE director != 'null' GROUP BY director HAVING count(*) = 1",
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "query": "db.Movie.aggregate([ { $match: { director: { $ne: null } } }, { $group: { _id: \"$director\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { director: \"$_id\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $match: { director: { $ne: null } } }, { $group: { _id: \"$director\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $match: { director: { $ne: null } } }, { $group: { _id: \"$director\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { director: \"$_id\" } } ])"
    },
    {
        "question_id": 1471,
        "spider_question_id": 2497,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "question": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "query": "db.Rating.aggregate([ { $group: { _id: \"$mID\", averageRating: { $avg: \"$stars\" } } }, { $sort: { averageRating: -1 } }, { $limit: 1 }, { $lookup: { from: \"Movie\", localField: \"_id\", foreignField: \"mID\", as: \"movieDetails\" } }, { $unwind: \"$movieDetails\" }, { $project: { title: \"$movieDetails.title\", averageRating: 1 } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $group: { _id: \"$mID\", averageRating: { $avg: \"$stars\" } } }, { $sort: { averageRating: -1 } }, { $limit: 1 }, { $lookup: { from: \"Movie\", localField: \"_id\", foreignField: \"mID\", as: \"movieDetails\" } }, { $unwind: \"$movieDetails\" }, { $project: { title: \"$movieDetails.title\", averageRating: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1472,
        "spider_question_id": 2498,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.title , avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
        "question": "What are the movie titles with the highest average rating and what are those ratings?",
        "query": "db.Rating.aggregate([ { $group: { _id: \"$mID\", avgRating: { $avg: \"$stars\" } } }, { $sort: { avgRating: -1 } }, { $limit: 1 }, { $lookup: { from: \"Movie\", localField: \"_id\", foreignField: \"mID\", as: \"movieDetails\" } }, { $unwind: \"$movieDetails\" }, { $project: { title: \"$movieDetails.title\", avgRating: 1 } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $group: { _id: \"$mID\", avgRating: { $avg: \"$stars\" } } }, { $sort: { avgRating: -1 } }, { $limit: 1 }, { $lookup: { from: \"Movie\", localField: \"_id\", foreignField: \"mID\", as: \"movieDetails\" } }, { $unwind: \"$movieDetails\" }, { $project: { title: \"$movieDetails.title\", avgRating: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1473,
        "spider_question_id": 2503,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.title , T1.stars , T2.director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != 'null' GROUP BY director",
        "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "query": "db.Movie.aggregate([ { $match: { director: {$ne: null} } }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratingInfo\" } }, { $unwind: \"$ratingInfo\" }, { $sort: { \"ratingInfo.stars\": -1 } }, { $group: { _id: \"$director\", title: {$first: \"$title\"}, maxRating: {$first: \"$ratingInfo.stars\"} } }, { $project: { director: \"$_id\", title: 1, highestRating: \"$maxRating\" } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $match: { director: {$ne: null} } }, { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratingInfo\" } }, { $unwind: \"$ratingInfo\" }, { $sort: { \"ratingInfo.stars\": -1 } }, { $group: { _id: \"$director\", title: {$first: \"$title\"}, maxRating: {$first: \"$ratingInfo.stars\"} } }, { $project: { director: \"$_id\", title: 1, highestRating: \"$maxRating\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1474,
        "spider_question_id": 2506,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.title , T1.rID , T1.stars , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID",
        "question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?",
        "query": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $sort: { \"stars\": 1 } }, { $group: { _id: \"$rID\", title: { $first: \"$movie_info.title\" }, stars: { $first: \"$stars\" } } }, { $project: { title: 1, rID: \"$_id\", stars: 1 } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $lookup: { from: \"Movie\", localField: \"mID\", foreignField: \"mID\", as: \"movie_info\" } }, { $unwind: \"$movie_info\" }, { $sort: { \"stars\": 1 } }, { $group: { _id: \"$rID\", title: { $first: \"$movie_info.title\" }, stars: { $first: \"$stars\" } } }, { $project: { title: 1, rID: \"$_id\", stars: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1475,
        "spider_question_id": 2513,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
        "question": "Find the names of reviewers who had given higher than 3 star ratings.",
        "query": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratingInfo\" } }, { $unwind: \"$ratingInfo\" }, { $match: { \"ratingInfo.stars\": { $gt: 3 } } }, { $project: { name: 1 } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratingInfo\" } }, { $unwind: \"$ratingInfo\" }, { $match: { \"ratingInfo.stars\": { $gt: 3 } } }, { $project: { name: 1 } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1476,
        "spider_question_id": 2514,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
        "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
        "query": "db.Rating.aggregate([ { $match: { stars: { $gt: 3 } } }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $project: { name: \"$reviewer_info.name\" } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $match: { \"ratings.stars\": { $gt: 3 } } }, { $group: { _id: \"$rID\", name: { $first: \"$name\" } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $match: { stars: { $gt: 3 } } }, { $lookup: { from: \"Reviewer\", localField: \"rID\", foreignField: \"rID\", as: \"reviewer_info\" } }, { $unwind: \"$reviewer_info\" }, { $project: { name: \"$reviewer_info.name\" } } ])"
    },
    {
        "question_id": 1477,
        "spider_question_id": 2519,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT mID , avg(stars) FROM Rating GROUP BY mID HAVING count(*) >= 2",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "query": "db.Rating.aggregate([ { $group: { _id: \"$mID\", avgStars: { $avg: \"$stars\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { mID: \"$_id\", avgStars: 1 } } ])",
        "gpt4 answer": "db.Rating.aggregate([ { $group: { _id: \"$mID\", averageStars: { $avg: \"$stars\" }, count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } } }, { $project: { mID: \"$_id\", averageStars: 1 } } ])",
        "deepseek answer": "db.Rating.aggregate([ { $group: { _id: \"$mID\", avgStars: { $avg: \"$stars\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { mID: \"$_id\", avgStars: 1 } } ])"
    },
    {
        "question_id": 1478,
        "spider_question_id": 2522,
        "db_id": "movie_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
        "question": "What are the ids of all reviewers who did not give 4 stars?",
        "query": "db.Rating.aggregate([ {$project: {rID: 1, stars: 1}}, {$group: {_id: \"$rID\", stars: {$push: \"$stars\"}}}, {$match: {stars: {$ne: 4}}}, {$project: { rID: \"$_id\"}} ])",
        "gpt4 answer": "db.Rating.aggregate([ {$project: {rID: 1, stars: 1}}, {$group: {_id: \"$rID\", stars: {$push: \"$stars\"}}}, {$match: {stars: {$ne: 4}}}, {$project: { rID: \"$_id\"}} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1479,
        "spider_question_id": 2525,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { $or: [ {\"reviewers.name\": \"Brittany Harris\"}, {\"year\": {$gt: 2000}} ] } }, { $project: { \"_id\": 0, \"title\": 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { $or: [ { \"reviewers.name\": \"Brittany Harris\" }, { year: { $gt: 2000 } } ] } }, { $group: { _id: \"$title\" } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { $or: [ {\"reviewers.name\": \"Brittany Harris\"}, {\"year\": {$gt: 2000}} ] } }, { $project: { \"_id\": 0, \"title\": 1 } } ])"
    },
    {
        "question_id": 1480,
        "spider_question_id": 2526,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { $or: [ {\"reviewers.name\": \"Brittany Harris\"}, {\"year\": {$gt: 2000}} ] } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $match: { year: { $gt: 2000 } } }, { $project: { title: 1 } }, { $unionWith: { coll: \"Reviewer\", pipeline: [ { $match: { name: \"Brittany Harris\" } }, { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratings\" } }, { $unwind: \"$ratings\" }, { $lookup: { from: \"Movie\", localField: \"ratings.mID\", foreignField: \"mID\", as: \"movies\" } }, { $unwind: \"$movies\" }, { $project: { title: \"$movies.title\" } } ] }}, { $group: { _id: \"$title\" } }, { $project: { title: \"$_id\" } } ])",
        "deepseek answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $lookup: { from: \"Reviewer\", localField: \"ratings.rID\", foreignField: \"rID\", as: \"reviewers\" } }, { $match: { $or: [ {\"reviewers.name\": \"Brittany Harris\"}, {\"year\": {$gt: 2000}} ] } }, { $project: { title: 1 } } ])"
    },
    {
        "question_id": 1481,
        "spider_question_id": 2527,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' OR YEAR < 1980",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "query": "db.Movie.find( { $or: [ { director: \"James Cameron\" }, { year: { $lt: 1980 } } ] }, { title: 1 } )",
        "gpt4 answer": "db.Movie.find( { $or: [{ year: { $lt: 1980 } }, { director: 'James Cameron' }] }, { title: 1 } )",
        "deepseek answer": "db.Movie.find( { $or: [ { director: \"James Cameron\" }, { year: { $lt: 1980 } } ] }, { title: 1 } )"
    },
    {
        "question_id": 1482,
        "spider_question_id": 2528,
        "db_id": "movie_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' OR YEAR < 1980",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "query": "db.Movie.find( { $or: [ { director: 'James Cameron' }, { year: { $lt: 1980 } } ] }, { title: 1 } )",
        "gpt4 answer": "db.Movie.find( { $or: [ { director: \"James Cameron\" }, { year: { $lt: 1980 } } ] }, { title: 1 } )",
        "deepseek answer": "db.Movie.find( { $or: [ { director: 'James Cameron' }, { year: { $lt: 1980 } } ] }, { title: 1 } )"
    },
    {
        "question_id": 1483,
        "spider_question_id": 2529,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4",
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "query": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratings\" }}, { $unwind: \"$ratings\" }, { $match: { \"ratings.stars\": { $in: [3, 4] } } }, { $group: { _id: \"$rID\", name: { $first: \"$name\" }, stars: { $addToSet: \"$ratings.stars\" } }}, { $match: { stars: { $all: [3, 4] } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Reviewer.aggregate([ { $lookup: { from: \"Rating\", localField: \"rID\", foreignField: \"rID\", as: \"ratings\" }}, { $unwind: \"$ratings\" }, { $match: { \"ratings.stars\": { $in: [3, 4] } } }, { $group: { _id: \"$rID\", name: { $first: \"$name\" }, stars: { $addToSet: \"$ratings.stars\" } }}, { $match: { stars: { $all: [3, 4] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1484,
        "spider_question_id": 2531,
        "db_id": "movie_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "query": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { \"ratings.stars\": { $in: [3, 4] } } }, { $project: { title: 1, threeStars: { $filter: { input: \"$ratings\", as: \"rating\", cond: { $eq: [\"$$rating.stars\", 3] } } }, fourStars: { $filter: { input: \"$ratings\", as: \"rating\", cond: { $eq: [\"$$rating.stars\", 4] } } } } }, { $match: { $and: [ { threeStars: { $ne: [] } }, { fourStars: { $ne: [] } } ] } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.Movie.aggregate([ { $lookup: { from: \"Rating\", localField: \"mID\", foreignField: \"mID\", as: \"ratings\" } }, { $match: { \"ratings.stars\": { $in: [3, 4] } } }, { $project: { title: 1, threeStars: { $filter: { input: \"$ratings\", as: \"rating\", cond: { $eq: [\"$$rating.stars\", 3] } } }, fourStars: { $filter: { input: \"$ratings\", as: \"rating\", cond: { $eq: [\"$$rating.stars\", 4] } } } } }, { $match: { $and: [ { threeStars: { $ne: [] } }, { fourStars: { $ne: [] } } ] } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1485,
        "spider_question_id": 2535,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "question": "List the names of counties in descending order of population.",
        "query": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1})",
        "gpt4 answer": "db.county_public_safety.find({}, { Name: 1 }).sort({ Population: -1 })",
        "deepseek answer": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1})"
    },
    {
        "question_id": 1486,
        "spider_question_id": 2536,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "query": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1})",
        "gpt4 answer": "db.county_public_safety.find({}, { Name: 1 }).sort({ Population: -1 })",
        "deepseek answer": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1})"
    },
    {
        "question_id": 1487,
        "spider_question_id": 2539,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety",
        "question": "What are the minimum and maximum crime rate of counties?",
        "query": "db.county_public_safety.aggregate([ { $group: { _id: null, minCrimeRate: { $min: \"$Crime_rate\" }, maxCrimeRate: { $max: \"$Crime_rate\" } } }, { $project: { minCrimeRate: 1, maxCrimeRate: 1 } } ])",
        "gpt4 answer": "db.county_public_safety.aggregate([ { $group: { _id: null, minCrimeRate: { $min: \"$Crime_rate\" }, maxCrimeRate: { $max: \"$Crime_rate\" } } }, { $project: { minCrimeRate: 1, maxCrimeRate: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1488,
        "spider_question_id": 2540,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(Crime_rate) , max(Crime_rate) FROM county_public_safety",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "query": "db.county_public_safety.aggregate([ { $group: { _id: null, minCrimeRate: { $min: \"$Crime_rate\" }, maxCrimeRate: { $max: \"$Crime_rate\" } } }, { $project: { minCrimeRate: 1, maxCrimeRate: 1 } } ])",
        "gpt4 answer": "db.county_public_safety.aggregate([ { $group: { _id: null, minCrimeRate: { $min: \"$Crime_rate\" }, maxCrimeRate: { $max: \"$Crime_rate\" } } }, { $project: { minCrimeRate: 1, maxCrimeRate: 1 } } ])",
        "deepseek answer": "db.county_public_safety.aggregate([ { $group: { _id: null, minCrimeRate: { $min: \"$Crime_rate\" }, maxCrimeRate: { $max: \"$Crime_rate\" } } }, { $project: { minCrimeRate: 1, maxCrimeRate: 1 } } ])"
    },
    {
        "question_id": 1489,
        "spider_question_id": 2541,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "query": "db.county_public_safety.find({}, {Crime_rate: 1}).sort({Police_officers: 1})",
        "gpt4 answer": "db.county_public_safety.find({}, {Crime_rate: 1}).sort({Police_officers: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1490,
        "spider_question_id": 2542,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "query": "db.county_public_safety.find({}, {Crime_rate: 1}).sort({Police_officers: 1})",
        "gpt4 answer": "db.county_public_safety.find({}, { Crime_rate: 1 }).sort({ Police_officers: 1 })",
        "deepseek answer": "db.county_public_safety.find({}, {Crime_rate: 1}).sort({Police_officers: 1})"
    },
    {
        "question_id": 1491,
        "spider_question_id": 2543,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM city ORDER BY Name ASC",
        "question": "What are the names of cities in ascending alphabetical order?",
        "query": "db.city.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.city.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.city.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 1492,
        "spider_question_id": 2544,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM city ORDER BY Name ASC",
        "question": "Return the names of cities, ordered alphabetically.",
        "query": "db.city.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.city.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.city.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 1493,
        "spider_question_id": 2545,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Hispanic FROM city WHERE Black > 10",
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "query": "db.city.aggregate([ { $match: { Black: { $gt: 10 } } }, { $project: { Hispanic: 1 } } ])",
        "gpt4 answer": "db.city.aggregate([ { $match: { Black: { $gt: 10 } } }, { $project: { Hispanic: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $match: { Black: { $gt: 10 } } }, { $project: { Hispanic: 1 } } ])"
    },
    {
        "question_id": 1494,
        "spider_question_id": 2546,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Hispanic FROM city WHERE Black > 10",
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "query": "db.city.aggregate([ { $match: { Black: { $gt: 10 } } }, { $project: { Hispanic: 1 } } ])",
        "gpt4 answer": "db.city.aggregate([ { $match: { Black: { $gt: 10 } } }, { $project: { Hispanic: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $match: { Black: { $gt: 10 } } }, { $project: { Hispanic: 1 } } ])"
    },
    {
        "question_id": 1495,
        "spider_question_id": 2547,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "List the name of the county with the largest population.",
        "query": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1}).limit(1)",
        "gpt4 answer": "db.county_public_safety.find({}, { Name: 1 }).sort({ Population: -1 }).limit(1)",
        "deepseek answer": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1}).limit(1)"
    },
    {
        "question_id": 1496,
        "spider_question_id": 2548,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "What is the name of the county with the greatest population?",
        "query": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1}).limit(1)",
        "gpt4 answer": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1}).limit(1)",
        "deepseek answer": "db.county_public_safety.find({}, {Name: 1}).sort({Population: -1}).limit(1)"
    },
    {
        "question_id": 1497,
        "spider_question_id": 2549,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "question": "List the names of the city with the top 5 white percentages.",
        "query": "db.city.find({}, {Name: 1}).sort({White: -1}).limit(5)",
        "gpt4 answer": "db.city.aggregate([ { $project: { Name: 1, WhitePercentage: { $divide: [\"$White\", { $add: [\"$White\", \"$Black\", \"$Amerindian\", \"$Asian\", \"$Multiracial\", \"$Hispanic\"] }] } } }, { $sort: { WhitePercentage: -1 } }, { $limit: 5 }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.city.find({}, {Name: 1}).sort({White: -1}).limit(5)"
    },
    {
        "question_id": 1498,
        "spider_question_id": 2550,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "question": "What are the names of the five cities with the greatest proportion of white people?",
        "query": "db.city.find({}, {Name: 1}).sort({White: -1}).limit(5)",
        "gpt4 answer": "db.city.find({}, { Name: 1 }).sort({ White: -1 }).limit(5)",
        "deepseek answer": "db.city.find({}, {Name: 1}).sort({White: -1}).limit(5)"
    },
    {
        "question_id": 1499,
        "spider_question_id": 2551,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
        "question": "Show names of cities and names of counties they are in.",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { City_Name: \"$Name\", County_Name: \"$county_info.Name\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { city_name: \"$Name\", county_name: \"$county_info.Name\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { City_Name: \"$Name\", County_Name: \"$county_info.Name\" } } ])"
    },
    {
        "question_id": 1500,
        "spider_question_id": 2552,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
        "question": "What are the names of cities, as well as the names of the counties they correspond to?",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { city_name: \"$Name\", county_name: \"$county_info.Name\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { city_name: \"$Name\", county_name: \"$county_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1501,
        "spider_question_id": 2553,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
        "question": "Show white percentages of cities and the crime rates of counties they are in.",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { White: 1, Crime_rate: \"$county_info.Crime_rate\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { White: \"$White\", Crime_rate: \"$county_info.Crime_rate\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { White: 1, Crime_rate: \"$county_info.Crime_rate\" } } ])"
    },
    {
        "question_id": 1502,
        "spider_question_id": 2554,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
        "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { White: 1, Crime_rate: \"$county_info.Crime_rate\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { White: 1, Crime_rate: \"$county_info.Crime_rate\" } } ])"
    },
    {
        "question_id": 1503,
        "spider_question_id": 2555,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
        "question": "Show the name of cities in the county that has the largest number of police officers.",
        "query": "db.county_public_safety.aggregate([ { $sort: { Police_officers: -1 } }, { $limit: 1 }, { $lookup: { from: \"city\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"city_info\" } }, { $unwind: \"$city_info\" }, { $project: { name: \"$city_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.county_public_safety.aggregate([ { $sort: { Police_officers: -1 } }, { $limit: 1 }, { $lookup: { from: \"city\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"city_info\" } }, { $unwind: \"$city_info\" }, { $project: { name: \"$city_info.Name\" } } ])"
    },
    {
        "question_id": 1504,
        "spider_question_id": 2557,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)",
        "question": "Show the number of cities in counties that have a population more than 20000.",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county\" } }, { $match: { \"county.Population\": { $gt: 20000 } } }, { $count: \"numberOfCities\" } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county\" } }, { $match: { \"county.Population\": { $gt: 20000 } } }, { $count: \"numberOfCities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1505,
        "spider_question_id": 2558,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)",
        "question": "How many cities are in counties that have populations of over 20000?",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $match: { \"county_info.Population\": { $gt: 20000 } } }, { $count: \"number_of_cities\" } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $match: { \"county_info.Population\": { $gt: 20000 } } }, { $count: \"number_of_cities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1506,
        "spider_question_id": 2559,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "query": "db.city.aggregate([ { $match: { White: { $gt: 90 } } }, { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { Crime_rate: \"$county_info.Crime_rate\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $match: { White: { $gt: 90 } } }, { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county\" } }, { $unwind: \"$county\" }, { $project: { \"Crime_rate\": \"$county.Crime_rate\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $match: { White: { $gt: 90 } } }, { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { Crime_rate: \"$county_info.Crime_rate\" } } ])"
    },
    {
        "question_id": 1507,
        "spider_question_id": 2560,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "query": "db.city.aggregate([ { $match: { White: { $gt: 90 } } }, { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { Crime_rate: \"$county_info.Crime_rate\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $match: { White: { $gt: 90 } } }, { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_data\" } }, { $unwind: \"$county_data\" }, { $project: { Crime_rate: \"$county_data.Crime_rate\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $match: { White: { $gt: 90 } } }, { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $project: { Crime_rate: \"$county_info.Crime_rate\" } } ])"
    },
    {
        "question_id": 1508,
        "spider_question_id": 2561,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "question": "Please show the police forces and the number of counties with each police force.",
        "query": "db.county_public_safety.aggregate([ { $group: { _id: \"$Police_force\", count: { $sum: 1 } } }, { $project: { Police_force: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Police_force\", num_counties: { $sum: 1 } }} ])",
        "deepseek answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Police_force\", count: { $sum: 1 } } }, { $project: { Police_force: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1509,
        "spider_question_id": 2562,
        "db_id": "county_public_safety",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "question": "How many counties correspond to each police force?",
        "query": "db.county_public_safety.aggregate([ { $group: { _id: \"$Police_force\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Police_force\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Police_force\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1510,
        "spider_question_id": 2563,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the location shared by most counties?",
        "query": "db.county_public_safety.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 1511,
        "spider_question_id": 2564,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which location has the most corresponding counties?",
        "query": "db.county_public_safety.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.county_public_safety.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 1512,
        "spider_question_id": 2569,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "query": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_data\" } }, { $match: { \"county_data.Crime_rate\": { $lt: 100 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_data\" } }, { $match: { \"county_data.Crime_rate\": { $lt: 100 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1513,
        "spider_question_id": 2570,
        "db_id": "county_public_safety",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)",
        "question": "What are the names of cities that are in counties that have a crime rate below 100?",
        "query": "db.county_public_safety.aggregate([ { $match: { Crime_rate: { $lt: 100 } } }, { $lookup: { from: \"city\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"cities\" } }, { $unwind: \"$cities\" }, { $project: { name: \"$cities.Name\" } } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"county_public_safety\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"county_data\" } }, { $match: { \"county_data.Crime_rate\": { $lt: 100 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.county_public_safety.aggregate([ { $match: { Crime_rate: { $lt: 100 } } }, { $lookup: { from: \"city\", localField: \"County_ID\", foreignField: \"County_ID\", as: \"cities\" } }, { $unwind: \"$cities\" }, { $project: { name: \"$cities.Name\" } } ])"
    },
    {
        "question_id": 1514,
        "spider_question_id": 2571,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "question": "Show the case burden of counties in descending order of population.",
        "query": "db.county_public_safety.find({}, {Case_burden: 1}).sort({Population: -1})",
        "gpt4 answer": "db.county_public_safety.find({}, { Case_burden: 1 }).sort({ Population: -1 })",
        "deepseek answer": "db.county_public_safety.find({}, {Case_burden: 1}).sort({Population: -1})"
    },
    {
        "question_id": 1515,
        "spider_question_id": 2572,
        "db_id": "county_public_safety",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
        "question": "What are the case burdens of counties, ordered descending by population?",
        "query": "db.county_public_safety.find({}, {Case_burden: 1}).sort({Population: -1})",
        "gpt4 answer": "db.county_public_safety.find({}, { Case_burden: 1 }).sort({ Population: -1 })",
        "deepseek answer": "db.county_public_safety.find({}, {Case_burden: 1}).sort({Population: -1})"
    },
    {
        "question_id": 1516,
        "spider_question_id": 2573,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern'",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "query": "db.Rooms.find( { basePrice: { $lt: 160 }, beds: 2, decor: 'modern' }, { roomName: 1 } )",
        "gpt4 answer": "db.Rooms.find({ basePrice: { $lt: 160 }, beds: 2, decor: \"modern\" }, { roomName: 1 })",
        "deepseek answer": "db.Rooms.find( { basePrice: { $lt: 160 }, beds: 2, decor: 'modern' }, { roomName: 1 } )"
    },
    {
        "question_id": 1517,
        "spider_question_id": 2574,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern'",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "query": "db.Rooms.find( { basePrice: { $lt: 160 }, beds: 2, decor: 'modern' }, { roomName: 1 } )",
        "gpt4 answer": "db.Rooms.find({ basePrice: { $lt: 160}, beds: 2, decor: \"modern\" }, { roomName: 1 })",
        "deepseek answer": "db.Rooms.find( { basePrice: { $lt: 160 }, beds: 2, decor: 'modern' }, { roomName: 1 } )"
    },
    {
        "question_id": 1518,
        "spider_question_id": 2575,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "query": "db.Rooms.find({basePrice: {$gt: 160}, maxOccupancy: {$gt: 2}}, {roomName: 1, RoomId: 1})",
        "gpt4 answer": "db.Rooms.find({ basePrice: { $gt: 160 }, maxOccupancy: { $gt: 2 } }, { roomName: 1, RoomId: 1 })",
        "deepseek answer": "db.Rooms.find({basePrice: {$gt: 160}, maxOccupancy: {$gt: 2}}, {roomName: 1, RoomId: 1})"
    },
    {
        "question_id": 1519,
        "spider_question_id": 2576,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "query": "db.Rooms.find({basePrice: {$gt: 160}, maxOccupancy: {$gt: 2}}, { roomName: 1, RoomId: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Rooms.find({basePrice: {$gt: 160}, maxOccupancy: {$gt: 2}}, { roomName: 1, RoomId: 1})"
    },
    {
        "question_id": 1520,
        "spider_question_id": 2577,
        "db_id": "inn_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "query": "db.Reservations.aggregate([ { $group: { _id: \"$Room\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Rooms\", localField: \"_id\", foreignField: \"RoomId\", as: \"roomInfo\" } }, { $unwind: \"$roomInfo\" }, { $project: { roomName: \"$roomInfo.roomName\" } } ])",
        "gpt4 answer": "db.Reservations.aggregate([ { $group: { _id: \"$Room\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Rooms\", localField: \"_id\", foreignField: \"RoomId\", as: \"roomInfo\" } }, { $unwind: \"$roomInfo\" }, { $project: { roomName: \"$roomInfo.roomName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1521,
        "spider_question_id": 2580,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT kids FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "query": "db.Reservations.find( { FirstName: 'ROY', LastName: 'SWEAZY' }, { Kids: 1 } )",
        "gpt4 answer": "db.Reservations.find( { FirstName: 'ROY', LastName: 'SWEAZY' }, { Kids: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1522,
        "spider_question_id": 2589,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(beds) FROM Rooms WHERE bedtype = 'King'",
        "question": "How many king beds are there?",
        "query": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: null, totalBeds: { $sum: \"$beds\" } } } , { $project: { totalBeds: 1} }])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { bedType: 'King' } }, { $group: { _id: null, totalKingBeds: { $sum: \"$beds\" } } }, { $project: { totalKingBeds: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: null, totalBeds: { $sum: \"$beds\" } } } , { $project: { totalBeds: 1} }])"
    },
    {
        "question_id": 1523,
        "spider_question_id": 2590,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(beds) FROM Rooms WHERE bedtype = 'King'",
        "question": "Find the total number of king beds available.",
        "query": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: null, totalBeds: { $sum: \"$beds\" } } }, { $project: { totalBeds: 1} } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { bedType: 'King' } }, { $group: { _id: null, totalKingBeds: { $sum: \"$beds\" } } }, { $project: { totalKingBeds: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: null, totalBeds: { $sum: \"$beds\" } } }, { $project: { totalBeds: 1} } ])"
    },
    {
        "question_id": 1524,
        "spider_question_id": 2591,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "query": "db.Rooms.find({ bedType: 'King' }, { roomName: 1, decor: 1 }).sort({ basePrice: 1 })",
        "gpt4 answer": "db.Rooms.find({ bedType: 'King' }, { roomName: 1, decor: 1 }).sort({ basePrice: 1 })",
        "deepseek answer": "db.Rooms.find({ bedType: 'King' }, { roomName: 1, decor: 1 }).sort({ basePrice: 1 })"
    },
    {
        "question_id": 1525,
        "spider_question_id": 2592,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice",
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "query": "db.Rooms.find({ bedType: 'King' }, { roomName: 1, decor: 1 }).sort({ basePrice: 1 })",
        "gpt4 answer": "db.Rooms.find({ bedType: \"King\" }, { roomName: 1, decor: 1 }).sort({ basePrice: 1 })",
        "deepseek answer": "db.Rooms.find({ bedType: 'King' }, { roomName: 1, decor: 1 }).sort({ basePrice: 1 })"
    },
    {
        "question_id": 1526,
        "spider_question_id": 2593,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "query": "db.Rooms.find({}, { roomName: 1, basePrice: 1}).sort({basePrice: 1}).limit(1)",
        "gpt4 answer": "db.Rooms.find({}, { roomName: 1, basePrice: 1 }).sort({ basePrice: 1 }).limit(1)",
        "deepseek answer": "db.Rooms.find({}, { roomName: 1, basePrice: 1}).sort({basePrice: 1}).limit(1)"
    },
    {
        "question_id": 1527,
        "spider_question_id": 2594,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "query": "db.Rooms.find({}, { roomName: 1, basePrice: 1 }).sort({ basePrice: 1 }).limit(1)",
        "gpt4 answer": "db.Rooms.find({}, { roomName: 1, basePrice: 1 }).sort({ basePrice: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1528,
        "spider_question_id": 2595,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT decor FROM Rooms WHERE roomName = 'Recluse and defiance'",
        "question": "What is the decor of room Recluse and defiance?",
        "query": "db.Rooms.find({roomName: 'Recluse and defiance'}, { decor: 1})",
        "gpt4 answer": "db.Rooms.find({roomName: \"Recluse and defiance\"}, {decor: 1})",
        "deepseek answer": "db.Rooms.find({roomName: 'Recluse and defiance'}, { decor: 1})"
    },
    {
        "question_id": 1529,
        "spider_question_id": 2596,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT decor FROM Rooms WHERE roomName = 'Recluse and defiance'",
        "question": "Return the decor of the room named 'Recluse and defiance'.",
        "query": "db.Rooms.findOne({roomName: 'Recluse and defiance'}, { decor: 1})",
        "gpt4 answer": "db.Rooms.find({roomName: 'Recluse and defiance'}, {decor: 1})",
        "deepseek answer": "db.Rooms.findOne({roomName: 'Recluse and defiance'}, { decor: 1})"
    },
    {
        "question_id": 1530,
        "spider_question_id": 2597,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } }, { $project: { bedType: \"$_id\", averageBasePrice: 1 } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } }, { $project: { bedType: \"$_id\", averageBasePrice: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } }, { $project: { bedType: \"$_id\", averageBasePrice: 1 } } ])"
    },
    {
        "question_id": 1531,
        "spider_question_id": 2598,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType",
        "question": "For each bed type, find the average base price of different bed type.",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", avgBasePrice: { $avg: \"$basePrice\" } } }, { $project: { bedType: \"$_id\", avgBasePrice: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } } ])"
    },
    {
        "question_id": 1532,
        "spider_question_id": 2599,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern'",
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "query": "db.Rooms.aggregate([ { $match: { decor: 'modern' } }, { $group: { _id: null, totalOccupancy: { $sum: '$maxOccupancy' } } }, { $project: { totalOccupancy: 1} } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { decor: 'modern' } }, { $group: { _id: null, totalOccupancy: { $sum: \"$maxOccupancy\" } } }, { $project: { totalOccupancy: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { decor: 'modern' } }, { $group: { _id: null, totalOccupancy: { $sum: '$maxOccupancy' } } }, { $project: { totalOccupancy: 1} } ])"
    },
    {
        "question_id": 1533,
        "spider_question_id": 2600,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor = 'modern'",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "query": "db.Rooms.aggregate([ { $match: { decor: 'modern' } }, { $group: { _id: null, totalOccupancy: { $sum: '$maxOccupancy' } } }, { $project: { totalOccupancy: 1} } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { decor: 'modern' } }, { $group: { _id: null, totalOccupancy: { $sum: \"$maxOccupancy\" } } }, { $project: { totalOccupancy: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { decor: 'modern' } }, { $group: { _id: null, totalOccupancy: { $sum: '$maxOccupancy' } } }, { $project: { totalOccupancy: 1} } ])"
    },
    {
        "question_id": 1534,
        "spider_question_id": 2601,
        "db_id": "inn_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "question": "What kind of decor has the least number of reservations?",
        "query": "db.Reservations.aggregate([ { $lookup: { from: \"Rooms\", localField: \"Room\", foreignField: \"RoomId\", as: \"RoomDetails\" } }, { $unwind: \"$RoomDetails\" }, { $group: { _id: \"$RoomDetails.decor\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { decor: \"$_id\" } } ])",
        "gpt4 answer": "db.Reservations.aggregate([ { $lookup: { from: \"Rooms\", localField: \"Room\", foreignField: \"RoomId\", as: \"RoomDetails\" } }, { $unwind: \"$RoomDetails\" }, { $group: { _id: \"$RoomDetails.decor\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { decor: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1535,
        "spider_question_id": 2602,
        "db_id": "inn_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "question": "What is the least popular kind of decor?",
        "query": "db.Rooms.aggregate([ { $lookup: { from: \"Reservations\", localField: \"RoomId\", foreignField: \"Room\", as: \"reservations\" } }, { $group: { _id: \"$decor\", count: { $sum: { $size: \"$reservations\" } } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $lookup: { from: \"Reservations\", localField: \"RoomId\", foreignField: \"Room\", as: \"reservations\" } }, { $group: { _id: \"$decor\", count: { $sum: { $size: \"$reservations\" } } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1536,
        "spider_question_id": 2603,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "query": "db.Reservations.aggregate([ { $lookup: { from: \"Rooms\", localField: \"Room\", foreignField: \"RoomId\", as: \"roomDetails\" } }, { $unwind: \"$roomDetails\" }, { $project: { totalOccupants: { $add: [\"$Adults\", \"$Kids\"] }, maxOccupancy: \"$roomDetails.maxOccupancy\" } }, { $match: { $expr: { $eq: [\"$totalOccupants\", \"$maxOccupancy\"] } } }, { $count: \"maxOccupancyReached\" } ])",
        "gpt4 answer": "db.Reservations.aggregate([ { $lookup: { from: \"Rooms\", localField: \"Room\", foreignField: \"RoomId\", as: \"roomDetails\" } }, { $unwind: \"$roomDetails\" }, { $project: { totalOccupants: { $add: [\"$Adults\", \"$Kids\"] }, maxOccupancy: \"$roomDetails.maxOccupancy\" } }, { $match: { $expr: { $eq: [\"$totalOccupants\", \"$maxOccupancy\"] } } }, { $count: \"maxOccupancyReached\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1537,
        "spider_question_id": 2604,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "query": "db.Reservations.aggregate([ { $lookup: { from: \"Rooms\", localField: \"Room\", foreignField: \"RoomId\", as: \"room_info\" } }, { $unwind: \"$room_info\" }, { $project: { total_guests: { $add: [\"$Adults\", \"$Kids\"] }, maxOccupancy: \"$room_info.maxOccupancy\" } }, { $match: { $expr: { $eq: [\"$total_guests\", \"$maxOccupancy\"] } } }, { $count: \"max_capacity_reached\" } ])",
        "gpt4 answer": "db.Reservations.aggregate([ { $lookup: { from: \"Rooms\", localField: \"Room\", foreignField: \"RoomId\", as: \"room_info\" } }, { $unwind: \"$room_info\" }, { $project: { total_guests: { $add: [\"$Adults\", \"$Kids\"] }, maxOccupancy: \"$room_info.maxOccupancy\" } }, { $match: { $expr: { $eq: [\"$total_guests\", \"$maxOccupancy\"] } } }, { $count: \"max_capacity_reached\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1538,
        "spider_question_id": 2611,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "question": "Find the number of rooms for each bed type.",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1539,
        "spider_question_id": 2612,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "question": "What are the number of rooms for each bed type?",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", numberOfRooms: { $sum: 1 } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1540,
        "spider_question_id": 2613,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1",
        "question": "Find the name of the room with the maximum occupancy.",
        "query": "db.Rooms.find({}, { roomName: 1}).sort({maxOccupancy: -1}).limit(1)",
        "gpt4 answer": "db.Rooms.find({}, { roomName: 1 }).sort({ maxOccupancy: -1 }).limit(1)",
        "deepseek answer": "db.Rooms.find({}, { roomName: 1}).sort({maxOccupancy: -1}).limit(1)"
    },
    {
        "question_id": 1541,
        "spider_question_id": 2614,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1",
        "question": "What is the name of the room that can accommodate the most people?",
        "query": "db.Rooms.find({}, { roomName: 1}).sort({maxOccupancy: -1}).limit(1)",
        "gpt4 answer": "db.Rooms.find({},{ roomName: 1}).sort({maxOccupancy: -1}).limit(1)",
        "deepseek answer": "db.Rooms.find({}, { roomName: 1}).sort({maxOccupancy: -1}).limit(1)"
    },
    {
        "question_id": 1542,
        "spider_question_id": 2615,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "question": "Find the id and name of the most expensive base price room.",
        "query": "db.Rooms.find({}, { RoomId: 1, roomName: 1}).sort({basePrice: -1}).limit(1)",
        "gpt4 answer": "db.Rooms.find({}, { RoomId: 1, roomName: 1 }).sort({ basePrice: -1 }).limit(1)",
        "deepseek answer": "db.Rooms.find({}, { RoomId: 1, roomName: 1}).sort({basePrice: -1}).limit(1)"
    },
    {
        "question_id": 1543,
        "spider_question_id": 2616,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "question": "Which room has the highest base price?",
        "query": "db.Rooms.find({}, {RoomId: 1, roomName: 1}).sort({basePrice: -1}).limit(1)",
        "gpt4 answer": "db.Rooms.find({}, { RoomId: 1, roomName: 1 }).sort({ basePrice: -1 }).limit(1)",
        "deepseek answer": "db.Rooms.find({}, {RoomId: 1, roomName: 1}).sort({basePrice: -1}).limit(1)"
    },
    {
        "question_id": 1544,
        "spider_question_id": 2617,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , bedType FROM Rooms WHERE decor = 'traditional'",
        "question": "List the type of bed and name of all traditional rooms.",
        "query": "db.Rooms.find({decor: 'traditional'}, { roomName: 1, bedType: 1})",
        "gpt4 answer": "db.Rooms.find({ decor: \"traditional\" }, { roomName: 1, bedType: 1 })",
        "deepseek answer": "db.Rooms.find({decor: 'traditional'}, { roomName: 1, bedType: 1})"
    },
    {
        "question_id": 1545,
        "spider_question_id": 2618,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName , bedType FROM Rooms WHERE decor = 'traditional'",
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "query": "db.Rooms.find({decor: 'traditional'}, { roomName: 1, bedType: 1})",
        "gpt4 answer": "db.Rooms.find({ decor: \"traditional\" }, { roomName: 1, bedType: 1 })",
        "deepseek answer": "db.Rooms.find({decor: 'traditional'}, { roomName: 1, bedType: 1})"
    },
    {
        "question_id": 1546,
        "spider_question_id": 2619,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT decor , count(*) FROM Rooms WHERE bedType = 'King' GROUP BY decor",
        "question": "Find the number of rooms with king bed for each decor type.",
        "query": "db.Rooms.aggregate([ { $match: { bedType: 'King' } }, { $group: { _id: '$decor', count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { bedType: 'King' } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { bedType: 'King' } }, { $group: { _id: '$decor', count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1547,
        "spider_question_id": 2620,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT decor , count(*) FROM Rooms WHERE bedType = 'King' GROUP BY decor",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "query": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { bedType: \"King\" } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1548,
        "spider_question_id": 2621,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT decor , avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor",
        "question": "Find the average and minimum price of the rooms in different decor.",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$decor\", averagePrice: { $avg: \"$basePrice\" }, minimumPrice: { $min: \"$basePrice\" } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$decor\", AveragePrice: { $avg: \"$basePrice\" }, MinPrice: { $min: \"$basePrice\" } } }, { $project: { Decor: \"$_id\", AveragePrice: 1, MinPrice: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$decor\", averagePrice: { $avg: \"$basePrice\" }, minimumPrice: { $min: \"$basePrice\" } } } ])"
    },
    {
        "question_id": 1549,
        "spider_question_id": 2622,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT decor , avg(basePrice) , min(basePrice) FROM Rooms GROUP BY decor",
        "question": "What is the average minimum and price of the rooms for each different decor.",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$decor\", averagePrice: { $avg: \"$basePrice\" }, minimumPrice: { $min: \"$basePrice\" } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$decor\", averageBasePrice: { $avg: \"$basePrice\" }, minimumBasePrice: { $min: \"$basePrice\" } } }, { $project: { decor: \"$_id\", averageBasePrice: 1, minimumBasePrice: 1 } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$decor\", averagePrice: { $avg: \"$basePrice\" }, minimumPrice: { $min: \"$basePrice\" } } } ])"
    },
    {
        "question_id": 1550,
        "spider_question_id": 2623,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT roomName FROM Rooms ORDER BY basePrice",
        "question": "List the name of all rooms sorted by their prices.",
        "query": "db.Rooms.find({}, {roomName: 1}).sort({basePrice: 1})",
        "gpt4 answer": "db.Rooms.find({}, { roomName: 1 }).sort({ basePrice: 1 })",
        "deepseek answer": "db.Rooms.find({}, {roomName: 1}).sort({basePrice: 1})"
    },
    {
        "question_id": 1551,
        "spider_question_id": 2624,
        "db_id": "inn_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT roomName FROM Rooms ORDER BY basePrice",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "query": "db.Rooms.find({}, { roomName: 1}).sort({basePrice: 1})",
        "gpt4 answer": "db.Rooms.find({}, { roomName: 1 }).sort({ basePrice: 1 })",
        "deepseek answer": "db.Rooms.find({}, { roomName: 1}).sort({basePrice: 1})"
    },
    {
        "question_id": 1552,
        "spider_question_id": 2625,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor",
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "query": "db.Rooms.aggregate([ { $match: { basePrice: { $gt: 120 } } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { basePrice: { $gt: 120 } } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { basePrice: { $gt: 120 } } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1553,
        "spider_question_id": 2626,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor",
        "question": "How many rooms cost more than 120, for each different decor?",
        "query": "db.Rooms.aggregate([ { $match: { basePrice: { $gt: 120 } } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $match: { basePrice: { $gt: 120 } } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $match: { basePrice: { $gt: 120 } } }, { $group: { _id: \"$decor\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1554,
        "spider_question_id": 2627,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType",
        "question": "For each bed type, find the average room price.",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averagePrice: { $avg: \"$basePrice\" } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", avgPrice: { $avg: \"$basePrice\" } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averagePrice: { $avg: \"$basePrice\" } } } ])"
    },
    {
        "question_id": 1555,
        "spider_question_id": 2628,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType",
        "question": "What is the average base price of rooms, for each bed type?",
        "query": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } } ])",
        "gpt4 answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $group: { _id: \"$bedType\", averageBasePrice: { $avg: \"$basePrice\" } } } ])"
    },
    {
        "question_id": 1556,
        "spider_question_id": 2629,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'",
        "question": "List the name of rooms with king or queen bed.",
        "query": "db.Rooms.find({ bedType: { $in: ['King', 'Queen'] } }, { roomName: 1 })",
        "gpt4 answer": "db.Rooms.find({ bedType: { $in: ['King', 'Queen'] } }, { roomName: 1 })",
        "deepseek answer": "db.Rooms.find({ bedType: { $in: ['King', 'Queen'] } }, { roomName: 1 })"
    },
    {
        "question_id": 1557,
        "spider_question_id": 2630,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'",
        "question": "What are the names of rooms that have either king or queen bed?",
        "query": "db.Rooms.find({ bedType: { $in: ['King', 'Queen'] } }, { roomName: 1 })",
        "gpt4 answer": "db.Rooms.find({ bedType: { $in: [\"King\", \"Queen\"] } }, { roomName: 1 })",
        "deepseek answer": "db.Rooms.find({ bedType: { $in: ['King', 'Queen'] } }, { roomName: 1 })"
    },
    {
        "question_id": 1558,
        "spider_question_id": 2641,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count(*) > 60",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "query": "db.Reservations.aggregate([ { $group: { _id: \"$Room\", reservationCount: { $sum: 1 } } }, { $match: { reservationCount: { $gt: 60 } } }, { $lookup: { from: \"Rooms\", localField: \"_id\", foreignField: \"RoomId\", as: \"roomDetails\" } }, { $unwind: \"$roomDetails\" }, { $project: { roomName: \"$roomDetails.roomName\" } } ])",
        "gpt4 answer": "db.Reservations.aggregate([ { $group: { _id: \"$Room\", reservationCount: { $sum: 1 } } }, { $match: { reservationCount: { $gt: 60 } } }, { $lookup: { from: \"Rooms\", localField: \"_id\", foreignField: \"RoomId\", as: \"roomDetails\" } }, { $unwind: \"$roomDetails\" }, { $project: { roomName: \"$roomDetails.roomName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1559,
        "spider_question_id": 2642,
        "db_id": "inn_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count(*) > 60",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "query": "db.Rooms.aggregate([ { $lookup: { from: \"Reservations\", localField: \"RoomId\", foreignField: \"Room\", as: \"reservations\" } }, { $project: { roomName: 1 } }, { $match: { reservationCount: { $gt: 60 } } } ])",
        "gpt4 answer": "db.Reservations.aggregate([ { $group: { _id: \"$Room\", count: { $count: {} } } }, { $match: { count: { $gt: 60 } } }, { $lookup: { from: \"Rooms\", localField: \"_id\", foreignField: \"RoomId\", as: \"roomDetails\" } }, { $unwind: \"$roomDetails\" }, { $project: { roomName: \"$roomDetails.roomName\" } } ])",
        "deepseek answer": "db.Rooms.aggregate([ { $lookup: { from: \"Reservations\", localField: \"RoomId\", foreignField: \"Room\", as: \"reservations\" } }, { $project: { roomName: 1 } }, { $match: { reservationCount: { $gt: 60 } } } ])"
    },
    {
        "question_id": 1560,
        "spider_question_id": 2647,
        "db_id": "local_govt_mdm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'",
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "query": "db.Customer_Master_Index.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"master_customer_id\", foreignField: \"master_customer_id\", as: \"cross_references\" } }, { $unwind: \"$cross_references\" }, { $match: { \"cross_references.source_system_code\": \"Tax\" } }, { $project: { cmi_details: 1 } } ])",
        "gpt4 answer": "db.Customer_Master_Index.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"master_customer_id\", foreignField: \"master_customer_id\", as: \"cross_references\" } }, { $unwind: \"$cross_references\" }, { $match: { \"cross_references.source_system_code\": \"Tax\" } }, { $project: { cmi_details: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1561,
        "spider_question_id": 2648,
        "db_id": "local_govt_mdm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*) >= 1",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "query": "db.CMI_Cross_References.aggregate([ { $lookup: { from: \"Council_Tax\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"council_tax_data\" } }, { $match: { \"council_tax_data.0\": { $exists: true } } }, { $project: { cmi_cross_ref_id: 1, source_system_code: 1 } } ])",
        "gpt4 answer": "db.CMI_Cross_References.aggregate([ { $lookup: { from: \"Council_Tax\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"council_tax_entries\" } }, { $match: { \"council_tax_entries.0\": { $exists: true } } }, { $group: { _id: \"$cmi_cross_ref_id\", source_system_code: { $first: \"$source_system_code\" } } }, { $project: { cmi_cross_ref_id: \"$_id\", source_system_code: 1 } } ])",
        "deepseek answer": "db.CMI_Cross_References.aggregate([ { $lookup: { from: \"Council_Tax\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"council_tax_data\" } }, { $match: { \"council_tax_data.0\": { $exists: true } } }, { $project: { cmi_cross_ref_id: 1, source_system_code: 1 } } ])"
    },
    {
        "question_id": 1562,
        "spider_question_id": 2649,
        "db_id": "local_govt_mdm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "query": "db.Business_Rates.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"cross_ref\" } }, { $unwind: \"$cross_ref\" }, { $group: { _id: { cmi_cross_ref_id: \"$cross_ref.cmi_cross_ref_id\", master_customer_id: \"$cross_ref.master_customer_id\" }, count: { $sum: 1 } } }, { $project: { cmi_cross_ref_id: \"$_id.cmi_cross_ref_id\", master_customer_id: \"$_id.master_customer_id\", count: 1 } } ])",
        "gpt4 answer": "db.Business_Rates.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"cross_refs\" } }, { $unwind: \"$cross_refs\" }, { $group: { _id: \"$cross_refs.cmi_cross_ref_id\", master_customer_id: { $first: \"$cross_refs.master_customer_id\" }, count: { $sum: 1 } } }, { $project: { cmi_cross_ref_id: \"$_id\", master_customer_id: 1, count: 1 } } ])",
        "deepseek answer": "db.Business_Rates.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"cross_ref\" } }, { $unwind: \"$cross_ref\" }, { $group: { _id: { cmi_cross_ref_id: \"$cross_ref.cmi_cross_ref_id\", master_customer_id: \"$cross_ref.master_customer_id\" }, count: { $sum: 1 } } }, { $project: { cmi_cross_ref_id: \"$_id.cmi_cross_ref_id\", master_customer_id: \"$_id.master_customer_id\", count: 1 } } ])"
    },
    {
        "question_id": 1563,
        "spider_question_id": 2653,
        "db_id": "local_govt_mdm",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'",
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "query": "db.Electoral_Register.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"cross_refs\" } }, { $unwind: \"$cross_refs\" }, { $match: { \"cross_refs.source_system_code\": { $in: [\"Electoral\", \"Tax\"] } } }, { $project: { electoral_register_id: 1 } } ])",
        "gpt4 answer": "db.Electoral_Register.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"cross_ref\" } }, { $unwind: \"$cross_ref\" }, { $match: { $or: [ { \"cross_ref.source_system_code\": \"Electoral\" }, { \"cross_ref.source_system_code\": \"Tax\" } ] } }, { $project: { electoral_register_id: 1 } } ])",
        "deepseek answer": "db.Electoral_Register.aggregate([ { $lookup: { from: \"CMI_Cross_References\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"cross_refs\" } }, { $unwind: \"$cross_refs\" }, { $match: { \"cross_refs.source_system_code\": { $in: [\"Electoral\", \"Tax\"] } } }, { $project: { electoral_register_id: 1 } } ])"
    },
    {
        "question_id": 1564,
        "spider_question_id": 2655,
        "db_id": "local_govt_mdm",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
        "question": "List all information about customer master index, and sort them by details in descending order.",
        "query": "db.Customer_Master_Index.find().sort({cmi_details: -1})",
        "gpt4 answer": "db.Customer_Master_Index.find().sort({cmi_details: -1})",
        "deepseek answer": "db.Customer_Master_Index.find().sort({cmi_details: -1})"
    },
    {
        "question_id": 1565,
        "spider_question_id": 2656,
        "db_id": "local_govt_mdm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "query": "db.Parking_Fines.find({}, {council_tax_id: 1, cmi_cross_ref_id: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Parking_Fines.find({}, {council_tax_id: 1, cmi_cross_ref_id: 1})"
    },
    {
        "question_id": 1566,
        "spider_question_id": 2659,
        "db_id": "local_govt_mdm",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "db.CMI_Cross_References.aggregate([ { $lookup: { from: \"Parking_Fines\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"parking_fines\" } }, { $match: { \"parking_fines\": { $size: 0 } } }, { $project: { cmi_cross_ref_id: 1 } } ])",
        "gpt4 answer": "db.CMI_Cross_References.aggregate([ { $lookup: { from: \"Parking_Fines\", localField: \"cmi_cross_ref_id\", foreignField: \"cmi_cross_ref_id\", as: \"parking_fines\" } }, { $match: { \"parking_fines\": { $size: 0 } } }, { $project: { cmi_cross_ref_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1567,
        "spider_question_id": 2660,
        "db_id": "local_govt_mdm",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "question": "Which distinct source system code includes the substring 'en'?",
        "query": "db.CMI_Cross_References.aggregate([ { $match: { source_system_code: /en/ } }, { $group: { _id: \"$source_system_code\" } } ])",
        "gpt4 answer": "db.CMI_Cross_References.aggregate([ { $match: { source_system_code: /en/ } }, { $group: { _id: \"$source_system_code\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1568,
        "spider_question_id": 2663,
        "db_id": "party_host",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "query": "db.party.aggregate([ { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_data\" } }, { $project: { Party_Theme: 1 } }, { $sort: { Number_of_hosts: 1 } } ])",
        "gpt4 answer": "db.party.aggregate([ { $sort: { Number_of_hosts: 1 }}, { $project: { Party_Theme: 1 }} ])",
        "deepseek answer": "db.party.aggregate([ { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_data\" } }, { $project: { Party_Theme: 1 } }, { $sort: { Number_of_hosts: 1 } } ])"
    },
    {
        "question_id": 1569,
        "spider_question_id": 2664,
        "db_id": "party_host",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "query": "db.party.aggregate([ { $sort: { Number_of_hosts: 1 } }, { $project: { Party_Theme: 1 } } ])",
        "gpt4 answer": "db.party.aggregate([ { $sort: { Number_of_hosts: 1 } }, { $project: { Party_Theme: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1570,
        "spider_question_id": 2665,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Party_Theme , LOCATION FROM party",
        "question": "What are the themes and locations of parties?",
        "query": "db.party.find({}, {Party_Theme: 1, Location: 1})",
        "gpt4 answer": "db.party.find({}, { Party_Theme: 1, Location: 1 })",
        "deepseek answer": "db.party.find({}, {Party_Theme: 1, Location: 1})"
    },
    {
        "question_id": 1571,
        "spider_question_id": 2666,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Party_Theme , LOCATION FROM party",
        "question": "Give me the theme and location of each party.",
        "query": "db.party.aggregate([ { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_info\" } }, { $project: { Party_Theme: 1, Location: 1 } } ])",
        "gpt4 answer": "db.party.find({}, { Party_Theme: 1, Location: 1 })",
        "deepseek answer": "db.party.aggregate([ { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_info\" } }, { $project: { Party_Theme: 1, Location: 1 } } ])"
    },
    {
        "question_id": 1572,
        "spider_question_id": 2667,
        "db_id": "party_host",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT First_year , Last_year FROM party WHERE Party_Theme = 'Spring' OR Party_Theme = 'Teqnology'",
        "question": "Show the first year and last year of parties with theme 'Spring' or 'Teqnology'.",
        "query": "db.party.find( { $or: [ { Party_Theme: 'Spring' }, { Party_Theme: 'Teqnology' } ] }, { First_year: 1, Last_year: 1 } )",
        "gpt4 answer": "db.party.find( { $or: [ { Party_Theme: 'Spring' }, { Party_Theme: 'Teqnology' } ] }, { First_year: 1, Last_year: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1573,
        "spider_question_id": 2668,
        "db_id": "party_host",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT First_year , Last_year FROM party WHERE Party_Theme = 'Spring' OR Party_Theme = 'Teqnology'",
        "question": "What are the first year and last year of the parties whose theme is 'Spring' or 'Teqnology'?",
        "query": "db.party.find( { Party_Theme: { $in: ['Spring', 'Teqnology'] } }, { First_year: 1, Last_year: 1 } )",
        "gpt4 answer": "db.party.find( { Party_Theme: { $in: ['Spring', 'Teqnology'] } }, { First_year: 1, Last_year: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 1574,
        "spider_question_id": 2669,
        "db_id": "party_host",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Number_of_hosts) FROM party",
        "question": "What is the average number of hosts for parties?",
        "query": "db.party.aggregate([ { $group: { _id: null, averageHosts: { $avg: \"$Number_of_hosts\" } } }, { $project: { averageHosts: 1} } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: null, avgHosts: { $avg: \"$Number_of_hosts\" } } }, { $project: { avgHosts: 1 } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: null, averageHosts: { $avg: \"$Number_of_hosts\" } } }, { $project: { averageHosts: 1} } ])"
    },
    {
        "question_id": 1575,
        "spider_question_id": 2670,
        "db_id": "party_host",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Number_of_hosts) FROM party",
        "question": "Compute the average number of hosts for parties.",
        "query": "db.party.aggregate([ { $group: { _id: null, averageHosts: { $avg: \"$Number_of_hosts\" } } }, averageHosts:1 ])",
        "gpt4 answer": "db.party.aggregate([{ $group: { _id: null, avgHosts: { $avg: \"$Number_of_hosts\" } } }, { $project: { avgHosts: 1 } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: null, averageHosts: { $avg: \"$Number_of_hosts\" } } }, averageHosts:1 ])"
    },
    {
        "question_id": 1576,
        "spider_question_id": 2671,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "question": "What is the location of the party with the most hosts?",
        "query": "db.party.find({}, { Location: 1 }).sort({ Number_of_hosts: -1 }).limit(1)",
        "gpt4 answer": "db.party.find({}, { Location: 1 }).sort({ Number_of_hosts: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1577,
        "spider_question_id": 2672,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "question": "Which party had the most hosts? Give me the party location.",
        "query": "db.party.find({}, {Location: 1}).sort({Number_of_hosts: -1}).limit(1)",
        "gpt4 answer": "db.party.find({}, {Location: 1}).sort({Number_of_hosts: -1}).limit(1)",
        "deepseek answer": "db.party.find({}, {Location: 1}).sort({Number_of_hosts: -1}).limit(1)"
    },
    {
        "question_id": 1578,
        "spider_question_id": 2673,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "query": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", NumberOfHosts: \"$count\" } } ])",
        "deepseek answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1579,
        "spider_question_id": 2674,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "query": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1580,
        "spider_question_id": 2675,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality of hosts.",
        "query": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Nationality: \"$_id\"} }])",
        "gpt4 answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Nationality: \"$_id\"} }])"
    },
    {
        "question_id": 1581,
        "spider_question_id": 2676,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which nationality has the most hosts?",
        "query": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])",
        "gpt4 answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.host.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])"
    },
    {
        "question_id": 1582,
        "spider_question_id": 2679,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
        "question": "Show the themes of parties and the names of the party hosts.",
        "query": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$host_info\" }, { $unwind: \"$party_info\" }, { $project: { Party_Theme: \"$party_info.Party_Theme\", Name: \"$host_info.Name\" } } ])",
        "gpt4 answer": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$host_info\" }, { $unwind: \"$party_info\" }, { $project: { Party_Theme: \"$party_info.Party_Theme\", Name: \"$host_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1583,
        "spider_question_id": 2680,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
        "question": "For each party, return its theme and the name of its host.",
        "query": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $unwind: \"$host_info\" }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Party_Theme: \"$party_info.Party_Theme\", Name: \"$host_info.Name\" } } ])",
        "gpt4 answer": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $unwind: \"$host_info\" }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Party_Theme: \"$party_info.Party_Theme\", Name: \"$host_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1584,
        "spider_question_id": 2681,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age",
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "query": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$host_info\" }, { $unwind: \"$party_info\" }, { $project: { Location: \"$party_info.Location\", Name: \"$host_info.Name\" } }, { $sort: { \"host_info.Age\": 1 } } ])",
        "gpt4 answer": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $unwind: \"$host_info\" }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Location: \"$party_info.Location\", Name: \"$host_info.Name\" } }, { $sort: { \"host_info.Age\": 1 } } ])",
        "deepseek answer": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$host_info\" }, { $unwind: \"$party_info\" }, { $project: { Location: \"$party_info.Location\", Name: \"$host_info.Name\" } }, { $sort: { \"host_info.Age\": 1 } } ])"
    },
    {
        "question_id": 1585,
        "spider_question_id": 2682,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Location , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "query": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$host_info\" }, { $unwind: \"$party_info\" }, { $project: { Location: \"$party_info.Location\", Name: \"$host_info.Name\" } }, { $sort: { \"host_info.Age\": 1 } } ])",
        "gpt4 answer": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $unwind: \"$host_info\" }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Location: \"$party_info.Location\", Name: \"$host_info.Name\" } }, { $sort: { \"host_info.Age\": 1 } } ])",
        "deepseek answer": "db.party_host.aggregate([ { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"host_info\" } }, { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$host_info\" }, { $unwind: \"$party_info\" }, { $project: { Location: \"$party_info.Location\", Name: \"$host_info.Name\" } }, { $sort: { \"host_info.Age\": 1 } } ])"
    },
    {
        "question_id": 1586,
        "spider_question_id": 2685,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20",
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "query": "db.party.aggregate([ { $match: { Number_of_hosts: { $gt: 20 } } }, { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_data\" } }, { $unwind: \"$party_host_data\" }, { $lookup: { from: \"host\", localField: \"party_host_data.Host_ID\", foreignField: \"Host_ID\", as: \"host_data\" } }, { $unwind: \"$host_data\" }, { $project: { Name: \"$host_data.Name\" } } ])",
        "gpt4 answer": "db.party_host.aggregate([ { $lookup: { from: \"party\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"partyInfo\" } }, { $unwind: \"$partyInfo\" }, { $match: { \"partyInfo.Number_of_hosts\": { $gt: 20 } } }, { $lookup: { from: \"host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"hostInfo\" } }, { $unwind: \"$hostInfo\" }, { $project: { \"Name\": \"$hostInfo.Name\" } } ])",
        "deepseek answer": "db.party.aggregate([ { $match: { Number_of_hosts: { $gt: 20 } } }, { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_data\" } }, { $unwind: \"$party_host_data\" }, { $lookup: { from: \"host\", localField: \"party_host_data.Host_ID\", foreignField: \"Host_ID\", as: \"host_data\" } }, { $unwind: \"$host_data\" }, { $project: { Name: \"$host_data.Name\" } } ])"
    },
    {
        "question_id": 1587,
        "spider_question_id": 2686,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "query": "db.party.aggregate([ { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_data\" } }, { $unwind: \"$party_host_data\" }, { $lookup: { from: \"host\", localField: \"party_host_data.Host_ID\", foreignField: \"Host_ID\", as: \"host_data\" } }, { $unwind: \"$host_data\" }, { $match: { \"Number_of_hosts\": { $gt: 20 } } }, { $project: { \"Host_Name\": \"$host_data.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.party.aggregate([ { $lookup: { from: \"party_host\", localField: \"Party_ID\", foreignField: \"Party_ID\", as: \"party_host_data\" } }, { $unwind: \"$party_host_data\" }, { $lookup: { from: \"host\", localField: \"party_host_data.Host_ID\", foreignField: \"Host_ID\", as: \"host_data\" } }, { $unwind: \"$host_data\" }, { $match: { \"Number_of_hosts\": { $gt: 20 } } }, { $project: { \"Host_Name\": \"$host_data.Name\" } } ])"
    },
    {
        "question_id": 1588,
        "spider_question_id": 2687,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "question": "Show the name and the nationality of the oldest host.",
        "query": "db.host.find({}, {Name: 1, Nationality: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.host.find({}, { Name: 1, Nationality: 1 }).sort({ Age: -1 }).limit(1)",
        "deepseek answer": "db.host.find({}, {Name: 1, Nationality: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 1589,
        "spider_question_id": 2688,
        "db_id": "party_host",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "question": "What are the name and the nationality of the host of the highest age?",
        "query": "db.host.find({}, {Name: 1, Nationality: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.host.find({}, { Name: 1, Nationality: 1 }).sort({ Age: -1 }).limit(1)",
        "deepseek answer": "db.host.find({}, {Name: 1, Nationality: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 1590,
        "spider_question_id": 2689,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "query": "db.host.aggregate([ { $lookup: { from: \"party_host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"parties\" } }, { $match: { parties: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.host.aggregate([ { $lookup: { from: \"party_host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"parties\" } }, { $match: { parties: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1591,
        "spider_question_id": 2690,
        "db_id": "party_host",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "What are the names of hosts who did not host any party in our record?",
        "query": "db.host.aggregate([ { $lookup: { from: \"party_host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"hosted_parties\" } }, { $match: { hosted_parties: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.host.aggregate([ { $lookup: { from: \"party_host\", localField: \"Host_ID\", foreignField: \"Host_ID\", as: \"hosted_parties\" } }, { $match: { hosted_parties: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1592,
        "spider_question_id": 2693,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT region_code , region_name FROM region ORDER BY region_code",
        "question": "Show all region code and region name sorted by the codes.",
        "query": "db.region.find({}, { Region_code: 1, Region_name: 1 }).sort({ Region_code: 1 })",
        "gpt4 answer": "db.region.find({}, { Region_code: 1, Region_name: 1 }).sort({ Region_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1593,
        "spider_question_id": 2694,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT region_code , region_name FROM region ORDER BY region_code",
        "question": "What are the codes and names for all regions, sorted by codes?",
        "query": "db.region.aggregate([ { $project: { Region_code: 1, Region_name: 1 } }, { $sort: { Region_code: 1 } } ])",
        "gpt4 answer": "db.region.aggregate([ { $project: { Region_code: 1, Region_name: 1 } }, { $sort: { Region_code: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1594,
        "spider_question_id": 2695,
        "db_id": "storm_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT region_name FROM region ORDER BY region_name",
        "question": "List all region names in alphabetical order.",
        "query": "db.region.find({}, { Region_name: 1}).sort({Region_name: 1})",
        "gpt4 answer": "db.region.find({}, { Region_name: 1 }).sort({ Region_name: 1 })",
        "deepseek answer": "db.region.find({}, { Region_name: 1}).sort({Region_name: 1})"
    },
    {
        "question_id": 1595,
        "spider_question_id": 2696,
        "db_id": "storm_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT region_name FROM region ORDER BY region_name",
        "question": "What are the names of the regions in alphabetical order?",
        "query": "db.region.find({}, { Region_name: 1}).sort({Region_name: 1})",
        "gpt4 answer": "db.region.find({}, { Region_name: 1}).sort({Region_name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1596,
        "spider_question_id": 2697,
        "db_id": "storm_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "question": "Show names for all regions except for Denmark.",
        "query": "db.region.find({ Region_name: { $ne: 'Denmark' } }, { Region_name: 1 })",
        "gpt4 answer": "db.region.find({ Region_name: { $ne: 'Denmark' } }, { Region_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1597,
        "spider_question_id": 2701,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "query": "db.storm.find({ Number_Deaths: { $gte: 1 } }, { Name: 1, Dates_active: 1, Number_Deaths: 1 })",
        "gpt4 answer": "db.storm.find({ Number_Deaths: { $gte: 1 } }, { Name: 1, Dates_active: 1, Number_Deaths: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1598,
        "spider_question_id": 2702,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "query": "db.storm.find({ Number_Deaths: { $gte: 1 }}, { Name: 1, Dates_active: 1, Number_Deaths: 1 })",
        "gpt4 answer": "db.storm.find({ Number_Deaths: { $gte: 1 }}, { Name: 1, Dates_active: 1, Number_Deaths: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1599,
        "spider_question_id": 2703,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "query": "db.storm.aggregate([ { $match: { Max_speed: { $gt: 1000 } } }, { $group: { _id: null, averageDamage: { $avg: \"$Damage_millions_USD\" }, maximumDamage: { $max: \"$Damage_millions_USD\" } }}, { $project: { averageDamage: 1, maximumDamage: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $match: { Max_speed: { $gt: 1000 } } }, { $group: { _id: null, averageDamage: { $avg: \"$Damage_millions_USD\" }, maximumDamage: { $max: \"$Damage_millions_USD\" } }}, { $project: { averageDamage: 1, maximumDamage: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1600,
        "spider_question_id": 2704,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "query": "db.storm.aggregate([ { $match: { Max_speed: { $gt: 1000 } } }, { $group: { _id: null, averageDamage: { $avg: \"$Damage_millions_USD\" }, maximumDamage: { $max: \"$Damage_millions_USD\" } } }, { $project: { averageDamage: 1, maximumDamage: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $match: { Max_speed: { $gt: 1000 } } }, { $group: { _id: null, averageDamage: { $avg: \"$Damage_millions_USD\" }, maximumDamage: { $max: \"$Damage_millions_USD\" } } }, { $project: { averageDamage: 1, maximumDamage: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1601,
        "spider_question_id": 2705,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)",
        "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
        "query": "db.storm.aggregate([ { $group: { _id: null, averageMaxSpeed: { $avg: \"$Max_speed\" } } }, { $lookup: { from: \"storm\", let: { averageMaxSpeed: \"$averageMaxSpeed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Max_speed\", \"$$averageMaxSpeed\"] } } }, { $group: { _id: null, totalDeaths: { $sum: \"$Number_Deaths\" }, totalDamage: { $sum: \"$Damage_millions_USD\" } } } ], as: \"results\" } }, { $unwind: \"$results\" }, { $replaceRoot: { newRoot: \"$results\" } }, { $project: { totalDeaths: 1, totalDamage: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $group: { _id: null, averageMaxSpeed: { $avg: \"$Max_speed\" } } }, { $lookup: { from: \"storm\", let: { averageMaxSpeed: \"$averageMaxSpeed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Max_speed\", \"$$averageMaxSpeed\"] } } }, { $group: { _id: null, totalDeaths: { $sum: \"$Number_Deaths\" }, totalDamage: { $sum: \"$Damage_millions_USD\" } } } ], as: \"results\" } }, { $unwind: \"$results\" }, { $replaceRoot: { newRoot: \"$results\" } }, { $project: { totalDeaths: 1, totalDamage: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1602,
        "spider_question_id": 2706,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(number_deaths) , sum(damage_millions_USD) FROM storm WHERE max_speed > (SELECT avg(max_speed) FROM storm)",
        "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.",
        "query": "db.storm.aggregate([ { $group: { _id: null, averageMaxSpeed: { $avg: \"$Max_speed\" } } }, { $lookup: { from: \"storm\", let: { averageMaxSpeed: \"$averageMaxSpeed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Max_speed\", \"$$averageMaxSpeed\"] } } }, { $group: { _id: null, totalDeaths: { $sum: \"$Number_Deaths\" }, totalDamage: { $sum: \"$Damage_millions_USD\" } } } ], as: \"results\" } }, { $unwind: \"$results\" }, { $project: { totalDeaths: \"$results.totalDeaths\", totalDamage: \"$results.totalDamage\" } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $group: { _id: null, averageMaxSpeed: { $avg: \"$Max_speed\" } } }, { $lookup: { from: \"storm\", let: { averageMaxSpeed: \"$averageMaxSpeed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Max_speed\", \"$$averageMaxSpeed\"] } } }, { $group: { _id: null, totalDeaths: { $sum: \"$Number_Deaths\" }, totalDamage: { $sum: \"$Damage_millions_USD\" } } } ], as: \"results\" } }, { $unwind: \"$results\" }, { $project: { totalDeaths: \"$results.totalDeaths\", totalDamage: \"$results.totalDamage\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1603,
        "spider_question_id": 2707,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "List name and damage for all storms in a descending order of max speed.",
        "query": "db.storm.aggregate([ { $sort: { Max_speed: -1 } }, { $project: { Name: 1, Damage_millions_USD: 1 } } ])",
        "gpt4 answer": "db.storm.find({}, { Name: 1, Damage_millions_USD: 1 }).sort({ Max_speed: -1 })",
        "deepseek answer": "db.storm.aggregate([ { $sort: { Max_speed: -1 } }, { $project: { Name: 1, Damage_millions_USD: 1 } } ])"
    },
    {
        "question_id": 1604,
        "spider_question_id": 2708,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "query": "db.storm.find({}, { Name: 1, Damage_millions_USD: 1 }).sort({ Max_speed: -1 })",
        "gpt4 answer": "db.storm.find({}, { Name: 1, Damage_millions_USD: 1 }).sort({ Max_speed: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1605,
        "spider_question_id": 2711,
        "db_id": "storm_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "question": "Show the name for regions not affected.",
        "query": "db.region.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"affected_info\" } }, { $match: { affected_info: { $size: 0 } } }, { $project: { Region_name: 1 } } ])",
        "gpt4 answer": "db.region.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"affected_info\" } }, { $match: { affected_info: { $size: 0 } } }, { $project: { Region_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1606,
        "spider_question_id": 2712,
        "db_id": "storm_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
        "question": "What are the names of regions that were not affected?",
        "query": "db.region.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"affected\" } }, { $match: { affected: { $size: 0 } } }, { $project: { Region_name: 1 } } ])",
        "gpt4 answer": "db.region.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"affected\" } }, { $match: { affected: { $size: 0 } } }, { $project: { Region_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1607,
        "spider_question_id": 2719,
        "db_id": "storm_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "question": "Show the name of storms which don't have affected region in record.",
        "query": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected\" } }, { $match: { affected: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected\" } }, { $match: { affected: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1608,
        "spider_question_id": 2720,
        "db_id": "storm_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "question": "What are the names of storms that did not affect any regions?",
        "query": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected\" } }, { $match: { affected: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected\" } }, { $match: { affected: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1609,
        "spider_question_id": 2721,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "query": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affectedRegions\" } }, { $project: { Name: 1, NumRegions: { $size: \"$affectedRegions\" }, TotalCitiesAffected: { $sum: \"$affectedRegions.Number_city_affected\" } } }, { $match: { NumRegions: { $gte: 2 }, TotalCitiesAffected: { $gte: 10 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affectedRegions\" } }, { $project: { Name: 1, NumRegions: { $size: \"$affectedRegions\" }, TotalCitiesAffected: { $sum: \"$affectedRegions.Number_city_affected\" } } }, { $match: { NumRegions: { $gte: 2 }, TotalCitiesAffected: { $gte: 10 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1610,
        "spider_question_id": 2722,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "query": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected_details\" } }, { $unwind: \"$affected_details\" }, { $group: { _id: \"$Storm_ID\", name: { $first: \"$Name\" }, regionsAffected: { $sum: 1 }, totalCitiesAffected: { $sum: \"$affected_details.Number_city_affected\" } } }, { $match: { $and: [ { regionsAffected: { $gte: 2 } }, { totalCitiesAffected: { $gte: 10 } } ] } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected_details\" } }, { $unwind: \"$affected_details\" }, { $group: { _id: \"$Storm_ID\", name: { $first: \"$Name\" }, regionsAffected: { $sum: 1 }, totalCitiesAffected: { $sum: \"$affected_details.Number_city_affected\" } } }, { $match: { $and: [ { regionsAffected: { $gte: 2 } }, { totalCitiesAffected: { $gte: 10 } } ] } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1611,
        "spider_question_id": 2725,
        "db_id": "storm_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "query": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$region_info\" }, { $unwind: \"$storm_info\" }, { $match: { \"storm_info.Number_Deaths\": { $gte: 10 } } }, { $project: { \"region_name\": \"$region_info.Region_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$region_info\" }, { $unwind: \"$storm_info\" }, { $match: { \"storm_info.Number_Deaths\": { $gte: 10 } } }, { $project: { \"region_name\": \"$region_info.Region_name\" } } ])"
    },
    {
        "question_id": 1612,
        "spider_question_id": 2728,
        "db_id": "storm_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
        "question": "What are the names of the storms that affected Denmark?",
        "query": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $unwind: \"$region_info\" }, { $match: { \"region_info.Region_name\": \"Denmark\" } }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$storm_info\" }, { $project: { name: \"$storm_info.Name\" } } ])",
        "gpt4 answer": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" }}, { $unwind: \"$region_info\" }, { $match: { \"region_info.Region_name\": \"Denmark\" }}, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" }}, { $unwind: \"$storm_info\" }, { $project: { name: \"$storm_info.Name\" }} ])",
        "deepseek answer": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $unwind: \"$region_info\" }, { $match: { \"region_info.Region_name\": \"Denmark\" } }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$storm_info\" }, { $project: { name: \"$storm_info.Name\" } } ])"
    },
    {
        "question_id": 1613,
        "spider_question_id": 2729,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2",
        "question": "Show the region name with at least two storms.",
        "query": "db.affected_region.aggregate([ { $group: { _id: \"$Region_id\", stormCount: { $sum: 1 } } }, { $match: { stormCount: { $gte: 2 } } }, { $lookup: { from: \"region\", localField: \"_id\", foreignField: \"Region_id\", as: \"regionData\" } }, { $unwind: \"$regionData\" }, { $project: { region_name: \"$regionData.Region_name\" } } ])",
        "gpt4 answer": "db.affected_region.aggregate([ { $group: { _id: \"$Region_id\", stormCount: { $sum: 1 } } }, { $match: { stormCount: { $gte: 2 } } }, { $lookup: { from: \"region\", localField: \"_id\", foreignField: \"Region_id\", as: \"regionData\" } }, { $unwind: \"$regionData\" }, { $project: { region_name: \"$regionData.Region_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1614,
        "spider_question_id": 2730,
        "db_id": "storm_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*) >= 2",
        "question": "What are the names of regions with two or more storms?",
        "query": "db.region.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"affected_region_info\" } }, { $match: { \"affected_region_info.1\": { $exists: true } } }, { $project: { Region_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.region.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"affected_region_info\" } }, { $match: { \"affected_region_info.1\": { $exists: true } } }, { $project: { Region_name: 1 } } ])"
    },
    {
        "question_id": 1615,
        "spider_question_id": 2731,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "query": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$region_info\" }, { $unwind: \"$storm_info\" }, { $sort: { \"storm_info.Number_Deaths\": -1 } }, { $limit: 1 }, { $project: { \"region_name\": \"$region_info.Region_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$region_info\" }, { $unwind: \"$storm_info\" }, { $sort: { \"storm_info.Number_Deaths\": -1 } }, { $limit: 1 }, { $project: { \"region_name\": \"$region_info.Region_name\" } } ])"
    },
    {
        "question_id": 1616,
        "spider_question_id": 2733,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "query": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $unwind: \"$region_info\" }, { $match: { \"region_info.Region_name\": { $in: [\"Afghanistan\", \"Albania\"] } } }, { $group: { _id: \"$Storm_ID\", regions: { $addToSet: \"$region_info.Region_name\" }, count: { $sum: 1 } } }, { $match: { count: 2 } }, { $lookup: { from: \"storm\", localField: \"_id\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$storm_info\" }, { $project: { Name: \"$storm_info.Name\" } } ])",
        "gpt4 answer": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region_info\" } }, { $unwind: \"$region_info\" }, { $match: { \"region_info.Region_name\": { $in: [\"Afghanistan\", \"Albania\"] } } }, { $group: { _id: \"$Storm_ID\", regions: { $addToSet: \"$region_info.Region_name\" }, count: { $sum: 1 } } }, { $match: { count: 2 } }, { $lookup: { from: \"storm\", localField: \"_id\", foreignField: \"Storm_ID\", as: \"storm_info\" } }, { $unwind: \"$storm_info\" }, { $project: { Name: \"$storm_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1617,
        "spider_question_id": 2734,
        "db_id": "storm_record",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
        "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
        "query": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected_region\" } }, { $lookup: { from: \"region\", localField: \"affected_region.Region_id\", foreignField: \"Region_id\", as: \"region\" } }, { $match: { $and: [ { \"region.Region_name\": \"Afghanistan\" }, { \"region.Region_name\": \"Albania\" } ] } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.affected_region.aggregate([ { $lookup: { from: \"region\", localField: \"Region_id\", foreignField: \"Region_id\", as: \"region\" } }, { $unwind: \"$region\" }, { $lookup: { from: \"storm\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"storm\" } }, { $unwind: \"$storm\" }, { $match: { \"region.Region_name\": { $in: [\"Afghanistan\", \"Albania\"] } } }, { $group: { _id: \"$Storm_ID\", regions: { $addToSet: \"$region.Region_name\" }, name: { $first: \"$storm.Name\" } } }, { $match: { regions: { $all: [\"Afghanistan\", \"Albania\"] } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.storm.aggregate([ { $lookup: { from: \"affected_region\", localField: \"Storm_ID\", foreignField: \"Storm_ID\", as: \"affected_region\" } }, { $lookup: { from: \"region\", localField: \"affected_region.Region_id\", foreignField: \"Region_id\", as: \"region\" } }, { $match: { $and: [ { \"region.Region_name\": \"Afghanistan\" }, { \"region.Region_name\": \"Albania\" } ] } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 1618,
        "spider_question_id": 2737,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT County_name , Population FROM county",
        "question": "Show the county name and population of all counties.",
        "query": "db.county.find({}, {County_name: 1, Population: 1})",
        "gpt4 answer": "db.county.find({}, { County_name: 1, Population: 1 })",
        "deepseek answer": "db.county.find({}, {County_name: 1, Population: 1})"
    },
    {
        "question_id": 1619,
        "spider_question_id": 2738,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT County_name , Population FROM county",
        "question": "What are the name and population of each county?",
        "query": "db.county.find({}, { County_name: 1, Population: 1})",
        "gpt4 answer": "db.county.find({}, { County_name: 1, Population: 1 })",
        "deepseek answer": "db.county.find({}, { County_name: 1, Population: 1})"
    },
    {
        "question_id": 1620,
        "spider_question_id": 2739,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Population) FROM county",
        "question": "Show the average population of all counties.",
        "query": "db.county.aggregate([ { $group: { _id: null, averagePopulation: { $avg: \"$Population\" } } }, { $project: { averagePopulation: 1} } ])",
        "gpt4 answer": "db.county.aggregate([ { $group: { _id: null, averagePopulation: { $avg: \"$Population\" } } }, { $project: { averagePopulation: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $group: { _id: null, averagePopulation: { $avg: \"$Population\" } } }, { $project: { averagePopulation: 1} } ])"
    },
    {
        "question_id": 1621,
        "spider_question_id": 2740,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Population) FROM county",
        "question": "On average how large is the population of the counties?",
        "query": "db.county.aggregate([ { $group: { _id: null, averagePopulation: { $avg: \"$Population\" } } }, { $project: { averagePopulation: 1} } ])",
        "gpt4 answer": "db.county.aggregate([ { $group: { _id: null, avgPopulation: { $avg: \"$Population\" } } }, { $project: { avgPopulation: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $group: { _id: null, averagePopulation: { $avg: \"$Population\" } } }, { $project: { averagePopulation: 1} } ])"
    },
    {
        "question_id": 1622,
        "spider_question_id": 2741,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Population) , min(Population) FROM county",
        "question": "Return the maximum and minimum population among all counties.",
        "query": "db.county.aggregate([ { $group: { _id: null, maxPopulation: { $max: \"$Population\" }, minPopulation: { $min: \"$Population\" } } }, { $project: { maxPopulation: 1, minPopulation:1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $group: { _id: null, maxPopulation: { $max: \"$Population\" }, minPopulation: { $min: \"$Population\" } } }, { $project: { maxPopulation: 1, minPopulation: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $group: { _id: null, maxPopulation: { $max: \"$Population\" }, minPopulation: { $min: \"$Population\" } } }, { $project: { maxPopulation: 1, minPopulation:1 } } ])"
    },
    {
        "question_id": 1623,
        "spider_question_id": 2742,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Population) , min(Population) FROM county",
        "question": "What are the maximum and minimum population of the counties?",
        "query": "db.county.aggregate([ { $group: { _id: null, maxPopulation: { $max: \"$Population\" }, minPopulation: { $min: \"$Population\" } } }, { $project: { maxPopulation: 1, minPopulation: 1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $group: { _id: null, maxPopulation: { $max: \"$Population\" }, minPopulation: { $min: \"$Population\" } } }, { $project: { maxPopulation: 1, minPopulation: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $group: { _id: null, maxPopulation: { $max: \"$Population\" }, minPopulation: { $min: \"$Population\" } } }, { $project: { maxPopulation: 1, minPopulation: 1 } } ])"
    },
    {
        "question_id": 1624,
        "spider_question_id": 2745,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Zip_code FROM county WHERE County_name = 'Howard'",
        "question": "Show the zip code of the county with name 'Howard'.",
        "query": "db.county.find({County_name: 'Howard'}, {Zip_code: 1})",
        "gpt4 answer": "db.county.find({ County_name: \"Howard\" }, { Zip_code: 1 })",
        "deepseek answer": "db.county.find({County_name: 'Howard'}, {Zip_code: 1})"
    },
    {
        "question_id": 1625,
        "spider_question_id": 2746,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Zip_code FROM county WHERE County_name = 'Howard'",
        "question": "What is the zip code the county named 'Howard' is located in?",
        "query": "db.county.find({ County_name: 'Howard' }, { Zip_code: 1 })",
        "gpt4 answer": "db.county.findOne({ County_name: 'Howard' }, { Zip_code: 1 })",
        "deepseek answer": "db.county.find({ County_name: 'Howard' }, { Zip_code: 1 })"
    },
    {
        "question_id": 1626,
        "spider_question_id": 2747,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Delegate FROM election WHERE District = 1",
        "question": "Show the delegate from district 1 in election.",
        "query": "db.election.find({District: 1}, {Delegate: 1})",
        "gpt4 answer": "db.election.find({ District: 1 }, { Delegate: 1 })",
        "deepseek answer": "db.election.find({District: 1}, {Delegate: 1})"
    },
    {
        "question_id": 1627,
        "spider_question_id": 2748,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Delegate FROM election WHERE District = 1",
        "question": "Who is the delegate of district 1 in the elections?",
        "query": "db.election.find({District: 1}, {Delegate: 1})",
        "gpt4 answer": "db.election.find({ District: 1 }, { Delegate: 1 })",
        "deepseek answer": "db.election.find({District: 1}, {Delegate: 1})"
    },
    {
        "question_id": 1628,
        "spider_question_id": 2749,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Delegate , Committee FROM election",
        "question": "Show the delegate and committee information of elections.",
        "query": "db.election.find({}, {Delegate: 1, Committee: 1})",
        "gpt4 answer": "db.election.find({}, { Delegate: 1, Committee: 1 })",
        "deepseek answer": "db.election.find({}, {Delegate: 1, Committee: 1})"
    },
    {
        "question_id": 1629,
        "spider_question_id": 2750,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Delegate , Committee FROM election",
        "question": "What are the delegate and committee information for each election record?",
        "query": "db.election.find({}, {Delegate: 1, Committee: 1})",
        "gpt4 answer": "db.election.find({}, { Delegate: 1, Committee: 1 })",
        "deepseek answer": "db.election.find({}, {Delegate: 1, Committee: 1})"
    },
    {
        "question_id": 1630,
        "spider_question_id": 2753,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = 'Democratic'",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "query": "db.party.find({ Party: 'Democratic' }, { Lieutenant_Governor: 1, Comptroller: 1 })",
        "gpt4 answer": "db.party.find({ Party: 'Democratic' }, { Lieutenant_Governor: 1, Comptroller: 1 })",
        "deepseek answer": "db.party.find({ Party: 'Democratic' }, { Lieutenant_Governor: 1, Comptroller: 1 })"
    },
    {
        "question_id": 1631,
        "spider_question_id": 2754,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = 'Democratic'",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "query": "db.party.find({ Party: 'Democratic' }, { Lieutenant_Governor: 1, Comptroller: 1 })",
        "gpt4 answer": "db.party.find({ Party: 'Democratic' }, { Lieutenant_Governor: 1, Comptroller: 1 })",
        "deepseek answer": "db.party.find({ Party: 'Democratic' }, { Lieutenant_Governor: 1, Comptroller: 1 })"
    },
    {
        "question_id": 1632,
        "spider_question_id": 2757,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM election",
        "question": "Show all the information about election.",
        "query": "db.election.find({})",
        "gpt4 answer": "db.election.find({})",
        "deepseek answer": "db.election.find({})"
    },
    {
        "question_id": 1633,
        "spider_question_id": 2758,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM election",
        "question": "Return all the information for each election record.",
        "query": "db.election.find({})",
        "gpt4 answer": "db.election.find({})",
        "deepseek answer": "db.election.find({})"
    },
    {
        "question_id": 1634,
        "spider_question_id": 2759,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District",
        "question": "Show the delegates and the names of county they belong to.",
        "query": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\", County_name: 1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\", County_name: \"$County_name\" } } ])",
        "deepseek answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\", County_name: 1 } } ])"
    },
    {
        "question_id": 1635,
        "spider_question_id": 2760,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "query": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\", County_name: 1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\", County_name: \"$County_name\" } } ])",
        "deepseek answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\", County_name: 1 } } ])"
    },
    {
        "question_id": 1636,
        "spider_question_id": 2761,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "query": "db.county.aggregate([ { $match: { Population: { $lt: 100000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\" } } ])",
        "gpt4 answer": "db.county.aggregate([ { $match: { Population: { $lt: 100000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { \"Delegate\": \"$election_info.Delegate\" } } ])",
        "deepseek answer": "db.county.aggregate([ { $match: { Population: { $lt: 100000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\" } } ])"
    },
    {
        "question_id": 1637,
        "spider_question_id": 2762,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000",
        "question": "Find the delegates who are from counties with population below 100000.",
        "query": "db.county.aggregate([ { $match: { Population: { $lt: 100000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.county.aggregate([ { $match: { Population: { $lt: 100000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $project: { Delegate: \"$election_info.Delegate\" } } ])"
    },
    {
        "question_id": 1638,
        "spider_question_id": 2763,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "query": "db.county.aggregate([ { $match: { Population: { $gt: 50000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: null, distinctDelegates: { $addToSet: \"$election_info.Delegate\" } } }, { $project: { count: { $size: \"$distinctDelegates\" } } } ])",
        "gpt4 answer": "db.county.aggregate([ { $match: { Population: { $gt: 50000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" }}, { $unwind: \"$election_info\" }, { $group: { _id: \"$election_info.Delegate\" }}, { $count: \"distinct_delegates\" } ])",
        "deepseek answer": "db.county.aggregate([ { $match: { Population: { $gt: 50000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: null, distinctDelegates: { $addToSet: \"$election_info.Delegate\" } } }, { $project: { count: { $size: \"$distinctDelegates\" } } } ])"
    },
    {
        "question_id": 1639,
        "spider_question_id": 2764,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "query": "db.county.aggregate([ { $match: { Population: { $gt: 50000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: null, distinctDelegates: { $addToSet: \"$election_info.Delegate\" } } }, { $project: { count: { $size: \"$distinctDelegates\" } } } ])",
        "gpt4 answer": "db.election.aggregate([ { $lookup: { from: \"county\", localField: \"District\", foreignField: \"County_Id\", as: \"county_info\" } }, { $unwind: \"$county_info\" }, { $match: { \"county_info.Population\": { $gt: 50000 } } }, { $group: { _id: \"$Delegate\" } }, { $count: \"distinct_delegates\" } ])",
        "deepseek answer": "db.county.aggregate([ { $match: { Population: { $gt: 50000 } } }, { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: null, distinctDelegates: { $addToSet: \"$election_info.Delegate\" } } }, { $project: { count: { $size: \"$distinctDelegates\" } } } ])"
    },
    {
        "question_id": 1640,
        "spider_question_id": 2765,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = 'Appropriations'",
        "question": "What are the names of the county that the delegates on 'Appropriations' committee belong to?",
        "query": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $match: { \"election_info.Committee\": \"Appropriations\" } }, { $project: { County_name: 1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"delegate_info\" } }, { $unwind: \"$delegate_info\" }, { $match: { \"delegate_info.Committee\": \"Appropriations\" } }, { $project: { County_name: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $match: { \"election_info.Committee\": \"Appropriations\" } }, { $project: { County_name: 1 } } ])"
    },
    {
        "question_id": 1641,
        "spider_question_id": 2766,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = 'Appropriations'",
        "question": "Which county do the delegates on 'Appropriations' committee belong to? Give me the county names.",
        "query": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $match: { \"election_info.Committee\": \"Appropriations\" } }, { $project: { County_name: 1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $match: { \"election_info.Committee\": \"Appropriations\" } }, { $project: { County_name: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $match: { \"election_info.Committee\": \"Appropriations\" } }, { $project: { County_name: 1 } } ])"
    },
    {
        "question_id": 1642,
        "spider_question_id": 2769,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "query": "db.election.aggregate([ { $match: { District: 1 } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Governor: \"$party_info.Governor\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $match: { District: 1 } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Governor: \"$party_info.Governor\" } } ])"
    },
    {
        "question_id": 1643,
        "spider_question_id": 2770,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "query": "db.election.aggregate([ { $match: { District: 1 } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Governor: \"$party_info.Governor\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $match: { District: 1 } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Governor: \"$party_info.Governor\" } } ])"
    },
    {
        "question_id": 1644,
        "spider_question_id": 2771,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "query": "db.election.aggregate([ { $match: { $or: [ { District: 1 }, { District: 2 } ] } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Comptroller: \"$party_info.Comptroller\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $match: { $or: [ { District: 1 }, { District: 2 } ] } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Comptroller: \"$party_info.Comptroller\" } } ])"
    },
    {
        "question_id": 1645,
        "spider_question_id": 2772,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "query": "db.election.aggregate([ { $match: { District: { $in: [1, 2] } } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Comptroller: \"$party_info.Comptroller\" } } ])",
        "gpt4 answer": "db.election.aggregate([ { $match: { $or: [ { District: 1 }, { District: 2 } ] } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" }}, { $unwind: \"$party_info\" }, { $project: { Comptroller: \"$party_info.Comptroller\" }} ])",
        "deepseek answer": "db.election.aggregate([ { $match: { District: { $in: [1, 2] } } }, { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $unwind: \"$party_info\" }, { $project: { Comptroller: \"$party_info.Comptroller\" } } ])"
    },
    {
        "question_id": 1646,
        "spider_question_id": 2773,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic'",
        "question": "Return all the committees that have delegates from Democratic party.",
        "query": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { \"party_info.Party\": \"Democratic\" } }, { $project: { Committee: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { \"party_info.Party\": \"Democratic\" } }, { $project: { Committee: 1 } } ])"
    },
    {
        "question_id": 1647,
        "spider_question_id": 2774,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic'",
        "question": "Which committees have delegates from the Democratic party?",
        "query": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { \"party_info.Party\": \"Democratic\" } }, { $project: { Committee: 1 } } ])",
        "gpt4 answer": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { \"party_info.Party\": \"Democratic\" } }, { $project: { Committee: 1 } } ])",
        "deepseek answer": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { \"party_info.Party\": \"Democratic\" } }, { $project: { Committee: 1 } } ])"
    },
    {
        "question_id": 1648,
        "spider_question_id": 2779,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY Population ASC",
        "question": "Return the names of all counties sorted by population in ascending order.",
        "query": "db.county.find({}, {County_name: 1}).sort({Population: 1})",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ Population: 1 })",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({Population: 1})"
    },
    {
        "question_id": 1649,
        "spider_question_id": 2780,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY Population ASC",
        "question": "Sort the names of all counties in ascending order of population.",
        "query": "db.county.find({}, {County_name: 1}).sort({Population: 1})",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ Population: 1 })",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({Population: 1})"
    },
    {
        "question_id": 1650,
        "spider_question_id": 2781,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "query": "db.county.find({}, {County_name: 1}).sort({County_name: -1})",
        "gpt4 answer": "db.county.find({}, {County_name: 1}).sort({County_name: -1})",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({County_name: -1})"
    },
    {
        "question_id": 1651,
        "spider_question_id": 2782,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "query": "db.county.find({}, {County_name: 1}).sort({County_name: -1})",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ County_name: -1 })",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({County_name: -1})"
    },
    {
        "question_id": 1652,
        "spider_question_id": 2783,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "question": "Show the name of the county with the biggest population.",
        "query": "db.county.find({}, {County_name: 1}).sort({Population: -1}).limit(1)",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ Population: -1 }).limit(1)",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({Population: -1}).limit(1)"
    },
    {
        "question_id": 1653,
        "spider_question_id": 2784,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "question": "Which county has the largest population? Give me the name of the county.",
        "query": "db.county.find({}, {County_name: 1}).sort({Population: -1}).limit(1)",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ Population: -1 }).limit(1)",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({Population: -1}).limit(1)"
    },
    {
        "question_id": 1654,
        "spider_question_id": 2785,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "question": "Show the 3 counties with the smallest population.",
        "query": "db.county.find({}, {County_name: 1}).sort({Population: 1}).limit(3)",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ Population: 1 }).limit(3)",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({Population: 1}).limit(3)"
    },
    {
        "question_id": 1655,
        "spider_question_id": 2786,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
        "question": "What are the 3 counties that have the smallest population? Give me the county names.",
        "query": "db.county.find({}, {County_name: 1}).sort({Population: 1}).limit(3)",
        "gpt4 answer": "db.county.find({}, { County_name: 1 }).sort({ Population: 1 }).limit(3)",
        "deepseek answer": "db.county.find({}, {County_name: 1}).sort({Population: 1}).limit(3)"
    },
    {
        "question_id": 1656,
        "spider_question_id": 2787,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2",
        "question": "Show the names of counties that have at least two delegates.",
        "query": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: \"$County_Id\", county_name: { $first: \"$County_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { county_name: 1 } } ])",
        "gpt4 answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $addFields: { delegateCount: { $size: \"$election_info\" } } }, { $match: { delegateCount: { $gte: 2 } } }, { $project: { County_name: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: \"$County_Id\", county_name: { $first: \"$County_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { county_name: 1 } } ])"
    },
    {
        "question_id": 1657,
        "spider_question_id": 2788,
        "db_id": "election",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "query": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: \"$County_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { County_name: \"$_id\" } } ])",
        "gpt4 answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_docs\" } }, { $project: { County_name: 1, numberOfDelegates: { $size: \"$election_docs\" } } }, { $match: { numberOfDelegates: { $gte: 2 } } }, { $project: { County_name: 1 } } ])",
        "deepseek answer": "db.county.aggregate([ { $lookup: { from: \"election\", localField: \"County_Id\", foreignField: \"District\", as: \"election_info\" } }, { $unwind: \"$election_info\" }, { $group: { _id: \"$County_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { County_name: \"$_id\" } } ])"
    },
    {
        "question_id": 1658,
        "spider_question_id": 2789,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2",
        "question": "Show the name of the party that has at least two records.",
        "query": "db.party.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Party: \"$_id\" } } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Party: \"$_id\" } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Party: \"$_id\" } } ])"
    },
    {
        "question_id": 1659,
        "spider_question_id": 2790,
        "db_id": "election",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2",
        "question": "Which party has two or more records?",
        "query": "db.party.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Party: \"$_id\" } } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Party: \"$_id\" } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Party: \"$_id\" } } ])"
    },
    {
        "question_id": 1660,
        "spider_question_id": 2791,
        "db_id": "election",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the party that has the most delegates.",
        "query": "db.election.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"party\", localField: \"_id\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $project: { Party: { $arrayElemAt: [\"$party_info.Party\", 0] } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.election.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"party\", localField: \"_id\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $project: { Party: { $arrayElemAt: [\"$party_info.Party\", 0] } } } ])"
    },
    {
        "question_id": 1661,
        "spider_question_id": 2792,
        "db_id": "election",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which party has the largest number of delegates?",
        "query": "db.election.aggregate([ { $group: { _id: \"$Party\", delegatesCount: { $sum: 1 } } }, { $sort: { delegatesCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"party\", localField: \"_id\", foreignField: \"Party_ID\", as: \"partyDetails\" } }, { $unwind: \"$partyDetails\" }, { $project: { Party: \"$partyDetails.Party\" } } ])",
        "gpt4 answer": "db.election.aggregate([ { $group: { _id: \"$Party\", delegatesCount: { $sum: 1 } } }, { $sort: { delegatesCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"party\", localField: \"_id\", foreignField: \"Party_ID\", as: \"partyDetails\" } }, { $unwind: \"$partyDetails\" }, { $project: { Party: \"$partyDetails.Party\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1662,
        "spider_question_id": 2793,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the people that have been governor the most times.",
        "query": "db.party.aggregate([ { $group: { _id: \"$Governor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Governor: \"$_id\" } }])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Governor\", timesGovernor: { $sum: 1 } } }, { $sort: { timesGovernor: -1 } }, { $limit: 1 }, { $project: { Governor: \"$_id\" } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: \"$Governor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Governor: \"$_id\" } }])"
    },
    {
        "question_id": 1663,
        "spider_question_id": 2794,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which people severed as governor most frequently?",
        "query": "db.party.aggregate([ { $group: { _id: \"$Governor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Governor: \"$_id\" } } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Governor\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: \"$Governor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Governor: \"$_id\" } } ])"
    },
    {
        "question_id": 1664,
        "spider_question_id": 2795,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Comptroller , COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "query": "db.party.aggregate([ { $group: { _id: \"$Comptroller\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Comptroller\", num_times: { $sum: 1 } } }, { $sort: { num_times: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: \"$Comptroller\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1665,
        "spider_question_id": 2796,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Comptroller , COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "query": "db.party.aggregate([ { $group: { _id: \"$Comptroller\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Comptroller: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.party.aggregate([ { $group: { _id: \"$Comptroller\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Comptroller: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.party.aggregate([ { $group: { _id: \"$Comptroller\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Comptroller: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1666,
        "spider_question_id": 2797,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "question": "What are the names of parties that do not have delegates in election?",
        "query": "db.party.find({ Party_ID: { $nin: db.election.distinct(\"Party\") } }, { Party: 1 })",
        "gpt4 answer": "db.party.aggregate([ { $lookup: { from: \"election\", localField: \"Party_ID\", foreignField: \"Party\", as: \"election_info\" } }, { $match: { \"election_info\": { $eq: [] } } }, { $project: { Party: 1 } } ])",
        "deepseek answer": "db.party.find({ Party_ID: { $nin: db.election.distinct(\"Party\") } }, { Party: 1 })"
    },
    {
        "question_id": 1667,
        "spider_question_id": 2798,
        "db_id": "election",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
        "question": "Which parties did not have any delegates in elections?",
        "query": "db.party.find({ Party_ID: { $nin: db.election.distinct(\"Party\") } }, { Party: 1 })",
        "gpt4 answer": "db.party.aggregate([ { $lookup: { from: \"election\", localField: \"Party_ID\", foreignField: \"Party\", as: \"elections\" } }, { $match: { \"elections\": { $size: 0 } } }, { $project: { \"Party\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.party.find({ Party_ID: { $nin: db.election.distinct(\"Party\") } }, { Party: 1 })"
    },
    {
        "question_id": 1668,
        "spider_question_id": 2800,
        "db_id": "election",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Appropriations' INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Economic Matters'",
        "question": "Which parties have delegates in both the 'Appropriations' committee and the 'Economic Matters' committee?",
        "query": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { $or: [ { \"Committee\": \"Appropriations\" }, { \"Committee\": \"Economic Matters\" } ] } }, { $group: { _id: \"$Party\", committees: { $addToSet: \"$Committee\" } } }, { $match: { committees: { $all: [\"Appropriations\", \"Economic Matters\"] } } }, { $lookup: { from: \"party\", localField: \"_id\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $project: { \"party_info.Party\": 1 } }, { $unwind: \"$party_info\" }, { $replaceRoot: { newRoot: \"$party_info\" } } ])",
        "gpt4 answer": "db.election.aggregate([ { $lookup: { from: \"party\", localField: \"Party\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $match: { $or: [ { \"Committee\": \"Appropriations\" }, { \"Committee\": \"Economic Matters\" } ] } }, { $group: { _id: \"$Party\", committees: { $addToSet: \"$Committee\" } } }, { $match: { committees: { $all: [\"Appropriations\", \"Economic Matters\"] } } }, { $lookup: { from: \"party\", localField: \"_id\", foreignField: \"Party_ID\", as: \"party_info\" } }, { $project: { \"party_info.Party\": 1 } }, { $unwind: \"$party_info\" }, { $replaceRoot: { newRoot: \"$party_info\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1669,
        "spider_question_id": 2804,
        "db_id": "news_report",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM journalist ORDER BY Years_working ASC",
        "question": "List the names of journalists in ascending order of years working.",
        "query": "db.journalist.find({}, {Name: 1}).sort({Years_working: 1})",
        "gpt4 answer": "db.journalist.find({}, { Name: 1 }).sort({ Years_working: 1 })",
        "deepseek answer": "db.journalist.find({}, {Name: 1}).sort({Years_working: 1})"
    },
    {
        "question_id": 1670,
        "spider_question_id": 2805,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , Age FROM journalist",
        "question": "What are the nationalities and ages of journalists?",
        "query": "db.journalist.find({}, { Nationality: 1, Age: 1})",
        "gpt4 answer": "db.journalist.find({}, { Nationality: 1, Age: 1 })",
        "deepseek answer": "db.journalist.find({}, { Nationality: 1, Age: 1})"
    },
    {
        "question_id": 1671,
        "spider_question_id": 2806,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM journalist WHERE Nationality = 'England' OR Nationality = 'Wales'",
        "question": "Show the names of journalists from 'England' or 'Wales'.",
        "query": "db.journalist.find( { Nationality: { $in: ['England', 'Wales'] } }, { Name: 1 } )",
        "gpt4 answer": "db.journalist.find( { Nationality: { $in: [\"England\", \"Wales\"] } }, { Name: 1 } )",
        "deepseek answer": "db.journalist.find( { Nationality: { $in: ['England', 'Wales'] } }, { Name: 1 } )"
    },
    {
        "question_id": 1672,
        "spider_question_id": 2807,
        "db_id": "news_report",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Years_working) FROM journalist",
        "question": "What is the average number of years spent working as a journalist?",
        "query": "db.journalist.aggregate([ { $group: { _id: null, averageYearsWorking: { $avg: \"$Years_working\" } } } , averageYearsWorking:1])",
        "gpt4 answer": "db.journalist.aggregate([ { $group: { _id: null, avgYearsWorking: { $avg: \"$Years_working\" } } }, { $project: { avgYearsWorking: 1 } } ])",
        "deepseek answer": "db.journalist.aggregate([ { $group: { _id: null, averageYearsWorking: { $avg: \"$Years_working\" } } } , averageYearsWorking:1])"
    },
    {
        "question_id": 1673,
        "spider_question_id": 2808,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "query": "db.journalist.find({}, { Nationality: 1}).sort({Years_working: -1}).limit(1)",
        "gpt4 answer": "db.journalist.find({}, { Nationality: 1 }).sort({ Years_working: -1 }).limit(1)",
        "deepseek answer": "db.journalist.find({}, { Nationality: 1}).sort({Years_working: -1}).limit(1)"
    },
    {
        "question_id": 1674,
        "spider_question_id": 2809,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "query": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", numberOfJournalists: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", Count: \"$numberOfJournalists\" } } ])",
        "deepseek answer": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1675,
        "spider_question_id": 2810,
        "db_id": "news_report",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common nationality for journalists.",
        "query": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])",
        "gpt4 answer": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])",
        "deepseek answer": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Nationality: \"$_id\" } } ])"
    },
    {
        "question_id": 1676,
        "spider_question_id": 2811,
        "db_id": "news_report",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "query": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", moreThan10: { $sum: { $cond: [{$gt: [\"$Years_working\", 10]}, 1, 0] } }, lessThan3: { $sum: { $cond: [{$lt: [\"$Years_working\", 3]}, 1, 0] } } } }, { $match: { moreThan10: {$gt: 0}, lessThan3: {$gt: 0} } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.journalist.aggregate([ { $group: { _id: \"$Nationality\", moreThan10: { $sum: { $cond: [{$gt: [\"$Years_working\", 10]}, 1, 0] } }, lessThan3: { $sum: { $cond: [{$lt: [\"$Years_working\", 3]}, 1, 0] } } } }, { $match: { moreThan10: {$gt: 0}, lessThan3: {$gt: 0} } }, { $project: { _id: 1 } } ])"
    },
    {
        "question_id": 1677,
        "spider_question_id": 2812,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date , Name , venue FROM event ORDER BY Event_Attendance DESC",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "query": "db.event.find({}, { Date: 1, Name: 1, Venue: 1 }).sort({ Event_Attendance: -1 })",
        "gpt4 answer": "db.event.find({}, { Date: 1, Name: 1, Venue: 1 }).sort({ Event_Attendance: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1678,
        "spider_question_id": 2813,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Name , T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
        "question": "Show the names of journalists and the dates of the events they reported.",
        "query": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$event_info\" }, { $unwind: \"$journalist_info\" }, { $project: { Name: \"$journalist_info.Name\", Date: \"$event_info.Date\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$event_info\" }, { $unwind: \"$journalist_info\" }, { $project: { Name: \"$journalist_info.Name\", Date: \"$event_info.Date\" } } ])"
    },
    {
        "question_id": 1679,
        "spider_question_id": 2814,
        "db_id": "news_report",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
        "question": "Show the names of journalists and the names of the events they reported in ascending order",
        "query": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$event_info\" }, { $unwind: \"$journalist_info\" }, { $project: { journalist_name: \"$journalist_info.Name\", event_name: \"$event_info.Name\" } }, { $sort: { event_name: 1 } } ])",
        "gpt4 answer": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $unwind: \"$event_info\" }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$journalist_info\" }, { $project: { \"JournalistName\": \"$journalist_info.Name\", \"EventName\": \"$event_info.Name\" } }, { $sort: { \"event_info.Event_Attendance\": 1 } } ])",
        "deepseek answer": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$event_info\" }, { $unwind: \"$journalist_info\" }, { $project: { journalist_name: \"$journalist_info.Name\", event_name: \"$event_info.Name\" } }, { $sort: { event_name: 1 } } ])"
    },
    {
        "question_id": 1680,
        "spider_question_id": 2815,
        "db_id": "news_report",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name",
        "question": "Show the names of journalists and the number of events they reported.",
        "query": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$journalist_info\" }, { $group: { _id: \"$journalist_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Number_of_events: \"$count\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$journalist_info\" }, { $group: { _id: \"$journalist_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", Number_of_events: \"$count\" } } ])"
    },
    {
        "question_id": 1681,
        "spider_question_id": 2816,
        "db_id": "news_report",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1",
        "question": "Show the names of journalists that have reported more than one event.",
        "query": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$journalist_info\" }, { $group: { _id: \"$journalist_info.Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.news_report.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"Event_ID\", as: \"event_info\" } }, { $lookup: { from: \"journalist\", localField: \"journalist_ID\", foreignField: \"journalist_ID\", as: \"journalist_info\" } }, { $unwind: \"$journalist_info\" }, { $group: { _id: \"$journalist_info.Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Name: \"$_id\" } } ])"
    },
    {
        "question_id": 1682,
        "spider_question_id": 2817,
        "db_id": "news_report",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
        "question": "List the names of journalists who have not reported any event.",
        "query": "db.journalist.find( { journalist_ID: { $nin: db.news_report.distinct(\"journalist_ID\") } }, { Name: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.journalist.find( { journalist_ID: { $nin: db.news_report.distinct(\"journalist_ID\") } }, { Name: 1 } )"
    },
    {
        "question_id": 1683,
        "spider_question_id": 2818,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(Event_Attendance) , max(Event_Attendance) FROM event",
        "question": "what are the average and maximum attendances of all events?",
        "query": "db.event.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Event_Attendance\" }, maxAttendance: { $max: \"$Event_Attendance\" } } }, { $project: { averageAttendance: 1, maxAttendance:1 } }])",
        "gpt4 answer": "db.event.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Event_Attendance\" }, maximumAttendance: { $max: \"$Event_Attendance\" } } }, { $project: { averageAttendance: 1, maximumAttendance: 1 } } ])",
        "deepseek answer": "db.event.aggregate([ { $group: { _id: null, averageAttendance: { $avg: \"$Event_Attendance\" }, maxAttendance: { $max: \"$Event_Attendance\" } } }, { $project: { averageAttendance: 1, maxAttendance:1 } }])"
    },
    {
        "question_id": 1684,
        "spider_question_id": 2820,
        "db_id": "news_report",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT venue , name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "query": "db.event.find({}, { Venue: 1, Name: 1 }).sort({ Event_Attendance: -1 }).limit(2)",
        "gpt4 answer": "db.event.find({}, { Venue: 1, Name: 1 }).sort({ Event_Attendance: -1 }).limit(2)",
        "deepseek answer": "."
    },
    {
        "question_id": 1685,
        "spider_question_id": 2821,
        "db_id": "restaurant_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT ResName FROM Restaurant",
        "question": "Show me all the restaurants.",
        "query": "db.Restaurant.find({}, {ResName: 1})",
        "gpt4 answer": "db.Restaurant.find({}, { ResName: 1 })",
        "deepseek answer": "db.Restaurant.find({}, {ResName: 1})"
    },
    {
        "question_id": 1686,
        "spider_question_id": 2822,
        "db_id": "restaurant_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Address FROM Restaurant WHERE ResName = 'Subway'",
        "question": "What is the address of the restaurant Subway?",
        "query": "db.Restaurant.find({ResName: 'Subway'}, { Address: 1})",
        "gpt4 answer": "db.Restaurant.findOne({ ResName: 'Subway' }, { Address: 1 })",
        "deepseek answer": "db.Restaurant.find({ResName: 'Subway'}, { Address: 1})"
    },
    {
        "question_id": 1687,
        "spider_question_id": 2823,
        "db_id": "restaurant_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Rating FROM Restaurant WHERE ResName = 'Subway'",
        "question": "What is the rating of the restaurant Subway?",
        "query": "db.Restaurant.findOne({ResName: 'Subway'}, {Rating: 1})",
        "gpt4 answer": "db.Restaurant.find({ ResName: 'Subway' }, { Rating: 1 })",
        "deepseek answer": "db.Restaurant.findOne({ResName: 'Subway'}, {Rating: 1})"
    },
    {
        "question_id": 1688,
        "spider_question_id": 2824,
        "db_id": "restaurant_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT ResTypeName FROM Restaurant_Type",
        "question": "List all restaurant types.",
        "query": "db.Restaurant_Type.find({}, { ResTypeName: 1 })",
        "gpt4 answer": "db.Restaurant_Type.find({}, { ResTypeName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1689,
        "spider_question_id": 2825,
        "db_id": "restaurant_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = 'Sandwich'",
        "question": "What is the description of the restaurant type Sandwich?",
        "query": "db.Restaurant_Type.findOne({ResTypeName: 'Sandwich'}, {ResTypeDescription: 1})",
        "gpt4 answer": "db.Restaurant_Type.findOne({ ResTypeName: \"Sandwich\" }, { ResTypeDescription: 1 })",
        "deepseek answer": "db.Restaurant_Type.findOne({ResTypeName: 'Sandwich'}, {ResTypeDescription: 1})"
    },
    {
        "question_id": 1690,
        "spider_question_id": 2826,
        "db_id": "restaurant_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1",
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "query": "db.Restaurant.find({}, {ResName: 1, Rating: 1}).sort({Rating: -1}).limit(1)",
        "gpt4 answer": "db.Restaurant.find({}, { ResName: 1, Rating: 1 }).sort({ Rating: -1 }).limit(1)",
        "deepseek answer": "db.Restaurant.find({}, {ResName: 1, Rating: 1}).sort({Rating: -1}).limit(1)"
    },
    {
        "question_id": 1691,
        "spider_question_id": 2830,
        "db_id": "restaurant_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city_code FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith'",
        "question": "Which city does student Linda Smith live in?",
        "query": "db.Student.find({ Fname: 'Linda', LName: 'Smith' }, { city_code: 1 })",
        "gpt4 answer": "db.Student.find({ Fname: 'Linda', LName: 'Smith' }, { city_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1692,
        "spider_question_id": 2832,
        "db_id": "restaurant_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Advisor , count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1",
        "question": "Which Advisor has most of students? List advisor and the number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", numberOfStudents: { $sum: 1 } } }, { $sort: { numberOfStudents: -1 } }, { $limit: 1 }, { $project: { Advisor: \"$_id\", numberOfStudents: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1693,
        "spider_question_id": 2833,
        "db_id": "restaurant_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Major , count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1",
        "question": "Which major has least number of students? List the major and the number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", NumberOfStudents: { $sum: 1 } } }, { $sort: { NumberOfStudents: 1 } }, { $limit: 1 }, { $project: { Major: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1694,
        "spider_question_id": 2834,
        "db_id": "restaurant_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Major , count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30",
        "question": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2, $lte: 30 } } }, { $project: { Major: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", numberOfStudents: { $sum: 1 } } }, { $match: { numberOfStudents: { $gte: 2, $lte: 30 } } }, { $project: { Major: \"$_id\", numberOfStudents: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2, $lte: 30 } } }, { $project: { Major: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1695,
        "spider_question_id": 2837,
        "db_id": "restaurant_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "query": "db.Restaurant.aggregate([ { $lookup: { from: \"Type_Of_Restaurant\", localField: \"ResID\", foreignField: \"ResID\", as: \"restaurant_types\" } }, { $unwind: \"$restaurant_types\" }, { $lookup: { from: \"Restaurant_Type\", localField: \"restaurant_types.ResTypeID\", foreignField: \"ResTypeID\", as: \"restaurant_types.type\" } }, { $unwind: \"$restaurant_types.type\" }, { $match: { \"restaurant_types.type.ResTypeName\": \"Sandwich\" } }, { $group: { _id: \"$restaurant_types.type.ResTypeID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Restaurant.aggregate([ { $lookup: { from: \"Type_Of_Restaurant\", localField: \"ResID\", foreignField: \"ResID\", as: \"TypeDetails\" } }, { $unwind: \"$TypeDetails\" }, { $lookup: { from: \"Restaurant_Type\", localField: \"TypeDetails.ResTypeID\", foreignField: \"ResTypeID\", as: \"RestaurantTypeDetails\" } }, { $unwind: \"$RestaurantTypeDetails\" }, { $match: {\"RestaurantTypeDetails.ResTypeName\": \"Sandwich\"} }, { $count: \"NumberOfSandwichRestaurants\" } ])",
        "deepseek answer": "db.Restaurant.aggregate([ { $lookup: { from: \"Type_Of_Restaurant\", localField: \"ResID\", foreignField: \"ResID\", as: \"restaurant_types\" } }, { $unwind: \"$restaurant_types\" }, { $lookup: { from: \"Restaurant_Type\", localField: \"restaurant_types.ResTypeID\", foreignField: \"ResTypeID\", as: \"restaurant_types.type\" } }, { $unwind: \"$restaurant_types.type\" }, { $match: { \"restaurant_types.type.ResTypeName\": \"Sandwich\" } }, { $group: { _id: \"$restaurant_types.type.ResTypeID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1696,
        "spider_question_id": 2839,
        "db_id": "restaurant_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway'",
        "question": "How many times has the student Linda Smith visited Subway?",
        "query": "db.Student.aggregate([ { $match: { Fname: \"Linda\", LName: \"Smith\" } }, { $lookup: { from: \"Visits_Restaurant\", localField: \"StuID\", foreignField: \"StuID\", as: \"Visits\" } }, { $unwind: \"$Visits\" }, { $lookup: { from: \"Restaurant\", localField: \"Visits.ResID\", foreignField: \"ResID\", as: \"RestaurantVisits\" } }, { $unwind: \"$RestaurantVisits\" }, { $match: { \"RestaurantVisits.ResName\": \"Subway\" } }, { $count: \"VisitsCount\" } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Fname: \"Linda\", LName: \"Smith\" } }, { $lookup: { from: \"Visits_Restaurant\", localField: \"StuID\", foreignField: \"StuID\", as: \"Visits\" } }, { $unwind: \"$Visits\" }, { $lookup: { from: \"Restaurant\", localField: \"Visits.ResID\", foreignField: \"ResID\", as: \"RestaurantVisits\" } }, { $unwind: \"$RestaurantVisits\" }, { $match: { \"RestaurantVisits.ResName\": \"Subway\" } }, { $count: \"VisitsCount\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1697,
        "spider_question_id": 2841,
        "db_id": "restaurant_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Restaurant.ResName , sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1",
        "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.",
        "query": "db.Visits_Restaurant.aggregate([ { $lookup: { from: \"Restaurant\", localField: \"ResID\", foreignField: \"ResID\", as: \"restaurant\" } }, { $unwind: \"$restaurant\" }, { $group: { _id: \"$restaurant.ResID\", totalTime: { $sum: \"$Spent\" }, restaurantName: { $first: \"$restaurant.ResName\" } } }, { $sort: { totalTime: 1 } }, { $limit: 1 }, { $project: { restaurantName: 1, totalTime: 1 } } ])",
        "gpt4 answer": "db.Visits_Restaurant.aggregate([ { $group: { _id: \"$ResID\", totalTimeSpent: { $sum: \"$Spent\" } } }, { $sort: { totalTimeSpent: 1 } }, { $limit: 1 }, { $lookup: { from: \"Restaurant\", localField: \"_id\", foreignField: \"ResID\", as: \"restaurantDetails\" } }, { $unwind: \"$restaurantDetails\" }, { $project: { restaurantName: \"$restaurantDetails.ResName\", totalTimeSpent: 1 } } ])",
        "deepseek answer": "db.Visits_Restaurant.aggregate([ { $lookup: { from: \"Restaurant\", localField: \"ResID\", foreignField: \"ResID\", as: \"restaurant\" } }, { $unwind: \"$restaurant\" }, { $group: { _id: \"$restaurant.ResID\", totalTime: { $sum: \"$Spent\" }, restaurantName: { $first: \"$restaurant.ResName\" } } }, { $sort: { totalTime: 1 } }, { $limit: 1 }, { $project: { restaurantName: 1, totalTime: 1 } } ])"
    },
    {
        "question_id": 1698,
        "spider_question_id": 2843,
        "db_id": "customer_deliveries",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'",
        "question": "Find the ids of orders whose status is 'Success'.",
        "query": "db.Actual_Orders.find({order_status_code: 'Success'}, { actual_order_id: 1})",
        "gpt4 answer": "db.Actual_Orders.find({ order_status_code: 'Success' }, { actual_order_id: 1 })",
        "deepseek answer": "db.Actual_Orders.find({order_status_code: 'Success'}, { actual_order_id: 1})"
    },
    {
        "question_id": 1699,
        "spider_question_id": 2847,
        "db_id": "customer_deliveries",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "question": "Show the details of all trucks in the order of their license number.",
        "query": "db.Trucks.find({}, { truck_details: 1}).sort({truck_licence_number: 1})",
        "gpt4 answer": "db.Trucks.find({}, { truck_details: 1 }).sort({ truck_licence_number: 1 })",
        "deepseek answer": "db.Trucks.find({}, { truck_details: 1}).sort({truck_licence_number: 1})"
    },
    {
        "question_id": 1700,
        "spider_question_id": 2848,
        "db_id": "customer_deliveries",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "question": "Find the name of the most expensive product.",
        "query": "db.Products.find({}, {product_name: 1}).sort({product_price: -1}).limit(1)",
        "gpt4 answer": "db.Products.find({}, {product_name: 1}).sort({product_price: -1}).limit(1)",
        "deepseek answer": "db.Products.find({}, {product_name: 1}).sort({product_price: -1}).limit(1)"
    },
    {
        "question_id": 1701,
        "spider_question_id": 2849,
        "db_id": "customer_deliveries",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "question": "Find the names of customers who are not living in the state of California.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $match: { \"addresses.state_province_county\": { $ne: \"California\" } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $match: { \"addresses.state_province_county\": { $ne: \"California\" } } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 1702,
        "spider_question_id": 2850,
        "db_id": "customer_deliveries",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_email , customer_name FROM customers WHERE payment_method = 'Visa'",
        "question": "List the names and emails of customers who payed by Visa card.",
        "query": "db.Customers.find({ payment_method: 'Visa' }, { customer_email: 1, customer_name: 1 })",
        "gpt4 answer": "db.Customers.find({payment_method: \"Visa\"}, {customer_name: 1, customer_email: 1})",
        "deepseek answer": "db.Customers.find({ payment_method: 'Visa' }, { customer_email: 1, customer_name: 1 })"
    },
    {
        "question_id": 1703,
        "spider_question_id": 2851,
        "db_id": "customer_deliveries",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.customer_name , t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'",
        "question": "Find the names and phone numbers of customers living in California state.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"California\" } }, { $project: { customer_name: 1, customer_phone: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"California\" } }, { $project: { customer_name: 1, customer_phone: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"California\" } }, { $project: { customer_name: 1, customer_phone: 1 } } ])"
    },
    {
        "question_id": 1704,
        "spider_question_id": 2853,
        "db_id": "customer_deliveries",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer",
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "query": "db.Customers.find({}, {customer_name: 1, customer_phone: 1, customer_email: 1}).sort({date_became_customer: 1})",
        "gpt4 answer": "db.Customers.find({}, { customer_name: 1, customer_phone: 1, customer_email: 1 }).sort({ date_became_customer: 1 })",
        "deepseek answer": "db.Customers.find({}, {customer_name: 1, customer_phone: 1, customer_email: 1}).sort({date_became_customer: 1})"
    },
    {
        "question_id": 1705,
        "spider_question_id": 2854,
        "db_id": "customer_deliveries",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "question": "Find the name of the first 5 customers.",
        "query": "db.Customers.find({}, {customer_name: 1}).sort({date_became_customer: 1}).limit(5)",
        "gpt4 answer": "db.Customers.find({}, { customer_name: 1 }).sort({ date_became_customer: 1 }).limit(5)",
        "deepseek answer": "db.Customers.find({}, {customer_name: 1}).sort({date_became_customer: 1}).limit(5)"
    },
    {
        "question_id": 1706,
        "spider_question_id": 2855,
        "db_id": "customer_deliveries",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the payment method that is used most frequently.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])"
    },
    {
        "question_id": 1707,
        "spider_question_id": 2856,
        "db_id": "customer_deliveries",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "question": "List the names of all routes in alphabetic order.",
        "query": "db.Delivery_Routes.find({}, {route_name: 1}).sort({route_name: 1})",
        "gpt4 answer": "db.Delivery_Routes.find({}, { route_name: 1 }).sort({ route_name: 1 })",
        "deepseek answer": "db.Delivery_Routes.find({}, {route_name: 1}).sort({route_name: 1})"
    },
    {
        "question_id": 1708,
        "spider_question_id": 2858,
        "db_id": "customer_deliveries",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
        "question": "List the state names and the number of customers living in each state.",
        "query": "db.Customer_Addresses.aggregate([ { $lookup: { from: \"Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.state_province_county\", customerCount: { $sum: 1 } } }, { $project: { state: \"$_id\", numberOfCustomers: \"$customerCount\" } } ])",
        "gpt4 answer": "db.Customer_Addresses.aggregate([ { $lookup: { from: \"Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.state_province_county\", customerCount: { $sum: 1 } } }, { $project: { state: \"$_id\", numberOfCustomers: \"$customerCount\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1709,
        "spider_question_id": 2870,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Atsushi' AND t1.lname = 'Ohori'",
        "question": "How many papers are 'Atsushi Ohori' the author of?",
        "query": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Papers\", localField: \"authorship_info.paperID\", foreignField: \"paperID\", as: \"paper_info\" } }, { $unwind: \"$paper_info\" }, { $match: { \"fname\": \"Atsushi\", \"lname\": \"Ohori\" } }, { $count: \"papers_count\" } ])",
        "gpt4 answer": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Papers\", localField: \"authorship_info.paperID\", foreignField: \"paperID\", as: \"paper_info\" } }, { $unwind: \"$paper_info\" }, { $match: { \"fname\": \"Atsushi\", \"lname\": \"Ohori\" } }, { $count: \"papers_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1710,
        "spider_question_id": 2873,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = 'Katsuhiro' AND t1.lname = 'Ueno'",
        "question": "Which institution does 'Katsuhiro Ueno' belong to?",
        "query": "db.Authorship.aggregate([ { $lookup: { from: \"Authors\", localField: \"authID\", foreignField: \"authID\", as: \"authors\" } }, { $unwind: \"$authors\" }, { $match: { \"authors.fname\": \"Katsuhiro\", \"authors.lname\": \"Ueno\" } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"institutions\" } }, { $unwind: \"$institutions\" }, { $group: { _id: \"$institutions.instID\", name: { $first: \"$institutions.name\" } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $lookup: { from: \"Authors\", localField: \"authID\", foreignField: \"authID\", as: \"authors\" } }, { $unwind: \"$authors\" }, { $match: { \"authors.fname\": \"Katsuhiro\", \"authors.lname\": \"Ueno\" } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"institutions\" } }, { $unwind: \"$institutions\" }, { $group: { _id: \"$institutions.instID\", name: { $first: \"$institutions.name\" } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1711,
        "spider_question_id": 2877,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.fname , t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'",
        "question": "Which authors belong to the institution 'Google'? Show the first names and last names.",
        "query": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship\" } }, { $unwind: \"$authorship\" }, { $lookup: { from: \"Inst\", localField: \"authorship.instID\", foreignField: \"instID\", as: \"institutions\" } }, { $unwind: \"$institutions\" }, { $match: { \"institutions.name\": \"Google\" } }, { $group: { _id: { authID: \"$authID\", fname: \"$fname\", lname: \"$lname\" } } }, { $project: { fname: \"$_id.fname\", lname: \"$_id.lname\" } } ])",
        "gpt4 answer": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship\" } }, { $unwind: \"$authorship\" }, { $lookup: { from: \"Inst\", localField: \"authorship.instID\", foreignField: \"instID\", as: \"institutions\" } }, { $unwind: \"$institutions\" }, { $match: { \"institutions.name\": \"Google\" } }, { $group: { _id: { authID: \"$authID\", fname: \"$fname\", lname: \"$lname\" } } }, { $project: { fname: \"$_id.fname\", lname: \"$_id.lname\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1712,
        "spider_question_id": 2883,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Indiana University'",
        "question": "What are the papers published under the institution 'Indiana University'?",
        "query": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"inst\" } }, { $unwind: \"$inst\" }, { $match: { \"inst.name\": \"Indiana University\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paper\" } }, { $unwind: \"$paper\" }, { $group: { _id: \"$paper.paperID\", title: { $first: \"$paper.title\" } } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"inst\" } }, { $unwind: \"$inst\" }, { $match: { \"inst.name\": \"Indiana University\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paper\" } }, { $unwind: \"$paper\" }, { $group: { _id: \"$paper.paperID\", title: { $first: \"$paper.title\" } } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1713,
        "spider_question_id": 2884,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Indiana University'",
        "question": "List the titles of the papers whose authors are from the institution 'Indiana University'.",
        "query": "db.Papers.aggregate([ { $lookup: { from: \"Authorship\", localField: \"paperID\", foreignField: \"paperID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Inst\", localField: \"authorship_info.instID\", foreignField: \"instID\", as: \"inst_info\" } }, { $unwind: \"$inst_info\" }, { $match: { \"inst_info.name\": \"Indiana University\" } }, { $group: { _id: \"$title\" } }, { $project: { title: \"$_id\" } } ])",
        "gpt4 answer": "db.Papers.aggregate([ { $lookup: { from: \"Authorship\", localField: \"paperID\", foreignField: \"paperID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Inst\", localField: \"authorship_info.instID\", foreignField: \"instID\", as: \"inst_info\" } }, { $unwind: \"$inst_info\" }, { $match: { \"inst_info.name\": \"Indiana University\" } }, { $group: { _id: \"$title\" } }, { $project: { title: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1714,
        "spider_question_id": 2885,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'",
        "question": "Find all the papers published by the institution 'Google'.",
        "query": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"instData\" } }, { $match: { \"instData.name\": \"Google\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paperData\" } }, { $project: { \"paperData.title\": 1 } }, { $unwind: \"$paperData\" }, { $group: { _id: \"$paperData.title\" } }, { $project: { title: \"$_id\" } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"instData\" } }, { $match: { \"instData.name\": \"Google\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paperData\" } }, { $project: { \"paperData.title\": 1 } }, { $unwind: \"$paperData\" }, { $group: { _id: \"$paperData.title\" } }, { $project: { title: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1715,
        "spider_question_id": 2886,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'",
        "question": "Which papers were written by authors from the institution 'Google'?",
        "query": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"inst\" } }, { $unwind: \"$inst\" }, { $match: { \"inst.name\": \"Google\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paper\" } }, { $unwind: \"$paper\" }, { $group: { _id: \"$paper.paperID\", title: { $first: \"$paper.title\" } } }, { $project: { title: 1 } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"inst\" } }, { $unwind: \"$inst\" }, { $match: { \"inst.name\": \"Google\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paper\" } }, { $unwind: \"$paper\" }, { $group: { _id: \"$paper.paperID\", title: { $first: \"$paper.title\" } } }, { $project: { title: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1716,
        "spider_question_id": 2889,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'University of Pennsylvania'",
        "question": "Find the number of papers published by the institution 'University of Pennsylvania'.",
        "query": "db.Authorship.aggregate([ { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paperInfo\" } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"instInfo\" } }, { $match: { \"instInfo.name\": \"University of Pennsylvania\" } }, { $group: { _id: \"$paperID\" } }, { $count: \"numPapers\" } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paperInfo\" } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"instInfo\" } }, { $match: { \"instInfo.name\": \"University of Pennsylvania\" } }, { $group: { _id: \"$paperID\" } }, { $count: \"numPapers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1717,
        "spider_question_id": 2890,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'University of Pennsylvania'",
        "question": "How many papers are written by authors from the institution 'University of Pennsylvania'?",
        "query": "db.Papers.aggregate([ { $lookup: { from: \"Authorship\", localField: \"paperID\", foreignField: \"paperID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Inst\", localField: \"authorship_info.instID\", foreignField: \"instID\", as: \"institution_info\" } }, { $match: { \"institution_info.name\": \"University of Pennsylvania\" } }, { $group: { _id: null, count: { $addToSet: \"$paperID\" } } }, { $project: { count: { $size: \"$count\" } } } ])",
        "gpt4 answer": "db.Papers.aggregate([ { $lookup: { from: \"Authorship\", localField: \"paperID\", foreignField: \"paperID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Inst\", localField: \"authorship_info.instID\", foreignField: \"instID\", as: \"institution_info\" } }, { $match: { \"institution_info.name\": \"University of Pennsylvania\" } }, { $group: { _id: null, count: { $addToSet: \"$paperID\" } } }, { $project: { count: { $size: \"$count\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1718,
        "spider_question_id": 2893,
        "db_id": "icfp_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Stephanie' AND t1.lname = 'Weirich'",
        "question": "Which papers have 'Stephanie Weirich' as an author?",
        "query": "db.Authors.aggregate([ { $match: { fname: 'Stephanie', lname: 'Weirich' } }, { $lookup: { from: 'Authorship', localField: 'authID', foreignField: 'authID', as: 'authorship_info' } }, { $unwind: '$authorship_info' }, { $lookup: { from: 'Papers', localField: 'authorship_info.paperID', foreignField: 'paperID', as: 'paper_info' } }, { $unwind: '$paper_info' }, { $project: { title: '$paper_info.title' } } ])",
        "gpt4 answer": "db.Authors.aggregate([ { $match: { fname: 'Stephanie', lname: 'Weirich' } }, { $lookup: { from: 'Authorship', localField: 'authID', foreignField: 'authID', as: 'authorship_info' } }, { $unwind: '$authorship_info' }, { $lookup: { from: 'Papers', localField: 'authorship_info.paperID', foreignField: 'paperID', as: 'paper_info' } }, { $unwind: '$paper_info' }, { $project: { title: '$paper_info.title' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1719,
        "spider_question_id": 2897,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = 'Japan' AND t2.authorder = 1 AND t1.lname = 'Ohori'",
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country 'Japan' and has last name 'Ohori'?",
        "query": "db.Authorship.aggregate([ { $match: { authOrder: 1 } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"institution\" } }, { $unwind: \"$institution\" }, { $match: { \"institution.country\": \"Japan\" } }, { $lookup: { from: \"Authors\", localField: \"authID\", foreignField: \"authID\", as: \"author\" } }, { $unwind: \"$author\" }, { $match: { \"author.lname\": \"Ohori\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paper\" } }, { $unwind: \"$paper\" }, { $project: { title: \"$paper.title\" } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $match: { authOrder: 1 } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"institution\" } }, { $unwind: \"$institution\" }, { $match: { \"institution.country\": \"Japan\" } }, { $lookup: { from: \"Authors\", localField: \"authID\", foreignField: \"authID\", as: \"author\" } }, { $unwind: \"$author\" }, { $match: { \"author.lname\": \"Ohori\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paper\" } }, { $unwind: \"$paper\" }, { $project: { title: \"$paper.title\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1720,
        "spider_question_id": 2898,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = 'Japan' AND t2.authorder = 1 AND t1.lname = 'Ohori'",
        "question": "Which papers' first author is affiliated with an institution in the country 'Japan' and has last name 'Ohori'? Give me the titles of the papers.",
        "query": "db.Authorship.aggregate([ { $match: { authOrder: 1 } }, { $lookup: { from: \"Authors\", localField: \"authID\", foreignField: \"authID\", as: \"authorInfo\" } }, { $unwind: \"$authorInfo\" }, { $match: { \"authorInfo.lname\": \"Ohori\" } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"instInfo\" } }, { $unwind: \"$instInfo\" }, { $match: { \"instInfo.country\": \"Japan\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paperInfo\" } }, { $unwind: \"$paperInfo\" }, { $project: { title: \"$paperInfo.title\" } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $match: { authOrder: 1 } }, { $lookup: { from: \"Authors\", localField: \"authID\", foreignField: \"authID\", as: \"authorInfo\" } }, { $unwind: \"$authorInfo\" }, { $match: { \"authorInfo.lname\": \"Ohori\" } }, { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"instInfo\" } }, { $unwind: \"$instInfo\" }, { $match: { \"instInfo.country\": \"Japan\" } }, { $lookup: { from: \"Papers\", localField: \"paperID\", foreignField: \"paperID\", as: \"paperInfo\" } }, { $unwind: \"$paperInfo\" }, { $project: { title: \"$paperInfo.title\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1721,
        "spider_question_id": 2901,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "question": "Retrieve the country that has published the most papers.",
        "query": "db.Inst.aggregate([ { $lookup: { from: \"Authorship\", localField: \"instID\", foreignField: \"instID\", as: \"authorshipData\" } }, { $unwind: \"$authorshipData\" }, { $lookup: { from: \"Papers\", localField: \"authorshipData.paperID\", foreignField: \"paperID\", as: \"paperData\" } }, { $unwind: \"$paperData\" }, { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Inst.aggregate([ { $lookup: { from: \"Authorship\", localField: \"instID\", foreignField: \"instID\", as: \"authorshipData\" } }, { $unwind: \"$authorshipData\" }, { $lookup: { from: \"Papers\", localField: \"authorshipData.paperID\", foreignField: \"paperID\", as: \"paperData\" } }, { $unwind: \"$paperData\" }, { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1722,
        "spider_question_id": 2902,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the country that the most papers are affiliated with.",
        "query": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"inst_details\" } }, { $unwind: \"$inst_details\" }, { $group: { _id: \"$inst_details.country\", paperCount: { $sum: 1 } } }, { $sort: { paperCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $lookup: { from: \"Inst\", localField: \"instID\", foreignField: \"instID\", as: \"inst_details\" } }, { $unwind: \"$inst_details\" }, { $group: { _id: \"$inst_details.country\", paperCount: { $sum: 1 } } }, { $sort: { paperCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1723,
        "spider_question_id": 2905,
        "db_id": "icfp_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM papers WHERE title LIKE '%ML%'",
        "question": "Find the titles of the papers that contain the word 'ML'.",
        "query": "db.Papers.find({ title: /ML/ }, { title: 1 })",
        "gpt4 answer": "db.Papers.find({ title: /ML/ }, { title: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1724,
        "spider_question_id": 2906,
        "db_id": "icfp_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM papers WHERE title LIKE '%ML%'",
        "question": "Which papers have the substring 'ML' in their titles? Return the titles of the papers.",
        "query": "db.Papers.find({ title: /ML/ }, { title: 1 })",
        "gpt4 answer": "db.Papers.find({ title: /ML/ }, { title: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1725,
        "spider_question_id": 2907,
        "db_id": "icfp_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM papers WHERE title LIKE '%Database%'",
        "question": "Which paper's title contains the word 'Database'?",
        "query": "db.Papers.find({ title: /Database/ }, { title: 1 })",
        "gpt4 answer": "db.Papers.find({ title: /Database/ }, { title: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1726,
        "spider_question_id": 2908,
        "db_id": "icfp_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title FROM papers WHERE title LIKE '%Database%'",
        "question": "Which papers have the substring 'Database' in their titles? Show the titles of the papers.",
        "query": "db.Papers.find({ title: /Database/ }, { title: 1 })",
        "gpt4 answer": "db.Papers.find({ title: /Database/ }, { title: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1727,
        "spider_question_id": 2909,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Functional%'",
        "question": "Find the first names of all the authors who have written a paper with title containing the word 'Functional'.",
        "query": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Papers\", localField: \"authorship_info.paperID\", foreignField: \"paperID\", as: \"paper_info\" } }, { $unwind: \"$paper_info\" }, { $match: { \"paper_info.title\": { $regex: \"Functional\", $options: \"i\" } } }, { $project: { fname: 1 } } ])",
        "gpt4 answer": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Papers\", localField: \"authorship_info.paperID\", foreignField: \"paperID\", as: \"paper_info\" } }, { $unwind: \"$paper_info\" }, { $match: { \"paper_info.title\": { $regex: \"Functional\", $options: \"i\" } } }, { $project: { fname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1728,
        "spider_question_id": 2911,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Monadic%'",
        "question": "Find the last names of all the authors that have written a paper with title containing the word 'Monadic'.",
        "query": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Papers\", localField: \"authorship_info.paperID\", foreignField: \"paperID\", as: \"paper_info\" } }, { $unwind: \"$paper_info\" }, { $match: { \"paper_info.title\": /Monadic/ } }, { $project: { lname: 1 } } ])",
        "gpt4 answer": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship_info\" } }, { $unwind: \"$authorship_info\" }, { $lookup: { from: \"Papers\", localField: \"authorship_info.paperID\", foreignField: \"paperID\", as: \"paper_info\" } }, { $unwind: \"$paper_info\" }, { $match: { \"paper_info.title\": /Monadic/ } }, { $project: { lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1729,
        "spider_question_id": 2912,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Monadic%'",
        "question": "Which authors have written a paper with title containing the word 'Monadic'? Return their last names.",
        "query": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship\" } }, { $unwind: \"$authorship\" }, { $lookup: { from: \"Papers\", localField: \"authorship.paperID\", foreignField: \"paperID\", as: \"papers\" } }, { $unwind: \"$papers\" }, { $match: { \"papers.title\": { $regex: \"Monadic\", $options: \"i\" } } }, { $project: { lname: 1 } } ])",
        "gpt4 answer": "db.Authors.aggregate([ { $lookup: { from: \"Authorship\", localField: \"authID\", foreignField: \"authID\", as: \"authorship\" } }, { $unwind: \"$authorship\" }, { $lookup: { from: \"Papers\", localField: \"authorship.paperID\", foreignField: \"paperID\", as: \"papers\" } }, { $unwind: \"$papers\" }, { $match: { \"papers.title\": { $regex: \"Monadic\", $options: \"i\" } } }, { $project: { lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1730,
        "spider_question_id": 2913,
        "db_id": "icfp_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT max(authorder) FROM authorship)",
        "question": "Retrieve the title of the paper that has the largest number of authors.",
        "query": "db.Authorship.aggregate([ { $group: { _id: \"$paperID\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: \"Papers\", localField: \"_id\", foreignField: \"paperID\", as: \"paper\" }}, { $unwind: \"$paper\" }, { $project: { title: \"$paper.title\" }} ])",
        "gpt4 answer": "db.Authorship.aggregate([ { $group: { _id: \"$paperID\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $lookup: { from: \"Papers\", localField: \"_id\", foreignField: \"paperID\", as: \"paper\" }}, { $unwind: \"$paper\" }, { $project: { title: \"$paper.title\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1731,
        "spider_question_id": 2915,
        "db_id": "icfp_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT fname FROM authors WHERE lname = 'Ueno'",
        "question": "What is the first name of the author with last name 'Ueno'?",
        "query": "db.Authors.findOne({lname: 'Ueno'}, {fname: 1})",
        "gpt4 answer": "db.Authors.find({lname: 'Ueno'}, {fname: 1})",
        "deepseek answer": "db.Authors.findOne({lname: 'Ueno'}, {fname: 1})"
    },
    {
        "question_id": 1732,
        "spider_question_id": 2916,
        "db_id": "icfp_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT fname FROM authors WHERE lname = 'Ueno'",
        "question": "Which authors have last name 'Ueno'? List their first names.",
        "query": "db.Authors.find({lname: 'Ueno'}, {fname: 1})",
        "gpt4 answer": "db.Authors.find({ lname: 'Ueno' }, { fname: 1 })",
        "deepseek answer": "db.Authors.find({lname: 'Ueno'}, {fname: 1})"
    },
    {
        "question_id": 1733,
        "spider_question_id": 2919,
        "db_id": "icfp_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT fname FROM authors ORDER BY fname",
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "query": "db.Authors.find({}).sort({fname: 1}).projection({fname: 1})",
        "gpt4 answer": "db.Authors.find({}).sort({fname: 1}).projection({fname: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1734,
        "spider_question_id": 2921,
        "db_id": "icfp_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT lname FROM authors ORDER BY lname",
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "query": "db.Authors.find({}, { lname: 1 }).sort({ lname: 1 })",
        "gpt4 answer": "db.Authors.find({}, { lname: 1 }).sort({ lname: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1735,
        "spider_question_id": 2923,
        "db_id": "icfp_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT fname , lname FROM authors ORDER BY lname",
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "query": "db.Authors.find({}, { fname: 1, lname: 1 }).sort({ lname: 1 })",
        "gpt4 answer": "db.Authors.find({}, { fname: 1, lname: 1 }).sort({ lname: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1736,
        "spider_question_id": 2924,
        "db_id": "icfp_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT fname , lname FROM authors ORDER BY lname",
        "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
        "query": "db.Authors.find({}, { fname: 1, lname: 1}).sort({lname: 1})",
        "gpt4 answer": "db.Authors.find({}, { fname: 1, lname: 1}).sort({lname: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1737,
        "spider_question_id": 2925,
        "db_id": "sakila_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT last_name) FROM actor",
        "question": "How many different last names do the actors and actresses have?",
        "query": "db.actor.aggregate([ { $group: { _id: \"$last_name\" } }, { $count: \"distinct_last_names\" } ])",
        "gpt4 answer": "db.actor.aggregate([ { $group: { _id: \"$last_name\" } }, { $count: \"distinct_last_names\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1738,
        "spider_question_id": 2927,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular first name of the actors?",
        "query": "db.actor.aggregate([ { $group: { _id: \"$first_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.actor.aggregate([ { $group: { _id: \"$first_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id\" } } ])"
    },
    {
        "question_id": 1739,
        "spider_question_id": 2928,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the most common first name among all actors.",
        "query": "db.actor.aggregate([ { $group: { _id: \"$first_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id\" } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $group: { _id: \"$first_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { count: 1 } } ])",
        "deepseek answer": "db.actor.aggregate([ { $group: { _id: \"$first_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id\" } } ])"
    },
    {
        "question_id": 1740,
        "spider_question_id": 2929,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name , last_name FROM actor GROUP BY first_name , last_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular full name of the actors?",
        "query": "db.actor.aggregate([ { $group: { _id: { first_name: \"$first_name\", last_name: \"$last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id.first_name\", last_name: \"$_id.last_name\" } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $group: { _id: { first_name: \"$first_name\", last_name: \"$last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id.first_name\", last_name: \"$_id.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1741,
        "spider_question_id": 2930,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name , last_name FROM actor GROUP BY first_name , last_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the most common full name among all actors.",
        "query": "db.actor.aggregate([ { $group: { _id: { first_name: \"$first_name\", last_name: \"$last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id.first_name\", last_name: \"$_id.last_name\" } } ])",
        "gpt4 answer": "db.actor.aggregate([ { $group: { _id: { first_name: \"$first_name\", last_name: \"$last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: \"$_id.first_name\", last_name: \"$_id.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1742,
        "spider_question_id": 2933,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone , postal_code FROM address WHERE address = '1031 Daugavpils Parkway'",
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "query": "db.address.find({address: '1031 Daugavpils Parkway'}, { phone: 1, postal_code: 1})",
        "gpt4 answer": "db.address.find({ address: '1031 Daugavpils Parkway' }, { phone: 1, postal_code: 1 })",
        "deepseek answer": "db.address.find({address: '1031 Daugavpils Parkway'}, { phone: 1, postal_code: 1})"
    },
    {
        "question_id": 1743,
        "spider_question_id": 2934,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone , postal_code FROM address WHERE address = '1031 Daugavpils Parkway'",
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "query": "db.address.find({address: '1031 Daugavpils Parkway'}, {phone: 1, postal_code: 1})",
        "gpt4 answer": "db.address.find({ address: '1031 Daugavpils Parkway' }, { phone: 1, postal_code: 1 })",
        "deepseek answer": "db.address.find({address: '1031 Daugavpils Parkway'}, {phone: 1, postal_code: 1})"
    },
    {
        "question_id": 1744,
        "spider_question_id": 2941,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'",
        "question": "How many cities are in Australia?",
        "query": "db.city.aggregate([ { $lookup: { from: \"country\", localField: \"country_id\", foreignField: \"country_id\", as: \"country_info\" } }, { $match: { \"country_info.country\": \"Australia\" } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"country\", localField: \"country_id\", foreignField: \"country_id\", as: \"country\" } }, { $match: { \"country.country\": \"Australia\" } }, { $count: \"totalCities\" } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"country\", localField: \"country_id\", foreignField: \"country_id\", as: \"country_info\" } }, { $match: { \"country_info.country\": \"Australia\" } }, { $count: \"count\" } ])"
    },
    {
        "question_id": 1745,
        "spider_question_id": 2942,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'",
        "question": "Count the number of cities in Australia.",
        "query": "db.city.aggregate([ { $lookup: { from: \"country\", localField: \"country_id\", foreignField: \"country_id\", as: \"country_info\" } }, { $match: { \"country_info.country\": \"Australia\" } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"country\", localField: \"country_id\", foreignField: \"country_id\", as: \"country\" } }, { $match: { \"country.country\": \"Australia\" } }, { $count: \"num_cities\" } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"country\", localField: \"country_id\", foreignField: \"country_id\", as: \"country_info\" } }, { $match: { \"country_info.country\": \"Australia\" } }, { $count: \"count\" } ])"
    },
    {
        "question_id": 1746,
        "spider_question_id": 2949,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "query": "db.film.find({}, {title: 1, rental_rate: 1}).sort({rental_rate: -1}).limit(1)",
        "gpt4 answer": "db.film.find({}, {title: 1, rental_rate: 1}).sort({rental_rate: -1}).limit(1)",
        "deepseek answer": "db.film.find({}, {title: 1, rental_rate: 1}).sort({rental_rate: -1}).limit(1)"
    },
    {
        "question_id": 1747,
        "spider_question_id": 2950,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "question": "What are the title and rental rate of the film with the highest rental rate?",
        "query": "db.film.find({}, {title: 1, rental_rate: 1}).sort({rental_rate: -1}).limit(1)",
        "gpt4 answer": "db.film.find({}, {title: 1, rental_rate: 1}).sort({rental_rate: -1}).limit(1)",
        "deepseek answer": "db.film.find({}, {title: 1, rental_rate: 1}).sort({rental_rate: -1}).limit(1)"
    },
    {
        "question_id": 1748,
        "spider_question_id": 2951,
        "db_id": "sakila_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "query": "db.film_actor.aggregate([ { $group: { _id: \"$film_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"film\", localField: \"_id\", foreignField: \"film_id\", as: \"film_details\" } }, { $unwind: \"$film_details\" }, { $project: { film_id: \"$_id\", title: \"$film_details.title\", description: \"$film_details.description\" } } ])",
        "gpt4 answer": "db.film_actor.aggregate([ { $group: { _id: \"$film_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"film\", localField: \"_id\", foreignField: \"film_id\", as: \"film_details\" } }, { $unwind: \"$film_details\" }, { $project: { film_id: \"$_id\", title: \"$film_details.title\", description: \"$film_details.description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1749,
        "spider_question_id": 2952,
        "db_id": "sakila_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "query": "db.film_actor.aggregate([ { $group: { _id: \"$film_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"film\", localField: \"_id\", foreignField: \"film_id\", as: \"film_details\" } }, { $unwind: \"$film_details\" }, { $project: { title: \"$film_details.title\", film_id: \"$film_details.film_id\", description: \"$film_details.description\" } } ])",
        "gpt4 answer": "db.film_actor.aggregate([ { $group: { _id: \"$film_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"film\", localField: \"_id\", foreignField: \"film_id\", as: \"film_details\" } }, { $unwind: \"$film_details\" }, { $project: { title: \"$film_details.title\", film_id: \"$film_details.film_id\", description: \"$film_details.description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1750,
        "spider_question_id": 2953,
        "db_id": "sakila_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "query": "db.film_actor.aggregate([ { $lookup: { from: \"actor\", localField: \"actor_id\", foreignField: \"actor_id\", as: \"actor_info\" } }, { $unwind: \"$actor_info\" }, { $group: { _id: \"$actor_info.actor_id\", first_name: { $first: \"$actor_info.first_name\" }, last_name: { $first: \"$actor_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1, actor_id: \"$_id\" } } ])",
        "gpt4 answer": "db.film_actor.aggregate([ { $group: { _id: \"$actor_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"actor\", localField: \"_id\", foreignField: \"actor_id\", as: \"actor_info\" } }, { $unwind: \"$actor_info\" }, { $project: { first_name: \"$actor_info.first_name\", last_name: \"$actor_info.last_name\", actor_id: \"$_id\" } } ])",
        "deepseek answer": "db.film_actor.aggregate([ { $lookup: { from: \"actor\", localField: \"actor_id\", foreignField: \"actor_id\", as: \"actor_info\" } }, { $unwind: \"$actor_info\" }, { $group: { _id: \"$actor_info.actor_id\", first_name: { $first: \"$actor_info.first_name\" }, last_name: { $first: \"$actor_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1, actor_id: \"$_id\" } } ])"
    },
    {
        "question_id": 1751,
        "spider_question_id": 2954,
        "db_id": "sakila_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "query": "db.film_actor.aggregate([ { $lookup: { from: \"actor\", localField: \"actor_id\", foreignField: \"actor_id\", as: \"actor_info\" } }, { $unwind: \"$actor_info\" }, { $group: { _id: \"$actor_info.actor_id\", first_name: { $first: \"$actor_info.first_name\" }, last_name: { $first: \"$actor_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1, actor_id: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.film_actor.aggregate([ { $lookup: { from: \"actor\", localField: \"actor_id\", foreignField: \"actor_id\", as: \"actor_info\" } }, { $unwind: \"$actor_info\" }, { $group: { _id: \"$actor_info.actor_id\", first_name: { $first: \"$actor_info.first_name\" }, last_name: { $first: \"$actor_info.last_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1, actor_id: \"$_id\" } } ])"
    },
    {
        "question_id": 1752,
        "spider_question_id": 2957,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store owns most items?",
        "query": "db.inventory.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { store_id: \"$_id\" } }])",
        "gpt4 answer": "db.inventory.aggregate([ { $group: { _id: \"$store_id\", itemCount: { $sum: 1 } } }, { $sort: { itemCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.inventory.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { store_id: \"$_id\" } }])"
    },
    {
        "question_id": 1753,
        "spider_question_id": 2958,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the store that has the most items in inventory?",
        "query": "db.inventory.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])",
        "gpt4 answer": "db.inventory.aggregate([ { $group: { _id: \"$store_id\", total: { $sum: 1 } } }, { $sort: { total: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])",
        "deepseek answer": "db.inventory.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])"
    },
    {
        "question_id": 1754,
        "spider_question_id": 2961,
        "db_id": "sakila_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name , T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"payment\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $match: { \"payments.0\": { $exists: true } } }, { $project: { first_name: 1, last_name: 1, customer_id: 1 } }, { $sort: { totalAmount: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.payment.aggregate([ { $group: { _id: \"$customer_id\", total_amount: { $sum: \"$amount\" } } }, { $sort: { total_amount: 1 } }, { $limit: 1 }, { $lookup: { from: \"customer\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer_details\" } }, { $project: { first_name: { $arrayElemAt: [\"$customer_details.first_name\", 0] }, last_name: { $arrayElemAt: [\"$customer_details.last_name\", 0] }, customer_id: \"$_id\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"payment\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $match: { \"payments.0\": { $exists: true } } }, { $project: { first_name: 1, last_name: 1, customer_id: 1 } }, { $sort: { totalAmount: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1755,
        "spider_question_id": 2962,
        "db_id": "sakila_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name , T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"payment\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $project: { first_name: 1, last_name: 1, customer_id: 1} }, { $sort: { totalAmount: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"payment\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $project: { first_name: 1, last_name: 1, customer_id: 1, totalAmount: { $sum: \"$payments.amount\" } } }, { $sort: { totalAmount: 1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1, customer_id: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"payment\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $project: { first_name: 1, last_name: 1, customer_id: 1} }, { $sort: { totalAmount: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1756,
        "spider_question_id": 2963,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'",
        "question": "What is the genre name of the film HUNGER ROOF?",
        "query": "db.category.aggregate([ { $lookup: { from: \"film_category\", localField: \"category_id\", foreignField: \"category_id\", as: \"film_category_join\" } }, { $unwind: \"$film_category_join\" }, { $lookup: { from: \"film\", localField: \"film_category_join.film_id\", foreignField: \"film_id\", as: \"film_join\" } }, { $unwind: \"$film_join\" }, { $match: { \"film_join.title\": \"HUNGER ROOF\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.category.aggregate([ { $lookup: { from: \"film_category\", localField: \"category_id\", foreignField: \"category_id\", as: \"film_category_join\" } }, { $unwind: \"$film_category_join\" }, { $lookup: { from: \"film\", localField: \"film_category_join.film_id\", foreignField: \"film_id\", as: \"film_join\" } }, { $unwind: \"$film_join\" }, { $match: { \"film_join.title\": \"HUNGER ROOF\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1757,
        "spider_question_id": 2964,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'",
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "query": "db.film.aggregate([ { $match: { title: \"HUNGER ROOF\" } }, { $lookup: { from: \"film_category\", localField: \"film_id\", foreignField: \"film_id\", as: \"fc\" } }, { $unwind: \"$fc\" }, { $lookup: { from: \"category\", localField: \"fc.category_id\", foreignField: \"category_id\", as: \"c\" } }, { $unwind: \"$c\" }, { $project: { name: \"$c.name\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $match: { title: \"HUNGER ROOF\" } }, { $lookup: { from: \"film_category\", localField: \"film_id\", foreignField: \"film_id\", as: \"fc\" } }, { $unwind: \"$fc\" }, { $lookup: { from: \"category\", localField: \"fc.category_id\", foreignField: \"category_id\", as: \"c\" } }, { $unwind: \"$c\" }, { $project: { name: \"$c.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1758,
        "spider_question_id": 2965,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , T1.category_id , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id",
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "query": "db.film_category.aggregate([ { $lookup: { from: \"category\", localField: \"category_id\", foreignField: \"category_id\", as: \"category_info\" } }, { $unwind: \"$category_info\" }, { $group: { _id: \"$category_id\", name: { $first: \"$category_info.name\" }, count: { $sum: 1 } } }, { $project: { name: 1, category_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.film_category.aggregate([ { $group: { _id: \"$category_id\", count: { $sum: 1 } } }, { $lookup: { from: \"category\", localField: \"_id\", foreignField: \"category_id\", as: \"category_info\" } }, { $project: { genre_id: \"$_id\", genre_name: { $arrayElemAt: [\"$category_info.name\", 0] }, film_count: \"$count\" } } ])",
        "deepseek answer": "db.film_category.aggregate([ { $lookup: { from: \"category\", localField: \"category_id\", foreignField: \"category_id\", as: \"category_info\" } }, { $unwind: \"$category_info\" }, { $group: { _id: \"$category_id\", name: { $first: \"$category_info.name\" }, count: { $sum: 1 } } }, { $project: { name: 1, category_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1759,
        "spider_question_id": 2966,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , T1.category_id , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "query": "db.film_category.aggregate([ { $lookup: { from: \"category\", localField: \"category_id\", foreignField: \"category_id\", as: \"category_info\" } }, { $unwind: \"$category_info\" }, { $group: { _id: \"$category_id\", name: { $first: \"$category_info.name\" }, count: { $sum: 1 } } }, { $project: { name: 1, category_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.film_category.aggregate([ { $lookup: { from: \"category\", localField: \"category_id\", foreignField: \"category_id\", as: \"category_info\" } }, { $unwind: \"$category_info\" }, { $group: { _id: \"$category_id\", name: { $first: \"$category_info.name\" }, count: { $sum: 1 } } }, { $project: { category_id: \"$_id\", name: 1, film_count: \"$count\" } } ])",
        "deepseek answer": "db.film_category.aggregate([ { $lookup: { from: \"category\", localField: \"category_id\", foreignField: \"category_id\", as: \"category_info\" } }, { $unwind: \"$category_info\" }, { $group: { _id: \"$category_id\", name: { $first: \"$category_info.name\" }, count: { $sum: 1 } } }, { $project: { name: 1, category_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1760,
        "spider_question_id": 2971,
        "db_id": "sakila_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT language_id) FROM film",
        "question": "How many languages are in these films?",
        "query": "db.film.aggregate([ { $group: { _id: \"$language_id\" } }, { $count: \"unique_languages\" } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$language_id\" } }, { $count: \"unique_languages\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1761,
        "spider_question_id": 2984,
        "db_id": "sakila_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT rating) FROM film",
        "question": "Count the number of different film ratings.",
        "query": "db.film.aggregate([ { $group: { _id: \"$rating\" } }, { $count: \"distinct_ratings\" } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$rating\" } }, { $count: \"distinct_ratings\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1762,
        "spider_question_id": 2991,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.address , T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'",
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "query": "db.customer.aggregate([ { $match: { first_name: \"LINDA\" } }, { $lookup: { from: \"address\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { address: \"$address_info.address\", email: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.customer.aggregate([ { $match: { first_name: \"LINDA\" } }, { $lookup: { from: \"address\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { address: \"$address_info.address\", email: 1 } } ])"
    },
    {
        "question_id": 1763,
        "spider_question_id": 2995,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"rental\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"rental_info\" } }, { $unwind: \"$rental_info\" }, { $sort: { \"rental_info.rental_date\": 1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"rental\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"rental_info\" } }, { $unwind: \"$rental_info\" }, { $sort: { \"rental_info.rental_date\": 1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 1764,
        "spider_question_id": 2996,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "question": "Return the full name of the customer who made the first rental.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"rental\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"rental_info\" } }, { $unwind: \"$rental_info\" }, { $sort: { \"rental_info.rental_date\": 1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"rental\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"rentals\" } }, { $unwind: \"$rentals\" }, { $sort: { \"rentals.rental_date\": 1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"rental\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"rental_info\" } }, { $unwind: \"$rental_info\" }, { $sort: { \"rental_info.rental_date\": 1 } }, { $limit: 1 }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 1765,
        "spider_question_id": 2999,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store has most the customers?",
        "query": "db.customer.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $group: { _id: \"$store_id\", customerCount: { $sum: 1 } }}, { $sort: { customerCount: -1 } }, { $limit: 1 }, { $project: { customerCount: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])"
    },
    {
        "question_id": 1766,
        "spider_question_id": 3000,
        "db_id": "sakila_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id of the store with the most customers.",
        "query": "db.customer.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $group: { _id: \"$store_id\", customerCount: { $sum: 1 } } }, { $sort: { customerCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $group: { _id: \"$store_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { store_id: \"$_id\" } } ])"
    },
    {
        "question_id": 1767,
        "spider_question_id": 3001,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "question": "What is the largest payment amount?",
        "query": "db.payment.find({}, {amount: 1}).sort({amount: -1}).limit(1)",
        "gpt4 answer": "db.payment.find({}, { amount: 1 }).sort({ amount: -1 }).limit(1)",
        "deepseek answer": "db.payment.find({}, {amount: 1}).sort({amount: -1}).limit(1)"
    },
    {
        "question_id": 1768,
        "spider_question_id": 3002,
        "db_id": "sakila_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "question": "Return the amount of the largest payment.",
        "query": "db.payment.find({}, {amount: 1}).sort({amount: -1}).limit(1)",
        "gpt4 answer": "db.payment.find({}, { amount: 1 }).sort({ amount: -1 }).limit(1)",
        "deepseek answer": "db.payment.find({}, {amount: 1}).sort({amount: -1}).limit(1)"
    },
    {
        "question_id": 1769,
        "spider_question_id": 3009,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(no_of_customers) FROM bank",
        "question": "How many customers are there?",
        "query": "db.bank.aggregate([ { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } }, { $project: { totalCustomers: 1 } } ])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: null, total_customers: { $sum: \"$no_of_customers\" } } }, { $project: { total_customers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } }, { $project: { totalCustomers: 1 } } ])"
    },
    {
        "question_id": 1770,
        "spider_question_id": 3010,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(no_of_customers) FROM bank",
        "question": "What is the total number of customers across banks?",
        "query": "db.bank.aggregate([ { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } } , { $project: { totalCustomers: 1 } }])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: null, total_customers: { $sum: \"$no_of_customers\" } } } ,{ $project: { total_customers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } } , { $project: { totalCustomers: 1 } }])"
    },
    {
        "question_id": 1771,
        "spider_question_id": 3011,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(no_of_customers) FROM bank WHERE city = 'New York City'",
        "question": "Find the number of customers in the banks at New York City.",
        "query": "db.bank.aggregate([ { $match: { city: \"New York City\" } }, { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } }, { $project: { totalCustomers: 1 } } ])",
        "gpt4 answer": "db.bank.aggregate([ { $match: { city: \"New York City\" }}, { $group: { _id: null, total_customers: { $sum: \"$no_of_customers\" }}}, { $project: { total_customers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $match: { city: \"New York City\" } }, { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } }, { $project: { totalCustomers: 1 } } ])"
    },
    {
        "question_id": 1772,
        "spider_question_id": 3012,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(no_of_customers) FROM bank WHERE city = 'New York City'",
        "question": "What is the total number of customers who use banks in New York City?",
        "query": "db.bank.aggregate([ { $match: { city: \"New York City\" } }, { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } }, { $project: { totalCustomers: 1 } } ])",
        "gpt4 answer": "db.bank.aggregate([ { $match: { city: 'New York City' } }, { $group: { _id: null, total_customers: { $sum: '$no_of_customers' } } }, { $project: { total_customers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $match: { city: \"New York City\" } }, { $group: { _id: null, totalCustomers: { $sum: \"$no_of_customers\" } } }, { $project: { totalCustomers: 1 } } ])"
    },
    {
        "question_id": 1773,
        "spider_question_id": 3013,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(no_of_customers) FROM bank WHERE state = 'Utah'",
        "question": "Find the average number of customers in all banks of Utah state.",
        "query": "db.bank.aggregate([ { $match: { state: \"Utah\" } }, { $group: { _id: null, avgNoOfCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { avgNoOfCustomers: 1} } ])",
        "gpt4 answer": "db.bank.aggregate([ { $match: { state: 'Utah' }}, { $group: { _id: null, averageCustomers: { $avg: \"$no_of_customers\" } }}, { $project: { averageCustomers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $match: { state: \"Utah\" } }, { $group: { _id: null, avgNoOfCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { avgNoOfCustomers: 1} } ])"
    },
    {
        "question_id": 1774,
        "spider_question_id": 3014,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(no_of_customers) FROM bank WHERE state = 'Utah'",
        "question": "What is the average number of customers across banks in the state of Utah?",
        "query": "db.bank.aggregate([ { $match: { state: 'Utah' } }, { $group: { _id: null, avgNoOfCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { avgNoOfCustomers: 1 } } ])",
        "gpt4 answer": "db.bank.aggregate([ { $match: { state: 'Utah' } }, { $group: { _id: null, avgNoOfCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { avgNoOfCustomers: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1775,
        "spider_question_id": 3015,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(no_of_customers) FROM bank",
        "question": "Find the average number of customers cross all banks.",
        "query": "db.bank.aggregate([ { $group: { _id: null, averageCustomers: { $avg: \"$no_of_customers\" } } } , { $project: { averageCustomers: 1 } }])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: null, avgCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { avgCustomers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $group: { _id: null, averageCustomers: { $avg: \"$no_of_customers\" } } } , { $project: { averageCustomers: 1 } }])"
    },
    {
        "question_id": 1776,
        "spider_question_id": 3016,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(no_of_customers) FROM bank",
        "question": "What is the average number of bank customers?",
        "query": "db.bank.aggregate([ { $group: { _id: null, averageCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { averageCustomers: 1 } } ])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: null, avgCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { avgCustomers: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $group: { _id: null, averageCustomers: { $avg: \"$no_of_customers\" } } }, { $project: { averageCustomers: 1 } } ])"
    },
    {
        "question_id": 1777,
        "spider_question_id": 3017,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , state FROM bank WHERE bname = 'morningside'",
        "question": "Find the city and state of the bank branch named morningside.",
        "query": "db.bank.find({bname: 'morningside'}, { city: 1, state: 1})",
        "gpt4 answer": "db.bank.find({ bname: 'morningside' }, { city: 1, state: 1 })",
        "deepseek answer": "db.bank.find({bname: 'morningside'}, { city: 1, state: 1})"
    },
    {
        "question_id": 1778,
        "spider_question_id": 3018,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , state FROM bank WHERE bname = 'morningside'",
        "question": "What city and state is the bank with the name morningside in?",
        "query": "db.bank.find({bname: 'morningside'}, { city: 1, state: 1})",
        "gpt4 answer": "db.bank.find({ bname: 'morningside' }, { city: 1, state: 1 })",
        "deepseek answer": "db.bank.find({bname: 'morningside'}, { city: 1, state: 1})"
    },
    {
        "question_id": 1779,
        "spider_question_id": 3019,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT bname FROM bank WHERE state = 'New York'",
        "question": "Find the branch names of banks in the New York state.",
        "query": "db.bank.find({state: 'New York'}, {bname: 1})",
        "gpt4 answer": "db.bank.find({ state: 'New York' }, { bname: 1 })",
        "deepseek answer": "db.bank.find({state: 'New York'}, {bname: 1})"
    },
    {
        "question_id": 1780,
        "spider_question_id": 3020,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT bname FROM bank WHERE state = 'New York'",
        "question": "What are the names of banks in the state of New York?",
        "query": "db.bank.find({state: 'New York'}, {bname: 1})",
        "gpt4 answer": "db.bank.find({ state: 'New York' }, { bname: 1 })",
        "deepseek answer": "db.bank.find({state: 'New York'}, {bname: 1})"
    },
    {
        "question_id": 1781,
        "spider_question_id": 3021,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "query": "db.customer.find({}, {cust_name: 1}).sort({acc_bal: 1})",
        "gpt4 answer": "db.customer.find({}, { cust_name: 1 }).sort({ acc_bal: 1 })",
        "deepseek answer": "db.customer.find({}, {cust_name: 1}).sort({acc_bal: 1})"
    },
    {
        "question_id": 1782,
        "spider_question_id": 3022,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "question": "What are the names of all customers, ordered by account balance?",
        "query": "db.customer.find({}, {cust_name: 1}).sort({acc_bal: 1})",
        "gpt4 answer": "db.customer.find({}, {cust_name: 1}).sort({acc_bal: 1})",
        "deepseek answer": "db.customer.find({}, {cust_name: 1}).sort({acc_bal: 1})"
    },
    {
        "question_id": 1783,
        "spider_question_id": 3023,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $match: { \"loan_data.0\": { $exists: true } } }, { $project: { cust_name: 1 } }, { $sort: { totalLoanAmount: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"customer_loans\" } }, { $unwind: \"$customer_loans\" }, { $group: { _id: \"$cust_name\", total_loan_amount: { $sum: \"$customer_loans.amount\" } } }, { $sort: { total_loan_amount: 1 } }, { $project: { cust_name: \"$_id\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $match: { \"loan_data.0\": { $exists: true } } }, { $project: { cust_name: 1 } }, { $sort: { totalLoanAmount: 1 } } ])"
    },
    {
        "question_id": 1784,
        "spider_question_id": 3024,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $unwind: \"$loan_data\" }, { $group: { _id: \"$cust_name\", totalAmount: { $sum: \"$loan_data.amount\" } } }, { $project: { cust_name: \"$_id\" } } , { $sort: { totalLoanAmount: 1 } }])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans\": { $not: { $size: 0 } } } }, { $group: { _id: \"$cust_name\", totalAmount: { $sum: \"$loans.amount\" } } }, { $sort: { totalAmount: 1 } }, { $project: { cust_name: \"$_id\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $unwind: \"$loan_data\" }, { $group: { _id: \"$cust_name\", totalAmount: { $sum: \"$loan_data.amount\" } } }, { $project: { cust_name: \"$_id\" } } , { $sort: { totalLoanAmount: 1 } }])"
    },
    {
        "question_id": 1785,
        "spider_question_id": 3025,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state , acc_type , credit_score FROM customer WHERE no_of_loans = 0",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "db.customer.find( { no_of_loans: 0 }, { state: 1, acc_type: 1, credit_score: 1 } )",
        "gpt4 answer": "db.customer.find({ no_of_loans: 0 }, { state: 1, acc_type: 1, credit_score: 1 })",
        "deepseek answer": "db.customer.find( { no_of_loans: 0 }, { state: 1, acc_type: 1, credit_score: 1 } )"
    },
    {
        "question_id": 1786,
        "spider_question_id": 3026,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state , acc_type , credit_score FROM customer WHERE no_of_loans = 0",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "query": "db.customer.find( { no_of_loans: 0 }, { state: 1, acc_type: 1, credit_score: 1 } )",
        "gpt4 answer": "db.customer.find( { no_of_loans: 0 }, { state: 1, acc_type: 1, credit_score: 1 } )",
        "deepseek answer": "db.customer.find( { no_of_loans: 0 }, { state: 1, acc_type: 1, credit_score: 1 } )"
    },
    {
        "question_id": 1787,
        "spider_question_id": 3027,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT city) FROM bank",
        "question": "Find the number of different cities which banks are located at.",
        "query": "db.bank.aggregate([ { $group: { _id: \"$city\" } }, { $count: \"distinct_cities_count\" } ])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: \"$city\" } }, { $count: \"distinct_cities_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1788,
        "spider_question_id": 3028,
        "db_id": "loan_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT city) FROM bank",
        "question": "In how many different cities are banks located?",
        "query": "db.bank.aggregate([ { $group: { _id: \"$city\" } }, { $count: \"distinct_cities\" } ])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: \"$city\" } }, { $count: \"distinct_cities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1789,
        "spider_question_id": 3033,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "query": "db.customer.find( {cust_name: {$regex: /a/}}, {cust_name: 1, acc_bal: 1} )",
        "gpt4 answer": "db.customer.find( { \"cust_name\": /a/ }, { \"cust_name\": 1, \"acc_bal\": 1, \"_id\": 0 } )",
        "deepseek answer": "db.customer.find( {cust_name: {$regex: /a/}}, {cust_name: 1, acc_bal: 1} )"
    },
    {
        "question_id": 1790,
        "spider_question_id": 3034,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "query": "db.customer.find( {cust_name: {$regex: /a/}}, {cust_name: 1, acc_bal: 1} )",
        "gpt4 answer": "db.customer.find( { cust_name: /a/ }, { cust_name: 1, acc_bal: 1 } )",
        "deepseek answer": "db.customer.find( {cust_name: {$regex: /a/}}, {cust_name: 1, acc_bal: 1} )"
    },
    {
        "question_id": 1791,
        "spider_question_id": 3035,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "query": "db.customer.aggregate([ { $match: { state: { $in: [\"Utah\", \"Texas\"] } } }, { $group: { _id: null, totalAccountBalance: { $sum: \"$acc_bal\" } } }, { $project: { totalAccountBalance: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.customer.aggregate([ { $match: { state: { $in: [\"Utah\", \"Texas\"] } } }, { $group: { _id: null, totalAccountBalance: { $sum: \"$acc_bal\" } } }, { $project: { totalAccountBalance: 1 } } ])"
    },
    {
        "question_id": 1792,
        "spider_question_id": 3039,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'",
        "question": "Find the name of customers who do not have an saving account.",
        "query": "db.customer.find( { acc_type: { $ne: 'saving' } }, { cust_name: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.customer.find( { acc_type: { $ne: 'saving' } }, { cust_name: 1 } )"
    },
    {
        "question_id": 1793,
        "spider_question_id": 3040,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'",
        "question": "What are the names of customers who do not have saving accounts?",
        "query": "db.customer.find( { acc_type: { $ne: 'saving' } }, { cust_name: 1 } )",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"customer\", localField: \"cust_name\", foreignField: \"cust_name\", as: \"savings_accounts\" }}, { $match: { \"savings_accounts\": { $not: { $elemMatch: { acc_type: \"saving\" } } } } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.find( { acc_type: { $ne: 'saving' } }, { cust_name: 1 } )"
    },
    {
        "question_id": 1794,
        "spider_question_id": 3041,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.loan_type\": { $ne: \"Mortgages\" } } }, { $project: { cust_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"customer_loans\" } }, { $match: { \"customer_loans.loan_type\": { $ne: \"Mortgages\" } } }, { $project: { cust_name: 1 } }, { $group: { _id: \"$cust_name\" } }, { $project: { cust_name: \"$_id\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.loan_type\": { $ne: \"Mortgages\" } } }, { $project: { cust_name: 1 } } ])"
    },
    {
        "question_id": 1795,
        "spider_question_id": 3042,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'",
        "question": "What are the names of customers who have not taken a Mortage loan?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.loan_type\": { $ne: \"Mortgages\" } } }, { $project: { cust_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.loan_type\": { $ne: \"Mortgages\" } } }, { $group: { _id: \"$cust_ID\", cust_name: { $first: \"$cust_name\" }, mortgages_count: { $sum: { $cond: [{ $eq: [\"$loans.loan_type\", \"Mortgages\"] }, 1, 0] } } } }, { $match: { mortgages_count: 0 } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.loan_type\": { $ne: \"Mortgages\" } } }, { $project: { cust_name: 1 } } ])"
    },
    {
        "question_id": 1796,
        "spider_question_id": 3043,
        "db_id": "loan_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'",
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.loan_type\": { $in: [\"Mortgages\", \"Auto\"] } } }, { $unwind: \"$loans\" }, { $match: { \"loans.loan_type\": { $in: [\"Mortgages\", \"Auto\"] } } }, { $group: { _id: \"$cust_name\", uniqueLoanTypes: { $addToSet: \"$loans.loan_type\" } } }, { $match: { uniqueLoanTypes: { $size: 2 } } }, { $project: { cust_name: \"$_id\" } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.loan_type\": { $all: [\"Mortgages\", \"Auto\"] } } }, { $group: { _id: \"$cust_ID\", cust_name: { $first: \"$cust_name\" }, loan_types: { $addToSet: \"$loans.loan_type\" } } }, { $match: { loan_types: { $all: [[\"Mortgages\", \"Auto\"]] } } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.loan_type\": { $in: [\"Mortgages\", \"Auto\"] } } }, { $unwind: \"$loans\" }, { $match: { \"loans.loan_type\": { $in: [\"Mortgages\", \"Auto\"] } } }, { $group: { _id: \"$cust_name\", uniqueLoanTypes: { $addToSet: \"$loans.loan_type\" } } }, { $match: { uniqueLoanTypes: { $size: 2 } } }, { $project: { cust_name: \"$_id\" } } ])"
    },
    {
        "question_id": 1797,
        "spider_question_id": 3045,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)",
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "query": "db.customer.aggregate([ { $group: { _id: null, averageCreditScore: { $avg: \"$credit_score\" } } }, { $lookup: { from: \"customer\", let: { avgCreditScore: \"$averageCreditScore\" }, pipeline: [ { $match: { $expr: { $lt: [ \"$credit_score\", \"$$avgCreditScore\" ] } } }, { $project: { cust_name: 1 } } ], as: \"below_average_customers\" } }, { $unwind: \"$below_average_customers\" }, { $replaceRoot: { newRoot: \"$below_average_customers\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.customer.aggregate([ { $group: { _id: null, averageCreditScore: { $avg: \"$credit_score\" } } }, { $lookup: { from: \"customer\", let: { avgCreditScore: \"$averageCreditScore\" }, pipeline: [ { $match: { $expr: { $lt: [ \"$credit_score\", \"$$avgCreditScore\" ] } } }, { $project: { cust_name: 1 } } ], as: \"below_average_customers\" } }, { $unwind: \"$below_average_customers\" }, { $replaceRoot: { newRoot: \"$below_average_customers\" } } ])"
    },
    {
        "question_id": 1798,
        "spider_question_id": 3046,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT avg(credit_score) FROM customer)",
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "query": "db.customer.aggregate([ { $group: { _id: null, averageCreditScore: { $avg: \"$credit_score\" } } }, { $lookup: { from: \"customer\", let: { avgCreditScore: \"$averageCreditScore\" }, pipeline: [ { $match: { $expr: { $lt: [ \"$credit_score\", \"$$avgCreditScore\" ] } } }, { $project: { cust_name: 1 } } ], as: \"customers\" } }, { $unwind: \"$customers\" }, { $replaceRoot: { newRoot: \"$customers\" } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $lookup: { from: \"customer\", let: { avgScore: \"$avgCreditScore\" }, pipeline: [ { $match: { $expr: { $lt: [\"$credit_score\", \"$$avgScore\"] } } }, { $project: { cust_name: 1 } } ], as: \"customersBelowAvg\" } }, { $unwind: \"$customersBelowAvg\" }, { $replaceRoot: { newRoot: \"$customersBelowAvg\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $group: { _id: null, averageCreditScore: { $avg: \"$credit_score\" } } }, { $lookup: { from: \"customer\", let: { avgCreditScore: \"$averageCreditScore\" }, pipeline: [ { $match: { $expr: { $lt: [ \"$credit_score\", \"$$avgCreditScore\" ] } } }, { $project: { cust_name: 1 } } ], as: \"customers\" } }, { $unwind: \"$customers\" }, { $replaceRoot: { newRoot: \"$customers\" } } ])"
    },
    {
        "question_id": 1799,
        "spider_question_id": 3047,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "question": "Find the branch name of the bank that has the most number of customers.",
        "query": "db.bank.find({}, {bname: 1}).sort({no_of_customers: -1}).limit(1)",
        "gpt4 answer": "db.bank.find({}, { bname: 1 }).sort({ no_of_customers: -1 }).limit(1)",
        "deepseek answer": "db.bank.find({}, {bname: 1}).sort({no_of_customers: -1}).limit(1)"
    },
    {
        "question_id": 1800,
        "spider_question_id": 3048,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "query": "db.bank.find({}, { bname: 1}).sort({no_of_customers: -1}).limit(1)",
        "gpt4 answer": "db.bank.find({}, { bname: 1 }).sort({ no_of_customers: -1 }).limit(1)",
        "deepseek answer": "db.bank.find({}, { bname: 1}).sort({no_of_customers: -1}).limit(1)"
    },
    {
        "question_id": 1801,
        "spider_question_id": 3049,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "question": "Find the name of customer who has the lowest credit score.",
        "query": "db.customer.find({}, {cust_name: 1}).sort({credit_score: 1}).limit(1)",
        "gpt4 answer": "db.customer.find({}, {cust_name: 1}).sort({credit_score: 1}).limit(1)",
        "deepseek answer": "db.customer.find({}, {cust_name: 1}).sort({credit_score: 1}).limit(1)"
    },
    {
        "question_id": 1802,
        "spider_question_id": 3050,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "question": "What is the name of the customer with the worst credit score?",
        "query": "db.customer.find({}, {cust_name: 1}).sort({credit_score: 1}).limit(1)",
        "gpt4 answer": "db.customer.find({}, { cust_name: 1 }).sort({ credit_score: 1 }).limit(1)",
        "deepseek answer": "db.customer.find({}, {cust_name: 1}).sort({credit_score: 1}).limit(1)"
    },
    {
        "question_id": 1803,
        "spider_question_id": 3051,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "query": "db.customer.find({}, {cust_name: 1, acc_type: 1, acc_bal: 1}).sort({credit_score: -1}).limit(1)",
        "gpt4 answer": "db.customer.find({}, { cust_name: 1, acc_type: 1, acc_bal: 1 }).sort({ credit_score: -1 }).limit(1)",
        "deepseek answer": "db.customer.find({}, {cust_name: 1, acc_type: 1, acc_bal: 1}).sort({credit_score: -1}).limit(1)"
    },
    {
        "question_id": 1804,
        "spider_question_id": 3052,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "query": "db.customer.find({}, {cust_name: 1, acc_type: 1, acc_bal: 1}).sort({credit_score: -1}).limit(1)",
        "gpt4 answer": "db.customer.find({}, { cust_name: 1, acc_type: 1, acc_bal: 1 }).sort({ credit_score: -1 }).limit(1)",
        "deepseek answer": "db.customer.find({}, {cust_name: 1, acc_type: 1, acc_bal: 1}).sort({credit_score: -1}).limit(1)"
    },
    {
        "question_id": 1805,
        "spider_question_id": 3053,
        "db_id": "loan_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "question": "Find the name of customer who has the highest amount of loans.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $project: { cust_name: 1 } }, { $sort: { totalLoanAmount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_details\" } }, { $unwind: \"$loan_details\" }, { $group: { _id: \"$cust_name\", totalLoanAmount: { $sum: \"$loan_details.amount\" } } }, { $sort: {totalLoanAmount: -1} }, { $limit: 1 }, { $project: {_id: 1} } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $project: { cust_name: 1 } }, { $sort: { totalLoanAmount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1806,
        "spider_question_id": 3054,
        "db_id": "loan_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $unwind: \"$loan_data\" }, { $group: { _id: \"$cust_name\", totalLoanAmount: { $sum: \"$loan_data.amount\" } } }, { $sort: { totalLoanAmount: -1 } }, { $limit: 1 }, { $project: { cust_name: \"$_id\" } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $unwind: \"$loans\" }, { $group: { _id: \"$cust_name\", totalLoanAmount: { $sum: \"$loans.amount\" } } }, { $sort: { totalLoanAmount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $unwind: \"$loan_data\" }, { $group: { _id: \"$cust_name\", totalLoanAmount: { $sum: \"$loan_data.amount\" } } }, { $sort: { totalLoanAmount: -1 } }, { $limit: 1 }, { $project: { cust_name: \"$_id\" } } ])"
    },
    {
        "question_id": 1807,
        "spider_question_id": 3055,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "question": "Find the state which has the most number of customers.",
        "query": "db.bank.aggregate([ { $group: { _id: \"$state\", totalCustomers: { $sum: \"$no_of_customers\" } } }, { $sort: { totalCustomers: -1 } }, { $limit: 1 }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.bank.aggregate([ { $group: { _id: \"$state\", totalCustomers: { $sum: \"$no_of_customers\" } } }, { $sort: { totalCustomers: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $group: { _id: \"$state\", totalCustomers: { $sum: \"$no_of_customers\" } } }, { $sort: { totalCustomers: -1 } }, { $limit: 1 }, { $project: { state: \"$_id\" } } ])"
    },
    {
        "question_id": 1808,
        "spider_question_id": 3056,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "question": "Which state has the greatest total number of bank customers?",
        "query": "db.bank.aggregate([ { $group: { _id: \"$state\", totalCustomers: { $sum: \"$no_of_customers\" } } }, { $sort: { totalCustomers: -1 } }, { $limit: 1 }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.bank.aggregate([ { \"$group\": { \"_id\": \"$state\", \"totalCustomers\": { \"$sum\": \"$no_of_customers\" } } }, { \"$sort\": { \"totalCustomers\": -1 } }, { \"$limit\": 1 }, { \"$project\": { \"_id\": 1 } } ])",
        "deepseek answer": "db.bank.aggregate([ { $group: { _id: \"$state\", totalCustomers: { $sum: \"$no_of_customers\" } } }, { $sort: { totalCustomers: -1 } }, { $limit: 1 }, { $project: { state: \"$_id\" } } ])"
    },
    {
        "question_id": 1809,
        "spider_question_id": 3057,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(acc_bal) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "query": "db.customer.aggregate([ { $match: { credit_score: { $lt: 50 } } }, { $group: { _id: \"$acc_type\", avg_acc_bal: { $avg: \"$acc_bal\" } } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $match: { credit_score: { $lt: 50 } } }, { $group: { _id: \"$acc_type\", averageBalance: { $avg: \"$acc_bal\" } } }, { $project: { acc_type: \"$_id\", avg_acc_bal: \"$averageBalance\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $match: { credit_score: { $lt: 50 } } }, { $group: { _id: \"$acc_type\", avg_acc_bal: { $avg: \"$acc_bal\" } } } ])"
    },
    {
        "question_id": 1810,
        "spider_question_id": 3058,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(acc_bal) , acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "query": "db.customer.aggregate([ { $match: { credit_score: { $lt: 50 } } }, { $group: { _id: \"$acc_type\", averageBalance: { $avg: \"$acc_bal\" } } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $match: { credit_score: { $lt: 50 } } }, { $group: { _id: \"$acc_type\", averageBalance: { $avg: \"$acc_bal\" } } } ])",
        "deepseek answer": "db.customer.aggregate([ { $match: { credit_score: { $lt: 50 } } }, { $group: { _id: \"$acc_type\", averageBalance: { $avg: \"$acc_bal\" } } } ])"
    },
    {
        "question_id": 1811,
        "spider_question_id": 3059,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(acc_bal) , state FROM customer WHERE credit_score > 100 GROUP BY state",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "query": "db.customer.aggregate([ { $match: { credit_score: { $gt: 100 } } }, { $group: { _id: \"$state\", total_acc_bal: { $sum: \"$acc_bal\" } } } ])",
        "gpt4 answer": "db.customer.aggregate([ {$match: {credit_score: {$gt: 100}}}, {$group: {_id: \"$state\", totalAccountBalance: {$sum: \"$acc_bal\"}}} ])",
        "deepseek answer": "db.customer.aggregate([ { $match: { credit_score: { $gt: 100 } } }, { $group: { _id: \"$state\", total_acc_bal: { $sum: \"$acc_bal\" } } } ])"
    },
    {
        "question_id": 1812,
        "spider_question_id": 3060,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(acc_bal) , state FROM customer WHERE credit_score > 100 GROUP BY state",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "query": "db.customer.aggregate([ { $match: { credit_score: { $gt: 100 } } }, { $group: { _id: \"$state\", totalAccountBalance: { $sum: \"$acc_bal\" } } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $match: { credit_score: { $gt: 100 } } }, { $group: { _id: \"$state\", totalAccountBalance: { $sum: \"$acc_bal\" } } } ])",
        "deepseek answer": "db.customer.aggregate([ { $match: { credit_score: { $gt: 100 } } }, { $group: { _id: \"$state\", totalAccountBalance: { $sum: \"$acc_bal\" } } } ])"
    },
    {
        "question_id": 1813,
        "spider_question_id": 3063,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) > 1",
        "question": "Find the name of customers who have more than one loan.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.1\": { $exists: true } } }, { $project: { cust_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.1\": { $exists: true } } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.1\": { $exists: true } } }, { $project: { cust_name: 1 } } ])"
    },
    {
        "question_id": 1814,
        "spider_question_id": 3064,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) > 1",
        "question": "What are the names of customers who have taken out more than one loan?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.1\": { $exists: true } } }, { $project: { cust_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { $expr: { $gt: [ { $size: \"$loans\" }, 1 ] } } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans.1\": { $exists: true } } }, { $project: { cust_name: 1 } } ])"
    },
    {
        "question_id": 1815,
        "spider_question_id": 3073,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
        "question": "Find the name and credit score of the customers who have some loans.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.cust_ID\": { $exists: true } } }, { $project: { cust_name: 1, credit_score: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { \"loans\": { $exists: true, $not: { $size: 0 } } } }, { $project: { cust_name: 1, credit_score: 1 } }, { $group: { _id: {\"cust_name\":\"$cust_name\", \"credit_score\":\"$credit_score\"} } }, { $project: { cust_name: \"$_id.cust_name\", credit_score: \"$_id.credit_score\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.cust_ID\": { $exists: true } } }, { $project: { cust_name: 1, credit_score: 1 } } ])"
    },
    {
        "question_id": 1816,
        "spider_question_id": 3074,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.cust_ID\": { $exists: true } } }, { $project: { cust_name: 1, credit_score: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { loans: { $ne: [] } } }, { $group: { _id: { cust_name: \"$cust_name\", credit_score: \"$credit_score\" } } }, { $project: { cust_name: \"$_id.cust_name\", credit_score: \"$_id.credit_score\" } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.cust_ID\": { $exists: true } } }, { $project: { cust_name: 1, credit_score: 1 } } ])"
    },
    {
        "question_id": 1817,
        "spider_question_id": 3075,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $unwind: \"$loan_info\" }, { $match: { \"loan_info.amount\": { $gt: 3000 } } }, { $project: { cust_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $unwind: \"$loan_info\" }, { $match: { \"loan_info.amount\": { $gt: 3000 } } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $unwind: \"$loan_info\" }, { $match: { \"loan_info.amount\": { $gt: 3000 } } }, { $project: { cust_name: 1 } } ])"
    },
    {
        "question_id": 1818,
        "spider_question_id": 3076,
        "db_id": "loan_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $unwind: \"$loan_info\" }, { $match: { \"loan_info.amount\": { $gt: 3000 } } }, { $project: { cust_name: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"customer_loans\" } }, { $unwind: \"$customer_loans\" }, { $match: { \"customer_loans.amount\": { $gt: 3000 } } }, { $project: { cust_name: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $unwind: \"$loan_info\" }, { $match: { \"loan_info.amount\": { $gt: 3000 } } }, { $project: { cust_name: 1 } } ])"
    },
    {
        "question_id": 1819,
        "spider_question_id": 3083,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "question": "Find the average credit score of the customers who have some loan.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.0\": { $exists: true } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } } , { $project: { avgCreditScore: 1 } }])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"customer_loans\" } }, { $match: { \"customer_loans\": { $exists: true, $not: {$size: 0} } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $project: { avgCreditScore: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.0\": { $exists: true } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } } , { $project: { avgCreditScore: 1 } }])"
    },
    {
        "question_id": 1820,
        "spider_question_id": 3084,
        "db_id": "loan_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "question": "What is the average credit score for customers who have taken a loan?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.0\": { $exists: true } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } } , { $project: { avgCreditScore: 1 } }])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { loans: { $ne: [] } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $project: { avgCreditScore: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info.0\": { $exists: true } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } } , { $project: { avgCreditScore: 1 } }])"
    },
    {
        "question_id": 1821,
        "spider_question_id": 3085,
        "db_id": "loan_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "question": "Find the average credit score of the customers who do not have any loan.",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info\": { $eq: [] } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } } , { $project: { avgCreditScore: 1 } }])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"customer_loans\" } }, { $match: { customer_loans: { $size: 0 } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $project: { avgCreditScore: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_info\" } }, { $match: { \"loan_info\": { $eq: [] } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } } , { $project: { avgCreditScore: 1 } }])"
    },
    {
        "question_id": 1822,
        "spider_question_id": 3086,
        "db_id": "loan_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "query": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $match: { \"loan_data\": { $size: 0 } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $project: { avgCreditScore: 1 } } ])",
        "gpt4 answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loans\" } }, { $match: { loans: { $size: 0 } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $project: { avgCreditScore: 1 } } ])",
        "deepseek answer": "db.customer.aggregate([ { $lookup: { from: \"loan\", localField: \"cust_ID\", foreignField: \"cust_ID\", as: \"loan_data\" } }, { $match: { \"loan_data\": { $size: 0 } } }, { $group: { _id: null, avgCreditScore: { $avg: \"$credit_score\" } } }, { $project: { avgCreditScore: 1 } } ])"
    },
    {
        "question_id": 1823,
        "spider_question_id": 3094,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cell_mobile_number , email_address FROM STUDENTS",
        "question": "Return the cell phone number and email address for all students.",
        "query": "db.Students.find({}, {cell_mobile_number: 1, email_address: 1})",
        "gpt4 answer": "db.Students.find({}, { cell_mobile_number: 1, email_address: 1 })",
        "deepseek answer": "db.Students.find({}, {cell_mobile_number: 1, email_address: 1})"
    },
    {
        "question_id": 1824,
        "spider_question_id": 3095,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address FROM Students WHERE first_name = 'Emma' AND last_name = 'Rohan'",
        "question": "What is the email of the student with first name 'Emma' and last name 'Rohan'?",
        "query": "db.Students.findOne({first_name: 'Emma', last_name: 'Rohan'}, {email_address: 1})",
        "gpt4 answer": "db.Students.findOne({ first_name: 'Emma', last_name: 'Rohan' }, { email_address: 1 })",
        "deepseek answer": "db.Students.findOne({first_name: 'Emma', last_name: 'Rohan'}, {email_address: 1})"
    },
    {
        "question_id": 1825,
        "spider_question_id": 3097,
        "db_id": "behavior_monitoring",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT gender FROM TEACHERS WHERE last_name = 'Medhurst'",
        "question": "What is the gender of the teacher with last name 'Medhurst'?",
        "query": "db.Teachers.findOne({last_name: 'Medhurst'}, {gender: 1})",
        "gpt4 answer": "db.Teachers.find({ last_name: 'Medhurst' }, { gender: 1 })",
        "deepseek answer": "db.Teachers.findOne({last_name: 'Medhurst'}, {gender: 1})"
    },
    {
        "question_id": 1826,
        "spider_question_id": 3098,
        "db_id": "behavior_monitoring",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = 'VIOLENCE'",
        "question": "What is the incident type description for the incident type with code 'VIOLENCE'?",
        "query": "db.Ref_Incident_Type.findOne({incident_type_code: 'VIOLENCE'}, {incident_type_description: 1})",
        "gpt4 answer": "db.Ref_Incident_Type.find({incident_type_code: 'VIOLENCE'}, {incident_type_description: 1})",
        "deepseek answer": "db.Ref_Incident_Type.findOne({incident_type_code: 'VIOLENCE'}, {incident_type_description: 1})"
    },
    {
        "question_id": 1827,
        "spider_question_id": 3099,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(monthly_rental) , min(monthly_rental) FROM Student_Addresses",
        "question": "Find the maximum and minimum monthly rental for all student addresses.",
        "query": "db.Student_Addresses.aggregate([ { $group: { _id: null, maxMonthlyRental: { $max: \"$monthly_rental\" }, minMonthlyRental: { $min: \"$monthly_rental\" } } }, { $project: { maxMonthlyRental: 1, minMonthlyRental: 1 } } ])",
        "gpt4 answer": "db.Student_Addresses.aggregate([ { $group: { _id: null, maxMonthlyRental: { $max: \"$monthly_rental\" }, minMonthlyRental: { $min: \"$monthly_rental\" } } }, { $project: { maxMonthlyRental: 1, minMonthlyRental: 1 } } ])",
        "deepseek answer": "db.Student_Addresses.aggregate([ { $group: { _id: null, maxMonthlyRental: { $max: \"$monthly_rental\" }, minMonthlyRental: { $min: \"$monthly_rental\" } } }, { $project: { maxMonthlyRental: 1, minMonthlyRental: 1 } } ])"
    },
    {
        "question_id": 1828,
        "spider_question_id": 3100,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'",
        "question": "Find the first names of teachers whose email address contains the word 'man'.",
        "query": "db.Teachers.find({email_address: {$regex: /man/}}, {first_name: 1})",
        "gpt4 answer": "db.Teachers.find({ email_address: /man/ }, { first_name: 1 })",
        "deepseek answer": "db.Teachers.find({email_address: {$regex: /man/}}, {first_name: 1})"
    },
    {
        "question_id": 1829,
        "spider_question_id": 3102,
        "db_id": "behavior_monitoring",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT city FROM Addresses ORDER BY city",
        "question": "List all cities of addresses in alphabetical order.",
        "query": "db.Addresses.find({}, {city: 1}).sort({city: 1})",
        "gpt4 answer": "db.Addresses.find({}, { city: 1 }).sort({ city: 1 })",
        "deepseek answer": "db.Addresses.find({}, {city: 1}).sort({city: 1})"
    },
    {
        "question_id": 1830,
        "spider_question_id": 3103,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM Teachers ORDER BY last_name",
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "query": "db.Teachers.find({}, {first_name: 1, last_name: 1}).sort({last_name: 1})",
        "gpt4 answer": "db.Teachers.find({}, { first_name: 1, last_name: 1 }).sort({ last_name: 1 })",
        "deepseek answer": "db.Teachers.find({}, {first_name: 1, last_name: 1}).sort({last_name: 1})"
    },
    {
        "question_id": 1831,
        "spider_question_id": 3105,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and first name of the student that has the most number of assessment notes?",
        "query": "db.Assessment_Notes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" }}, { $unwind: \"$student_info\" }, { $project: { student_id: \"$_id\", first_name: \"$student_info.first_name\" } } ])",
        "gpt4 answer": "db.Assessment_Notes.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" }}, { $unwind: \"$student_info\" }, { $project: { student_id: \"$_id\", first_name: \"$student_info.first_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1832,
        "spider_question_id": 3107,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "query": "db.Behavior_Incident.aggregate([ { $group: { _id: \"$student_id\", incidentCount: { $sum: 1 } } }, { $sort: { incidentCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" }}, { $unwind: \"$student_info\" }, { $project: { _id: \"$student_info.student_id\", last_name: \"$student_info.last_name\" } } ])",
        "gpt4 answer": "db.Behavior_Incident.aggregate([ { $group: { _id: \"$student_id\", incidentCount: { $sum: 1 } } }, { $sort: { incidentCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" }}, { $unwind: \"$student_info\" }, { $project: { _id: \"$student_info.student_id\", last_name: \"$student_info.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1833,
        "spider_question_id": 3108,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = 'AFTER' GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and last name of the teacher that has the most detentions with detention type code 'AFTER'?",
        "query": "db.Detention.aggregate([ { $match: { detention_type_code: 'AFTER' } }, { $group: { _id: \"$teacher_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Teachers\", localField: \"_id\", foreignField: \"teacher_id\", as: \"teacher_info\" }}, { $unwind: \"$teacher_info\" }, { $project: { teacher_id: \"$_id\", last_name: \"$teacher_info.last_name\" } } ])",
        "gpt4 answer": "db.Detention.aggregate([ { $match: { detention_type_code: 'AFTER' } }, { $group: { _id: \"$teacher_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Teachers\", localField: \"_id\", foreignField: \"teacher_id\", as: \"teacher_info\" }}, { $unwind: \"$teacher_info\" }, { $project: { teacher_id: \"$_id\", last_name: \"$teacher_info.last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1834,
        "spider_question_id": 3109,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_id , T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "query": "db.Student_Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", first_name: { $first: \"$student_info.first_name\" }, avg_monthly_rental: { $avg: \"$monthly_rental\" } } }, { $sort: { avg_monthly_rental: -1 } }, { $limit: 1 }, { $project: { student_id: \"$_id\", first_name: 1 } } ])",
        "gpt4 answer": "db.Student_Addresses.aggregate([ { $group: { _id: \"$student_id\", averageRental: { $avg: \"$monthly_rental\" } } }, { $sort: { averageRental: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_details\" } }, { $unwind: \"$student_details\" }, { $project: { student_id: \"$_id\", first_name: \"$student_details.first_name\" } } ])",
        "deepseek answer": "db.Student_Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", first_name: { $first: \"$student_info.first_name\" }, avg_monthly_rental: { $avg: \"$monthly_rental\" } } }, { $sort: { avg_monthly_rental: -1 } }, { $limit: 1 }, { $project: { student_id: \"$_id\", first_name: 1 } } ])"
    },
    {
        "question_id": 1835,
        "spider_question_id": 3110,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.address_id , T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
        "question": "Find the id and city of the student address with the highest average monthly rental.",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $unwind: \"$student_addresses\" }, { $group: { _id: \"$address_id\", city: { $first: \"$city\" }, avgMonthlyRental: { $avg: \"$student_addresses.monthly_rental\" } } }, { $sort: { avgMonthlyRental: -1 } }, { $limit: 1 }, { $project: { address_id: \"$_id\", city: 1 } } ])",
        "gpt4 answer": "db.Student_Addresses.aggregate([ { $group: { _id: \"$address_id\", averageRental: {$avg: \"$monthly_rental\"} } }, { $sort: {averageRental: -1} }, { $limit: 1 }, { $lookup: { from: \"Addresses\", localField: \"_id\", foreignField: \"address_id\", as: \"addressInfo\" } }, { $unwind: \"$addressInfo\" }, { $project: { address_id: \"$_id\", city: \"$addressInfo.city\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $unwind: \"$student_addresses\" }, { $group: { _id: \"$address_id\", city: { $first: \"$city\" }, avgMonthlyRental: { $avg: \"$student_addresses.monthly_rental\" } } }, { $sort: { avgMonthlyRental: -1 } }, { $limit: 1 }, { $project: { address_id: \"$_id\", city: 1 } } ])"
    },
    {
        "question_id": 1836,
        "spider_question_id": 3112,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What are the code and description of the least frequent detention type ?",
        "query": "db.Detention.aggregate([ { $lookup: { from: \"Ref_Detention_Type\", localField: \"detention_type_code\", foreignField: \"detention_type_code\", as: \"detention_type\" } }, { $unwind: \"$detention_type\" }, { $group: { _id: \"$detention_type_code\", count: { $sum: 1 }, detention_type_description: { $first: \"$detention_type.detention_type_description\" } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { detention_type_code: \"$_id\", detention_type_description: 1 } } ])",
        "gpt4 answer": "db.Detention.aggregate([ { $group: { _id: \"$detention_type_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Detention_Type\", localField: \"_id\", foreignField: \"detention_type_code\", as: \"detentionTypeInfo\" } }, { $project: { detention_type_code: \"$_id\", detention_type_description: { $arrayElemAt: [\"$detentionTypeInfo.detention_type_description\", 0] } } } ])",
        "deepseek answer": "db.Detention.aggregate([ { $lookup: { from: \"Ref_Detention_Type\", localField: \"detention_type_code\", foreignField: \"detention_type_code\", as: \"detention_type\" } }, { $unwind: \"$detention_type\" }, { $group: { _id: \"$detention_type_code\", count: { $sum: 1 }, detention_type_description: { $first: \"$detention_type.detention_type_description\" } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { detention_type_code: \"$_id\", detention_type_description: 1 } } ])"
    },
    {
        "question_id": 1837,
        "spider_question_id": 3117,
        "db_id": "behavior_monitoring",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.address_id , T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
        "question": "What are the id and zip code of the address with the highest monthly rental?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $unwind: \"$student_addresses\" }, { $sort: { \"student_addresses.monthly_rental\": -1 } }, { $limit: 1 }, { $project: { address_id: \"$address_id\", zip_postcode: \"$zip_postcode\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"rental_info\" } }, { $unwind: \"$rental_info\" }, { $sort: { \"rental_info.monthly_rental\": -1 } }, { $project: { address_id: 1, zip_postcode: 1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $unwind: \"$student_addresses\" }, { $sort: { \"student_addresses.monthly_rental\": -1 } }, { $limit: 1 }, { $project: { address_id: \"$address_id\", zip_postcode: \"$zip_postcode\" } } ])"
    },
    {
        "question_id": 1838,
        "spider_question_id": 3118,
        "db_id": "behavior_monitoring",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
        "question": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"student_id\", foreignField: \"student_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $sort: {\"address_info.monthly_rental\": 1} }, { $limit: 1 }, { $project: { cell_mobile_number: 1 } } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Addresses\", localField: \"student_id\", foreignField: \"student_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $sort: {\"address_info.monthly_rental\": 1} }, { $limit: 1 }, { $project: { cell_mobile_number: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1839,
        "spider_question_id": 3119,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = 'Texas'",
        "question": "What are the monthly rentals of student addresses in Texas state?",
        "query": "db.Addresses.aggregate([ { $match: { state_province_county: \"Texas\" } }, { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $unwind: \"$student_addresses\" }, { $project: { monthly_rental: \"$student_addresses.monthly_rental\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $match: { state_province_county: \"Texas\" } }, { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"rentals\" } }, { $unwind: \"$rentals\" }, { $project: { monthly_rental: \"$rentals.monthly_rental\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $match: { state_province_county: \"Texas\" } }, { $lookup: { from: \"Student_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $unwind: \"$student_addresses\" }, { $project: { monthly_rental: \"$student_addresses.monthly_rental\" } } ])"
    },
    {
        "question_id": 1840,
        "spider_question_id": 3120,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = 'Wisconsin'",
        "question": "What are the first names and last names of students with address in Wisconsin state?",
        "query": "db.Addresses.aggregate([ { $match: { state_province_county: \"Wisconsin\" } }, { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { first_name: \"$student_info.first_name\", last_name: \"$student_info.last_name\" } } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.state_province_county\": \"Wisconsin\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $match: { state_province_county: \"Wisconsin\" } }, { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { first_name: \"$student_info.first_name\", last_name: \"$student_info.last_name\" } } ])"
    },
    {
        "question_id": 1841,
        "spider_question_id": 3123,
        "db_id": "behavior_monitoring",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = '918'",
        "question": "What are the email addresses of teachers whose address has zip code '918'?",
        "query": "db.Teachers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.zip_postcode\": \"918\" } }, { $project: { email_address: 1 } } ])",
        "gpt4 answer": "db.Teachers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"teacher_address\" } }, { $match: { \"teacher_address.zip_postcode\": \"918\" } }, { $project: { email_address: 1 } } ])",
        "deepseek answer": "db.Teachers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.zip_postcode\": \"918\" } }, { $project: { email_address: 1 } } ])"
    },
    {
        "question_id": 1842,
        "spider_question_id": 3124,
        "db_id": "behavior_monitoring",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
        "question": "How many students are not involved in any behavior incident?",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Behavior_Incident\", localField: \"student_id\", foreignField: \"student_id\", as: \"incidents\" } }, { $match: { incidents: { $size: 0 } } }, { $count: \"num_students_not_involved_in_incidents\" } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Behavior_Incident\", localField: \"student_id\", foreignField: \"student_id\", as: \"incidents\" } }, { $match: { incidents: { $size: 0 } } }, { $count: \"num_students_not_involved_in_incidents\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1843,
        "spider_question_id": 3126,
        "db_id": "behavior_monitoring",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"address_id\", as: \"students\" } }, { $lookup: { from: \"Teachers\", localField: \"address_id\", foreignField: \"address_id\", as: \"teachers\" } }, { $match: { \"students.0\": { $exists: true }, \"teachers.0\": { $exists: true } } }, { $project: { line_1: 1 } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"address_id\", as: \"student_addresses\" } }, { $lookup: { from: \"Teachers\", localField: \"address_id\", foreignField: \"address_id\", as: \"teacher_addresses\" } }, { $match: { $expr: { $and: [ { $gt: [{ $size: \"$student_addresses\" }, 0] }, { $gt: [{ $size: \"$teacher_addresses\" }, 0] } ] } } }, { $project: { line_1: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Students\", localField: \"address_id\", foreignField: \"address_id\", as: \"students\" } }, { $lookup: { from: \"Teachers\", localField: \"address_id\", foreignField: \"address_id\", as: \"teachers\" } }, { $match: { \"students.0\": { $exists: true }, \"teachers.0\": { $exists: true } } }, { $project: { line_1: 1 } } ])"
    },
    {
        "question_id": 1844,
        "spider_question_id": 3128,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "query": "db.Assets.aggregate([ { $group: { _id: \"$maintenance_contract_id\", count: { $sum: 1 } } }, { $project: { maintenance_contract_id: \"$_id\", count: \"$count\" } } ])",
        "gpt4 answer": "db.Assets.aggregate([ { $group: { _id: \"$maintenance_contract_id\", count: { $sum: 1 } } }, { $project: { maintenance_contract_id: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1845,
        "spider_question_id": 3130,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.company_id , T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING count(*) >= 2 UNION SELECT T3.company_id , T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*) >= 2",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "query": "db.Third_Party_Companies.aggregate([ { $lookup: { from: \"Maintenance_Engineers\", localField: \"company_id\", foreignField: \"company_id\", as: \"engineers\" } }, { $lookup: { from: \"Maintenance_Contracts\", localField: \"company_id\", foreignField: \"maintenance_contract_company_id\", as: \"contracts\" } }, { $project: { \"company_id\": 1, \"company_name\": 1, \"engineerCount\": { $size: \"$engineers\" }, \"contractCount\": { $size: \"$contracts\" } } }, { $match: { $or:[ { engineerCount: { $gte: 2 } }, { contractCount: { $gte: 2 } } ] } }, { $project: { \"company_id\": 1, \"company_name\": 1 } } ])",
        "gpt4 answer": "db.Third_Party_Companies.aggregate([ { $lookup: { from: \"Maintenance_Engineers\", localField: \"company_id\", foreignField: \"company_id\", as: \"engineers\" } }, { $lookup: { from: \"Maintenance_Contracts\", localField: \"company_id\", foreignField: \"maintenance_contract_company_id\", as: \"contracts\" } }, { $project: { \"company_id\": 1, \"company_name\": 1, \"engineerCount\": { $size: \"$engineers\" }, \"contractCount\": { $size: \"$contracts\" } } }, { $match: { $or:[ { engineerCount: { $gte: 2 } }, { contractCount: { $gte: 2 } } ] } }, { $project: { \"company_id\": 1, \"company_name\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1846,
        "spider_question_id": 3131,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.staff_name , T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name , T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id",
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Fault_Log\", localField: \"staff_id\", foreignField: \"recorded_by_staff_id\", as: \"fault_logs\" } }, { $lookup: { from: \"Engineer_Visits\", localField: \"staff_id\", foreignField: \"contact_staff_id\", as: \"engineer_visits\" } }, { $match: { fault_logs: { $ne: [] }, engineer_visits: { $eq: [] } } }, { $project: { staff_id: 1, staff_name: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Fault_Log\", localField: \"staff_id\", foreignField: \"recorded_by_staff_id\", as: \"fault_logs\" } }, { $lookup: { from: \"Engineer_Visits\", localField: \"staff_id\", foreignField: \"contact_staff_id\", as: \"engineer_visits\" } }, { $match: { fault_logs: { $ne: [] }, engineer_visits: { $eq: [] } } }, { $project: { staff_id: 1, staff_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1847,
        "spider_question_id": 3133,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count(*) > 2",
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "query": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"part_faults\" } }, { $match: { \"part_faults.0\": { $exists: true } } }, { $project: { part_name: 1, part_id: 1 } }, { $match: { fault_count: { $gt: 2 } } } ])",
        "gpt4 answer": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"faults\" } }, { $project: { part_id: 1, part_name: 1, faultsCount: { $size: \"$faults\" } } }, { $match: { faultsCount: { $gt: 2 } } }, { $project: { part_name: 1, part_id: 1 } } ])",
        "deepseek answer": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"part_faults\" } }, { $match: { \"part_faults.0\": { $exists: true } } }, { $project: { part_name: 1, part_id: 1 } }, { $match: { fault_count: { $gt: 2 } } } ])"
    },
    {
        "question_id": 1848,
        "spider_question_id": 3135,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "query": "db.Part_Faults.aggregate([ { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"part_fault_id\", foreignField: \"part_fault_id\", as: \"skills_required\" } }, { $unwind: \"$skills_required\" }, { $lookup: { from: \"Skills\", localField: \"skills_required.skill_id\", foreignField: \"skill_id\", as: \"skill_details\" } }, { $unwind: \"$skill_details\" }, { $project: { fault_short_name: 1, skill_description: \"$skill_details.skill_description\" } } ])",
        "gpt4 answer": "db.Part_Faults.aggregate([ { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"part_fault_id\", foreignField: \"part_fault_id\", as: \"skills_required\" } }, { $unwind: \"$skills_required\" }, { $lookup: { from: \"Skills\", localField: \"skills_required.skill_id\", foreignField: \"skill_id\", as: \"skill_details\" } }, { $unwind: \"$skill_details\" }, { $project: { fault_short_name: 1, skill_description: \"$skill_details.skill_description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1849,
        "spider_question_id": 3136,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.part_name , count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "query": "db.Parts.aggregate([ { $lookup: { from: \"Asset_Parts\", localField: \"part_id\", foreignField: \"part_id\", as: \"asset_parts\" } }, { $project: { part_name: 1, asset_count: { $size: \"$asset_parts\" } } } ])",
        "gpt4 answer": "db.Parts.aggregate([ { $lookup: { from: \"Asset_Parts\", localField: \"part_id\", foreignField: \"part_id\", as: \"AssetsUsingPart\" } }, { $project: { part_name: 1, numberOfAssets: { $size: \"$AssetsUsingPart\" } } } ])",
        "deepseek answer": "db.Parts.aggregate([ { $lookup: { from: \"Asset_Parts\", localField: \"part_id\", foreignField: \"part_id\", as: \"asset_parts\" } }, { $project: { part_name: 1, asset_count: { $size: \"$asset_parts\" } } } ])"
    },
    {
        "question_id": 1850,
        "spider_question_id": 3137,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "query": "db.Fault_Log.aggregate([ { $lookup: { from: \"Fault_Log_Parts\", localField: \"fault_log_entry_id\", foreignField: \"fault_log_entry_id\", as: \"faultParts\" } }, { $unwind: \"$faultParts\" }, { $project: { fault_description: 1, fault_status: \"$faultParts.fault_status\" } } ])",
        "gpt4 answer": "db.Fault_Log.aggregate([ { $lookup: { from: \"Fault_Log_Parts\", localField: \"fault_log_entry_id\", foreignField: \"fault_log_entry_id\", as: \"faultParts\" } }, { $unwind: \"$faultParts\" }, { $project: { fault_description: 1, fault_status: \"$faultParts.fault_status\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1851,
        "spider_question_id": 3138,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "query": "db.Fault_Log.aggregate([ { $lookup: { from: \"Engineer_Visits\", localField: \"fault_log_entry_id\", foreignField: \"fault_log_entry_id\", as: \"visits\" } }, { $project: { fault_log_entry_id: 1, visit_count: { $size: \"$visits\" } } }, { $sort: { visit_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Engineer_Visits.aggregate([ { $group: { _id: \"$fault_log_entry_id\", visitCount: { $sum: 1 } } }, { $sort: { visitCount: -1 } }, { $limit: 1 }, { $project: { fault_log_entry_id: \"$_id\", numberOfVisits: \"$visitCount\" } } ])",
        "deepseek answer": "db.Fault_Log.aggregate([ { $lookup: { from: \"Engineer_Visits\", localField: \"fault_log_entry_id\", foreignField: \"fault_log_entry_id\", as: \"visits\" } }, { $project: { fault_log_entry_id: 1, visit_count: { $size: \"$visits\" } } }, { $sort: { visit_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1852,
        "spider_question_id": 3141,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT first_name , last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "query": "db.Maintenance_Engineers.aggregate([ { $lookup: { from: \"Engineer_Visits\", localField: \"engineer_id\", foreignField: \"engineer_id\", as: \"visits\" } }, { $match: { \"visits\": { $size: 0 } } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": "db.Maintenance_Engineers.find({ engineer_id: { $nin: db.Engineer_Visits.distinct(\"engineer_id\") } }, { first_name: 1, last_name: 1 })",
        "deepseek answer": "db.Maintenance_Engineers.aggregate([ { $lookup: { from: \"Engineer_Visits\", localField: \"engineer_id\", foreignField: \"engineer_id\", as: \"visits\" } }, { $match: { \"visits\": { $size: 0 } } }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 1853,
        "spider_question_id": 3142,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT asset_id , asset_details , asset_make , asset_model FROM Assets",
        "question": "List the asset id, details, make and model for every asset.",
        "query": "db.Assets.find({}, {asset_id: 1, asset_details: 1, asset_make: 1, asset_model: 1})",
        "gpt4 answer": "db.Assets.find({}, { asset_id: 1, asset_details: 1, asset_make: 1, asset_model: 1 })",
        "deepseek answer": "db.Assets.find({}, {asset_id: 1, asset_details: 1, asset_make: 1, asset_model: 1})"
    },
    {
        "question_id": 1854,
        "spider_question_id": 3144,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "query": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"part_faults\" } }, { $unwind: \"$part_faults\" }, { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"part_faults.part_fault_id\", foreignField: \"part_fault_id\", as: \"part_faults.skills_required\" } }, { $unwind: \"$part_faults.skills_required\" }, { $group: { _id: \"$part_id\", part_name: { $first: \"$part_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { part_id: \"$_id\", part_name: 1 } } ])",
        "gpt4 answer": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"faults\" } }, { $unwind: \"$faults\" }, { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"faults.part_fault_id\", foreignField: \"part_fault_id\", as: \"skills_required\" } }, { $unwind: \"$skills_required\" }, { $group: { _id: { part_id: \"$part_id\", part_name: \"$part_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { part_id: \"$_id.part_id\", part_name: \"$_id.part_name\" } } ])",
        "deepseek answer": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"part_faults\" } }, { $unwind: \"$part_faults\" }, { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"part_faults.part_fault_id\", foreignField: \"part_fault_id\", as: \"part_faults.skills_required\" } }, { $unwind: \"$part_faults.skills_required\" }, { $group: { _id: \"$part_id\", part_name: { $first: \"$part_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { part_id: \"$_id\", part_name: 1 } } ])"
    },
    {
        "question_id": 1855,
        "spider_question_id": 3145,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "query": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"part_faults\" } }, { $project: { part_name: 1} }, { $sort: { fault_count: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"faults\" } }, { $group: { _id: \"$part_name\", faultCount: { $sum: { $size: \"$faults\" } } } }, { $sort: { faultCount: 1 } }, { $limit: 1 }, { $project: { part_name: \"$_id\" } } ])",
        "deepseek answer": "db.Parts.aggregate([ { $lookup: { from: \"Part_Faults\", localField: \"part_id\", foreignField: \"part_id\", as: \"part_faults\" } }, { $project: { part_name: 1} }, { $sort: { fault_count: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1856,
        "spider_question_id": 3149,
        "db_id": "assets_maintenance",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "query": "db.Skills.aggregate([ { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"skill_id\", foreignField: \"skill_id\", as: \"skill_count\" } }, { $project: { skill_id: 1, skill_description: 1 } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Skills.aggregate([ { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"skill_id\", foreignField: \"skill_id\", as: \"skills_required\" } }, { $unwind: \"$skills_required\" }, { $group: { _id: { skill_id: \"$skill_id\", skill_description: \"$skill_description\" }, faultCount: { $sum: 1 } } }, { $sort: { faultCount: -1 } }, { $limit: 1 }, { $project: { skill_id: \"$_id.skill_id\", skill_description: \"$_id.skill_description\" } } ])",
        "deepseek answer": "db.Skills.aggregate([ { $lookup: { from: \"Skills_Required_To_Fix\", localField: \"skill_id\", foreignField: \"skill_id\", as: \"skill_count\" } }, { $project: { skill_id: 1, skill_description: 1 } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1857,
        "spider_question_id": 3151,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "db.Assets.find({}, {asset_make: 1, asset_model: 1, asset_details: 1}).sort({asset_disposed_date: 1})",
        "gpt4 answer": "db.Assets.find({}, { asset_make: 1, asset_model: 1, asset_details: 1 }).sort({ asset_disposed_date: 1 })",
        "deepseek answer": "db.Assets.find({}, {asset_make: 1, asset_model: 1, asset_details: 1}).sort({asset_disposed_date: 1})"
    },
    {
        "question_id": 1858,
        "spider_question_id": 3152,
        "db_id": "assets_maintenance",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "query": "db.Parts.find({}, { part_id: 1, chargeable_amount: 1}).sort({chargeable_amount: 1}).limit(1)",
        "gpt4 answer": "db.Parts.find({}, { part_id: 1, chargeable_amount: 1 }).sort({ chargeable_amount: 1 }).limit(1)",
        "deepseek answer": "db.Parts.find({}, { part_id: 1, chargeable_amount: 1}).sort({chargeable_amount: 1}).limit(1)"
    },
    {
        "question_id": 1859,
        "spider_question_id": 3153,
        "db_id": "assets_maintenance",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "query": "db.Third_Party_Companies.aggregate([ { $lookup: { from: \"Maintenance_Contracts\", localField: \"company_id\", foreignField: \"maintenance_contract_company_id\", as: \"contracts\" } }, { $unwind: \"$contracts\" }, { $sort: { \"contracts.contract_start_date\": 1 } }, { $limit: 1 }, { $project: { company_name: 1 } } ])",
        "gpt4 answer": "db.Third_Party_Companies.aggregate([ { $lookup: { from: \"Maintenance_Contracts\", localField: \"company_id\", foreignField: \"maintenance_contract_company_id\", as: \"contracts\" } }, { $unwind: \"$contracts\" }, { $sort: { \"contracts.contract_start_date\": 1 } }, { $limit: 1 }, { $project: { company_name: 1 } } ])",
        "deepseek answer": "db.Third_Party_Companies.aggregate([ { $lookup: { from: \"Maintenance_Contracts\", localField: \"company_id\", foreignField: \"maintenance_contract_company_id\", as: \"contracts\" } }, { $unwind: \"$contracts\" }, { $sort: { \"contracts.contract_start_date\": 1 } }, { $limit: 1 }, { $project: { company_name: 1 } } ])"
    },
    {
        "question_id": 1860,
        "spider_question_id": 3155,
        "db_id": "assets_maintenance",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "question": "Which gender makes up the majority of the staff?",
        "query": "db.Staff.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { gender: \"$_id\" } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { gender: \"$_id\" } } ])"
    },
    {
        "question_id": 1861,
        "spider_question_id": 3157,
        "db_id": "assets_maintenance",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "question": "Which assets did not incur any fault log? List the asset model.",
        "query": "db.Assets.find({ asset_id: { $nin: db.Fault_Log.distinct(\"asset_id\") } }, { asset_model: 1 })",
        "gpt4 answer": "db.Assets.find({ asset_id: { $nin: db.Fault_Log.distinct(\"asset_id\") } }, { asset_model: 1 })",
        "deepseek answer": "db.Assets.find({ asset_id: { $nin: db.Fault_Log.distinct(\"asset_id\") } }, { asset_model: 1 })"
    },
    {
        "question_id": 1862,
        "spider_question_id": 3158,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT local_authority , services FROM station",
        "question": "list the local authorities and services provided by all stations.",
        "query": "db.station.find({}, {local_authority: 1, services: 1})",
        "gpt4 answer": "db.station.find({}, { local_authority: 1, services: 1 })",
        "deepseek answer": "db.station.find({}, {local_authority: 1, services: 1})"
    },
    {
        "question_id": 1863,
        "spider_question_id": 3159,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT train_number , name FROM train ORDER BY TIME",
        "question": "show all train numbers and names ordered by their time from early to late.",
        "query": "db.train.find({}, { train_number: 1, name: 1}).sort({time: 1})",
        "gpt4 answer": "db.train.find({}, { train_number: 1, name: 1 }).sort({ time: 1 })",
        "deepseek answer": "db.train.find({}, { train_number: 1, name: 1}).sort({time: 1})"
    },
    {
        "question_id": 1864,
        "spider_question_id": 3160,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "query": "db.train.find( { destination: 'Chennai' }, { time: 1, train_number: 1 } ).sort({ time: 1 })",
        "gpt4 answer": "db.train.find({ destination: 'Chennai' }, { time: 1, train_number: 1 }).sort({ time: 1 })",
        "deepseek answer": "db.train.find( { destination: 'Chennai' }, { time: 1, train_number: 1 } ).sort({ time: 1 })"
    },
    {
        "question_id": 1865,
        "spider_question_id": 3162,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "query": "db.train.find( { origin: \"Chennai\", destination: \"Guruvayur\" }, { train_number: 1, time: 1 } )",
        "gpt4 answer": "db.train.find( { origin: 'Chennai', destination: 'Guruvayur' }, { train_number: 1, time: 1 } )",
        "deepseek answer": "db.train.find( { origin: \"Chennai\", destination: \"Guruvayur\" }, { train_number: 1, time: 1 } )"
    },
    {
        "question_id": 1866,
        "spider_question_id": 3163,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT origin , count(*) FROM train GROUP BY origin",
        "question": "Find the number of trains starting from each origin.",
        "query": "db.train.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.train.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $project: { origin: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.train.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1867,
        "spider_question_id": 3164,
        "db_id": "station_weather",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the train whose route runs through greatest number of stations.",
        "query": "db.train.aggregate([ { $lookup: { from: \"route\", localField: \"id\", foreignField: \"train_id\", as: \"train_routes\" } }, { $project: { name: 1 } }, { $sort: { routeCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.train.aggregate([ { $lookup: { from: \"route\", localField: \"id\", foreignField: \"train_id\", as: \"train_routes\" } }, { $project: { name: 1 } }, { $sort: { routeCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1868,
        "spider_question_id": 3166,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(high_temperature) , day_of_week FROM weekly_weather GROUP BY day_of_week",
        "question": "What is the average high temperature for each day of week?",
        "query": "db.weekly_weather.aggregate([ { $group: { _id: \"$day_of_week\", averageHighTemperature: { $avg: \"$high_temperature\" } } } ])",
        "gpt4 answer": "db.weekly_weather.aggregate([ { $group: { _id: \"$day_of_week\", avgHighTemperature: { $avg: \"$high_temperature\" } } }, { $project: { day_of_week: \"$_id\", avgHighTemperature: 1 } } ])",
        "deepseek answer": "db.weekly_weather.aggregate([ { $group: { _id: \"$day_of_week\", averageHighTemperature: { $avg: \"$high_temperature\" } } } ])"
    },
    {
        "question_id": 1869,
        "spider_question_id": 3167,
        "db_id": "station_weather",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(t1.low_temperature) , avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = 'Amersham'",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "query": "db.weekly_weather.aggregate([ { $lookup: { from: \"station\", localField: \"station_id\", foreignField: \"id\", as: \"station_info\" } }, { $match: { \"station_info.network_name\": \"Amersham\" } }, { $group: { _id: null, maxLowTemperature: { $max: \"$low_temperature\" }, avgPrecipitation: { $avg: \"$precipitation\" } } }, { $project: { maxLowTemperature: 1, avgPrecipitation: 1 } } ])",
        "gpt4 answer": "db.weekly_weather.aggregate([ { $lookup: { from: \"station\", localField: \"station_id\", foreignField: \"id\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $match: { \"station_info.network_name\": \"Amersham\" } }, { $group: { _id: null, max_low_temperature: { $max: \"$low_temperature\" }, avg_precipitation: { $avg: \"$precipitation\" } } }, { $project: { max_low_temperature: 1, avg_precipitation: 1 } } ])",
        "deepseek answer": "db.weekly_weather.aggregate([ { $lookup: { from: \"station\", localField: \"station_id\", foreignField: \"id\", as: \"station_info\" } }, { $match: { \"station_info.network_name\": \"Amersham\" } }, { $group: { _id: null, maxLowTemperature: { $max: \"$low_temperature\" }, avgPrecipitation: { $avg: \"$precipitation\" } } }, { $project: { maxLowTemperature: 1, avgPrecipitation: 1 } } ])"
    },
    {
        "question_id": 1870,
        "spider_question_id": 3168,
        "db_id": "station_weather",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = 'Chiltern'",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "query": "db.station.aggregate([ { $match: { local_authority: \"Chiltern\" } }, { $lookup: { from: \"route\", localField: \"id\", foreignField: \"station_id\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $lookup: { from: \"train\", localField: \"routes.train_id\", foreignField: \"id\", as: \"trains\" } }, { $unwind: \"$trains\" }, { $project: { name: \"$trains.name\", time: \"$trains.time\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $match: { local_authority: \"Chiltern\" } }, { $lookup: { from: \"route\", localField: \"id\", foreignField: \"station_id\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $lookup: { from: \"train\", localField: \"routes.train_id\", foreignField: \"id\", as: \"trains\" } }, { $unwind: \"$trains\" }, { $project: { name: \"$trains.name\", time: \"$trains.time\" } } ])",
        "deepseek answer": "db.station.aggregate([ { $match: { local_authority: \"Chiltern\" } }, { $lookup: { from: \"route\", localField: \"id\", foreignField: \"station_id\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $lookup: { from: \"train\", localField: \"routes.train_id\", foreignField: \"id\", as: \"trains\" } }, { $unwind: \"$trains\" }, { $project: { name: \"$trains.name\", time: \"$trains.time\" } } ])"
    },
    {
        "question_id": 1871,
        "spider_question_id": 3170,
        "db_id": "station_weather",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
        "question": "Find the id and local authority of the station with has the highest average high temperature.",
        "query": "db.station.aggregate([ { $lookup: { from: \"weekly_weather\", localField: \"id\", foreignField: \"station_id\", as: \"weather_data\" } }, { $unwind: \"$weather_data\" }, { $group: { _id: \"$id\", averageHighTemp: { $avg: \"$weather_data.high_temperature\" }, local_authority: { $first: \"$local_authority\" } } }, { $sort: { averageHighTemp: -1 } }, { $limit: 1 }, { $project: { _id: \"$_id\", local_authority: \"$local_authority\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"weekly_weather\", localField: \"id\", foreignField: \"station_id\", as: \"weather_data\" } }, { $unwind: \"$weather_data\" }, { $group: { _id: \"$id\", averageHighTemp: { $avg: \"$weather_data.high_temperature\" }, local_authority: { $first: \"$local_authority\" } } }, { $sort: { averageHighTemp: -1 } }, { $limit: 1 }, { $project: { _id: \"$_id\", local_authority: \"$local_authority\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1872,
        "spider_question_id": 3171,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.id , t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING max(t1.precipitation) > 50",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "query": "db.weekly_weather.aggregate([ { $group: { _id: \"$station_id\", max_precipitation: { $max: \"$precipitation\" } } }, { $match: { max_precipitation: { $gt: 50 } } }, { $lookup: { from: \"station\", localField: \"_id\", foreignField: \"id\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $project: { _id: \"$station_info.id\", local_authority: \"$station_info.local_authority\" } } ])",
        "gpt4 answer": "db.weekly_weather.aggregate([ { $group: { _id: \"$station_id\", max_precipitation: { $max: \"$precipitation\" } } }, { $match: { max_precipitation: { $gt: 50 } } }, { $lookup: { from: \"station\", localField: \"_id\", foreignField: \"id\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $project: { _id: \"$station_info.id\", local_authority: \"$station_info.local_authority\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1873,
        "spider_question_id": 3172,
        "db_id": "station_weather",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(low_temperature) , max(wind_speed_mph) FROM weekly_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "db.weekly_weather.aggregate([ { $group: { \"_id\": null, \"minLowTemperature\": { \"$min\": \"$low_temperature\" }, \"maxWindSpeed\": { \"$max\": \"$wind_speed_mph\" } } }, { $project: { \"_id\": 0, \"minLowTemperature\": 1, \"maxWindSpeed\": 1 } } ])",
        "gpt4 answer": "db.weekly_weather.aggregate([ { $group: { _id: null, lowestLowTemperature: { $min: \"$low_temperature\" }, highestWindSpeedMph: { $max: \"$wind_speed_mph\" } } }, { $project: { lowestLowTemperature: 1, highestWindSpeedMph: 1 } } ])",
        "deepseek answer": "db.weekly_weather.aggregate([ { $group: { \"_id\": null, \"minLowTemperature\": { \"$min\": \"$low_temperature\" }, \"maxWindSpeed\": { \"$max\": \"$wind_speed_mph\" } } }, { $project: { \"_id\": 0, \"minLowTemperature\": 1, \"maxWindSpeed\": 1 } } ])"
    },
    {
        "question_id": 1874,
        "spider_question_id": 3173,
        "db_id": "station_weather",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1",
        "question": "Find the origins from which more than 1 train starts.",
        "query": "db.train.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { origin: \"$_id\" } } ])",
        "gpt4 answer": "db.train.aggregate([ { $group: { _id: \"$origin\", numTrains: { $sum: 1 } }}, { $match: { numTrains: { $gt: 1 } }}, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.train.aggregate([ { $group: { _id: \"$origin\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { origin: \"$_id\" } } ])"
    },
    {
        "question_id": 1875,
        "spider_question_id": 3176,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = 'ACCT-211'",
        "question": "How many professors are teaching class with code ACCT-211?",
        "query": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $group: { _id: \"$PROF_NUM\" } }, { $count: \"distinct_professors\" } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $group: { _id: \"$PROF_NUM\" } }, { $count: \"distinct_professors\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1876,
        "spider_question_id": 3177,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = 'ACCT-211'",
        "question": "How many professors teach a class with the code ACCT-211?",
        "query": "db.CLASS.aggregate([ { $match: { CRS_CODE: \"ACCT-211\" } }, { $group: { _id: \"$PROF_NUM\" } }, { $count: \"distinct_professors\" } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $match: { CRS_CODE: \"ACCT-211\" } }, { $group: { _id: \"$PROF_NUM\" } }, { $count: \"distinct_professors\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1877,
        "spider_question_id": 3178,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.EMP_FNAME , T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = 'Biology'",
        "question": "What is the first and last name of the professor in biology department?",
        "query": "db.PROFESSOR.aggregate([ { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $lookup: { from: \"EMPLOYEE\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $match: { \"department.DEPT_NAME\": \"Biology\" } }, { $project: { EMP_FNAME: \"$employee.EMP_FNAME\", EMP_LNAME: \"$employee.EMP_LNAME\" } } ])",
        "gpt4 answer": "db.PROFESSOR.aggregate([ { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $lookup: { from: \"EMPLOYEE\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"employee\" } }, { $unwind: \"$employee\" }, { $match: { \"department.DEPT_NAME\": \"Biology\" } }, { $project: { EMP_FNAME: \"$employee.EMP_FNAME\", EMP_LNAME: \"$employee.EMP_LNAME\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1878,
        "spider_question_id": 3180,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.EMP_FNAME , T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = 'ACCT-211'",
        "question": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "query": "db.EMPLOYEE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"class_info\" } }, { $match: { \"class_info.CRS_CODE\": \"ACCT-211\" } }, { $project: { EMP_FNAME: 1, EMP_DOB: 1 } }, { $group: { _id: { EMP_FNAME: \"$EMP_FNAME\", EMP_DOB: \"$EMP_DOB\" } } }, { $project: { EMP_FNAME: \"$_id.EMP_FNAME\", EMP_DOB: \"$_id.EMP_DOB\" } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"class_info\" } }, { $match: { \"class_info.CRS_CODE\": \"ACCT-211\" } }, { $project: { EMP_FNAME: 1, EMP_DOB: 1 } }, { $group: { _id: { EMP_FNAME: \"$EMP_FNAME\", EMP_DOB: \"$EMP_DOB\" } } }, { $project: { EMP_FNAME: \"$_id.EMP_FNAME\", EMP_DOB: \"$_id.EMP_DOB\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1879,
        "spider_question_id": 3182,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
        "question": "How many classes are professor whose last name is Graztevski has?",
        "query": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: 'Graztevski' } }, { $lookup: { from: 'CLASS', localField: 'EMP_NUM', foreignField: 'PROF_NUM', as: 'classes' } }, { $unwind: '$classes' }, { $count: 'numberOfClasses' } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: 'Graztevski' } }, { $lookup: { from: 'CLASS', localField: 'EMP_NUM', foreignField: 'PROF_NUM', as: 'classes' } }, { $unwind: '$classes' }, { $count: 'numberOfClasses' } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1880,
        "spider_question_id": 3183,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
        "question": "How many classes does the professor whose last name is Graztevski teach?",
        "query": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: 'Graztevski' } }, { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"classes_taught\" }}, { $unwind: \"$classes_taught\" }, { $count: \"num_classes\" } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: 'Graztevski' } }, { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"classes_taught\" }}, { $unwind: \"$classes_taught\" }, { $count: \"num_classes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1881,
        "spider_question_id": 3184,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
        "question": "What is the code of the school where the accounting department belongs to?",
        "query": "db.DEPARTMENT.findOne({ DEPT_NAME: 'Accounting' }, { SCHOOL_CODE: 1 })",
        "gpt4 answer": "db.DEPARTMENT.findOne({ DEPT_NAME: 'Accounting' }, { SCHOOL_CODE: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1882,
        "spider_question_id": 3186,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'CIS-220'",
        "question": "How many credits does course CIS-220 have, and what its description?",
        "query": "db.COURSE.find({ CRS_CODE: 'CIS-220' }, { CRS_CREDIT: 1, CRS_DESCRIPTION: 1 })",
        "gpt4 answer": "db.COURSE.find({ CRS_CODE: 'CIS-220' }, { CRS_CREDIT: 1, CRS_DESCRIPTION: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1883,
        "spider_question_id": 3188,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dept_address FROM department WHERE dept_name = 'History'",
        "question": "what is the address of history department?",
        "query": "db.DEPARTMENT.findOne({ DEPT_NAME: 'History' }, { DEPT_ADDRESS: 1 })",
        "gpt4 answer": "db.DEPARTMENT.findOne({ DEPT_NAME: 'History' }, { DEPT_ADDRESS: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1884,
        "spider_question_id": 3189,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dept_address FROM department WHERE dept_name = 'History'",
        "question": "Where is the history department?",
        "query": "db.DEPARTMENT.find({ DEPT_NAME: 'History' }, { DEPT_ADDRESS: 1 })",
        "gpt4 answer": "db.DEPARTMENT.find({ DEPT_NAME: 'History' }, { DEPT_ADDRESS: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1885,
        "spider_question_id": 3192,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code",
        "question": "How many different locations does each school have?",
        "query": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", distinctLocations: { $addToSet: \"$DEPT_ADDRESS\" } } }, { $project: { school_code: \"$_id\", locationsCount: { $size: \"$distinctLocations\" } } } ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", distinctLocations: { $addToSet: \"$DEPT_ADDRESS\" } } }, { $project: { school_code: \"$_id\", locationsCount: { $size: \"$distinctLocations\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1886,
        "spider_question_id": 3193,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT dept_address) , school_code FROM department GROUP BY school_code",
        "question": "Count different addresses of each school.",
        "query": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", count: { $sum: 1 } } }, { $project: { school_code: \"$_id\", count: \"$count\" } } ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", count: { $sum: 1 } } }, { $project: { school_code: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1887,
        "spider_question_id": 3194,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'",
        "question": "Find the description and credit for the course QM-261?",
        "query": "db.COURSE.find({ CRS_CODE: 'QM-261' }, { CRS_DESCRIPTION: 1, CRS_CREDIT: 1 })",
        "gpt4 answer": "db.COURSE.find({ CRS_CODE: 'QM-261' }, { CRS_DESCRIPTION: 1, CRS_CREDIT: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1888,
        "spider_question_id": 3195,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT crs_credit , crs_description FROM course WHERE crs_code = 'QM-261'",
        "question": "What is the course description and number of credits for QM-261?",
        "query": "db.COURSE.find({ CRS_CODE: 'QM-261' }, { CRS_DESCRIPTION: 1, CRS_CREDIT: 1 })",
        "gpt4 answer": "db.COURSE.find({ CRS_CODE: 'QM-261' }, { CRS_DESCRIPTION: 1, CRS_CREDIT: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1889,
        "spider_question_id": 3196,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
        "question": "Find the number of departments in each school.",
        "query": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", numberOfDepartments: { $sum: 1 } } } ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", numberOfDepartments: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1890,
        "spider_question_id": 3197,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT dept_name) , school_code FROM department GROUP BY school_code",
        "question": "How many departments are in each school?",
        "query": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", numberOfDepartments: { $sum: 1 } }} ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\", numberOfDepartments: { $sum: 1 } }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1891,
        "spider_question_id": 3200,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code",
        "question": "How many sections does each course has?",
        "query": "db.CLASS.aggregate([ { $group: { _id: \"$CRS_CODE\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $group: { _id: \"$CRS_CODE\", totalSections: { $sum: 1 } } }, { $project: { crs_code: \"$_id\", totalSections: 1 } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $group: { _id: \"$CRS_CODE\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1892,
        "spider_question_id": 3201,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , crs_code FROM CLASS GROUP BY crs_code",
        "question": "How many sections does each course have?",
        "query": "db.CLASS.aggregate([ { $group: { _id: \"$CRS_CODE\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $group: { _id: \"$CRS_CODE\", sections: { $sum: 1 } } }, { $project: { crs_code: \"$_id\", sections: 1 } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $group: { _id: \"$CRS_CODE\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1893,
        "spider_question_id": 3202,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code",
        "question": "What is the total credit does each department offer?",
        "query": "db.COURSE.aggregate([ { $group: { _id: \"$DEPT_CODE\", TotalCredits: { $sum: \"$CRS_CREDIT\" } } } ])",
        "gpt4 answer": "db.COURSE.aggregate([ { $group: { _id: \"$DEPT_CODE\", TotalCredits: { $sum: \"$CRS_CREDIT\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1894,
        "spider_question_id": 3203,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(crs_credit) , dept_code FROM course GROUP BY dept_code",
        "question": "How many credits does the department offer?",
        "query": "db.COURSE.aggregate([ { $group: { _id: \"$DEPT_CODE\", TotalCredits: { $sum: \"$CRS_CREDIT\" } } }, { $project: { DEPT_CODE: \"$_id\", TotalCredits: 1 } } ])",
        "gpt4 answer": "db.COURSE.aggregate([ { $group: { _id: \"$DEPT_CODE\", TotalCredits: { $sum: \"$CRS_CREDIT\" } } }, { $project: { DEPT_CODE: \"$_id\", TotalCredits: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1895,
        "spider_question_id": 3204,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "query": "db.CLASS.aggregate([ { $group: { _id: \"$CLASS_ROOM\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { CLASS_ROOM: \"$_id\", number_of_classes: \"$count\" } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $group: { _id: \"$CLASS_ROOM\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { CLASS_ROOM: \"$_id\", number_of_classes: \"$count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1896,
        "spider_question_id": 3205,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , class_room FROM CLASS GROUP BY class_room HAVING count(*) >= 2",
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "query": "db.CLASS.aggregate([ { $group: { _id: \"$CLASS_ROOM\", classCount: { $sum: 1 } } }, { $match: { classCount: { $gte: 2 } } }, { $project: { class_room: \"$_id\", classCount: 1 } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $group: { _id: \"$CLASS_ROOM\", classCount: { $sum: 1 } } }, { $match: { classCount: { $gte: 2 } } }, { $project: { class_room: \"$_id\", classCount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1897,
        "spider_question_id": 3206,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
        "question": "Find the number of classes in each department.",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", count: { $sum: 1 } } }, { $project: { DEPT_CODE: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", numberOfClasses: { $sum: 1 } } }, { $project: { DEPT_CODE: \"$_id\", numberOfClasses: 1 } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", count: { $sum: 1 } } }, { $project: { DEPT_CODE: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1898,
        "spider_question_id": 3207,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
        "question": "How many classes are held in each department?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", count: { $sum: 1 } } }, { $project: { dept_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", count: { $sum: 1 } } }, { $project: { dept_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1899,
        "spider_question_id": 3208,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code",
        "question": "Find the number of classes in each school.",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $group: { _id: \"$dept_info.SCHOOL_CODE\", count: { $sum: 1 } } }, { $project: { count: 1, SCHOOL_CODE: \"$_id\" } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.SCHOOL_CODE\", class_count: { $sum: 1 } } }, { $project: { school_code: \"$_id\", class_count: 1 } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $group: { _id: \"$dept_info.SCHOOL_CODE\", count: { $sum: 1 } } }, { $project: { count: 1, SCHOOL_CODE: \"$_id\" } } ])"
    },
    {
        "question_id": 1900,
        "spider_question_id": 3209,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code",
        "question": "How many classes exist for each school?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $group: { _id: \"$dept_info.SCHOOL_CODE\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"COURSE\" } }, { $unwind: \"$COURSE\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"COURSE.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"DEPARTMENT\" } }, { $unwind: \"$DEPARTMENT\" }, { $group: { _id: \"$DEPARTMENT.SCHOOL_CODE\", count: { $sum: 1 } } }, { $project: { school_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $group: { _id: \"$dept_info.SCHOOL_CODE\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 1901,
        "spider_question_id": 3210,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
        "question": "What is the number of professors for different school?",
        "query": "db.DEPARTMENT.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"professors\" } }, { $group: { _id: \"$SCHOOL_CODE\", professorCount: { $sum: { $size: \"$professors\" } } } }, { $project: { school_code: \"$_id\", professorCount: 1 } } ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"professors\" } }, { $group: { _id: \"$SCHOOL_CODE\", professorCount: { $sum: { $size: \"$professors\" } } } }, { $project: { school_code: \"$_id\", professorCount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1902,
        "spider_question_id": 3211,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
        "question": "How many different professors are there for the different schools?",
        "query": "db.DEPARTMENT.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"professors\" } }, { $unwind: \"$professors\" }, { $group: { _id: \"$SCHOOL_CODE\", uniqueProfessors: { $addToSet: \"$professors.EMP_NUM\" } } }, { $project: { count: { $size: \"$uniqueProfessors\" } } } ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"professors\" } }, { $unwind: \"$professors\" }, { $group: { _id: \"$SCHOOL_CODE\", uniqueProfessors: { $addToSet: \"$professors.EMP_NUM\" } } }, { $project: { count: { $size: \"$uniqueProfessors\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1903,
        "spider_question_id": 3212,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the count and code of the job has most employees.",
        "query": "db.EMPLOYEE.aggregate([ { $group: { _id: \"$EMP_JOBCODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { emp_jobcode: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $group: { _id: \"$EMP_JOBCODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { emp_jobcode: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1904,
        "spider_question_id": 3213,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT emp_jobcode , count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the count and code of the job with the most employee?",
        "query": "db.EMPLOYEE.aggregate([ { $group: { _id: \"$EMP_JOBCODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { \"EMP_JOBCODE\": \"$_id\", \"count\": 1 } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $group: { _id: \"$EMP_JOBCODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { \"EMP_JOBCODE\": \"$_id\", \"count\": 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1905,
        "spider_question_id": 3216,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code",
        "question": "Find the number of professors with a Ph.D. degree in each department.",
        "query": "db.PROFESSOR.aggregate([ { $match: { PROF_HIGH_DEGREE: 'Ph.D.' } }, { $group: { _id: \"$DEPT_CODE\", count: { $sum: 1 } } }, { $project: { dept_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.PROFESSOR.aggregate([ { $match: { PROF_HIGH_DEGREE: 'Ph.D.' } }, { $group: { _id: \"$DEPT_CODE\", count: { $sum: 1 } } }, { $project: { dept_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1906,
        "spider_question_id": 3218,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
        "question": "Find the number of students for each department.",
        "query": "db.STUDENT.aggregate([ { $group : { _id: \"$DEPT_CODE\", numberOfStudents: {$sum: 1} } }, { $project: { dept_code: \"$_id\", count: \"$numberOfStudents\" } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $group : { _id: \"$DEPT_CODE\", numberOfStudents: {$sum: 1} } }, { $project: { dept_code: \"$_id\", count: \"$numberOfStudents\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1907,
        "spider_question_id": 3219,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , dept_code FROM student GROUP BY dept_code",
        "question": "How many students are in each department?",
        "query": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", numberOfStudents: { $sum: 1 } } }, { $project: { DEPT_CODE: \"$_id\", numberOfStudents: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", numberOfStudents: { $sum: 1 } } }, { $project: { DEPT_CODE: \"$_id\", numberOfStudents: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1908,
        "spider_question_id": 3220,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(stu_hrs) , dept_code FROM student GROUP BY dept_code",
        "question": "Find the total number of hours have done for all students in each department.",
        "query": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", totalHours: { $sum: \"$STU_HRS\" } } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", totalHours: { $sum: \"$STU_HRS\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1909,
        "spider_question_id": 3222,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code",
        "question": "Find the max, average, and minimum gpa of all students in each department.",
        "query": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", maxGPA: { $max: \"$STU_GPA\" }, avgGPA: { $avg: \"$STU_GPA\" }, minGPA: { $min: \"$STU_GPA\" } } }, { $project: { dept_code: \"$_id\", maxGPA: 1, avgGPA: 1, minGPA: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", maxGPA: { $max: \"$STU_GPA\" }, avgGPA: { $avg: \"$STU_GPA\" }, minGPA: { $min: \"$STU_GPA\" } } }, { $project: { dept_code: \"$_id\", maxGPA: 1, avgGPA: 1, minGPA: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1910,
        "spider_question_id": 3223,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code FROM student GROUP BY dept_code",
        "question": "What is the highest, lowest, and average student GPA for every department?",
        "query": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", HighestGPA: { $max: \"$STU_GPA\" }, AverageGPA: { $avg: \"$STU_GPA\" }, LowestGPA: { $min: \"$STU_GPA\" } } }, { $project: { DEPT_CODE: \"$_id\", HighestGPA: 1, AverageGPA: 1, LowestGPA: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $group: { _id: \"$DEPT_CODE\", HighestGPA: { $max: \"$STU_GPA\" }, AverageGPA: { $avg: \"$STU_GPA\" }, LowestGPA: { $min: \"$STU_GPA\" } } }, { $project: { DEPT_CODE: \"$_id\", HighestGPA: 1, AverageGPA: 1, LowestGPA: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1911,
        "spider_question_id": 3225,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.dept_name , avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "question": "Which department has the highest average student GPA, and what is the average gpa?",
        "query": "db.STUDENT.aggregate([ { $lookup: { from: 'DEPARTMENT', localField: 'DEPT_CODE', foreignField: 'DEPT_CODE', as: 'department_info' } }, { $unwind: '$department_info' }, { $group: { _id: { DEPT_CODE: '$DEPT_CODE', DEPT_NAME: '$department_info.DEPT_NAME' }, AVG_GPA: { $avg: '$STU_GPA' } } }, { $sort: { AVG_GPA: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: '$_id.DEPT_NAME', AVG_GPA: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $lookup: { from: 'DEPARTMENT', localField: 'DEPT_CODE', foreignField: 'DEPT_CODE', as: 'department_info' } }, { $unwind: '$department_info' }, { $group: { _id: { DEPT_CODE: '$DEPT_CODE', DEPT_NAME: '$department_info.DEPT_NAME' }, AVG_GPA: { $avg: '$STU_GPA' } } }, { $sort: { AVG_GPA: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: '$_id.DEPT_NAME', AVG_GPA: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1912,
        "spider_question_id": 3227,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT school_code) FROM department",
        "question": "How many schools are there in the department?",
        "query": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\" } }, { $count: \"unique_schools\" } ])",
        "gpt4 answer": "db.DEPARTMENT.aggregate([ { $group: { _id: \"$SCHOOL_CODE\" } }, { $count: \"unique_schools\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1913,
        "spider_question_id": 3234,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'",
        "question": "How many courses are offered by the Computer Info. Systems department?",
        "query": "db.COURSE.aggregate([ { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $match: { \"department_info.DEPT_NAME\": \"Computer Info. Systems\" } }, { $count: \"number_of_courses\" } ])",
        "gpt4 answer": "db.COURSE.aggregate([ { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $match: { \"department_info.DEPT_NAME\": \"Computer Info. Systems\" } }, { $count: \"number_of_courses\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1914,
        "spider_question_id": 3236,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'",
        "question": "How many sections does course ACCT-211 has?",
        "query": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $group: { _id: \"$CLASS_SECTION\" } }, { $count: \"total_sections\" } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $group: { _id: \"$CLASS_SECTION\" } }, { $count: \"total_sections\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1915,
        "spider_question_id": 3237,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'",
        "question": "What is the number of different class sections offered in the course ACCT-211?",
        "query": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $group: { _id: \"$CLASS_SECTION\" } }, { $count: \"distinct_class_sections\" } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $group: { _id: \"$CLASS_SECTION\" } }, { $count: \"distinct_class_sections\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1916,
        "spider_question_id": 3238,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code",
        "question": "Find the total credits of all classes offered by each department.",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", totalCredits: {$sum: \"$course_info.CRS_CREDIT\"} } }, { $project: { dept_code: \"$_id\", totalCredits: 1 } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", totalCredits: {$sum: \"$course_info.CRS_CREDIT\"} } }, { $project: { dept_code: \"$_id\", totalCredits: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1917,
        "spider_question_id": 3239,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.crs_credit) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code",
        "question": "What are the total number of credits offered by each department?",
        "query": "db.COURSE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $group: { _id: \"$DEPT_CODE\", totalCredits: { $sum: \"$CRS_CREDIT\" } } }, { $project: { DEPT_CODE: \"$_id\", totalCredits: 1 } } ])",
        "gpt4 answer": "db.COURSE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $group: { _id: \"$DEPT_CODE\", totalCredits: { $sum: \"$CRS_CREDIT\" } } }, { $project: { DEPT_CODE: \"$_id\", totalCredits: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1918,
        "spider_question_id": 3240,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "query": "db.COURSE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$DEPT_CODE\", totalCredits: { $sum: \"$CRS_CREDIT\" }, DEPT_NAME: { $first: \"$department_info.DEPT_NAME\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: 1 } } ])",
        "gpt4 answer": "db.COURSE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$DEPT_CODE\", totalCredits: { $sum: \"$CRS_CREDIT\" }, DEPT_NAME: { $first: \"$department_info.DEPT_NAME\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1919,
        "spider_question_id": 3241,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "question": "Which department offers the most credits all together?",
        "query": "db.COURSE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $group: { _id: \"$DEPT_CODE\", totalCredits: { $sum: \"$CRS_CREDIT\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $lookup: { from: \"DEPARTMENT\", localField: \"_id\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { dept_name: \"$department_info.DEPT_NAME\" } } ])",
        "gpt4 answer": "db.COURSE.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $group: { _id: \"$DEPT_CODE\", totalCredits: { $sum: \"$CRS_CREDIT\" } } }, { $sort: { totalCredits: -1 } }, { $limit: 1 }, { $lookup: { from: \"DEPARTMENT\", localField: \"_id\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { dept_name: \"$department_info.DEPT_NAME\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1920,
        "spider_question_id": 3242,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
        "question": "How many students enrolled in class ACCT-211?",
        "query": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $lookup: { from: 'ENROLL', localField: 'CLASS_CODE', foreignField: 'CLASS_CODE', as: 'enrollment' } }, { $unwind: '$enrollment' }, { $count: 'student_count' } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $match: { CRS_CODE: 'ACCT-211' } }, { $lookup: { from: 'ENROLL', localField: 'CLASS_CODE', foreignField: 'CLASS_CODE', as: 'enrollment' } }, { $unwind: '$enrollment' }, { $count: 'student_count' } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1921,
        "spider_question_id": 3243,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
        "question": "What are the total number of students enrolled in ACCT-211?",
        "query": "db.CLASS.aggregate([ { $match: { CRS_CODE: \"ACCT-211\" } }, { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enrollment\" }}, { $unwind: \"$enrollment\" }, { $group: { _id: \"$CRS_CODE\", total_students: { $sum: 1 } }}, { $project: { total_students: 1 }} ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $match: { CRS_CODE: \"ACCT-211\" } }, { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enrollment\" }}, { $unwind: \"$enrollment\" }, { $group: { _id: \"$CRS_CODE\", total_students: { $sum: 1 } }}, { $project: { total_students: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1922,
        "spider_question_id": 3245,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'",
        "question": "What are the first names of all students in course ACCT-211?",
        "query": "db.STUDENT.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $match: { \"class.CRS_CODE\": \"ACCT-211\" } }, { $project: { STU_FNAME: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $match: { \"class.CRS_CODE\": \"ACCT-211\" } }, { $project: { STU_FNAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1923,
        "spider_question_id": 3252,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'",
        "question": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $match: { \"dept_info.DEPT_NAME\": \"Accounting\" } }, { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enroll_info\" } }, { $unwind: \"$enroll_info\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enrollments\" } }, { $unwind: \"$enrollments\" }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course\" } }, { $unwind: \"$course\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DEPT_NAME\": \"Accounting\" } }, { $count: \"totalStudents\" } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $match: { \"dept_info.DEPT_NAME\": \"Accounting\" } }, { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enroll_info\" } }, { $unwind: \"$enroll_info\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 1924,
        "spider_question_id": 3253,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'",
        "question": "How many students are enrolled in some classes that are taught by an accounting professor?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $match: { \"dept_info.DEPT_NAME\": \"Accounting\" } }, { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enroll_info\" } }, { $unwind: \"$enroll_info\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.ENROLL.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"COURSE\", localField: \"class_info.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $match: { \"department_info.DEPT_NAME\": \"Accounting\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: \"$count\" } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $match: { \"dept_info.DEPT_NAME\": \"Accounting\" } }, { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enroll_info\" } }, { $unwind: \"$enroll_info\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 1925,
        "spider_question_id": 3254,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the department that has the largest number of students enrolled?",
        "query": "db.ENROLL.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"COURSE\", localField: \"class_info.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", DEPT_NAME: { $first: \"$department_info.DEPT_NAME\" }, STUDENT_COUNT: { $sum: 1 } } }, { $sort: { STUDENT_COUNT: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: 1 } } ])",
        "gpt4 answer": "db.ENROLL.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"COURSE\", localField: \"class_info.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"course_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", DEPT_NAME: { $first: \"$department_info.DEPT_NAME\" }, STUDENT_COUNT: { $sum: 1 } } }, { $sort: { STUDENT_COUNT: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1926,
        "spider_question_id": 3255,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the department with the most students enrolled?",
        "query": "db.ENROLL.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"COURSE\", localField: \"class_info.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"DEPARTMENT\", localField: \"_id\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { dept_name: \"$department_info.DEPT_NAME\" } } ])",
        "gpt4 answer": "db.ENROLL.aggregate([ { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $lookup: { from: \"COURSE\", localField: \"class_info.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.DEPT_CODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"DEPARTMENT\", localField: \"_id\", foreignField: \"DEPT_CODE\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { dept_name: \"$department_info.DEPT_NAME\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1927,
        "spider_question_id": 3256,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dept_name FROM department ORDER BY dept_name",
        "question": "list names of all departments ordered by their names.",
        "query": "db.DEPARTMENT.find({}, {DEPT_NAME: 1}).sort({DEPT_NAME: 1})",
        "gpt4 answer": "db.DEPARTMENT.find({}, {DEPT_NAME: 1}).sort({DEPT_NAME: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 1928,
        "spider_question_id": 3257,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dept_name FROM department ORDER BY dept_name",
        "question": "What are the names of all departments in alphabetical order?",
        "query": "db.DEPARTMENT.find({}, { DEPT_NAME: 1 }).sort({ DEPT_NAME: 1 })",
        "gpt4 answer": "db.DEPARTMENT.find({}, { DEPT_NAME: 1 }).sort({ DEPT_NAME: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1929,
        "spider_question_id": 3259,
        "db_id": "college_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'",
        "question": "What are the codes of all the courses that are located in room KLR209?",
        "query": "db.CLASS.find({ CLASS_ROOM: \"KLR209\" }, { CLASS_CODE: 1 })",
        "gpt4 answer": "db.CLASS.find({ CLASS_ROOM: \"KLR209\" }, { CLASS_CODE: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1930,
        "spider_question_id": 3264,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "question": "What is the first and last name of the oldest employee?",
        "query": "db.EMPLOYEE.find({}, { EMP_FNAME: 1, EMP_LNAME: 1 }).sort({ EMP_DOB: 1 }).limit(1)",
        "gpt4 answer": "db.EMPLOYEE.find({}, { EMP_FNAME: 1, EMP_LNAME: 1 }).sort({ EMP_DOB: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1931,
        "spider_question_id": 3268,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'",
        "question": "What is the first name of students who got grade C in any class?",
        "query": "db.STUDENT.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enroll_info\" } }, { $unwind: \"$enroll_info\" }, { $match: { \"enroll_info.ENROLL_GRADE\": \"C\" } }, { $group: { _id: \"$STU_FNAME\" } }, { $project: { STU_FNAME: \"$_id\" } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enroll_info\" } }, { $unwind: \"$enroll_info\" }, { $match: { \"enroll_info.ENROLL_GRADE\": \"C\" } }, { $group: { _id: \"$STU_FNAME\" } }, { $project: { STU_FNAME: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1932,
        "spider_question_id": 3273,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department has the most professors with a Ph.D.?",
        "query": "db.PROFESSOR.aggregate([ { $match: { PROF_HIGH_DEGREE: \"Ph.D.\" } }, { $group: { _id: \"$DEPT_CODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"DEPARTMENT\", localField: \"_id\", foreignField: \"DEPT_CODE\", as: \"department_info\" }}, { $unwind: \"$department_info\" }, { $project: { dept_name: \"$department_info.DEPT_NAME\", dept_code: \"$_id\" } } ])",
        "gpt4 answer": "db.PROFESSOR.aggregate([ { $match: { PROF_HIGH_DEGREE: \"Ph.D.\" } }, { $group: { _id: \"$DEPT_CODE\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"DEPARTMENT\", localField: \"_id\", foreignField: \"DEPT_CODE\", as: \"department_info\" }}, { $unwind: \"$department_info\" }, { $project: { dept_name: \"$department_info.DEPT_NAME\", dept_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1933,
        "spider_question_id": 3276,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num",
        "question": "What is the first names of the professors from the history department who do not teach a class.",
        "query": "db.EMPLOYEE.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"professor.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DEPT_NAME\": \"History\" } }, { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"class\" } }, { $match: { \"class\": { $size: 0 } } }, { $project: { EMP_FNAME: 1 } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"professor.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DEPT_NAME\": \"History\" } }, { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"class\" } }, { $match: { \"class\": { $size: 0 } } }, { $project: { EMP_FNAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1934,
        "spider_question_id": 3279,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.emp_lname , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'",
        "question": "What are the last name and office of all history professors?",
        "query": "db.EMPLOYEE.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"professor.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DEPT_NAME\": \"History\" } }, { $project: { EMP_LNAME: 1, PROF_OFFICE: \"$professor.PROF_OFFICE\" } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $lookup: { from: \"PROFESSOR\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"professor.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DEPT_NAME\": \"History\" } }, { $project: { EMP_LNAME: 1, PROF_OFFICE: \"$professor.PROF_OFFICE\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1935,
        "spider_question_id": 3280,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'",
        "question": "What is department name and office for the professor whose last name is Heffington?",
        "query": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: \"Heffington\" } }, { $lookup: { from: \"PROFESSOR\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"professor.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $project: { DEPT_NAME: \"$department.DEPT_NAME\", PROF_OFFICE: \"$professor.PROF_OFFICE\" } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: \"Heffington\" } }, { $lookup: { from: \"PROFESSOR\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"professor.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $project: { DEPT_NAME: \"$department.DEPT_NAME\", PROF_OFFICE: \"$professor.PROF_OFFICE\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1936,
        "spider_question_id": 3281,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.dept_name , T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'",
        "question": "What is the name of the department and office location for the professor with the last name of Heffington?",
        "query": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: 'Heffington' } }, { $lookup: { from: 'PROFESSOR', localField: 'EMP_NUM', foreignField: 'EMP_NUM', as: 'prof_details' } }, { $unwind: '$prof_details' }, { $lookup: { from: 'DEPARTMENT', localField: 'prof_details.DEPT_CODE', foreignField: 'DEPT_CODE', as: 'dept_details' } }, { $unwind: '$dept_details' }, { $project: { DEPT_NAME: '$dept_details.DEPT_NAME', PROF_OFFICE: '$prof_details.PROF_OFFICE' } } ])",
        "gpt4 answer": "db.EMPLOYEE.aggregate([ { $match: { EMP_LNAME: 'Heffington' } }, { $lookup: { from: 'PROFESSOR', localField: 'EMP_NUM', foreignField: 'EMP_NUM', as: 'prof_details' } }, { $unwind: '$prof_details' }, { $lookup: { from: 'DEPARTMENT', localField: 'prof_details.DEPT_CODE', foreignField: 'DEPT_CODE', as: 'dept_details' } }, { $unwind: '$dept_details' }, { $project: { DEPT_NAME: '$dept_details.DEPT_NAME', PROF_OFFICE: '$prof_details.PROF_OFFICE' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1937,
        "spider_question_id": 3285,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'",
        "question": "What are the course codes for every class that the student with the last name Smithson took?",
        "query": "db.ENROLL.aggregate([ { $lookup: { from: \"STUDENT\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"student_info\" } }, { $match: { \"student_info.STU_LNAME\": \"Smithson\" } }, { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $project: { CRS_CODE: \"$class_info.CRS_CODE\" } } ])",
        "gpt4 answer": "db.ENROLL.aggregate([ { $lookup: { from: \"STUDENT\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"student_info\" } }, { $match: { \"student_info.STU_LNAME\": \"Smithson\" } }, { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $project: { CRS_CODE: \"$class_info.CRS_CODE\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1938,
        "spider_question_id": 3286,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'",
        "question": "What are the description and credit of the course which the student whose last name is Smithson took?",
        "query": "db.STUDENT.aggregate([ { $match: { STU_LNAME: \"Smithson\" } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $lookup: { from: \"COURSE\", localField: \"class.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course\" } }, { $unwind: \"$course\" }, { $project: { crs_description: \"$course.CRS_DESCRIPTION\", crs_credit: \"$course.CRS_CREDIT\" } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $match: { STU_LNAME: \"Smithson\" } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $lookup: { from: \"COURSE\", localField: \"class.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course\" } }, { $unwind: \"$course\" }, { $project: { crs_description: \"$course.CRS_DESCRIPTION\", crs_credit: \"$course.CRS_CREDIT\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1939,
        "spider_question_id": 3287,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T4.crs_description , T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'",
        "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enroll_join\" } }, { $unwind: \"$enroll_join\" }, { $lookup: { from: \"STUDENT\", localField: \"enroll_join.STU_NUM\", foreignField: \"STU_NUM\", as: \"student_join\" } }, { $unwind: \"$student_join\" }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_join\" } }, { $unwind: \"$course_join\" }, { $match: { \"student_join.STU_LNAME\": \"Smithson\" } }, { $project: { \"crs_description\": \"$course_join.CRS_DESCRIPTION\", \"crs_credit\": \"$course_join.CRS_CREDIT\" } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $match: { STU_LNAME: 'Smithson' } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" }}, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" }}, { $unwind: \"$class\" }, { $lookup: { from: \"COURSE\", localField: \"class.CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course\" }}, { $unwind: \"$course\" }, { $project: { crs_description: \"$course.CRS_DESCRIPTION\", crs_credit: \"$course.CRS_CREDIT\" }} ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"enroll_join\" } }, { $unwind: \"$enroll_join\" }, { $lookup: { from: \"STUDENT\", localField: \"enroll_join.STU_NUM\", foreignField: \"STU_NUM\", as: \"student_join\" } }, { $unwind: \"$student_join\" }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_join\" } }, { $unwind: \"$course_join\" }, { $match: { \"student_join.STU_LNAME\": \"Smithson\" } }, { $project: { \"crs_description\": \"$course_join.CRS_DESCRIPTION\", \"crs_credit\": \"$course_join.CRS_CREDIT\" } } ])"
    },
    {
        "question_id": 1940,
        "spider_question_id": 3296,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'",
        "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "query": "db.ENROLL.aggregate([ { $lookup: { from: \"STUDENT\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $match: { \"class_info.CRS_CODE\": \"ACCT-211\" } }, { $group: { _id: null, averageGPA: { $avg: \"$student_info.STU_GPA\" } } }, { $project: { averageGPA: 1 } } ])",
        "gpt4 answer": "db.ENROLL.aggregate([ { $lookup: { from: \"STUDENT\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $lookup: { from: \"CLASS\", localField: \"CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $match: { \"class_info.CRS_CODE\": \"ACCT-211\" } }, { $group: { _id: null, averageGPA: { $avg: \"$student_info.STU_GPA\" } } }, { $project: { averageGPA: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1941,
        "spider_question_id": 3297,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'",
        "question": "What is the average GPA of students taking ACCT-211?",
        "query": "db.STUDENT.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment_info\" } }, { $unwind: \"$enrollment_info\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment_info.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $match: { \"class_info.CRS_CODE\": \"ACCT-211\" } }, { $group: { _id: null, avgGPA: { $avg: \"$STU_GPA\" } } }, { $project: { avgGPA: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment_info\" } }, { $unwind: \"$enrollment_info\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment_info.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class_info\" } }, { $unwind: \"$class_info\" }, { $match: { \"class_info.CRS_CODE\": \"ACCT-211\" } }, { $group: { _id: null, avgGPA: { $avg: \"$STU_GPA\" } } }, { $project: { avgGPA: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1942,
        "spider_question_id": 3299,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "query": "db.STUDENT.find({}, {STU_FNAME: 1, STU_GPA: 1, STU_PHONE: 1}).sort({STU_GPA: -1}).limit(5)",
        "gpt4 answer": "db.STUDENT.find({}, {STU_FNAME: 1, STU_GPA: 1, STU_PHONE: 1}).sort({STU_GPA: -1}).limit(5)",
        "deepseek answer": "."
    },
    {
        "question_id": 1943,
        "spider_question_id": 3305,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.dept_name , T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and address of the department with the most students?",
        "query": "db.STUDENT.aggregate([ { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_details\" } }, { $unwind: \"$department_details\" }, { $group: { _id: \"$DEPT_CODE\", DEPT_NAME: { $first: \"$department_details.DEPT_NAME\" }, DEPT_ADDRESS: { $first: \"$department_details.DEPT_ADDRESS\" }, num_students: { $sum: 1 } } }, { $sort: { num_students: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: \"$DEPT_NAME\", DEPT_ADDRESS: \"$DEPT_ADDRESS\" } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department_details\" } }, { $unwind: \"$department_details\" }, { $group: { _id: \"$DEPT_CODE\", DEPT_NAME: { $first: \"$department_details.DEPT_NAME\" }, DEPT_ADDRESS: { $first: \"$department_details.DEPT_ADDRESS\" }, num_students: { $sum: 1 } } }, { $sort: { num_students: -1 } }, { $limit: 1 }, { $project: { DEPT_NAME: \"$DEPT_NAME\", DEPT_ADDRESS: \"$DEPT_ADDRESS\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1944,
        "spider_question_id": 3312,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$course_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"crs_description\": \"$course_info.CRS_DESCRIPTION\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"course_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$course_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"crs_description\": \"$course_info.CRS_DESCRIPTION\" } } ])"
    },
    {
        "question_id": 1945,
        "spider_question_id": 3313,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
        "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"crs_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$crs_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"crs_description\": \"$crs_info.CRS_DESCRIPTION\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"crs_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$crs_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"crs_description\": \"$crs_info.CRS_DESCRIPTION\" } } ])"
    },
    {
        "question_id": 1946,
        "spider_question_id": 3314,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num",
        "question": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"crs_info\" } }, { $lookup: { from: \"PROFESSOR\", localField: \"emp_info.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$crs_info\" }, { $unwind: \"$prof_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"prof_office\": \"$prof_info.PROF_OFFICE\", \"crs_description\": \"$crs_info.CRS_DESCRIPTION\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"crs_info\" } }, { $lookup: { from: \"PROFESSOR\", localField: \"emp_info.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$crs_info\" }, { $unwind: \"$prof_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"prof_office\": \"$prof_info.PROF_OFFICE\", \"crs_description\": \"$crs_info.CRS_DESCRIPTION\" } } ])"
    },
    {
        "question_id": 1947,
        "spider_question_id": 3315,
        "db_id": "college_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.emp_fname , T4.prof_office , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num",
        "question": "What are the first names, office locations of all lecturers who have taught some course?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"crs_info\" } }, { $lookup: { from: \"PROFESSOR\", localField: \"emp_info.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$crs_info\" }, { $unwind: \"$prof_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"prof_office\": \"$prof_info.PROF_OFFICE\", \"crs_description\": \"$crs_info.CRS_DESCRIPTION\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $lookup: { from: \"COURSE\", localField: \"CRS_CODE\", foreignField: \"CRS_CODE\", as: \"crs_info\" } }, { $lookup: { from: \"PROFESSOR\", localField: \"emp_info.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_info\" } }, { $unwind: \"$emp_info\" }, { $unwind: \"$crs_info\" }, { $unwind: \"$prof_info\" }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"prof_office\": \"$prof_info.PROF_OFFICE\", \"crs_description\": \"$crs_info.CRS_DESCRIPTION\" } } ])"
    },
    {
        "question_id": 1948,
        "spider_question_id": 3323,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.emp_fname , T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'",
        "question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $unwind: \"$emp_info\" }, { $lookup: { from: \"PROFESSOR\", localField: \"emp_info.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_info\" } }, { $unwind: \"$prof_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"prof_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $match: { \"dept_info.DEPT_NAME\": \"Accounting\" } }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"class_room\": \"$CLASS_ROOM\" } } ])",
        "gpt4 answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $lookup: { from: \"PROFESSOR\", localField: \"professor.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_dept\" } }, { $unwind: \"$prof_dept\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"prof_dept.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DEPT_NAME\": \"Accounting\" } }, { $project: { emp_fname: \"$professor.EMP_FNAME\", class_room: \"$CLASS_ROOM\" } } ])",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"emp_info\" } }, { $unwind: \"$emp_info\" }, { $lookup: { from: \"PROFESSOR\", localField: \"emp_info.EMP_NUM\", foreignField: \"EMP_NUM\", as: \"prof_info\" } }, { $unwind: \"$prof_info\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"prof_info.DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"dept_info\" } }, { $unwind: \"$dept_info\" }, { $match: { \"dept_info.DEPT_NAME\": \"Accounting\" } }, { $project: { \"emp_fname\": \"$emp_info.EMP_FNAME\", \"class_room\": \"$CLASS_ROOM\" } } ])"
    },
    {
        "question_id": 1949,
        "spider_question_id": 3324,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.emp_fname , T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'",
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
        "query": "db.PROFESSOR.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"EMPLOYEE_INFO\" } }, { $unwind: \"$EMPLOYEE_INFO\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"DEPARTMENT_INFO\" } }, { $unwind: \"$DEPARTMENT_INFO\" }, { $match: { \"DEPARTMENT_INFO.DEPT_NAME\": \"Computer Info. Systems\" } }, { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"CLASS_INFO\" } }, { $unwind: \"$CLASS_INFO\" }, { $group: { _id: { EMP_NUM: \"$EMP_NUM\" }, EMP_FNAME: { $first: \"$EMPLOYEE_INFO.EMP_FNAME\" }, PROF_HIGH_DEGREE: { $first: \"$PROF_HIGH_DEGREE\" } } }, { $project: { EMP_FNAME: 1, PROF_HIGH_DEGREE: 1 } } ])",
        "gpt4 answer": "db.PROFESSOR.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"EMP_NUM\", foreignField: \"EMP_NUM\", as: \"EMPLOYEE_INFO\" } }, { $unwind: \"$EMPLOYEE_INFO\" }, { $lookup: { from: \"DEPARTMENT\", localField: \"DEPT_CODE\", foreignField: \"DEPT_CODE\", as: \"DEPARTMENT_INFO\" } }, { $unwind: \"$DEPARTMENT_INFO\" }, { $match: { \"DEPARTMENT_INFO.DEPT_NAME\": \"Computer Info. Systems\" } }, { $lookup: { from: \"CLASS\", localField: \"EMP_NUM\", foreignField: \"PROF_NUM\", as: \"CLASS_INFO\" } }, { $unwind: \"$CLASS_INFO\" }, { $group: { _id: { EMP_NUM: \"$EMP_NUM\" }, EMP_FNAME: { $first: \"$EMPLOYEE_INFO.EMP_FNAME\" }, PROF_HIGH_DEGREE: { $first: \"$PROF_HIGH_DEGREE\" } } }, { $project: { EMP_FNAME: 1, PROF_HIGH_DEGREE: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1950,
        "spider_question_id": 3330,
        "db_id": "college_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count(*) > 1",
        "question": "Find the first names of professors who are teaching more than one class.",
        "query": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $group: { _id: \"$professor.EMP_NUM\", emp_fname: { $first: \"$professor.EMP_FNAME\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { emp_fname: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.CLASS.aggregate([ { $lookup: { from: \"EMPLOYEE\", localField: \"PROF_NUM\", foreignField: \"EMP_NUM\", as: \"professor\" } }, { $unwind: \"$professor\" }, { $group: { _id: \"$professor.EMP_NUM\", emp_fname: { $first: \"$professor.EMP_FNAME\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { emp_fname: 1 } } ])"
    },
    {
        "question_id": 1951,
        "spider_question_id": 3336,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "query": "db.STUDENT.aggregate([ { $match: { STU_LNAME: { $regex: /^S/ } } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $match: { \"class.CRS_CODE\": \"ACCT-211\" } }, { $project: { STU_FNAME: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $match: { STU_LNAME: { $regex: /^S/ } } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $match: { \"class.CRS_CODE\": \"ACCT-211\" } }, { $project: { STU_FNAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1952,
        "spider_question_id": 3337,
        "db_id": "college_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?",
        "query": "db.STUDENT.aggregate([ { $match: { STU_LNAME: { $regex: '^S' } } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $match: { \"class.CRS_CODE\": \"ACCT-211\" } }, { $project: { STU_FNAME: 1 } } ])",
        "gpt4 answer": "db.STUDENT.aggregate([ { $match: { STU_LNAME: { $regex: '^S' } } }, { $lookup: { from: \"ENROLL\", localField: \"STU_NUM\", foreignField: \"STU_NUM\", as: \"enrollment\" } }, { $unwind: \"$enrollment\" }, { $lookup: { from: \"CLASS\", localField: \"enrollment.CLASS_CODE\", foreignField: \"CLASS_CODE\", as: \"class\" } }, { $unwind: \"$class\" }, { $match: { \"class.CRS_CODE\": \"ACCT-211\" } }, { $project: { STU_FNAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1953,
        "spider_question_id": 3342,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Gold) FROM club_rank",
        "question": "What is the average number of gold medals for clubs?",
        "query": "db.club_rank.aggregate([ { $group: { _id: null, averageGold: { $avg: \"$Gold\" } } } , { $project: { averageGold: 1 } }])",
        "gpt4 answer": "db.club_rank.aggregate([ {$group: { _id: null, averageGold: {$avg: \"$Gold\"} }}, {$project: { averageGold: 1 }} ])",
        "deepseek answer": "db.club_rank.aggregate([ { $group: { _id: null, averageGold: { $avg: \"$Gold\" } } } , { $project: { averageGold: 1 } }])"
    },
    {
        "question_id": 1954,
        "spider_question_id": 3343,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Gold) FROM club_rank",
        "question": "What is the average number of gold medals for a club?",
        "query": "db.club_rank.aggregate([ { $group: { _id: null, averageGold: { $avg: \"$Gold\" } } } , { $project: { averageGold: 1 } }])",
        "gpt4 answer": "db.club_rank.aggregate([ { $group: { _id: null, averageGold: { $avg: \"$Gold\" } } }, { $project: { averageGold: 1 } } ])",
        "deepseek answer": "db.club_rank.aggregate([ { $group: { _id: null, averageGold: { $avg: \"$Gold\" } } } , { $project: { averageGold: 1 } }])"
    },
    {
        "question_id": 1955,
        "spider_question_id": 3344,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Competition_type , Country FROM competition",
        "question": "What are the types and countries of competitions?",
        "query": "db.competition.find({}, { Competition_type: 1, Country: 1})",
        "gpt4 answer": "db.competition.find({}, { Competition_type: 1, Country: 1 })",
        "deepseek answer": "db.competition.find({}, { Competition_type: 1, Country: 1})"
    },
    {
        "question_id": 1956,
        "spider_question_id": 3345,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Competition_type , Country FROM competition",
        "question": "What are the types of every competition and in which countries are they located?",
        "query": "db.competition.find({}, { Competition_type: 1, Country: 1})",
        "gpt4 answer": "db.competition.find({}, { Competition_type: 1, Country: 1 })",
        "deepseek answer": "db.competition.find({}, { Competition_type: 1, Country: 1})"
    },
    {
        "question_id": 1957,
        "spider_question_id": 3348,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Silver) , min(Silver) FROM club_rank",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "query": "db.club_rank.aggregate([ { $group: { _id: null, maxSilver: { $max: \"$Silver\" }, minSilver: { $min: \"$Silver\" } } }, { $project: { maxSilver:1, minSilver:1 } } ])",
        "gpt4 answer": "db.club_rank.aggregate([ { $group: { _id: null, maxSilver: { $max: \"$Silver\" }, minSilver: { $min: \"$Silver\" } }}, { $project: { maxSilver: 1, minSilver: 1 } } ])",
        "deepseek answer": "db.club_rank.aggregate([ { $group: { _id: null, maxSilver: { $max: \"$Silver\" }, minSilver: { $min: \"$Silver\" } } }, { $project: { maxSilver:1, minSilver:1 } } ])"
    },
    {
        "question_id": 1958,
        "spider_question_id": 3349,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Silver) , min(Silver) FROM club_rank",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "query": "db.club_rank.aggregate([ { $group: { _id: null, maxSilver: { $max: \"$Silver\" }, minSilver: { $min: \"$Silver\" } } }, { $project: { maxSilver:1, minSilver:1 } } ])",
        "gpt4 answer": "db.club_rank.aggregate([ { $group: { _id: null, maxSilver: { $max: \"$Silver\" }, minSilver: { $min: \"$Silver\" } }}, { $project: { maxSilver: 1, minSilver: 1 }} ])",
        "deepseek answer": "db.club_rank.aggregate([ { $group: { _id: null, maxSilver: { $max: \"$Silver\" }, minSilver: { $min: \"$Silver\" } } }, { $project: { maxSilver:1, minSilver:1 } } ])"
    },
    {
        "question_id": 1959,
        "spider_question_id": 3352,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM club ORDER BY Start_year ASC",
        "question": "List all club names in ascending order of start year.",
        "query": "db.club.find({}, {name: 1}).sort({Start_year: 1})",
        "gpt4 answer": "db.club.find({}, { name: 1 }).sort({ Start_year: 1 })",
        "deepseek answer": "db.club.find({}, {name: 1}).sort({Start_year: 1})"
    },
    {
        "question_id": 1960,
        "spider_question_id": 3353,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM club ORDER BY Start_year ASC",
        "question": "What are the names of all the clubs starting with the oldest?",
        "query": "db.club.find({}, {name: 1}).sort({Start_year: 1})",
        "gpt4 answer": "db.club.find({}, {name: 1}).sort({Start_year: 1})",
        "deepseek answer": "db.club.find({}, {name: 1}).sort({Start_year: 1})"
    },
    {
        "question_id": 1961,
        "spider_question_id": 3354,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM club ORDER BY name DESC",
        "question": "List all club names in descending alphabetical order.",
        "query": "db.club.find({}, {name: 1}).sort({name: -1})",
        "gpt4 answer": "db.club.find({}, { name: 1 }).sort({ name: -1 })",
        "deepseek answer": "db.club.find({}, {name: 1}).sort({name: -1})"
    },
    {
        "question_id": 1962,
        "spider_question_id": 3355,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM club ORDER BY name DESC",
        "question": "What are the names of all the clubs ordered in descending alphabetical order?",
        "query": "db.club.find({}, {name: 1}).sort({name: -1})",
        "gpt4 answer": "db.club.find({}, {name: 1}).sort({name: -1})",
        "deepseek answer": "db.club.find({}, {name: 1}).sort({name: -1})"
    },
    {
        "question_id": 1963,
        "spider_question_id": 3358,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = 'Right Wing'",
        "question": "Show the names of clubs that have players with position 'Right Wing'.",
        "query": "db.club.aggregate([ { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"player_data\" } }, { $match: { \"player_data.Position\": \"Right Wing\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.club.aggregate([ { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"player_data\" } }, { $match: { \"player_data.Position\": \"Right Wing\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1964,
        "spider_question_id": 3359,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = 'Right Wing'",
        "question": "What are the names of the clubs that have players in the position of 'Right Wing'?",
        "query": "db.club.aggregate([ { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"players\" } }, { $match: { \"players.Position\": \"Right Wing\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $match: { Position: \"Right Wing\" } }, { $lookup: { from: \"club\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"club_info\" }}, { $unwind: \"$club_info\" }, { $group: { _id: \"$club_info.Club_ID\", club_name: { $first: \"$club_info.name\" } }}, { $project: { name: \"$club_name\" }} ])",
        "deepseek answer": "db.club.aggregate([ { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"players\" } }, { $match: { \"players.Position\": \"Right Wing\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 1965,
        "spider_question_id": 3360,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = 'AIB'",
        "question": "What is the average points of players from club with name 'AIB'.",
        "query": "db.club.aggregate([ { $match: { name: \"AIB\" } }, { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"players\" } }, { $unwind: \"$players\" }, { $group: { _id: null, avgPoints: { $avg: \"$players.Points\" } } } , { $project: { avgPoints: 1 } }])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"club\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.name\": \"AIB\" } }, { $group: { _id: null, averagePoints: { $avg: \"$Points\" } } }, { $project: { averagePoints: 1 } } ])",
        "deepseek answer": "db.club.aggregate([ { $match: { name: \"AIB\" } }, { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"players\" } }, { $unwind: \"$players\" }, { $group: { _id: null, avgPoints: { $avg: \"$players.Points\" } } } , { $project: { avgPoints: 1 } }])"
    },
    {
        "question_id": 1966,
        "spider_question_id": 3361,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = 'AIB'",
        "question": "What is the average number of points for players from the 'AIB' club?",
        "query": "db.club.aggregate([ { $match: { name: \"AIB\" } }, { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"players\" } }, { $unwind: \"$players\" }, { $group: { _id: null, avgPoints: { $avg: \"$players.Points\" } } }, { $project: { avgPoints: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"club\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.name\": \"AIB\" } }, { $group: { _id: null, avgPoints: { $avg: \"$Points\" } } }, { $project: { avgPoints: 1 } } ])",
        "deepseek answer": "db.club.aggregate([ { $match: { name: \"AIB\" } }, { $lookup: { from: \"player\", localField: \"Club_ID\", foreignField: \"Club_ID\", as: \"players\" } }, { $unwind: \"$players\" }, { $group: { _id: null, avgPoints: { $avg: \"$players.Points\" } } }, { $project: { avgPoints: 1 } } ])"
    },
    {
        "question_id": 1967,
        "spider_question_id": 3362,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT POSITION , avg(Points) FROM player GROUP BY POSITION",
        "question": "List the position of players and the average number of points of players of each position.",
        "query": "db.player.aggregate([ { $group: { _id: \"$Position\", averagePoints: { $avg: \"$Points\" } } }, { $project: { Position: \"$_id\", averagePoints: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: \"$Position\", AvgPoints: { $avg: \"$Points\" } } }, { $project: { Position: \"$_id\", AvgPoints: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: \"$Position\", averagePoints: { $avg: \"$Points\" } } }, { $project: { Position: \"$_id\", averagePoints: 1 } } ])"
    },
    {
        "question_id": 1968,
        "spider_question_id": 3363,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT POSITION , avg(Points) FROM player GROUP BY POSITION",
        "question": "For each position, what is the average number of points for players in that position?",
        "query": "db.player.aggregate([ { $group: { _id: \"$Position\", avgPoints: { $avg: \"$Points\" } } } ])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: \"$Position\", averagePoints: { $avg: \"$Points\" } } }, { $project: { Position: \"$_id\", AveragePoints: \"$averagePoints\" } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: \"$Position\", avgPoints: { $avg: \"$Points\" } } } ])"
    },
    {
        "question_id": 1969,
        "spider_question_id": 3366,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type",
        "question": "List the types of competition and the number of competitions of each type.",
        "query": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $project: { Competition_type: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", NumberOfCompetitions: { $sum: 1 } } }, { $project: { Competition_type: \"$_id\", NumberOfCompetitions: 1 } } ])",
        "deepseek answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $project: { Competition_type: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1970,
        "spider_question_id": 3367,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type",
        "question": "What are the types of competition and number of competitions for that type?",
        "query": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $project: { Competition_type: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $project: { Competition_type: \"$_id\", NumberOfCompetitions: \"$count\" } } ])",
        "deepseek answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $project: { Competition_type: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 1971,
        "spider_question_id": 3368,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of competition.",
        "query": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Competition_type: \"$_id\" } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Competition_type: \"$_id\" } } ])"
    },
    {
        "question_id": 1972,
        "spider_question_id": 3369,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common competition type?",
        "query": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Competition_type: \"$_id\" } }])",
        "gpt4 answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Competition_type: \"$_id\" } }])"
    },
    {
        "question_id": 1973,
        "spider_question_id": 3370,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5",
        "question": "List the types of competition that have at most five competitions of that type.",
        "query": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $match: { count: { $lte: 5 } } }, { $project: { Competition_type: \"$_id\" } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $match: { count: { $lte: 5 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $match: { count: { $lte: 5 } } }, { $project: { Competition_type: \"$_id\" } } ])"
    },
    {
        "question_id": 1974,
        "spider_question_id": 3371,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5",
        "question": "What are the types of competition that have most 5 competitions for that type?",
        "query": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $match: { count: { $lte: 5 } } }, { $project: { Competition_type: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.competition.aggregate([ { $group: { _id: \"$Competition_type\", count: { $sum: 1 } } }, { $match: { count: { $lte: 5 } } }, { $project: { Competition_type: \"$_id\" } } ])"
    },
    {
        "question_id": 1975,
        "spider_question_id": 3372,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "question": "List the names of clubs that do not have any players.",
        "query": "db.club.find( { Club_ID: { $nin: db.player.distinct(\"Club_ID\") } }, { name: 1 } )",
        "gpt4 answer": "db.club.find({ Club_ID: { $nin: db.player.distinct(\"Club_ID\") } }, { name: 1 })",
        "deepseek answer": "db.club.find( { Club_ID: { $nin: db.player.distinct(\"Club_ID\") } }, { name: 1 } )"
    },
    {
        "question_id": 1976,
        "spider_question_id": 3373,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "question": "What are the names of all clubs that do not have any players?",
        "query": "db.club.find({ Club_ID: { $nin: db.player.distinct(\"Club_ID\") } }, { name: 1 })",
        "gpt4 answer": "db.club.find({ Club_ID: { $nin: db.player.distinct(\"Club_ID\") } }, { name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 1977,
        "spider_question_id": 3374,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
        "question": "What are the positions with both players having more than 20 points and less than 10 points.",
        "query": "db.player.aggregate([ { $match: { $or: [ { Points: { $gt: 20 } }, { Points: { $lt: 10 } } ] } }, { $group: { _id: \"$Position\", players: { $push: { points: \"$Points\" } } } }, { $addFields: { moreThan20: { $anyElementTrue: { $map: { input: \"$players\", as: \"player\", in: { $gt: [\"$$player.points\", 20] } } } }, lessThan10: { $anyElementTrue: { $map: { input: \"$players\", as: \"player\", in: { $lt: [\"$$player.points\", 10] } } } } } }, { $match: { moreThan20: true, lessThan10: true } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $match: { $or: [ { Points: { $gt: 20 } }, { Points: { $lt: 10 } } ] } }, { $group: { _id: \"$Position\", players: { $push: { points: \"$Points\" } } } }, { $addFields: { moreThan20: { $anyElementTrue: { $map: { input: \"$players\", as: \"player\", in: { $gt: [\"$$player.points\", 20] } } } }, lessThan10: { $anyElementTrue: { $map: { input: \"$players\", as: \"player\", in: { $lt: [\"$$player.points\", 10] } } } } } }, { $match: { moreThan20: true, lessThan10: true } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1978,
        "spider_question_id": 3375,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
        "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
        "query": "db.player.aggregate([ { $match: { $or: [{ Points: { $gt: 20 } }, { Points: { $lt: 10 } }] } }, { $group: { _id: \"$Position\", pointsRange: { $addToSet: { $cond: [{ $gt: [\"$Points\", 20] }, \"moreThan20\", \"lessThan10\"] } } } }, { $match: { $and: [{ pointsRange: \"moreThan20\" }, { pointsRange: \"lessThan10\" }] } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $match: { $or: [{ Points: { $gt: 20 } }, { Points: { $lt: 10 } }] } }, { $group: { _id: \"$Position\", pointsRange: { $addToSet: { $cond: [{ $gt: [\"$Points\", 20] }, \"moreThan20\", \"lessThan10\"] } } } }, { $match: { $and: [{ pointsRange: \"moreThan20\" }, { pointsRange: \"lessThan10\" }] } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1979,
        "spider_question_id": 3376,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Points) FROM player",
        "question": "Show total points of all players.",
        "query": "db.player.aggregate([ { $group: { _id: null, totalPoints: { $sum: \"$Points\" } } } , { $project: { totalPoints: 1 } }])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: null, totalPoints: { $sum: \"$Points\" } } }, { $project: { totalPoints: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: null, totalPoints: { $sum: \"$Points\" } } } , { $project: { totalPoints: 1 } }])"
    },
    {
        "question_id": 1980,
        "spider_question_id": 3377,
        "db_id": "sports_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Points) FROM player",
        "question": "What is the total number of points for all players?",
        "query": "db.player.aggregate([ { $group: { _id: null, totalPoints: { $sum: \"$Points\" } } }, { $project: { totalPoints: 1} } ])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: null, total_points: { $sum: \"$Points\" } } }, { $project: { total_points: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: null, totalPoints: { $sum: \"$Points\" } } }, { $project: { totalPoints: 1} } ])"
    },
    {
        "question_id": 1981,
        "spider_question_id": 3380,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)",
        "question": "what are the name of players who get more than the average points.",
        "query": "db.player.aggregate([ { $group: { _id: null, avgPoints: { $avg: \"$Points\" } } }, { $lookup: { from: \"player\", let: { avgPoints: \"$avgPoints\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Points\", \"$$avgPoints\" ] } } }, { $project: { name: 1 } } ], as: \"players\" } }, { $unwind: \"$players\" }, { $replaceRoot: { newRoot: \"$players\" } } ])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: null, avgPoints: { $avg: \"$Points\" } } }, { $project: { avgPoints: 1 } }, { $lookup: { from: \"player\", let: { avgPoints: \"$avgPoints\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Points\", \"$$avgPoints\"] } } }, { $project: { name: 1 } } ], as: \"playersAboveAvg\" } }, { $unwind: \"$playersAboveAvg\" }, { $replaceRoot: { newRoot: \"$playersAboveAvg\" } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: null, avgPoints: { $avg: \"$Points\" } } }, { $lookup: { from: \"player\", let: { avgPoints: \"$avgPoints\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Points\", \"$$avgPoints\" ] } } }, { $project: { name: 1 } } ], as: \"players\" } }, { $unwind: \"$players\" }, { $replaceRoot: { newRoot: \"$players\" } } ])"
    },
    {
        "question_id": 1982,
        "spider_question_id": 3381,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM player WHERE points > (SELECT avg(points) FROM player)",
        "question": "What are the names of all players that got more than the average number of points?",
        "query": "db.player.aggregate([ { $group: { _id: null, avgPoints: { $avg: \"$Points\" } } }, { $lookup: { from: \"player\", let: { avgPoints: \"$avgPoints\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Points\", \"$$avgPoints\"] } } }, { $project: { name: 1 } } ], as: \"players\" } }, { $unwind: \"$players\" }, { $replaceRoot: { newRoot: \"$players\" } } ])",
        "gpt4 answer": "db.player.aggregate([ { $group: { _id: null, averagePoints: { $avg: \"$Points\" } } }, { $lookup: { from: \"player\", let: { avgPoints: \"$averagePoints\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Points\", \"$$avgPoints\"] } } }, { $project: { name: 1 } } ], as: \"playersAboveAverage\" } }, { $unwind: \"$playersAboveAverage\" }, { $replaceRoot: { newRoot: \"$playersAboveAverage\" } } ])",
        "deepseek answer": "db.player.aggregate([ { $group: { _id: null, avgPoints: { $avg: \"$Points\" } } }, { $lookup: { from: \"player\", let: { avgPoints: \"$avgPoints\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Points\", \"$$avgPoints\"] } } }, { $project: { name: 1 } } ], as: \"players\" } }, { $unwind: \"$players\" }, { $replaceRoot: { newRoot: \"$players\" } } ])"
    },
    {
        "question_id": 1983,
        "spider_question_id": 3382,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "query": "db.player.aggregate([ { $match: { Points: { $lt: 30 } } }, { $group: { _id: \"$Position\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.player.aggregate([ { $match: { Points: { $lt: 30 } } }, { $group: { _id: \"$Position\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1984,
        "spider_question_id": 3383,
        "db_id": "sports_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION",
        "question": "What is the number of players who have points less than 30 for each position?",
        "query": "db.player.aggregate([ { $match: { Points: { $lt: 30 } } }, { $group: { _id: \"$Position\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.player.aggregate([ { $match: { Points: { $lt: 30 } } }, { $group: { _id: \"$Position\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1985,
        "spider_question_id": 3386,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
        "question": "which countries did participated in both Friendly and Tournament type competitions.",
        "query": "db.competition.aggregate([ { $match: { $or: [{ Competition_type: 'Friendly' }, { Competition_type: 'Tournament' }] } }, { $group: { _id: \"$Country\", types: { $addToSet: \"$Competition_type\" } } }, { $match: { types: { $all: [\"Friendly\", \"Tournament\"] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $match: { $or: [{ Competition_type: 'Friendly' }, { Competition_type: 'Tournament' }] } }, { $group: { _id: \"$Country\", types: { $addToSet: \"$Competition_type\" } } }, { $match: { types: { $all: [\"Friendly\", \"Tournament\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1986,
        "spider_question_id": 3387,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
        "question": "What are the countries that participated in both friendly and tournament type competitions?",
        "query": "db.competition.aggregate([ { $match: { $or: [ { Competition_type: 'Friendly' }, { Competition_type: 'Tournament' } ] } }, { $group: { _id: '$Country', types: { $addToSet: '$Competition_type' } } }, { $match: { types: { $all: ['Friendly', 'Tournament'] } } }, { $project: { Country: '$_id' } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $match: { $or: [ { Competition_type: 'Friendly' }, { Competition_type: 'Tournament' } ] } }, { $group: { _id: '$Country', types: { $addToSet: '$Competition_type' } } }, { $match: { types: { $all: ['Friendly', 'Tournament'] } } }, { $project: { Country: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1987,
        "spider_question_id": 3389,
        "db_id": "sports_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'",
        "question": "What are the countries that have never participated in any friendly-type competitions?",
        "query": "db.competition.aggregate([ { $match: { \"Competition_type\": { $ne: \"Friendly\" } } }, { $group: { _id: null, countries: { $addToSet: \"$Country\" } } }, { $lookup: { from: \"competition\", pipeline: [ { $match: { \"Competition_type\": \"Friendly\" } }, { $group: { _id: null, friendlyCountries: { $addToSet: \"$Country\" } } } ], as: \"friendlyComps\" } }, { $project: { countriesNeverFriendly: { $setDifference: [\"$countries\", { $arrayElemAt: [\"$friendlyComps.friendlyCountries\", 0] }] } } }, { $unwind: \"$countriesNeverFriendly\" }, { $replaceRoot: { newRoot: { country: \"$countriesNeverFriendly\" } } } ])",
        "gpt4 answer": "db.competition.aggregate([ { $match: { \"Competition_type\": { $ne: \"Friendly\" } } }, { $group: { _id: null, countries: { $addToSet: \"$Country\" } } }, { $lookup: { from: \"competition\", pipeline: [ { $match: { \"Competition_type\": \"Friendly\" } }, { $group: { _id: null, friendlyCountries: { $addToSet: \"$Country\" } } } ], as: \"friendlyComps\" } }, { $project: { countriesNeverFriendly: { $setDifference: [\"$countries\", { $arrayElemAt: [\"$friendlyComps.friendlyCountries\", 0] }] } } }, { $unwind: \"$countriesNeverFriendly\" }, { $replaceRoot: { newRoot: { country: \"$countriesNeverFriendly\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1988,
        "spider_question_id": 3390,
        "db_id": "manufacturer",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(num_of_component) FROM furniture",
        "question": "How many furniture components are there in total?",
        "query": "db.furniture.aggregate([ { $group: { _id: null, totalComponents: { $sum: \"$Num_of_Component\" } } }, { $project: { totalComponents: 1 } } ])",
        "gpt4 answer": "db.furniture.aggregate([ { $group: { _id: null, total_components: { $sum: \"$Num_of_Component\" } } }, { $project: { total_components: 1 } } ])",
        "deepseek answer": "db.furniture.aggregate([ { $group: { _id: null, totalComponents: { $sum: \"$Num_of_Component\" } } }, { $project: { totalComponents: 1 } } ])"
    },
    {
        "question_id": 1989,
        "spider_question_id": 3391,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "question": "Return the name and id of the furniture with the highest market rate.",
        "query": "db.furniture.find({}, { Name: 1, Furniture_ID: 1 }).sort({ Market_Rate: -1 }).limit(1)",
        "gpt4 answer": "db.furniture.find({}, { Name: 1, Furniture_ID: 1 }).sort({ Market_Rate: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 1990,
        "spider_question_id": 3393,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Num_of_Component , name FROM furniture WHERE Num_of_Component > 10",
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "query": "db.furniture.find({Num_of_Component: {$gt: 10}}, { Num_of_Component: 1, Name: 1})",
        "gpt4 answer": "db.furniture.find({ Num_of_Component: { $gt: 10 } }, { Num_of_Component: 1, Name: 1 })",
        "deepseek answer": "db.furniture.find({Num_of_Component: {$gt: 10}}, { Num_of_Component: 1, Name: 1})"
    },
    {
        "question_id": 1991,
        "spider_question_id": 3394,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
        "question": "Find the name and component amount of the least popular furniture.",
        "query": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"furniture_manufacte\" } }, { $unwind: \"$furniture_manufacte\" }, { $group: { _id: \"$Furniture_ID\", name: { $first: \"$Name\" }, Num_of_Component: { $first: \"$Num_of_Component\" }, count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { name: 1, Num_of_Component: 1 } } ])",
        "gpt4 answer": "db.furniture.find({}, { Name: 1, Num_of_Component: 1 }).sort({ Market_Rate: 1 }).limit(1)",
        "deepseek answer": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"furniture_manufacte\" } }, { $unwind: \"$furniture_manufacte\" }, { $group: { _id: \"$Furniture_ID\", name: { $first: \"$Name\" }, Num_of_Component: { $first: \"$Num_of_Component\" }, count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { name: 1, Num_of_Component: 1 } } ])"
    },
    {
        "question_id": 1992,
        "spider_question_id": 3396,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "query": "db.manufacturer.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Manufacturer_ID\", foreignField: \"Manufacturer_ID\", as: \"furniture_manufacte\" } }, { $project: { Open_Year: 1, Name: 1 } }, { $sort: { Num_of_Shops: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.manufacturer.find({}, { Open_Year: 1, Name: 1 }).sort({ Num_of_Shops: -1 }).limit(1)",
        "deepseek answer": "db.manufacturer.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Manufacturer_ID\", foreignField: \"Manufacturer_ID\", as: \"furniture_manufacte\" } }, { $project: { Open_Year: 1, Name: 1 } }, { $sort: { Num_of_Shops: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 1993,
        "spider_question_id": 3397,
        "db_id": "manufacturer",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20",
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "query": "db.manufacturer.aggregate([ { $match: { Num_of_Shops: { $gt: 20 } } }, { $group: { _id: null, average: { $avg: \"$Num_of_Factories\" } } } , { $project: { average: 1} }])",
        "gpt4 answer": "db.manufacturer.aggregate([ { $match: { Num_of_Shops: { $gt: 20 } } }, { $group: { _id: null, avgNumOfFactories: { $avg: \"$Num_of_Factories\" } } }, { $project: { avgNumOfFactories: 1 } } ])",
        "deepseek answer": "db.manufacturer.aggregate([ { $match: { Num_of_Shops: { $gt: 20 } } }, { $group: { _id: null, average: { $avg: \"$Num_of_Factories\" } } } , { $project: { average: 1} }])"
    },
    {
        "question_id": 1994,
        "spider_question_id": 3398,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , manufacturer_id FROM manufacturer ORDER BY open_year",
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "query": "db.manufacturer.find({}, { Name: 1, Manufacturer_ID: 1}).sort({Open_Year: 1})",
        "gpt4 answer": "db.manufacturer.find({}, { Name: 1, Manufacturer_ID: 1 }).sort({ Open_Year: 1 })",
        "deepseek answer": "db.manufacturer.find({}, { Name: 1, Manufacturer_ID: 1}).sort({Open_Year: 1})"
    },
    {
        "question_id": 1995,
        "spider_question_id": 3399,
        "db_id": "manufacturer",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10",
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "query": "db.manufacturer.find( { $or: [ {Num_of_Shops: {$gt: 10}}, {Num_of_Factories: {$lt: 10}} ] }, { Name: 1, Open_Year: 1 } )",
        "gpt4 answer": "db.manufacturer.find( { $or: [ { Num_of_Shops: { $gt: 10 } }, { Num_of_Factories: { $lt: 10 } } ] }, { Name: 1, Open_Year: 1 } )",
        "deepseek answer": "db.manufacturer.find( { $or: [ {Num_of_Shops: {$gt: 10}}, {Num_of_Factories: {$lt: 10}} ] }, { Name: 1, Open_Year: 1 } )"
    },
    {
        "question_id": 1996,
        "spider_question_id": 3400,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(num_of_shops) , avg(Num_of_Factories) FROM manufacturer WHERE open_year < 1990",
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "query": "db.manufacturer.aggregate([ { $match: { Open_Year: { $lt: 1990 } } }, { $group: { _id: null, max_num_of_shops: { $max: \"$Num_of_Shops\" }, avg_num_of_factories: { $avg: \"$Num_of_Factories\" } } }, { $project: { max_num_of_shops: 1, avg_num_of_factories: 1 } } ])",
        "gpt4 answer": "db.manufacturer.aggregate([ { $match: { Open_Year: { $lt: 1990 } } }, { $group: { _id: null, avgNumOfFactories: { $avg: \"$Num_of_Factories\" }, maxNumOfShops: { $max: \"$Num_of_Shops\" } } }, { $project: { avgNumOfFactories: 1, maxNumOfShops: 1 } } ])",
        "deepseek answer": "db.manufacturer.aggregate([ { $match: { Open_Year: { $lt: 1990 } } }, { $group: { _id: null, max_num_of_shops: { $max: \"$Num_of_Shops\" }, avg_num_of_factories: { $avg: \"$Num_of_Factories\" } } }, { $project: { max_num_of_shops: 1, avg_num_of_factories: 1 } } ])"
    },
    {
        "question_id": 1997,
        "spider_question_id": 3401,
        "db_id": "manufacturer",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.manufacturer_id , t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
        "question": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "query": "db.manufacturer.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Manufacturer_ID\", foreignField: \"Manufacturer_ID\", as: \"furniture_manufacte\" } }, { $unwind: \"$furniture_manufacte\" }, { $sort: { \"furniture_manufacte.Price_in_Dollar\": -1 } }, { $limit: 1 }, { $project: { Manufacturer_ID: \"$Manufacturer_ID\", Num_of_Shops: \"$Num_of_Shops\" } } ])",
        "gpt4 answer": "db.manufacturer.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Manufacturer_ID\", foreignField: \"Manufacturer_ID\", as: \"furniture_info\" } }, { $unwind: \"$furniture_info\" }, { $sort: {\"furniture_info.Price_in_Dollar\": -1} }, { $limit: 1 }, { $project: { Manufacturer_ID: 1, Num_of_Shops: 1} } ])",
        "deepseek answer": "db.manufacturer.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Manufacturer_ID\", foreignField: \"Manufacturer_ID\", as: \"furniture_manufacte\" } }, { $unwind: \"$furniture_manufacte\" }, { $sort: { \"furniture_manufacte.Price_in_Dollar\": -1 } }, { $limit: 1 }, { $project: { Manufacturer_ID: \"$Manufacturer_ID\", Num_of_Shops: \"$Num_of_Shops\" } } ])"
    },
    {
        "question_id": 1998,
        "spider_question_id": 3403,
        "db_id": "manufacturer",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name , t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID",
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "query": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"manufacturing_details\" } }, { $unwind: \"$manufacturing_details\" }, { $project: { name: \"$Name\", price_in_dollar: \"$manufacturing_details.Price_in_Dollar\" } } ])",
        "gpt4 answer": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"manufacturing_details\" } }, { $unwind: \"$manufacturing_details\" }, { $project: { name: \"$Name\", price_in_dollar: \"$manufacturing_details.Price_in_Dollar\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 1999,
        "spider_question_id": 3404,
        "db_id": "manufacturer",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Market_Rate , name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "query": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"furniture_manufacte\" } }, { $match: { \"furniture_manufacte\": { $size: 0 } } }, { $project: { Market_Rate: 1, Name: 1 } } ])",
        "gpt4 answer": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"manufacte\" } }, { $match: { manufacte: { $size: 0 } } }, { $project: { Market_Rate: 1, Name: 1 } } ])",
        "deepseek answer": "db.furniture.aggregate([ { $lookup: { from: \"furniture_manufacte\", localField: \"Furniture_ID\", foreignField: \"Furniture_ID\", as: \"furniture_manufacte\" } }, { $match: { \"furniture_manufacte\": { $size: 0 } } }, { $project: { Market_Rate: 1, Name: 1 } } ])"
    },
    {
        "question_id": 2000,
        "spider_question_id": 3410,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'",
        "question": "Display the first name, and department number for all employees whose last name is 'McEwen'.",
        "query": "db.employees.find({ \"LAST_NAME\": \"McEwen\" }, { \"FIRST_NAME\": 1, \"DEPARTMENT_ID\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.employees.find({ \"LAST_NAME\": \"McEwen\" }, { \"FIRST_NAME\": 1, \"DEPARTMENT_ID\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2001,
        "spider_question_id": 3411,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , department_id FROM employees WHERE last_name = 'McEwen'",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "query": "db.employees.find({ \"LAST_NAME\": \"McEwen\" }, { \"FIRST_NAME\": 1, \"DEPARTMENT_ID\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.employees.find({ \"LAST_NAME\": \"McEwen\" }, { \"FIRST_NAME\": 1, \"DEPARTMENT_ID\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2002,
        "spider_question_id": 3414,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "question": "Display all the information about the department Marketing.",
        "query": "db.departments.find({ DEPARTMENT_NAME: 'Marketing' })",
        "gpt4 answer": "db.departments.find({ DEPARTMENT_NAME: 'Marketing' })",
        "deepseek answer": "."
    },
    {
        "question_id": 2003,
        "spider_question_id": 3415,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "question": "What is all the information about the Marketing department?",
        "query": "db.departments.findOne({ DEPARTMENT_NAME: 'Marketing' })",
        "gpt4 answer": "db.departments.findOne({ DEPARTMENT_NAME: 'Marketing' })",
        "deepseek answer": "."
    },
    {
        "question_id": 2004,
        "spider_question_id": 3428,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "query": "db.employees.find( { \"FIRST_NAME\": /m$/ }, { \"FIRST_NAME\": 1, \"LAST_NAME\": 1, \"SALARY\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.employees.find( { \"FIRST_NAME\": /m$/ }, { \"FIRST_NAME\": 1, \"LAST_NAME\": 1, \"SALARY\": 1, \"_id\": 0 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 2005,
        "spider_question_id": 3429,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "query": "db.employees.find( { \"FIRST_NAME\": /m$/ }, { \"FIRST_NAME\": 1, \"LAST_NAME\": 1, \"SALARY\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.employees.find( { \"FIRST_NAME\": /m$/ }, { \"FIRST_NAME\": 1, \"LAST_NAME\": 1, \"SALARY\": 1, \"_id\": 0 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 2006,
        "spider_question_id": 3432,
        "db_id": "hr_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "query": "db.employees.find( { $or: [ { DEPARTMENT_ID: 70 }, { DEPARTMENT_ID: 90 } ] }, { FIRST_NAME: 1, LAST_NAME: 1 } )",
        "gpt4 answer": "db.employees.find( { $or: [ { DEPARTMENT_ID: 70 }, { DEPARTMENT_ID: 90 } ] }, { FIRST_NAME: 1, LAST_NAME: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 2007,
        "spider_question_id": 3433,
        "db_id": "hr_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT first_name , last_name FROM employees WHERE department_id = 70 OR department_id = 90",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "query": "db.employees.find( { $or: [{ DEPARTMENT_ID: 70 }, { DEPARTMENT_ID: 90 }] }, { FIRST_NAME: 1, LAST_NAME: 1 } )",
        "gpt4 answer": "db.employees.find( { $or: [{ DEPARTMENT_ID: 70 }, { DEPARTMENT_ID: 90 }] }, { FIRST_NAME: 1, LAST_NAME: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 2008,
        "spider_question_id": 3442,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT job_title FROM jobs WHERE min_salary > 9000",
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "query": "db.jobs.find({ MIN_SALARY: { $gt: 9000 }}, { JOB_TITLE: 1 })",
        "gpt4 answer": "db.jobs.find({ MIN_SALARY: { $gt: 9000 }}, { JOB_TITLE: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2009,
        "spider_question_id": 3443,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT job_title FROM jobs WHERE min_salary > 9000",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "query": "db.jobs.find({ \"MIN_SALARY\": { \"$gt\": 9000 } }, { \"JOB_TITLE\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.jobs.find({ \"MIN_SALARY\": { \"$gt\": 9000 } }, { \"JOB_TITLE\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2010,
        "spider_question_id": 3448,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT employee_id , MAX(end_date) FROM job_history GROUP BY employee_id",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "query": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", END_DATE: { $max: \"$END_DATE\" } } }, { $project: { EMPLOYEE_ID: \"$_id\", END_DATE: \"$END_DATE\" } } ])",
        "gpt4 answer": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", END_DATE: { $max: \"$END_DATE\" } } }, { $project: { EMPLOYEE_ID: \"$_id\", END_DATE: \"$END_DATE\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2011,
        "spider_question_id": 3449,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT employee_id , MAX(end_date) FROM job_history GROUP BY employee_id",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "query": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", final_date_of_employment: { $max: \"$END_DATE\" } } }, { $project: { EMPLOYEE_ID: \"$_id\", END_DATE: \"$final_date_of_employment\" } } ])",
        "gpt4 answer": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", final_date_of_employment: { $max: \"$END_DATE\" } } }, { $project: { EMPLOYEE_ID: \"$_id\", END_DATE: \"$final_date_of_employment\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2012,
        "spider_question_id": 3450,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "query": "db.employees.aggregate([ { $match: { COMMISSION_PCT: { $exists: true, $ne: null } } }, { $group: { _id: \"$DEPARTMENT_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { DEPARTMENT_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { COMMISSION_PCT: { $exists: true, $ne: null } } }, { $group: { _id: \"$DEPARTMENT_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } }, { $project: { DEPARTMENT_ID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2013,
        "spider_question_id": 3451,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "question": "What are the department ids for which more than 10 employees had a commission?",
        "query": "db.employees.aggregate([ { $match: { COMMISSION_PCT: { $exists: true } } }, { $group: { _id: \"$DEPARTMENT_ID\", numCommissions: { $sum: 1 } } }, { $match: { numCommissions: { $gt: 10 } } }, { $project: { DEPARTMENT_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { COMMISSION_PCT: { $exists: true } } }, { $group: { _id: \"$DEPARTMENT_ID\", numCommissions: { $sum: 1 } } }, { $match: { numCommissions: { $gt: 10 } } }, { $project: { DEPARTMENT_ID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2014,
        "spider_question_id": 3452,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT(employee_id) >= 4",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "query": "db.employees.aggregate([ { $group: { _id: { department_id: \"$DEPARTMENT_ID\", manager_id: \"$MANAGER_ID\"}, employeeCount: { $sum: 1 } }}, { $match: { employeeCount: { $gte: 4 } }}, { $project: { department_id: \"$_id.department_id\" }}, { $group: { _id: \"$department_id\" }}, { $project: { department_id: \"$_id\" }} ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: { department_id: \"$DEPARTMENT_ID\", manager_id: \"$MANAGER_ID\"}, employeeCount: { $sum: 1 } }}, { $match: { employeeCount: { $gte: 4 } }}, { $project: { department_id: \"$_id.department_id\" }}, { $group: { _id: \"$department_id\" }}, { $project: { department_id: \"$_id\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2015,
        "spider_question_id": 3454,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT department_id , AVG(salary) FROM employees WHERE commission_pct != 'null' GROUP BY department_id",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "query": "db.employees.aggregate([ { $match: { COMMISSION_PCT: { $ne: null } } }, { $group: { _id: \"$DEPARTMENT_ID\", avgSalary: { $avg: \"$SALARY\" } } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { COMMISSION_PCT: { $ne: null } } }, { $group: { _id: \"$DEPARTMENT_ID\", avgSalary: { $avg: \"$SALARY\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2016,
        "spider_question_id": 3456,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country_id , COUNT(*) FROM locations GROUP BY country_id",
        "question": "display the country ID and number of cities for each country.",
        "query": "db.locations.aggregate([ { $group: { _id: \"$COUNTRY_ID\", number_of_cities: { $sum: 1 } } }, { $project: { country_id: \"$_id\", number_of_cities: 1 } } ])",
        "gpt4 answer": "db.locations.aggregate([ { $group: { _id: \"$COUNTRY_ID\", number_of_cities: { $sum: 1 } } }, { $project: { country_id: \"$_id\", number_of_cities: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2017,
        "spider_question_id": 3457,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country_id , COUNT(*) FROM locations GROUP BY country_id",
        "question": "Give the country id and corresponding count of cities in each country.",
        "query": "db.locations.aggregate([ { $group: { _id: \"$COUNTRY_ID\", countOfCities: { $sum: 1 } } } ])",
        "gpt4 answer": "db.locations.aggregate([ { $group: { _id: \"$COUNTRY_ID\", countOfCities: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2018,
        "spider_question_id": 3460,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", numJobs: { $sum: 1 } } }, { $match: { numJobs: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", numJobs: { $sum: 1 } } }, { $match: { numJobs: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2019,
        "spider_question_id": 3461,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "query": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", jobCount: { $sum: 1 } }}, { $match: { jobCount: { $gte: 2 } }}, { $project: { EMPLOYEE_ID: \"$_id\" }} ])",
        "gpt4 answer": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", jobCount: { $sum: 1 } }}, { $match: { jobCount: { $gte: 2 } }}, { $project: { EMPLOYEE_ID: \"$_id\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2020,
        "spider_question_id": 3464,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
        "question": "display the department name and number of employees in each of the department.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", numEmployees: { $sum: 1 } } }, { $project: { department_name: \"$_id\", numEmployees: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", numEmployees: { $sum: 1 } } }, { $project: { department_name: \"$_id\", numEmployees: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2021,
        "spider_question_id": 3465,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
        "question": "Give the name of each department and the number of employees in each.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", count: { $sum: 1 } } }, { $project: { department_name: \"$_id\", number_of_employees: \"$count\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", count: { $sum: 1 } } }, { $project: { department_name: \"$_id\", number_of_employees: \"$count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2022,
        "spider_question_id": 3468,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT job_title , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
        "question": "display job title and average salary of employees.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"jobs\", localField: \"JOB_ID\", foreignField: \"JOB_ID\", as: \"jobDetails\" } }, { $unwind: \"$jobDetails\" }, { $group: { _id: \"$jobDetails.JOB_TITLE\", averageSalary: { $avg: \"$SALARY\" } } }, { $project: { job_title: \"$_id\", averageSalary: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"jobs\", localField: \"JOB_ID\", foreignField: \"JOB_ID\", as: \"jobDetails\" } }, { $unwind: \"$jobDetails\" }, { $group: { _id: \"$jobDetails.JOB_TITLE\", averageSalary: { $avg: \"$SALARY\" } } }, { $project: { job_title: \"$_id\", averageSalary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2023,
        "spider_question_id": 3469,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT job_title , AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
        "question": "What is the average salary for each job title?",
        "query": "db.employees.aggregate([ { $lookup: { from: \"jobs\", localField: \"JOB_ID\", foreignField: \"JOB_ID\", as: \"jobDetails\" } }, { $unwind: \"$jobDetails\" }, { $group: { _id: \"$jobDetails.JOB_TITLE\", averageSalary: { $avg: \"$SALARY\" } } }, { $project: { jobTitle: \"$_id\", averageSalary: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"jobs\", localField: \"JOB_ID\", foreignField: \"JOB_ID\", as: \"jobDetails\" } }, { $unwind: \"$jobDetails\" }, { $group: { _id: \"$jobDetails.JOB_TITLE\", averageSalary: { $avg: \"$SALARY\" } } }, { $project: { jobTitle: \"$_id\", averageSalary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2024,
        "spider_question_id": 3472,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT MIN(salary) , department_id FROM employees GROUP BY department_id",
        "question": "return the smallest salary for every departments.",
        "query": "db.employees.aggregate([ { $group: { _id: \"$DEPARTMENT_ID\", minSalary: { $min: \"$SALARY\" } } }, { $project: { department_id: \"$_id\", minSalary: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: \"$DEPARTMENT_ID\", minSalary: { $min: \"$SALARY\" } } }, { $project: { department_id: \"$_id\", minSalary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2025,
        "spider_question_id": 3473,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT MIN(salary) , department_id FROM employees GROUP BY department_id",
        "question": "What is the minimum salary in each department?",
        "query": "db.employees.aggregate([ { $group: { _id: \"$DEPARTMENT_ID\", minSalary: { $min: \"$SALARY\" } } }, { $project: { department_id: \"$_id\", minSalary: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: \"$DEPARTMENT_ID\", minSalary: { $min: \"$SALARY\" } } }, { $project: { department_id: \"$_id\", minSalary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2026,
        "spider_question_id": 3478,
        "db_id": "hr_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT employee_id , salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam' )",
        "question": "display the employee id and salary of all employees who report to Payam (first name).",
        "query": "db.employees.aggregate([ { $lookup: { from: 'employees', localField: 'MANAGER_ID', foreignField: 'EMPLOYEE_ID', as: 'manager' } }, { $match: { 'manager.FIRST_NAME': 'Payam' } }, { $project: { EMPLOYEE_ID: 1, SALARY: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: 'employees', localField: 'MANAGER_ID', foreignField: 'EMPLOYEE_ID', as: 'manager' } }, { $match: { 'manager.FIRST_NAME': 'Payam' } }, { $project: { EMPLOYEE_ID: 1, SALARY: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2027,
        "spider_question_id": 3481,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
        "question": "What are the names of departments that have at least one employee.",
        "query": "db.departments.aggregate([ { $lookup: { from: \"employees\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"employee_info\" } }, { $match: { \"employee_info.EMPLOYEE_ID\": { $exists: true, $not: { $size: 0 } } } }, { $project: { DEPARTMENT_NAME: 1 } } ])",
        "gpt4 answer": "db.departments.aggregate([ { $lookup: { from: \"employees\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"employee_info\" } }, { $match: { \"employee_info.EMPLOYEE_ID\": { $exists: true, $not: { $size: 0 } } } }, { $project: { DEPARTMENT_NAME: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2028,
        "spider_question_id": 3484,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "question": "display all the information about the department Marketing.",
        "query": "db.departments.findOne({ DEPARTMENT_NAME: \"Marketing\" })",
        "gpt4 answer": "db.departments.findOne({ DEPARTMENT_NAME: \"Marketing\" })",
        "deepseek answer": "."
    },
    {
        "question_id": 2029,
        "spider_question_id": 3485,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'",
        "question": "What is all the information about the Marketing department?",
        "query": "db.departments.find({ DEPARTMENT_NAME: 'Marketing' })",
        "gpt4 answer": "db.departments.find({ DEPARTMENT_NAME: 'Marketing' })",
        "deepseek answer": "."
    },
    {
        "question_id": 2030,
        "spider_question_id": 3486,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", numJobs: { $sum: 1 } } }, { $match: { numJobs: { $gte: 2 } } }, { $project: { EMPLOYEE_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", numJobs: { $sum: 1 } } }, { $match: { numJobs: { $gte: 2 } } }, { $project: { EMPLOYEE_ID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2031,
        "spider_question_id": 3487,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2",
        "question": "What are the employee ids for those who had two or more jobs.",
        "query": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", jobCount: { $sum: 1 } }}, { $match: { jobCount: { $gte: 2 } }}, { $project: { EMPLOYEE_ID: \"$_id\" }} ])",
        "gpt4 answer": "db.job_history.aggregate([ { $group: { _id: \"$EMPLOYEE_ID\", jobCount: { $sum: 1 } }}, { $match: { jobCount: { $gte: 2 } }}, { $project: { EMPLOYEE_ID: \"$_id\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2032,
        "spider_question_id": 3488,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id , manager_id HAVING COUNT(employee_id) >= 4",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "query": "db.employees.aggregate([ { $group: { _id: { department_id: \"$DEPARTMENT_ID\", manager_id: \"$MANAGER_ID\" }, employeeCount: { $sum: 1 } } }, { $match: { employeeCount: { $gte: 4 } } }, { $group: { _id: null, uniqueDepartmentIds: { $addToSet: \"$_id.department_id\" } } }, { $unwind: \"$uniqueDepartmentIds\" }, { $project: { department_id: \"$uniqueDepartmentIds\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: { department_id: \"$DEPARTMENT_ID\", manager_id: \"$MANAGER_ID\" }, employeeCount: { $sum: 1 } } }, { $match: { employeeCount: { $gte: 4 } } }, { $group: { _id: null, uniqueDepartmentIds: { $addToSet: \"$_id.department_id\" } } }, { $unwind: \"$uniqueDepartmentIds\" }, { $project: { department_id: \"$uniqueDepartmentIds\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2033,
        "spider_question_id": 3490,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "query": "db.employees.aggregate([ { $group: { _id: \"$JOB_ID\", avgSalary: { $avg: \"$SALARY\" } }}, { $match: { avgSalary: { $gt: 8000 } }}, { $project: { JOB_ID: \"$_id\" }} ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: \"$JOB_ID\", avgSalary: { $avg: \"$SALARY\" } }}, { $match: { avgSalary: { $gt: 8000 } }}, { $project: { JOB_ID: \"$_id\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2034,
        "spider_question_id": 3491,
        "db_id": "hr_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "db.employees.aggregate([ { $group: { _id: \"$JOB_ID\", averageSalary: { $avg: \"$SALARY\" } } }, { $match: { averageSalary: { $gt: 8000 } } }, { $project: { job_id: \"$_id\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: \"$JOB_ID\", averageSalary: { $avg: \"$SALARY\" } } }, { $match: { averageSalary: { $gt: 8000 } } }, { $project: { job_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2035,
        "spider_question_id": 3494,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"dept\" } }, { $match: { \"dept.DEPARTMENT_NAME\": \"Finance\" } }, { $project: { FIRST_NAME: 1, JOB_ID: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"dept\" } }, { $match: { \"dept.DEPARTMENT_NAME\": \"Finance\" } }, { $project: { FIRST_NAME: 1, JOB_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2036,
        "spider_question_id": 3495,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department\" } }, { $match: { \"department.DEPARTMENT_NAME\": \"Finance\" } }, { $project: { FIRST_NAME: 1, JOB_ID: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department\" } }, { $match: { \"department.DEPARTMENT_NAME\": \"Finance\" } }, { $project: { FIRST_NAME: 1, JOB_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2037,
        "spider_question_id": 3496,
        "db_id": "hr_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "query": "db.employees.aggregate([ { $match: { $expr: { $and: [ { $gte: [\"$SALARY\", { $min: \"$SALARY\" }] }, { $lte: [\"$SALARY\", 2500] } ] } } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { $expr: { $and: [ { $gte: [\"$SALARY\", { $min: \"$SALARY\" }] }, { $lte: [\"$SALARY\", 2500] } ] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2038,
        "spider_question_id": 3512,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT department_id , SUM(salary) FROM employees GROUP BY department_id HAVING count(*) >= 2",
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "query": "db.employees.aggregate([ { $group: { _id: \"$DEPARTMENT_ID\", totalSalary: { $sum: \"$SALARY\" }, numOfEmployees: { $sum: 1 } }}, { $match: { numOfEmployees: { $gte: 2 } }}, { $project: { department_id: \"$_id\", totalSalary: 1 }} ])",
        "gpt4 answer": "db.employees.aggregate([ { $group: { _id: \"$DEPARTMENT_ID\", totalSalary: { $sum: \"$SALARY\" }, numOfEmployees: { $sum: 1 } }}, { $match: { numOfEmployees: { $gte: 2 } }}, { $project: { department_id: \"$_id\", totalSalary: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2039,
        "spider_question_id": 3521,
        "db_id": "hr_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name , T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'",
        "question": "What are the full names and cities of employees who have the letter Z in their first names?",
        "query": "db.employees.aggregate([ { $match: { FIRST_NAME: /z/i } }, { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department\" } }, { $unwind: \"$department\" }, { $lookup: { from: \"locations\", localField: \"department.LOCATION_ID\", foreignField: \"LOCATION_ID\", as: \"location\" } }, { $unwind: \"$location\" }, { $project: { FIRST_NAME: 1, LAST_NAME: 1, CITY: \"$location.CITY\" } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $match: { FIRST_NAME: /z/i } }, { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department\" } }, { $unwind: \"$department\" }, { $lookup: { from: \"locations\", localField: \"department.LOCATION_ID\", foreignField: \"LOCATION_ID\", as: \"location\" } }, { $unwind: \"$location\" }, { $project: { FIRST_NAME: 1, LAST_NAME: 1, CITY: \"$location.CITY\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2040,
        "spider_question_id": 3526,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
        "question": "display the department name and number of employees in each of the department.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", numberOfEmployees: { $sum: 1 } } }, { $project: { department_name: \"$_id\", numberOfEmployees: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", numberOfEmployees: { $sum: 1 } } }, { $project: { department_name: \"$_id\", numberOfEmployees: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2041,
        "spider_question_id": 3527,
        "db_id": "hr_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT department_name , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
        "question": "What are the department names and how many employees work in each of them?",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", numberOfEmployees: { $sum: 1 } } }, { $project: { department_name: \"$_id\", numberOfEmployees: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.DEPARTMENT_NAME\", numberOfEmployees: { $sum: 1 } } }, { $project: { department_name: \"$_id\", numberOfEmployees: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2042,
        "spider_question_id": 3528,
        "db_id": "hr_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $lookup: { from: \"locations\", localField: \"department_info.LOCATION_ID\", foreignField: \"LOCATION_ID\", as: \"location_info\" } }, { $unwind: \"$location_info\" }, { $match: { \"location_info.CITY\": \"London\" } }, { $project: { FIRST_NAME: 1, LAST_NAME: 1, SALARY: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $lookup: { from: \"locations\", localField: \"department_info.LOCATION_ID\", foreignField: \"LOCATION_ID\", as: \"location_info\" } }, { $unwind: \"$location_info\" }, { $match: { \"location_info.CITY\": \"London\" } }, { $project: { FIRST_NAME: 1, LAST_NAME: 1, SALARY: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2043,
        "spider_question_id": 3529,
        "db_id": "hr_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name , last_name , salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'",
        "question": "What are full names and salaries of employees working in the city of London?",
        "query": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department\" } }, { $unwind: \"$department\" }, { $lookup: { from: \"locations\", localField: \"department.LOCATION_ID\", foreignField: \"LOCATION_ID\", as: \"location\" } }, { $unwind: \"$location\" }, { $match: { \"location.CITY\": \"London\" } }, { $project: { FIRST_NAME: 1, LAST_NAME: 1, SALARY: 1 } } ])",
        "gpt4 answer": "db.employees.aggregate([ { $lookup: { from: \"departments\", localField: \"DEPARTMENT_ID\", foreignField: \"DEPARTMENT_ID\", as: \"department\" } }, { $unwind: \"$department\" }, { $lookup: { from: \"locations\", localField: \"department.LOCATION_ID\", foreignField: \"LOCATION_ID\", as: \"location\" } }, { $unwind: \"$location\" }, { $match: { \"location.CITY\": \"London\" } }, { $project: { FIRST_NAME: 1, LAST_NAME: 1, SALARY: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2044,
        "spider_question_id": 3530,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "question": "What is the name of the song that was released in the most recent year?",
        "query": "db.song.find({}, { song_name: 1, releasedate: 1 }).sort({ releasedate: -1 }).limit(1)",
        "gpt4 answer": "db.song.find({}, { song_name: 1, releasedate: 1 }).sort({ releasedate: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2045,
        "spider_question_id": 3531,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "question": "What is the name of the song that was released most recently?",
        "query": "db.song.find({}, {song_name: 1, releasedate: 1}).sort({releasedate: -1}).limit(1)",
        "gpt4 answer": "db.song.find({}, { song_name: 1, releasedate: 1 }).sort({ releasedate: -1 }).limit(1)",
        "deepseek answer": "db.song.find({}, {song_name: 1, releasedate: 1}).sort({releasedate: -1}).limit(1)"
    },
    {
        "question_id": 2046,
        "spider_question_id": 3532,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "question": "What is the id of the longest song?",
        "query": "db.files.find({}, {f_id: 1}).sort({duration: -1}).limit(1)",
        "gpt4 answer": "db.files.find({}, {f_id: 1}).sort({duration: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2047,
        "spider_question_id": 3533,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "question": "Find the id of the song that lasts the longest.",
        "query": "db.files.find({}, {f_id: 1}).sort({duration: -1}).limit(1)",
        "gpt4 answer": "db.files.find({}, {f_id: 1}).sort({duration: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2048,
        "spider_question_id": 3534,
        "db_id": "music_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT song_name FROM song WHERE languages = 'english'",
        "question": "Find the names of all English songs.",
        "query": "db.song.find({languages: 'english'}, {song_name: 1})",
        "gpt4 answer": "db.song.find({ languages: 'english' }, { song_name: 1 })",
        "deepseek answer": "db.song.find({languages: 'english'}, {song_name: 1})"
    },
    {
        "question_id": 2049,
        "spider_question_id": 3535,
        "db_id": "music_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT song_name FROM song WHERE languages = 'english'",
        "question": "What are the names of all songs in English?",
        "query": "db.song.find({languages: 'english'}, {song_name: 1})",
        "gpt4 answer": "db.song.find({ languages: 'english' }, { song_name: 1 })",
        "deepseek answer": "db.song.find({languages: 'english'}, {song_name: 1})"
    },
    {
        "question_id": 2050,
        "spider_question_id": 3536,
        "db_id": "music_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT f_id FROM files WHERE formats = 'mp3'",
        "question": "What are the id of songs whose format is mp3.",
        "query": "db.files.find({ formats: 'mp3' }, { f_id: 1 })",
        "gpt4 answer": "db.files.find({ formats: 'mp3' }, { f_id: 1 })",
        "deepseek answer": "db.files.find({ formats: 'mp3' }, { f_id: 1 })"
    },
    {
        "question_id": 2051,
        "spider_question_id": 3537,
        "db_id": "music_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT f_id FROM files WHERE formats = 'mp3'",
        "question": "What are the id of all the files in mp3 format?",
        "query": "db.files.find({ formats: 'mp3' }, { f_id: 1 })",
        "gpt4 answer": "db.files.find({ formats: 'mp3' }, { f_id: 1 })",
        "deepseek answer": "db.files.find({ formats: 'mp3' }, { f_id: 1 })"
    },
    {
        "question_id": 2052,
        "spider_question_id": 3538,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9",
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.rating\": { $gt: 9 } } }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.rating\": { $gt: 9 } } }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2053,
        "spider_question_id": 3539,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9",
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.rating\": { $gt: 9 } } }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.rating\": { $gt: 9 } } }, { $group: { _id: { artist_name: \"$artist_name\", country: \"$country\" } } }, { $project: { artist_name: \"$_id.artist_name\", country: \"$_id.country\" } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.rating\": { $gt: 9 } } }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2054,
        "spider_question_id": 3540,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "query": "db.song.aggregate([ { $match: { resolution: { $lt: 800 } } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $project: { file_size: \"$files_info.file_size\", formats: \"$files_info.formats\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { resolution: { $lt: 800 } } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"fileData\" } }, { $unwind: \"$fileData\" }, { $project: { file_size: \"$fileData.file_size\", formats: \"$fileData.formats\" } }, { $group: { _id: { file_size: \"$file_size\", formats: \"$formats\" } } }, { $project: { file_size: \"$_id.file_size\", formats: \"$_id.formats\" } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { resolution: { $lt: 800 } } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $project: { file_size: \"$files_info.file_size\", formats: \"$files_info.formats\" } } ])"
    },
    {
        "question_id": 2055,
        "spider_question_id": 3541,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800",
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "query": "db.files.aggregate([ { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 800 } } }, { $project: { file_size: 1, formats: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { resolution: { $lt: 800 } } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_details\" } }, { $unwind: \"$file_details\" }, { $project: { file_size: \"$file_details.file_size\", formats: \"$file_details.formats\" } }, { $group: { _id: { file_size: \"$file_size\", formats: \"$formats\" } } }, { $project: { file_size: \"$_id.file_size\", formats: \"$_id.formats\" } } ])",
        "deepseek answer": "db.files.aggregate([ { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 800 } } }, { $project: { file_size: 1, formats: 1 } } ])"
    },
    {
        "question_id": 2056,
        "spider_question_id": 3542,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the name of the artist who produced the shortest song?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $sort: { \"files_info.duration\": 1 } }, { $limit: 1 }, { $project: { artist_name: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $sort: { \"file_info.duration\": 1 } }, { $limit: 1 }, { $project: { \"artist_name\": 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $sort: { \"files_info.duration\": 1 } }, { $limit: 1 }, { $project: { artist_name: 1 } } ])"
    },
    {
        "question_id": 2057,
        "spider_question_id": 3543,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1",
        "question": "What are the names of the artists who sang the shortest song?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $sort: { \"files_info.duration\": 1 } }, { $limit: 1 }, { $project: { artist_name: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $sort: { \"file_info.duration\": 1 } }, { $limit: 1 }, { $project: { artist_name: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $sort: { \"files_info.duration\": 1 } }, { $limit: 1 }, { $project: { artist_name: 1 } } ])"
    },
    {
        "question_id": 2058,
        "spider_question_id": 3544,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.rating\": -1 } }, { $limit: 3 }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $sort: { \"songs.rating\": -1 } }, { $limit: 3 }, { $project: { artist_name: 1, country: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.rating\": -1 } }, { $limit: 3 }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2059,
        "spider_question_id": 3545,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.rating\": -1 } }, { $limit: 3 }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $sort: { rating: -1 } }, { $limit: 3 }, { $lookup: { from: \"artist\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"artist_info\" } }, { $unwind: \"$artist_info\" }, { $project: { artist_name: \"$artist_info.artist_name\", country: \"$artist_info.country\" } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.rating\": -1 } }, { $limit: 3 }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2060,
        "spider_question_id": 3546,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM files WHERE duration LIKE '4:%'",
        "question": "How many songs have 4 minute duration?",
        "query": "db.files.aggregate([ { $match: { duration: /^4:/ } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { duration: /^4:/ } }, { $count: \"total\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2061,
        "spider_question_id": 3547,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM files WHERE duration LIKE '4:%'",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "query": "db.files.aggregate([ { $match: { duration: /^4:/ } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { duration: /^4:/ } }, { $count: \"count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2062,
        "spider_question_id": 3550,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female'",
        "question": "What is the average rating of songs produced by female artists?",
        "query": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: null, avgRating: { $avg: \"$songs.rating\" } } }, { $project: { avgRating: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { gender: 'Female' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: null, averageRating: { $avg: \"$songs.rating\" } } }, { $project: { averageRating: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: null, avgRating: { $avg: \"$songs.rating\" } } }, { $project: { avgRating: 1 } } ])"
    },
    {
        "question_id": 2063,
        "spider_question_id": 3551,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female'",
        "question": "How many songs, on average, are sung by a female artist?",
        "query": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: null, avgRating: { $avg: \"$songs.rating\" } } } , { $project: { avgRating:1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $group: { _id: null, avgRating: { $avg: \"$songs.rating\" } } } , { $project: { avgRating:1 } }])"
    },
    {
        "question_id": 2064,
        "spider_question_id": 3552,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the most popular file format?",
        "query": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { formats: \"$_id\" } } ])",
        "gpt4 answer": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { formats: \"$_id\" } } ])",
        "deepseek answer": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { formats: \"$_id\" } } ])"
    },
    {
        "question_id": 2065,
        "spider_question_id": 3553,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Find the file format that is used by the most files.",
        "query": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { formats: \"$_id\" } } ])",
        "gpt4 answer": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { formats: \"$_id\" } } ])"
    },
    {
        "question_id": 2066,
        "spider_question_id": 3554,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT artist_name FROM song WHERE languages = 'english'",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "db.artist.aggregate([ { $match: { country: \"UK\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $match: { \"song_info.languages\": \"english\" } }, { $project: { artist_name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { country: 'UK' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"uk_english_songs\" }}, { $unwind: \"$uk_english_songs\" }, { $match: { \"uk_english_songs.languages\": \"english\" } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { country: \"UK\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $match: { \"song_info.languages\": \"english\" } }, { $project: { artist_name: 1 } } ])"
    },
    {
        "question_id": 2067,
        "spider_question_id": 3555,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT artist_name FROM song WHERE languages = 'english'",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "db.artist.aggregate([ { $match: { country: \"UK\", artist_name: { $in: db.song.distinct(\"artist_name\", { languages: \"english\" }) } } }, { $project: { artist_name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { country: 'UK' } }, { $lookup: { from: 'song', localField: 'artist_name', foreignField: 'artist_name', as: 'songs' } }, { $unwind: '$songs' }, { $match: { 'songs.languages': 'english' } }, { $group: { _id: '$artist_name' } }, { $project: { artist_name: '$_id' } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { country: \"UK\", artist_name: { $in: db.song.distinct(\"artist_name\", { languages: \"english\" }) } } }, { $project: { artist_name: 1 } } ])"
    },
    {
        "question_id": 2068,
        "spider_question_id": 3556,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "query": "db.files.aggregate([ { $match: { formats: \"mp4\" } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 1000 } } }, { $project: { f_id: 1 } } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { formats: \"mp4\" } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 1000 } } }, { $project: { f_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2069,
        "spider_question_id": 3557,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "query": "db.files.find( { formats: \"mp4\", f_id: { $in: db.song.distinct( \"f_id\", { resolution: { $lt: 1000 } } ) } }, { f_id: 1 } )",
        "gpt4 answer": "db.files.aggregate([ { $match: { formats: 'mp4' } }, { $lookup: { from: 'song', localField: 'f_id', foreignField: 'f_id', as: 'song_info' } }, { $unwind: '$song_info' }, { $match: { 'song_info.resolution': { $lt: 1000 } } }, { $project: { f_id: 1 } } ])",
        "deepseek answer": "db.files.find( { formats: \"mp4\", f_id: { $in: db.song.distinct( \"f_id\", { resolution: { $lt: 1000 } } ) } }, { f_id: 1 } )"
    },
    {
        "question_id": 2070,
        "spider_question_id": 3558,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' AND T2.languages = 'bangla'",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "query": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.languages\": \"bangla\" } }, { $project: { country: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.languages\": \"bangla\" } }, { $project: { country: 1 } } ])"
    },
    {
        "question_id": 2071,
        "spider_question_id": 3559,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' AND T2.languages = 'bangla'",
        "question": "What countries are the female artists who sung in the language Bangla from?",
        "query": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.languages\": \"bangla\" } }, { $project: { country: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { gender: \"Female\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.languages\": \"bangla\" } }, { $project: { country: 1 } } ])"
    },
    {
        "question_id": 2072,
        "spider_question_id": 3562,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , gender FROM artist GROUP BY gender",
        "question": "What is the number of artists for each gender?",
        "query": "db.artist.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.artist.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2073,
        "spider_question_id": 3563,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , gender FROM artist GROUP BY gender",
        "question": "How many artists are male and how many are female?",
        "query": "db.artist.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.artist.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2074,
        "spider_question_id": 3564,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(rating) , languages FROM song GROUP BY languages",
        "question": "What is the average rating of songs for each language?",
        "query": "db.song.aggregate([ { $group: { _id: \"$languages\", averageRating: { $avg: \"$rating\" } } } ])",
        "gpt4 answer": "db.song.aggregate([ { $group: { _id: \"$languages\", averageRating: { $avg: \"$rating\" } } }, { $project: { languages: \"$_id\", averageRating: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $group: { _id: \"$languages\", averageRating: { $avg: \"$rating\" } } } ])"
    },
    {
        "question_id": 2075,
        "spider_question_id": 3565,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(rating) , languages FROM song GROUP BY languages",
        "question": "What is the average song rating for each language?",
        "query": "db.song.aggregate([ { $group: { _id: \"$languages\", averageRating: { $avg: \"$rating\" } } } ])",
        "gpt4 answer": "db.song.aggregate([ { $group: { _id: \"$languages\", averageRating: { $avg: \"$rating\" } } }, { $project: { languages: \"$_id\", avgRating: \"$averageRating\" } } ])",
        "deepseek answer": "db.song.aggregate([ { $group: { _id: \"$languages\", averageRating: { $avg: \"$rating\" } } } ])"
    },
    {
        "question_id": 2076,
        "spider_question_id": 3566,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.resolution\": 1 } }, { $limit: 1 }, { $project: { gender: 1, artist_name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.resolution\": 1 } }, { $limit: 1 }, { $project: { gender: 1, artist_name: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.resolution\": 1 } }, { $limit: 1 }, { $project: { gender: 1, artist_name: 1 } } ])"
    },
    {
        "question_id": 2077,
        "spider_question_id": 3567,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "question": "What is the gender and name of the artist who sang the song with the smallest resolution?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.resolution\": 1 } }, { $limit: 1 }, { $project: { gender: 1, artist_name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $project: { gender: 1, artist_name: 1, song_resolution: \"$songs.resolution\" } }, { $sort: { song_resolution: 1 } }, { $limit: 1 }, { $project: { gender: 1, artist_name: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $sort: { \"song_info.resolution\": 1 } }, { $limit: 1 }, { $project: { gender: 1, artist_name: 1 } } ])"
    },
    {
        "question_id": 2078,
        "spider_question_id": 3568,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , formats FROM files GROUP BY formats",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "query": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $project: { formats: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.files.aggregate([ { $group: { _id: \"$formats\", numberOfArtists: { $sum: 1 } } }, { $project: { formats: \"$_id\", numberOfArtists: 1 } } ])",
        "deepseek answer": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } }, { $project: { formats: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2079,
        "spider_question_id": 3569,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , formats FROM files GROUP BY formats",
        "question": "How many songs were released for each format?",
        "query": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.files.aggregate([ { $group: { _id: \"$formats\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2080,
        "spider_question_id": 3572,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = 'blues')",
        "question": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "query": "db.song.aggregate([ { $match: { rating: { $lt: db.song.findOne({ genre_is: 'blues' }).rating } } }, { $project: { song_name: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"song\", let: { genre_name: \"blues\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$genre_is\", \"$$genre_name\"] } ] } } }, { $group: { _id: null, max_rating: { $max: \"$rating\" } } } ], as: \"max_blues_rating\" } }, { $match: { $expr: { $lt: [\"$rating\", { $arrayElemAt: [\"$max_blues_rating.max_rating\", 0] }] } } }, { $project: { song_name: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { rating: { $lt: db.song.findOne({ genre_is: 'blues' }).rating } } }, { $project: { song_name: 1 } } ])"
    },
    {
        "question_id": 2081,
        "spider_question_id": 3573,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT max(rating) FROM song WHERE genre_is = 'blues')",
        "question": "What are the names of the songs that have a lower rating than at least one blues song?",
        "query": "db.song.find({rating: {$lt: db.song.findOne({genre_is: 'blues'}, {rating: 1}).rating}}, {song_name: 1})",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"song\", let: { genre: \"$genre_is\", songRating: \"$rating\" }, pipeline: [ { $match: { $expr: { $and: [{ $eq: [\"$genre_is\", \"blues\"] }] } } }, { $group: { _id: null, maxBluesRating: { $max: \"$rating\" } } } ], as: \"bluesInfo\" } }, { $match: { \"bluesInfo\": { $ne: [] } } }, { $project: { song_name: 1, songRating: \"$rating\", maxBluesRating: { $arrayElemAt: [\"$bluesInfo.maxBluesRating\", 0] } } }, { $match: { $expr: { $lt: [\"$songRating\", \"$maxBluesRating\"] } } }, { $project: { song_name: 1 } } ])",
        "deepseek answer": "db.song.find({rating: {$lt: db.song.findOne({genre_is: 'blues'}, {rating: 1}).rating}}, {song_name: 1})"
    },
    {
        "question_id": 2082,
        "spider_question_id": 3574,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE '%love%'",
        "question": "What is the name and country of origin of the artist who released a song that has 'love' in its title?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.song_name\": { $regex: /love/, $options: \"i\" } } }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.song_name\": /love/ } }, { $project: { artist_name: 1, country: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.song_name\": { $regex: /love/, $options: \"i\" } } }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2083,
        "spider_question_id": 3575,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE '%love%'",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.song_name\": { $regex: /.*love.*/, $options: \"i\" } } }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.song_name\": { $regex: \"love\", $options: \"i\" } } }, { $project: { artist_name: 1, country: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.song_name\": { $regex: /.*love.*/, $options: \"i\" } } }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2084,
        "spider_question_id": 3578,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT g_name , rating FROM genre ORDER BY g_name",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "query": "db.genre.find({}, { g_name: 1, rating: 1}).sort({g_name: 1})",
        "gpt4 answer": "db.genre.find({}, { g_name: 1, rating: 1 }).sort({ g_name: 1 })",
        "deepseek answer": "db.genre.find({}, { g_name: 1, rating: 1}).sort({g_name: 1})"
    },
    {
        "question_id": 2085,
        "spider_question_id": 3579,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT g_name , rating FROM genre ORDER BY g_name",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "query": "db.genre.find({}, { g_name: 1, rating: 1}).sort({g_name: 1})",
        "gpt4 answer": "db.genre.find({}, { g_name: 1, rating: 1 }).sort({ g_name: 1 })",
        "deepseek answer": "db.genre.find({}, { g_name: 1, rating: 1}).sort({g_name: 1})"
    },
    {
        "question_id": 2086,
        "spider_question_id": 3580,
        "db_id": "music_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT song_name FROM song ORDER BY resolution",
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "query": "db.song.find({}, { song_name: 1}).sort({resolution: 1})",
        "gpt4 answer": "db.song.find({}, { song_name: 1 }).sort({ resolution: 1 })",
        "deepseek answer": "db.song.find({}, { song_name: 1}).sort({resolution: 1})"
    },
    {
        "question_id": 2087,
        "spider_question_id": 3581,
        "db_id": "music_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT song_name FROM song ORDER BY resolution",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "query": "db.song.find({}, { song_name: 1}).sort({resolution: 1})",
        "gpt4 answer": "db.song.find({}, { \"song_name\": 1, \"_id\": 0 }).sort({ \"resolution\": 1 })",
        "deepseek answer": "db.song.find({}, { song_name: 1}).sort({resolution: 1})"
    },
    {
        "question_id": 2088,
        "spider_question_id": 3582,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' UNION SELECT f_id FROM song WHERE resolution > 720",
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "query": "db.files.aggregate([ { $match: { formats: 'mp4' } }, { $project: { f_id: 1 } }, { $unionWith: { coll: 'song', pipeline: [ { $match: { resolution: { $gt: 720 } } }, { $project: { f_id: 1 } } ] } }, { $group: { _id: '$f_id' } }, { $project: { f_id: '$_id' } } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { formats: 'mp4' } }, { $project: { f_id: 1 } }, { $unionWith: { coll: 'song', pipeline: [ { $match: { resolution: { $gt: 720 } } }, { $project: { f_id: 1 } } ] } }, { $group: { _id: '$f_id' } }, { $project: { f_id: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2089,
        "spider_question_id": 3583,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' UNION SELECT f_id FROM song WHERE resolution > 720",
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_files\" } }, { $match: { $or: [ { \"song_files.formats\": \"mp4\" }, { resolution: { $gt: 720 } } ] } }, { $project: { f_id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_files\" } }, { $match: { $or: [ { \"song_files.formats\": \"mp4\" }, { resolution: { $gt: 720 } } ] } }, { $project: { f_id: 1 } } ])"
    },
    {
        "question_id": 2090,
        "spider_question_id": 3584,
        "db_id": "music_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '4:%' UNION SELECT song_name FROM song WHERE languages = 'english'",
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $match: { $or: [ { \"files_info.duration\": { $regex: /^4:/ } }, { languages: \"english\" } ] } }, { $project: { song_name: 1 } } ])",
        "gpt4 answer": "db.files.aggregate([ { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $match: { $or: [ {\"duration\": /^4:/}, {\"song_info.languages\": \"english\"} ] } }, { $project: { \"song_info.song_name\": 1 } }, { $unwind: \"$song_info\" }, { $group: { _id: \"$song_info.song_name\" } } ])",
        "deepseek answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $match: { $or: [ { \"files_info.duration\": { $regex: /^4:/ } }, { languages: \"english\" } ] } }, { $project: { song_name: 1 } } ])"
    },
    {
        "question_id": 2091,
        "spider_question_id": 3585,
        "db_id": "music_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '4:%' UNION SELECT song_name FROM song WHERE languages = 'english'",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_data\" } }, { $match: { $or: [ { \"files_data.duration\": { $regex: /^4:/ } }, { languages: \"english\" } ] } }, { $project: { song_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_data\" } }, { $match: { $or: [ { \"files_data.duration\": { $regex: /^4:/ } }, { languages: \"english\" } ] } }, { $project: { song_name: 1 } } ])"
    },
    {
        "question_id": 2092,
        "spider_question_id": 3586,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the language used most often in the songs?",
        "query": "db.song.aggregate([ { $group: { _id: \"$languages\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { languages: \"$_id\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $group: { _id: \"$languages\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $group: { _id: \"$languages\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { languages: \"$_id\" } } ])"
    },
    {
        "question_id": 2093,
        "spider_question_id": 3587,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the languages that are used most often in songs?",
        "query": "db.song.aggregate([ { $group: { _id: \"$languages\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { languages: \"$_id\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $group: { _id: \"$languages\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $group: { _id: \"$languages\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { languages: \"$_id\" } } ])"
    },
    {
        "question_id": 2094,
        "spider_question_id": 3590,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' AND gender = 'Male'",
        "question": "What are the names of artists who are Male and are from UK?",
        "query": "db.artist.find({country: 'UK', gender: 'Male'}, {artist_name: 1})",
        "gpt4 answer": "db.artist.find({ country: 'UK', gender: 'Male' }, { artist_name: 1 })",
        "deepseek answer": "db.artist.find({country: 'UK', gender: 'Male'}, {artist_name: 1})"
    },
    {
        "question_id": 2095,
        "spider_question_id": 3591,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' AND gender = 'Male'",
        "question": "What are the names of all male British artists?",
        "query": "db.artist.find({country: 'UK', gender: 'Male'}, {artist_name: 1})",
        "gpt4 answer": "db.artist.find({ country: 'UK', gender: 'Male' }, { artist_name: 1 })",
        "deepseek answer": "db.artist.find({country: 'UK', gender: 'Male'}, {artist_name: 1})"
    },
    {
        "question_id": 2096,
        "spider_question_id": 3592,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "db.song.find( { $or: [ { genre_is: 'modern' }, { languages: 'english' } ] }, { song_name: 1 } )",
        "gpt4 answer": "db.song.find({ $or: [{ genre_is: 'modern'}, { languages: 'english' }] }, { song_name: 1 })",
        "deepseek answer": "db.song.find( { $or: [ { genre_is: 'modern' }, { languages: 'english' } ] }, { song_name: 1 } )"
    },
    {
        "question_id": 2097,
        "spider_question_id": 3593,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'",
        "question": "What are the names of the songs that are modern or sung in English?",
        "query": "db.song.find( { $or: [ { genre_is: 'modern' }, { languages: 'english' } ] }, { song_name: 1 } )",
        "gpt4 answer": "db.song.find({$or: [{genre_is: 'modern'}, {languages: 'english'}]}, { song_name: 1})",
        "deepseek answer": "db.song.find( { $or: [ { genre_is: 'modern' }, { languages: 'english' } ] }, { song_name: 1 } )"
    },
    {
        "question_id": 2098,
        "spider_question_id": 3594,
        "db_id": "music_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "query": "db.files.aggregate([ { $match: { formats: \"mp3\" } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 1000 } } }, { $project: { song_name: \"$song_info.song_name\" } } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { formats: 'mp3' } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 1000 } } }, { $project: { song_name: \"$song_info.song_name\" } } ])",
        "deepseek answer": "db.files.aggregate([ { $match: { formats: \"mp3\" } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.resolution\": { $lt: 1000 } } }, { $project: { song_name: \"$song_info.song_name\" } } ])"
    },
    {
        "question_id": 2099,
        "spider_question_id": 3595,
        "db_id": "music_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_data\" } }, { $match: { \"files_data.formats\": \"mp3\", resolution: { $lt: 1000 } } }, { $project: { song_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_data\" } }, { $match: { \"files_data.formats\": \"mp3\", resolution: { $lt: 1000 } } }, { $project: { song_name: 1 } } ])"
    },
    {
        "question_id": 2100,
        "spider_question_id": 3596,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english'",
        "question": "Return the names of singers who are from UK and released an English song.",
        "query": "db.artist.aggregate([ { $match: { country: \"UK\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $match: { \"song_info.languages\": \"english\" } }, { $project: { artist_name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { country: 'UK' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.languages\": \"english\" } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { country: \"UK\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"song_info\" } }, { $match: { \"song_info.languages\": \"english\" } }, { $project: { artist_name: 1 } } ])"
    },
    {
        "question_id": 2101,
        "spider_question_id": 3597,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english'",
        "question": "What are the names of all singers that are from the UK and released a song in English?",
        "query": "db.artist.aggregate([ { $match: { country: \"UK\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.languages\": \"english\" } }, { $project: { artist_name: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { country: 'UK' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.languages\": \"english\" } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { country: \"UK\" } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.languages\": \"english\" } }, { $project: { artist_name: 1 } } ])"
    },
    {
        "question_id": 2102,
        "spider_question_id": 3598,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(rating) , avg(resolution) FROM song WHERE languages = 'bangla'",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "query": "db.song.aggregate([ { $match: { languages: \"bangla\" } }, { $group: { _id: null, avgRating: { $avg: \"$rating\" }, avgResolution: { $avg: \"$resolution\" } } }, { $project: { avgRating: 1 , avgResolution:1} } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { languages: 'bangla' } }, { $group: { _id: null, avgRating: { $avg: \"$rating\" }, avgResolution: { $avg: \"$resolution\" } } }, { $project: { avgRating: 1, avgResolution: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { languages: \"bangla\" } }, { $group: { _id: null, avgRating: { $avg: \"$rating\" }, avgResolution: { $avg: \"$resolution\" } } }, { $project: { avgRating: 1 , avgResolution:1} } ])"
    },
    {
        "question_id": 2103,
        "spider_question_id": 3599,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(rating) , avg(resolution) FROM song WHERE languages = 'bangla'",
        "question": "What is the average rating and resolution of all bangla songs?",
        "query": "db.song.aggregate([ { $match: { languages: \"bangla\" } }, { $group: { _id: null, avgRating: { $avg: \"$rating\" }, avgResolution: { $avg: \"$resolution\" } } } , { $project: { avgRating:1, avgResolution:1} }])",
        "gpt4 answer": "db.song.aggregate([ { $match: { languages: \"bangla\" } }, { $group: { _id: null, avgRating: { $avg: \"$rating\" }, avgResolution: { $avg: \"$resolution\" } } }, { $project: { avgRating: 1, avgResolution: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { languages: \"bangla\" } }, { $group: { _id: null, avgRating: { $avg: \"$rating\" }, avgResolution: { $avg: \"$resolution\" } } } , { $project: { avgRating:1, avgResolution:1} }])"
    },
    {
        "question_id": 2104,
        "spider_question_id": 3600,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T2.resolution) , min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '3:%'",
        "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "query": "db.files.aggregate([ { $match: { duration: /^3:/ } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $group: { _id: null, maxResolution: { $max: \"$song_info.resolution\" }, minResolution: { $min: \"$song_info.resolution\" } } }, { $project: { maxResolution: 1, minResolution: 1 } } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { duration: /^3:/ } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $group: { _id: null, maxResolution: { $max: \"$song_info.resolution\" }, minResolution: { $min: \"$song_info.resolution\" } } }, { $project: { maxResolution: 1, minResolution: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2105,
        "spider_question_id": 3601,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T2.resolution) , min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '3:%'",
        "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "query": "db.files.aggregate([ { $match: { duration: /^3:/ } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $group: { _id: null, max_resolution: { $max: \"$song_info.resolution\" }, min_resolution: { $min: \"$song_info.resolution\" } } }, { $project: { max_resolution: 1, min_resolution: 1 } } ])",
        "gpt4 answer": "db.files.aggregate([ { $match: { duration: /^3:/ } }, { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $group: { _id: null, max_resolution: { $max: \"$song_info.resolution\" }, min_resolution: { $min: \"$song_info.resolution\" } } }, { $project: { max_resolution: 1, min_resolution: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2106,
        "spider_question_id": 3602,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T1.duration) , max(T2.resolution) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $group: { _id: \"$languages\", maxDuration: { $max: \"$file_info.duration\" }, maxResolution: { $max: \"$resolution\" } } }, { $sort: { _id: 1 } }, { $project: { languages: \"$_id\", maxDuration: 1, maxResolution: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $group: { _id: \"$languages\", maxDuration: { $max: \"$file_info.duration\" }, maxResolution: { $max: \"$resolution\" } } }, { $sort: { _id: 1 } }, { $project: { languages: \"$_id\", maxDuration: 1, maxResolution: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2107,
        "spider_question_id": 3603,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T1.duration) , max(T2.resolution) , T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "question": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_details\" } }, { $unwind: \"$file_details\" }, { $group: { _id: \"$languages\", maxDuration: { $max: \"$file_details.duration\" }, maxResolution: { $max: \"$resolution\" } } }, { $sort: { \"_id\": 1 } }, { $project: { languages: \"$_id\", maxDuration: 1, maxResolution: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_details\" } }, { $unwind: \"$file_details\" }, { $group: { _id: \"$languages\", maxDuration: { $max: \"$file_details.duration\" }, maxResolution: { $max: \"$resolution\" } } }, { $sort: { \"_id\": 1 } }, { $project: { languages: \"$_id\", maxDuration: 1, maxResolution: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2108,
        "spider_question_id": 3604,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT min(T1.duration) , min(T2.rating) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $group: { _id: \"$genre_is\", shortest_duration: { $min: \"$file_info.duration\" }, lowest_rating: { $min: \"$rating\" } } }, { $sort: { _id: 1 } }, { $project: { genre_is: \"$_id\", shortest_duration: 1, lowest_rating: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $group: { _id: \"$genre_is\", shortest_duration: { $min: \"$file_info.duration\" }, lowest_rating: { $min: \"$rating\" } } }, { $sort: { _id: 1 } }, { $project: { genre_is: \"$_id\", shortest_duration: 1, lowest_rating: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2109,
        "spider_question_id": 3605,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT min(T1.duration) , min(T2.rating) , T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
        "query": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $group: { _id: \"$genre_is\", shortestDuration: {$min: \"$file_info.duration\"}, lowestRating: {$min: \"$rating\"} } }, { $sort: { _id: 1 } }, { $project: { genre: \"$_id\", shortestDuration: 1, lowestRating: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $group: { _id: \"$genre_is\", shortestDuration: {$min: \"$file_info.duration\"}, lowestRating: {$min: \"$rating\"} } }, { $sort: { _id: 1 } }, { $project: { genre: \"$_id\", shortestDuration: 1, lowestRating: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2110,
        "spider_question_id": 3606,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english' GROUP BY T2.artist_name HAVING count(*) >= 1",
        "question": "Find the names and number of works of all artists who have at least one English songs.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.languages\": \"english\" } }, { $project: { artist_name: 1, song_count: { $size: \"$songs\" } } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.languages\": \"english\" } }, { $group: { _id: \"$artist_name\", numberOfWorks: { $sum: 1 } } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.languages\": \"english\" } }, { $project: { artist_name: 1, song_count: { $size: \"$songs\" } } } ])"
    },
    {
        "question_id": 2111,
        "spider_question_id": 3607,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english' GROUP BY T2.artist_name HAVING count(*) >= 1",
        "question": "What are the names and number of works for all artists who have sung at least one song in English?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.languages\": \"english\" } }, { $project: { artist_name: 1, song_count: { $size: \"$songs\" } } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.languages\": \"english\" } }, { $group: { _id: \"$artist_name\", number_of_works: { $sum: 1 } } }, { $project: { artist_name: \"$_id\", number_of_works: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.languages\": \"english\" } }, { $project: { artist_name: 1, song_count: { $size: \"$songs\" } } } ])"
    },
    {
        "question_id": 2112,
        "spider_question_id": 3608,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1",
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.resolution\": { $gt: 900 } } }, { $project: { artist_name: 1, country: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.resolution\": { $gt: 900 } } }, { $group: { _id: \"$artist_name\", country: { $first: \"$country\" } } }, { $project: { artist_name: \"$_id\", country: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.resolution\": { $gt: 900 } } }, { $project: { artist_name: 1, country: 1 } } ])"
    },
    {
        "question_id": 2113,
        "spider_question_id": 3609,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count(*) >= 1",
        "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.resolution\": { $gt: 900 } } }, { $group: { _id: \"$artist_name\", country: { $first: \"$country\" } } }, { $project: { artist_name: \"$_id\", country: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.resolution\": { $gt: 900 } } }, { $group: { _id: \"$artist_name\", country: { $first: \"$country\" } } }, { $project: { artist_name: \"$_id\", country: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.resolution\": { $gt: 900 } } }, { $group: { _id: \"$artist_name\", country: { $first: \"$country\" } } }, { $project: { artist_name: \"$_id\", country: 1 } } ])"
    },
    {
        "question_id": 2114,
        "spider_question_id": 3614,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')",
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "query": "db.song.aggregate([ { $match: { languages: 'english' } }, { $group: { _id: null, minRating: { $min: \"$rating\" } } }, { $lookup: { from: \"song\", let: { englishMinRating: \"$minRating\" }, pipeline: [ { $match: { $expr: { $lt: [\"$rating\", \"$$englishMinRating\"] } } }, { $project: { song_name: 1 } } ], as: \"songsBelowEnglishRating\" } }, { $unwind: \"$songsBelowEnglishRating\" }, { $replaceRoot: { newRoot: \"$songsBelowEnglishRating\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { languages: 'english' } }, { $group: { _id: null, minRating: { $min: \"$rating\" } } }, { $lookup: { from: \"song\", let: { englishMinRating: \"$minRating\" }, pipeline: [ { $match: { $expr: { $lt: [\"$rating\", \"$$englishMinRating\"] } } }, { $project: { song_name: 1 } } ], as: \"songsBelowEnglishRating\" } }, { $unwind: \"$songsBelowEnglishRating\" }, { $replaceRoot: { newRoot: \"$songsBelowEnglishRating\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2115,
        "spider_question_id": 3615,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')",
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "query": "db.song.aggregate([ { $match: { rating: { $lt: db.song.aggregate([ { $match: { languages: \"english\" } }, { $group: { _id: null, minRating: { $min: \"$rating\" } } } ]).toArray()[0].minRating } } }, { $project: { song_name: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { languages: 'english' } }, { $group: { _id: null, minRating: { $min: '$rating' } } }, { $lookup: { from: 'song', let: { minRating: '$minRating' }, pipeline: [ { $match: { $expr: { $lt: ['$rating', '$$minRating'] } } }, { $project: { song_name: 1 } } ], as: 'songsBelowMinRating' } }, { $unwind: '$songsBelowMinRating' }, { $replaceRoot: { newRoot: '$songsBelowMinRating' } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { rating: { $lt: db.song.aggregate([ { $match: { languages: \"english\" } }, { $group: { _id: null, minRating: { $min: \"$rating\" } } } ]).toArray()[0].minRating } } }, { $project: { song_name: 1 } } ])"
    },
    {
        "question_id": 2116,
        "spider_question_id": 3618,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = 'modern')",
        "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "query": "db.song.aggregate([ { $match: { genre_is: \"modern\" } }, { $group: { _id: null, avgResolution: { $avg: \"$resolution\" } } }, { $lookup: { from: \"song\", let: { avgResolution: \"$avgResolution\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$resolution\", \"$$avgResolution\" ] } } }, { $project: { f_id: 1 } } ], as: \"songs\" } }, { $unwind: \"$songs\" }, { $replaceRoot: { newRoot: \"$songs\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { genre_is: 'modern' } }, { $group: { _id: null, avgResolution: { $avg: \"$resolution\" } } }, { $lookup: { from: \"song\", let: { avgResolution: \"$avgResolution\" }, pipeline: [ { $match: { $expr: { $gt: [\"$resolution\", \"$$avgResolution\"] } } }, { $project: { f_id: 1 } } ], as: \"songs_higher_resolution\" } }, { $unwind: \"$songs_higher_resolution\" }, { $replaceRoot: { newRoot: \"$songs_higher_resolution\" } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { genre_is: \"modern\" } }, { $group: { _id: null, avgResolution: { $avg: \"$resolution\" } } }, { $lookup: { from: \"song\", let: { avgResolution: \"$avgResolution\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$resolution\", \"$$avgResolution\" ] } } }, { $project: { f_id: 1 } } ], as: \"songs\" } }, { $unwind: \"$songs\" }, { $replaceRoot: { newRoot: \"$songs\" } } ])"
    },
    {
        "question_id": 2117,
        "spider_question_id": 3619,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT f_id FROM song WHERE resolution > (SELECT avg(resolution) FROM song WHERE genre_is = 'modern')",
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "query": "db.song.aggregate([ { $match: { genre_is: \"modern\" } }, { $group: { _id: null, avgResolution: { $avg: \"$resolution\" } } }, { $lookup: { from: \"song\", let: { avgResolution: \"$avgResolution\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$resolution\", \"$$avgResolution\" ] } } }, { $project: { f_id: 1 } } ], as: \"higherResolutionSongs\" } }, { $unwind: \"$higherResolutionSongs\" }, { $replaceRoot: { newRoot: \"$higherResolutionSongs\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { genre_is: 'modern' } }, { $group: { _id: null, average_resolution: { $avg: '$resolution' } } }, { $lookup: { from: 'song', let: { avg_resolution: '$average_resolution' }, pipeline: [ { $match: { $expr: { $gt: ['$resolution', '$$avg_resolution'] } } }, { $project: { f_id: 1 } } ], as: 'songs_above_avg' } }, { $unwind: '$songs_above_avg' }, { $replaceRoot: { newRoot: '$songs_above_avg' } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { genre_is: \"modern\" } }, { $group: { _id: null, avgResolution: { $avg: \"$resolution\" } } }, { $lookup: { from: \"song\", let: { avgResolution: \"$avgResolution\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$resolution\", \"$$avgResolution\" ] } } }, { $project: { f_id: 1 } } ], as: \"higherResolutionSongs\" } }, { $unwind: \"$higherResolutionSongs\" }, { $replaceRoot: { newRoot: \"$higherResolutionSongs\" } } ])"
    },
    {
        "question_id": 2118,
        "spider_question_id": 3622,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT f_id , genre_is , artist_name FROM song WHERE languages = 'english' ORDER BY rating",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "db.song.find( { languages: 'english' }, { f_id: 1, genre_is: 1, artist_name: 1 } ).sort({ rating: 1 })",
        "gpt4 answer": "db.song.find( { languages: 'english' }, { f_id: 1, genre_is: 1, artist_name: 1 } ).sort({ rating: 1 })",
        "deepseek answer": "db.song.find( { languages: 'english' }, { f_id: 1, genre_is: 1, artist_name: 1 } ).sort({ rating: 1 })"
    },
    {
        "question_id": 2119,
        "spider_question_id": 3623,
        "db_id": "music_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT f_id , genre_is , artist_name FROM song WHERE languages = 'english' ORDER BY rating",
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "query": "db.song.find( { languages: \"english\" }, { f_id: 1, genre_is: 1, artist_name: 1 } ).sort({ rating: 1 })",
        "gpt4 answer": "db.song.find( { languages: 'english' }, { f_id: 1, genre_is: 1, artist_name: 1 } ).sort({ rating: 1 })",
        "deepseek answer": "db.song.find( { languages: \"english\" }, { f_id: 1, genre_is: 1, artist_name: 1 } ).sort({ rating: 1 })"
    },
    {
        "question_id": 2120,
        "spider_question_id": 3624,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = 'pop' ORDER BY T2.song_name",
        "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "query": "db.song.aggregate([ { $match: { genre_is: \"pop\" } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $project: { duration: \"$files_info.duration\", file_size: \"$files_info.file_size\", formats: \"$files_info.formats\" } }, { $sort: { song_name: 1 } } ])",
        "gpt4 answer": "db.files.aggregate([ { $lookup: { from: \"song\", localField: \"f_id\", foreignField: \"f_id\", as: \"song_info\" } }, { $unwind: \"$song_info\" }, { $match: { \"song_info.genre_is\": \"pop\" } }, { $sort: { \"song_info.song_name\": 1 } }, { $project: { duration: 1, file_size: 1, formats: 1 } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { genre_is: \"pop\" } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"files_info\" } }, { $unwind: \"$files_info\" }, { $project: { duration: \"$files_info.duration\", file_size: \"$files_info.file_size\", formats: \"$files_info.formats\" } }, { $sort: { song_name: 1 } } ])"
    },
    {
        "question_id": 2121,
        "spider_question_id": 3625,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.duration , T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = 'pop' ORDER BY T2.song_name",
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "query": "db.song.aggregate([ { $match: { genre_is: \"pop\" } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $project: { duration: \"$file_info.duration\", file_size: \"$file_info.file_size\", formats: \"$file_info.formats\" } }, { $sort: { song_name: 1 } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { genre_is: 'pop' } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"fileData\" } }, { $unwind: \"$fileData\" }, { $sort: { song_name: 1 } }, { $project: { duration: \"$fileData.duration\", file_size: \"$fileData.file_size\", formats: \"$fileData.formats\" } } ])",
        "deepseek answer": "db.song.aggregate([ { $match: { genre_is: \"pop\" } }, { $lookup: { from: \"files\", localField: \"f_id\", foreignField: \"f_id\", as: \"file_info\" } }, { $unwind: \"$file_info\" }, { $project: { duration: \"$file_info.duration\", file_size: \"$file_info.file_size\", formats: \"$file_info.formats\" } }, { $sort: { song_name: 1 } } ])"
    },
    {
        "question_id": 2122,
        "spider_question_id": 3626,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT artist_name FROM song WHERE languages = 'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "query": "db.song.aggregate([ { $match: { languages: 'english', rating: { $lte: 8 } } }, { $group: { _id: '$artist_name' } }, { $lookup: { from: 'song', let: { artist_name: '$_id' }, pipeline: [ { $match: { $expr: { $and: [ { $gt: ['$rating', 8] }, { $eq: ['$artist_name', '$$artist_name'] } ] } } }, { $project: { artist_name: 1 } } ], as: 'high_rated_songs' } }, { $match: { high_rated_songs: { $eq: [] } } }, { $project: { artist_name: '$_id' } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { languages: 'english', rating: { $lte: 8 } } }, { $group: { _id: '$artist_name' } }, { $lookup: { from: 'song', let: { artist_name: '$_id' }, pipeline: [ { $match: { $expr: { $and: [ { $gt: ['$rating', 8] }, { $eq: ['$artist_name', '$$artist_name'] } ] } } }, { $project: { artist_name: 1 } } ], as: 'high_rated_songs' } }, { $match: { high_rated_songs: { $eq: [] } } }, { $project: { artist_name: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2123,
        "spider_question_id": 3627,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT artist_name FROM song WHERE languages = 'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "query": "db.song.aggregate([ { $match: { languages: 'english', rating: { $not: { $gt: 8 } } } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "gpt4 answer": "db.song.aggregate([ { $match: { languages: 'english', rating: { $not: { $gt: 8 } } } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2124,
        "spider_question_id": 3628,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT artist_name FROM artist WHERE country = 'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "query": "db.artist.aggregate([ { $match: { country: 'Bangladesh' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.rating\": { $lte: 7 } } }, { $group: { _id: \"$artist_name\", maxRating: { $max: \"$songs.rating\" } } }, { $match: { maxRating: { $lte: 7 } } }, { $project: { artist_name: \"$_id\" } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { country: 'Bangladesh' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $unwind: \"$songs\" }, { $match: { \"songs.rating\": { $lte: 7 } } }, { $group: { _id: \"$artist_name\", maxRating: { $max: \"$songs.rating\" } } }, { $match: { maxRating: { $lte: 7 } } }, { $project: { artist_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2125,
        "spider_question_id": 3629,
        "db_id": "music_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT artist_name FROM artist WHERE country = 'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "query": "db.artist.aggregate([ { $match: { country: 'Bangladesh' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.rating\": { $not: { $gt: 7 } } } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { country: 'Bangladesh' } }, { $lookup: { from: \"song\", localField: \"artist_name\", foreignField: \"artist_name\", as: \"songs\" } }, { $match: { \"songs.rating\": { $not: { $gt: 7 } } } }, { $group: { _id: \"$artist_name\" } }, { $project: { artist_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2126,
        "spider_question_id": 3630,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1",
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "query": "db.college.aggregate([ { $lookup: { from: \"player_college\", localField: \"college_id\", foreignField: \"college_id\", as: \"player_college\" } }, { $project: { name_full: 1, college_id: 1, player_count: { $size: \"$player_college\" } } }, { $sort: { player_count: -1 } }, { $limit: 1 }, { $project: { name_full: 1, college_id: 1 } } ])",
        "gpt4 answer": "db.college.aggregate([ { $lookup: { from: \"player_college\", localField: \"college_id\", foreignField: \"college_id\", as: \"players\" } }, { $project: { college_id: 1, name_full: 1, number_of_players: { $size: \"$players\" } } }, { $sort: { number_of_players: -1 } }, { $limit: 1 }, { $project: {college_id: 1, name_full: 1 } } ])",
        "deepseek answer": "db.college.aggregate([ { $lookup: { from: \"player_college\", localField: \"college_id\", foreignField: \"college_id\", as: \"player_college\" } }, { $project: { name_full: 1, college_id: 1, player_count: { $size: \"$player_college\" } } }, { $sort: { player_count: -1 } }, { $limit: 1 }, { $project: { name_full: 1, college_id: 1 } } ])"
    },
    {
        "question_id": 2127,
        "spider_question_id": 3631,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the full name and id of the college that has the most baseball players.",
        "query": "db.college.aggregate([ { $lookup: { from: \"player_college\", localField: \"college_id\", foreignField: \"college_id\", as: \"player_college\" } }, { $project: { name_full: 1, college_id: 1, player_count: { $size: \"$player_college\" } } }, { $sort: { player_count: -1 } }, { $limit: 1 }, { $project: { name_full: 1, college_id: 1 } } ])",
        "gpt4 answer": "db.college.aggregate([ { $lookup: { from: \"player_college\", localField: \"college_id\", foreignField: \"college_id\", as: \"players\" } }, { $project: { college_id: 1, name_full: 1, number_of_players: { $size: \"$players\" } } }, { $sort: { number_of_players: -1 } }, { $limit: 1 }, { $project: {college_id: 1, name_full: 1 } } ])",
        "deepseek answer": "db.college.aggregate([ { $lookup: { from: \"player_college\", localField: \"college_id\", foreignField: \"college_id\", as: \"player_college\" } }, { $project: { name_full: 1, college_id: 1, player_count: { $size: \"$player_college\" } } }, { $sort: { player_count: -1 } }, { $limit: 1 }, { $project: { name_full: 1, college_id: 1 } } ])"
    },
    {
        "question_id": 2128,
        "spider_question_id": 3632,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
        "question": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "query": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $project: { averageSalary: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $project: { averageSalary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2129,
        "spider_question_id": 3633,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
        "question": "Compute the average salary of the players in the team called 'Boston Red Stockings'.",
        "query": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $project: { averageSalary: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, averageSalary: { $avg: \"$salary\" } } }, { $project: { averageSalary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2130,
        "spider_question_id": 3636,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_first , T1.name_last , T1.player_id , count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "query": "db.player.aggregate([ { $lookup: { from: \"all_star\", localField: \"player_id\", foreignField: \"player_id\", as: \"all_star_games\" } }, { $addFields: { all_star_count: { $size: \"$all_star_games\" } } }, { $sort: { all_star_count: -1 } }, { $limit: 1 }, { $project: { name_first: 1, name_last: 1, player_id: 1, all_star_count: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"all_star\", localField: \"player_id\", foreignField: \"player_id\", as: \"all_star_games\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1, all_star_count: { $size: \"$all_star_games\" } } }, { $sort: { all_star_count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"all_star\", localField: \"player_id\", foreignField: \"player_id\", as: \"all_star_games\" } }, { $addFields: { all_star_count: { $size: \"$all_star_games\" } } }, { $sort: { all_star_count: -1 } }, { $limit: 1 }, { $project: { name_first: 1, name_last: 1, player_id: 1, all_star_count: 1 } } ])"
    },
    {
        "question_id": 2131,
        "spider_question_id": 3637,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_first , T1.name_last , T1.player_id , count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.",
        "query": "db.player.aggregate([ { $lookup: { from: \"all_star\", localField: \"player_id\", foreignField: \"player_id\", as: \"all_star_games\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1, all_star_count: { $size: \"$all_star_games\" } } }, { $sort: { all_star_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"all_star\", localField: \"player_id\", foreignField: \"player_id\", as: \"all_star_games\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1, all_star_count: { $size: \"$all_star_games\" } } }, { $sort: { all_star_count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2132,
        "spider_question_id": 3644,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the manager's first name, last name and id who won the most manager award?",
        "query": "db.player.aggregate([ { $lookup: { from: \"manager_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1 } }, { $sort: { award_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.manager_award.aggregate([ { $group: { _id: \"$player_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"player\", localField: \"_id\", foreignField: \"player_id\", as: \"manager_info\" } }, { $unwind: \"$manager_info\" }, { $project: { name_first: \"$manager_info.name_first\", name_last: \"$manager_info.name_last\", player_id: \"$_id\" } } ])",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"manager_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1 } }, { $sort: { award_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2133,
        "spider_question_id": 3645,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
        "query": "db.player.aggregate([ { $lookup: { from: \"manager_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1 } }, { $sort: { award_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"manager_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1 } }, { $sort: { award_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2134,
        "spider_question_id": 3648,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3",
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "query": "db.player.aggregate([ { $lookup: { from: \"player_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1, awardsCount: { $size: \"$awards\" } } }, { $sort: { awardsCount: -1 } }, { $limit: 3 }, { $project: { name_first: 1, name_last: 1, player_id: 1 } } ])",
        "gpt4 answer": "db.player.aggregate([ { $lookup: { from: \"player_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1, awardsCount: { $size: \"$awards\" } } }, { $sort: { awardsCount: -1 } }, { $limit: 3 }, { $project: { name_first: 1, name_last: 1, player_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2135,
        "spider_question_id": 3649,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "query": "db.player.aggregate([ { $lookup: { from: \"player_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1} }, { $sort: { award_count: -1 } }, { $limit: 3 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.player.aggregate([ { $lookup: { from: \"player_award\", localField: \"player_id\", foreignField: \"player_id\", as: \"awards\" } }, { $project: { name_first: 1, name_last: 1, player_id: 1} }, { $sort: { award_count: -1 } }, { $limit: 3 } ])"
    },
    {
        "question_id": 2136,
        "spider_question_id": 3660,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1",
        "question": "What are the name and id of the team offering the lowest average salary?",
        "query": "db.team.aggregate([ { $lookup: { from: \"salary\", localField: \"team_id\", foreignField: \"team_id\", as: \"team_salary\" } }, { $unwind: \"$team_salary\" }, { $group: { _id: { team_id: \"$team_id\", name: \"$name\" }, averageSalary: { $avg: \"$team_salary.salary\" } } }, { $sort: { averageSalary: 1 } }, { $limit: 1 }, { $project: { team_id: \"$_id.team_id\", name: \"$_id.name\" } } ])",
        "gpt4 answer": "db.team.aggregate([ { $lookup: { from: \"salary\", localField: \"team_id\", foreignField: \"team_id\", as: \"team_salary\" } }, { $unwind: \"$team_salary\" }, { $group: { _id: { team_id: \"$team_id\", name: \"$name\" }, averageSalary: { $avg: \"$team_salary.salary\" } } }, { $sort: { averageSalary: 1 } }, { $limit: 1 }, { $project: { team_id: \"$_id.team_id\", name: \"$_id.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2137,
        "spider_question_id": 3661,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1",
        "question": "Which team offers the lowest average salary? Give me the name and id of the team.",
        "query": "db.salary.aggregate([ { $group: { _id: \"$team_id\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: 1 } }, { $limit: 1 }, { $lookup: { from: \"team\", localField: \"_id\", foreignField: \"team_id\", as: \"teamInfo\" } }, { $project: { name: { $arrayElemAt: [\"$teamInfo.name\", 0] }, team_id: \"$_id\" } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $group: { _id: \"$team_id\", avgSalary: { $avg: \"$salary\" } } }, { $sort: { avgSalary: 1 } }, { $limit: 1 }, { $lookup: { from: \"team\", localField: \"_id\", foreignField: \"team_id\", as: \"teamInfo\" } }, { $project: { name: { $arrayElemAt: [\"$teamInfo.name\", 0] }, team_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2138,
        "spider_question_id": 3666,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
        "question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "query": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, max_wins: { $max: \"$wins\" } } }, { $project: { max_wins: 1 } } ])",
        "gpt4 answer": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $match: {\"team_info.name\": \"Boston Red Stockings\"} }, { $group: {_id: null, maxScore: { $max: \"$wins\" }} }, { $project: { maxScore: 1 } } ])",
        "deepseek answer": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, max_wins: { $max: \"$wins\" } } }, { $project: { max_wins: 1 } } ])"
    },
    {
        "question_id": 2139,
        "spider_question_id": 3667,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
        "question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?",
        "query": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, max_wins: { $max: \"$wins\" } } }, { $project: { max_wins: 1 } } ])",
        "gpt4 answer": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, maxScore: { $max: \"$wins\" } } }, { $project: { maxScore: 1 } } ])",
        "deepseek answer": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: null, max_wins: { $max: \"$wins\" } } }, { $project: { max_wins: 1 } } ])"
    },
    {
        "question_id": 2140,
        "spider_question_id": 3673,
        "db_id": "baseball_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year",
        "question": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.",
        "query": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $project: { year: \"$_id\", count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.postseason.aggregate([ { $lookup: { from: \"team\", localField: \"team_id_winner\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\" } }, { $group: { _id: \"$year\", count: { $sum: 1 } } }, { $project: { year: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2141,
        "spider_question_id": 3674,
        "db_id": "baseball_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' )",
        "question": "What is the total number of postseason games that team Boston Red Stockings participated in?",
        "query": "db.postseason.aggregate([ { $lookup: { from: \"team\", let: { team_id_winner: \"$team_id_winner\", team_id_loser: \"$team_id_loser\" }, pipeline: [ { $match: { $expr: { $or: [ { $eq: [\"$team_id_br\", \"$$team_id_winner\"] }, { $eq: [\"$team_id_br\", \"$$team_id_loser\"] } ] } } }, { $match: { name: \"Boston Red Stockings\" } } ], as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $group: { _id: null, total: { $sum: 1 } } } , { $project: { total: 1} }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.postseason.aggregate([ { $lookup: { from: \"team\", let: { team_id_winner: \"$team_id_winner\", team_id_loser: \"$team_id_loser\" }, pipeline: [ { $match: { $expr: { $or: [ { $eq: [\"$team_id_br\", \"$$team_id_winner\"] }, { $eq: [\"$team_id_br\", \"$$team_id_loser\"] } ] } } }, { $match: { name: \"Boston Red Stockings\" } } ], as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $group: { _id: null, total: { $sum: 1 } } } , { $project: { total: 1} }])"
    },
    {
        "question_id": 2142,
        "spider_question_id": 3678,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010",
        "question": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "query": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\", year: 2010 } }, { $group: { _id: null, total_salary: { $sum: \"$salary\" } } }, { $project: { total_salary: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\", year: 2010 } }, { $group: { _id: null, total_salary: { $sum: \"$salary\" } } }, { $project: { total_salary: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2143,
        "spider_question_id": 3680,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000",
        "question": "How many players were in the team Boston Red Stockings in 2000?",
        "query": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"teamInfo\" } }, { $unwind: \"$teamInfo\" }, { $match: { \"teamInfo.name\": 'Boston Red Stockings', \"year\": 2000 } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"teamInfo\" } }, { $unwind: \"$teamInfo\" }, { $match: { \"teamInfo.name\": 'Boston Red Stockings', \"year\": 2000 } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2144,
        "spider_question_id": 3681,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000",
        "question": "How many players did Boston Red Stockings have in 2000?",
        "query": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"teamInfo\" } }, { $unwind: \"$teamInfo\" }, { $match: { \"teamInfo.name\": \"Boston Red Stockings\", \"year\": 2000 } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"teamInfo\" } }, { $unwind: \"$teamInfo\" }, { $match: { \"teamInfo.name\": \"Boston Red Stockings\", \"year\": 2000 } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2145,
        "spider_question_id": 3682,
        "db_id": "baseball_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3",
        "question": "List the 3 highest salaries of the players in 2001?",
        "query": "db.salary.find({year: 2001}, { salary: 1}).sort({salary: -1}).limit(3)",
        "gpt4 answer": ".",
        "deepseek answer": "db.salary.find({year: 2001}, { salary: 1}).sort({salary: -1}).limit(3)"
    },
    {
        "question_id": 2146,
        "spider_question_id": 3683,
        "db_id": "baseball_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3",
        "question": "How much salary did the top 3 well-paid players get in 2001?",
        "query": "db.salary.find({year: 2001}, {salary: 1}).sort({salary: -1}).limit(3)",
        "gpt4 answer": "db.salary.find({ year: 2001 }, { salary: 1 }).sort({ salary: -1 }).limit(3)",
        "deepseek answer": "db.salary.find({year: 2001}, {salary: 1}).sort({salary: -1}).limit(3)"
    },
    {
        "question_id": 2147,
        "spider_question_id": 3686,
        "db_id": "baseball_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1",
        "question": "In which year did the least people enter hall of fame?",
        "query": "db.hall_of_fame.aggregate([ { $group: { _id: \"$yearid\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.hall_of_fame.aggregate([ { $group: { _id: \"$yearid\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2148,
        "spider_question_id": 3687,
        "db_id": "baseball_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1",
        "question": "Find the year in which the least people enter hall of fame.",
        "query": "db.hall_of_fame.aggregate([ { $group: { _id: \"$yearid\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { yearid: \"$_id\" } } ])",
        "gpt4 answer": "db.hall_of_fame.aggregate([ { $group: { _id: \"$yearid\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { yearid: \"$_id\" } } ])",
        "deepseek answer": "db.hall_of_fame.aggregate([ { $group: { _id: \"$yearid\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { yearid: \"$_id\" } } ])"
    },
    {
        "question_id": 2149,
        "spider_question_id": 3690,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'",
        "question": "How many games were played in park 'Columbia Park' in 1907?",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { \"park_info.park_name\": \"Columbia Park\", year: 1907 } }, { $count: \"games_played\" } ])",
        "gpt4 answer": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { \"park_info.park_name\": \"Columbia Park\", year: 1907 } }, { $count: \"games_played\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2150,
        "spider_question_id": 3691,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'",
        "question": "Count the number of games taken place in park 'Columbia Park' in 1907.",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { year: 1907, \"park_info.park_name\": \"Columbia Park\" } }, { $count: \"number_of_games\" } ])",
        "gpt4 answer": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { year: 1907, \"park_info.park_name\": \"Columbia Park\" } }, { $count: \"number_of_games\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2151,
        "spider_question_id": 3692,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta'",
        "question": "How many games were played in city Atlanta in 2000?",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { year: 2000, \"park_info.city\": \"Atlanta\" } }, { $count: \"games_played\" } ])",
        "gpt4 answer": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { year: 2000, \"park_info.city\": \"Atlanta\" } }, { $count: \"games_played\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2152,
        "spider_question_id": 3693,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta'",
        "question": "Find the number of games taken place in city Atlanta in 2000.",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $unwind: \"$park_info\" }, { $match: { year: 2000, \"park_info.city\": \"Atlanta\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } }])",
        "gpt4 answer": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $match: { \"park_info.city\": \"Atlanta\", year: 2000 } }, { $count: \"games\" } ])",
        "deepseek answer": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $unwind: \"$park_info\" }, { $match: { year: 2000, \"park_info.city\": \"Atlanta\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } }])"
    },
    {
        "question_id": 2153,
        "spider_question_id": 3696,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990",
        "question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "query": "db.player.aggregate([ { $match: { name_first: \"Len\", name_last: \"Barker\" } }, { $lookup: { from: \"salary\", localField: \"player_id\", foreignField: \"player_id\", as: \"salary_info\" } }, { $unwind: \"$salary_info\" }, { $match: { \"salary_info.year\": { $gte: 1985, $lte: 1990 } } }, { $group: { _id: null, totalSalary: { $sum: \"$salary_info.salary\" } } }, { $project: { totalSalary: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"player\", localField: \"player_id\", foreignField: \"player_id\", as: \"player_info\" } }, { $match: { \"player_info.name_first\": \"Len\", \"player_info.name_last\": \"Barker\", year: { $gte: 1985, $lte: 1990 } } }, { $group: { _id: null, totalSalary: { $sum: \"$salary\" } } }, { $project: { totalSalary: 1 } } ])",
        "deepseek answer": "db.player.aggregate([ { $match: { name_first: \"Len\", name_last: \"Barker\" } }, { $lookup: { from: \"salary\", localField: \"player_id\", foreignField: \"player_id\", as: \"salary_info\" } }, { $unwind: \"$salary_info\" }, { $match: { \"salary_info.year\": { $gte: 1985, $lte: 1990 } } }, { $group: { _id: null, totalSalary: { $sum: \"$salary_info.salary\" } } }, { $project: { totalSalary: 1 } } ])"
    },
    {
        "question_id": 2154,
        "spider_question_id": 3697,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990",
        "question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.",
        "query": "db.salary.aggregate([ { $lookup: { from: \"player\", localField: \"player_id\", foreignField: \"player_id\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.name_first\": \"Len\", \"player_info.name_last\": \"Barker\", \"year\": { $gte: 1985, $lte: 1990 } } }, { $group: { _id: null, total_salary: { $sum: \"$salary\" } } }, { $project: { total_salary: 1 } } ])",
        "gpt4 answer": "db.salary.aggregate([ { $lookup: { from: \"player\", localField: \"player_id\", foreignField: \"player_id\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.name_first\": \"Len\", \"player_info.name_last\": \"Barker\", year: { $gte: 1985, $lte: 1990 } } }, { $group: { _id: null, total_salary: { $sum: \"$salary\" } } }, { $project: { total_salary: 1 } } ])",
        "deepseek answer": "db.salary.aggregate([ { $lookup: { from: \"player\", localField: \"player_id\", foreignField: \"player_id\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.name_first\": \"Len\", \"player_info.name_last\": \"Barker\", \"year\": { $gte: 1985, $lte: 1990 } } }, { $group: { _id: null, total_salary: { $sum: \"$salary\" } } }, { $project: { total_salary: 1 } } ])"
    },
    {
        "question_id": 2155,
        "spider_question_id": 3701,
        "db_id": "baseball_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000",
        "question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\", year: { $gte: 1990, $lte: 2000 } } }, { $group: { _id: null, totalGamesAttended: { $sum: \"$games\" } } }, { $project: { totalGamesAttended: 1 } } ])",
        "gpt4 answer": "db.home_game.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { \"team_info.name\": \"Boston Red Stockings\", year: { $gte: 1990, $lte: 2000 } } }, { $group: { _id: null, totalGamesAttended: { $sum: \"$games\" } } }, { $project: { totalGamesAttended: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2156,
        "spider_question_id": 3702,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1",
        "question": "Which team had the least number of attendances in home games in 1980?",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { year: 1980 } }, { $sort: { attendance: 1 } }, { $limit: 1 }, { $project: { name: \"$team_info.name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.home_game.aggregate([ { $lookup: { from: \"team\", localField: \"team_id\", foreignField: \"team_id_br\", as: \"team_info\" } }, { $unwind: \"$team_info\" }, { $match: { year: 1980 } }, { $sort: { attendance: 1 } }, { $limit: 1 }, { $project: { name: \"$team_info.name\" } } ])"
    },
    {
        "question_id": 2157,
        "spider_question_id": 3704,
        "db_id": "baseball_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT state FROM park GROUP BY state HAVING count(*) > 2",
        "question": "List the names of states that have more than 2 parks.",
        "query": "db.park.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.park.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { state: \"$_id\" } } ])",
        "deepseek answer": "db.park.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { state: \"$_id\" } } ])"
    },
    {
        "question_id": 2158,
        "spider_question_id": 3705,
        "db_id": "baseball_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT state FROM park GROUP BY state HAVING count(*) > 2",
        "question": "Which states have more than 2 parks?",
        "query": "db.park.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.park.aggregate([ { $group: { _id: \"$state\", parkCount: { $sum: 1 } } }, { $match: { parkCount: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.park.aggregate([ { $group: { _id: \"$state\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { state: \"$_id\" } } ])"
    },
    {
        "question_id": 2159,
        "spider_question_id": 3710,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1",
        "question": "Which park had most attendances in 2008?",
        "query": "db.park.aggregate([ { $lookup: { from: \"home_game\", localField: \"park_id\", foreignField: \"park_id\", as: \"home_games\" } }, { $unwind: \"$home_games\" }, { $match: { \"home_games.year\": 2008 } }, { $sort: { \"home_games.attendance\": -1 } }, { $limit: 1 }, { $project: { park_name: 1 } } ])",
        "gpt4 answer": "db.home_game.aggregate([ { $match: { year: 2008 } }, { $group: { _id: \"$park_id\", totalAttendance: { $sum: \"$attendance\" } } }, { $sort: { totalAttendance: -1 } }, { $limit: 1 }, { $lookup: { from: \"park\", localField: \"_id\", foreignField: \"park_id\", as: \"parkDetails\" } }, { $unwind: \"$parkDetails\" }, { $project: { park_name: \"$parkDetails.park_name\" } } ])",
        "deepseek answer": "db.park.aggregate([ { $lookup: { from: \"home_game\", localField: \"park_id\", foreignField: \"park_id\", as: \"home_games\" } }, { $unwind: \"$home_games\" }, { $match: { \"home_games.year\": 2008 } }, { $sort: { \"home_games.attendance\": -1 } }, { $limit: 1 }, { $project: { park_name: 1 } } ])"
    },
    {
        "question_id": 2160,
        "spider_question_id": 3711,
        "db_id": "baseball_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1",
        "question": "Which park did the most people attend in 2008?",
        "query": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $unwind: \"$park_info\" }, { $match: { year: 2008 } }, { $sort: { attendance: -1 } }, { $limit: 1 }, { $project: { park_name: \"$park_info.park_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.home_game.aggregate([ { $lookup: { from: \"park\", localField: \"park_id\", foreignField: \"park_id\", as: \"park_info\" } }, { $unwind: \"$park_info\" }, { $match: { year: 2008 } }, { $sort: { attendance: -1 } }, { $limit: 1 }, { $project: { park_name: \"$park_info.park_name\" } } ])"
    },
    {
        "question_id": 2161,
        "spider_question_id": 3713,
        "db_id": "mountain_photos",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT brand , name FROM camera_lens ORDER BY max_aperture DESC",
        "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "query": "db.camera_lens.find({}, {brand: 1, name: 1}).sort({max_aperture: -1})",
        "gpt4 answer": "db.camera_lens.find({}, { brand: 1, name: 1 }).sort({ max_aperture: -1 })",
        "deepseek answer": "db.camera_lens.find({}, {brand: 1, name: 1}).sort({max_aperture: -1})"
    },
    {
        "question_id": 2162,
        "spider_question_id": 3714,
        "db_id": "mountain_photos",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT id , color , name FROM photos",
        "question": "List the id, color scheme, and name for all the photos.",
        "query": "db.photos.find({}, { id: 1, color: 1, name: 1 })",
        "gpt4 answer": "db.photos.find({}, { id: 1, color: 1, name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2163,
        "spider_question_id": 3715,
        "db_id": "mountain_photos",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(height) , avg(height) FROM mountain",
        "question": "What are the maximum and average height of the mountains?",
        "query": "db.mountain.aggregate([ { $group: { _id: null, maxHeight: { $max: \"$Height\" }, avgHeight: { $avg: \"$Height\" } } }, { $project: { maxHeight: 1, avgHeight: 1 } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $group: { _id: null, max_height: { $max: \"$Height\" }, avg_height: { $avg: \"$Height\" } } }, { $project: { max_height: 1, avg_height: 1 } } ])",
        "deepseek answer": "db.mountain.aggregate([ { $group: { _id: null, maxHeight: { $max: \"$Height\" }, avgHeight: { $avg: \"$Height\" } } }, { $project: { maxHeight: 1, avgHeight: 1 } } ])"
    },
    {
        "question_id": 2164,
        "spider_question_id": 3716,
        "db_id": "mountain_photos",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(prominence) FROM mountain WHERE country = 'Morocco'",
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "query": "db.mountain.aggregate([ { $match: { Country: 'Morocco' } }, { $group: { _id: null, averageProminence: { $avg: \"$Prominence\" } } }, { $project: { averageProminence: 1 } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $match: { Country: 'Morocco' } }, { $group: { _id: null, averageProminence: { $avg: \"$Prominence\" } } }, { $project: { averageProminence: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2165,
        "spider_question_id": 3719,
        "db_id": "mountain_photos",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count(*) >= 2",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "query": "db.photos.aggregate([ { $group: { _id: \"$mountain_id\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $lookup: { from: \"mountain\", localField: \"_id\", foreignField: \"id\", as: \"mountain_info\" }}, { $unwind: \"$mountain_info\" }, { $project: { _id: \"$mountain_info.id\", name: \"$mountain_info.name\" }} ])",
        "gpt4 answer": "db.photos.aggregate([ { $group: { _id: \"$mountain_id\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $lookup: { from: \"mountain\", localField: \"_id\", foreignField: \"id\", as: \"mountain_info\" }}, { $unwind: \"$mountain_info\" }, { $project: { _id: \"$mountain_info.id\", name: \"$mountain_info.name\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2166,
        "spider_question_id": 3720,
        "db_id": "mountain_photos",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "query": "db.photos.aggregate([ { $group: { _id: \"$camera_lens_id\", mountainCount: { $sum: 1 } } }, { $sort: { mountainCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"camera_lens\", localField: \"_id\", foreignField: \"id\", as: \"lens\" } }, { $unwind: \"$lens\" }, { $project: { name: \"$lens.name\" } } ])",
        "gpt4 answer": "db.photos.aggregate([ { $group: { _id: \"$camera_lens_id\", mountainCount: { $sum: 1 } } }, { $sort: { mountainCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"camera_lens\", localField: \"_id\", foreignField: \"id\", as: \"lens\" } }, { $unwind: \"$lens\" }, { $project: { name: \"$lens.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2167,
        "spider_question_id": 3723,
        "db_id": "mountain_photos",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "question": "How many camera lenses are not used in taking any photos?",
        "query": "db.camera_lens.aggregate([ { $lookup: { from: \"photos\", localField: \"id\", foreignField: \"camera_lens_id\", as: \"photos_taken\" } }, { $match: { \"photos_taken\": { $size: 0 } } }, { $count: \"lenses_not_used\" } ])",
        "gpt4 answer": "db.camera_lens.aggregate([ { $lookup: { from: \"photos\", localField: \"id\", foreignField: \"camera_lens_id\", as: \"photos_taken\" } }, { $match: { \"photos_taken\": { $size: 0 } } }, { $count: \"lenses_not_used\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2168,
        "spider_question_id": 3724,
        "db_id": "mountain_photos",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "query": "db.photos.aggregate([ { $lookup: { from: \"mountain\", localField: \"mountain_id\", foreignField: \"id\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $match: { \"mountain_info.Country\": \"Ethiopia\" } }, { $group: { _id: \"$camera_lens_id\" } }, { $count: \"distinct_camera_lens_count\" } ])",
        "gpt4 answer": "db.photos.aggregate([ { $lookup: { from: \"mountain\", localField: \"mountain_id\", foreignField: \"id\", as: \"mountain_info\" } }, { $unwind: \"$mountain_info\" }, { $match: { \"mountain_info.Country\": \"Ethiopia\" } }, { $group: { _id: \"$camera_lens_id\" } }, { $count: \"distinct_camera_lens_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2169,
        "spider_question_id": 3725,
        "db_id": "mountain_photos",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
        "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
        "query": "db.camera_lens.aggregate([ { $lookup: { from: \"photos\", localField: \"id\", foreignField: \"camera_lens_id\", as: \"photos\" } }, { $unwind: \"$photos\" }, { $lookup: { from: \"mountain\", localField: \"photos.mountain_id\", foreignField: \"id\", as: \"mountain\" } }, { $unwind: \"$mountain\" }, { $match: { $or: [{ \"mountain.Range\": \"Toubkal Atlas\" }, { \"mountain.Range\": \"Lasta Massif\" }] } }, { $group: { _id: \"$brand\", ranges: { $addToSet: \"$mountain.Range\" } } }, { $match: { ranges: { $all: [\"Toubkal Atlas\", \"Lasta Massif\"] } } }, { $project: { brand: \"$_id\" } } ])",
        "gpt4 answer": "db.camera_lens.aggregate([ { $lookup: { from: \"photos\", localField: \"id\", foreignField: \"camera_lens_id\", as: \"photos\" } }, { $unwind: \"$photos\" }, { $lookup: { from: \"mountain\", localField: \"photos.mountain_id\", foreignField: \"id\", as: \"mountain\" } }, { $unwind: \"$mountain\" }, { $match: { $or: [{ \"mountain.Range\": \"Toubkal Atlas\" }, { \"mountain.Range\": \"Lasta Massif\" }] } }, { $group: { _id: \"$brand\", ranges: { $addToSet: \"$mountain.Range\" } } }, { $match: { ranges: { $all: [\"Toubkal Atlas\", \"Lasta Massif\"] } } }, { $project: { brand: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2170,
        "spider_question_id": 3726,
        "db_id": "mountain_photos",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , prominence FROM mountain EXCEPT SELECT T1.name , T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'",
        "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
        "query": "db.mountain.aggregate([ { $lookup: { from: \"photos\", localField: \"id\", foreignField: \"mountain_id\", as: \"photos\" } }, { $lookup: { from: \"camera_lens\", localField: \"photos.camera_lens_id\", foreignField: \"id\", as: \"lens\" } }, { $match: { \"lens.brand\": { $ne: \"Sigma\" } } }, { $group: { _id: \"$id\", name: { $first: \"$name\" }, prominence: { $first: \"$Prominence\" } } }, { $project: { name: 1, prominence: 1 } } ])",
        "gpt4 answer": "db.mountain.aggregate([ { $lookup: { from: \"photos\", localField: \"id\", foreignField: \"mountain_id\", as: \"photos\" } }, { $lookup: { from: \"camera_lens\", localField: \"photos.camera_lens_id\", foreignField: \"id\", as: \"lens\" } }, { $match: { \"lens.brand\": { $ne: \"Sigma\" } } }, { $group: { _id: \"$id\", name: { $first: \"$name\" }, prominence: { $first: \"$Prominence\" } } }, { $project: { name: 1, prominence: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2171,
        "spider_question_id": 3727,
        "db_id": "mountain_photos",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM camera_lens WHERE name LIKE '%Digital%'",
        "question": "List the camera lens names containing substring 'Digital'.",
        "query": "db.camera_lens.find({name: {$regex: /Digital/}}, { name: 1})",
        "gpt4 answer": "db.camera_lens.find({ name: /Digital/ }, { name: 1 })",
        "deepseek answer": "db.camera_lens.find({name: {$regex: /Digital/}}, { name: 1})"
    },
    {
        "question_id": 2172,
        "spider_question_id": 3729,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "question": "Find the names of channels that are not owned by CCTV.",
        "query": "db.channel.find({Owner: {$ne: 'CCTV'}}, { Name: 1})",
        "gpt4 answer": "db.channel.find({ Owner: { $ne: \"CCTV\" } }, { Name: 1 })",
        "deepseek answer": "db.channel.find({Owner: {$ne: 'CCTV'}}, { Name: 1})"
    },
    {
        "question_id": 2173,
        "spider_question_id": 3730,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "query": "db.channel.find({Owner: {$ne: 'CCTV'}}, {Name: 1})",
        "gpt4 answer": "db.channel.find({ Owner: { $ne: 'CCTV' } }, { Name: 1 })",
        "deepseek answer": "db.channel.find({Owner: {$ne: 'CCTV'}}, {Name: 1})"
    },
    {
        "question_id": 2174,
        "spider_question_id": 3731,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "query": "db.channel.find({}, { Name: 1}).sort({Rating_in_percent: -1})",
        "gpt4 answer": "db.channel.find({}, { Name: 1 }).sort({ Rating_in_percent: -1 })",
        "deepseek answer": "db.channel.find({}, { Name: 1}).sort({Rating_in_percent: -1})"
    },
    {
        "question_id": 2175,
        "spider_question_id": 3732,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
        "query": "db.channel.find({}, { Name: 1}).sort({Rating_in_percent: -1})",
        "gpt4 answer": "db.channel.find({}, { Name: 1 }).sort({ Rating_in_percent: -1 })",
        "deepseek answer": "db.channel.find({}, { Name: 1}).sort({Rating_in_percent: -1})"
    },
    {
        "question_id": 2176,
        "spider_question_id": 3733,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "query": "db.channel.find({}, { Owner: 1}).sort({Rating_in_percent: -1}).limit(1)",
        "gpt4 answer": "db.channel.find({}, { Owner: 1 }).sort({ Rating_in_percent: -1 }).limit(1)",
        "deepseek answer": "db.channel.find({}, { Owner: 1}).sort({Rating_in_percent: -1}).limit(1)"
    },
    {
        "question_id": 2177,
        "spider_question_id": 3734,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
        "question": "Show me the owner of the channel with the highest rating.",
        "query": "db.channel.find({}, { Owner: 1}).sort({Rating_in_percent: -1}).limit(1)",
        "gpt4 answer": "db.channel.find({}, { Owner: 1 }).sort({ Rating_in_percent: -1 }).limit(1)",
        "deepseek answer": "db.channel.find({}, { Owner: 1}).sort({Rating_in_percent: -1}).limit(1)"
    },
    {
        "question_id": 2178,
        "spider_question_id": 3737,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM program ORDER BY launch",
        "question": "list all the names of programs, ordering by launch time.",
        "query": "db.program.aggregate([ { $sort: { \"Launch\": 1 } }, { $project: { \"_id\": 0, \"Name\": 1 } } ])",
        "gpt4 answer": "db.program.find({}, { Name: 1 }).sort({ Launch: 1 })",
        "deepseek answer": "db.program.aggregate([ { $sort: { \"Launch\": 1 } }, { $project: { \"_id\": 0, \"Name\": 1 } } ])"
    },
    {
        "question_id": 2179,
        "spider_question_id": 3738,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM program ORDER BY launch",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $lookup: { from: \"broadcast_share\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_share_info\" } }, { $sort: { \"launch\": 1 } }, { $project: { \"_id\": 0, \"Name\": 1 } } ])",
        "gpt4 answer": "db.program.find({}, { Name: 1 }).sort({ Launch: 1 })",
        "deepseek answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $lookup: { from: \"broadcast_share\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_share_info\" } }, { $sort: { \"launch\": 1 } }, { $project: { \"_id\": 0, \"Name\": 1 } } ])"
    },
    {
        "question_id": 2180,
        "spider_question_id": 3739,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , origin , OWNER FROM program",
        "question": "List the name, origin and owner of each program.",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $lookup: { from: \"broadcast_share\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_share_info\" } }, { $project: { Name: 1, Origin: 1, Owner: 1 } } ])",
        "gpt4 answer": "db.program.find({}, { Name: 1, Origin: 1, Owner: 1})",
        "deepseek answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $lookup: { from: \"broadcast_share\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_share_info\" } }, { $project: { Name: 1, Origin: 1, Owner: 1 } } ])"
    },
    {
        "question_id": 2181,
        "spider_question_id": 3740,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , origin , OWNER FROM program",
        "question": "What are the name, origin and owner of each program?",
        "query": "db.program.find({}, { Name: 1, Origin: 1, Owner: 1 })",
        "gpt4 answer": "db.program.find({}, { Name: 1, Origin: 1, Owner: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2182,
        "spider_question_id": 3741,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "question": "find the name of the program that was launched most recently.",
        "query": "db.program.aggregate([ { $sort: { \"Launch\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"Name\": 1 } } ])",
        "gpt4 answer": "db.program.find({}, {Name: 1}).sort({Launch: -1}).limit(1)",
        "deepseek answer": "db.program.aggregate([ { $sort: { \"Launch\": -1 } }, { $limit: 1 }, { $project: { \"_id\": 0, \"Name\": 1 } } ])"
    },
    {
        "question_id": 2183,
        "spider_question_id": 3742,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "question": "Which program was launched most recently? Return the program name.",
        "query": "db.program.aggregate([ { $sort: { Launch: -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.program.aggregate([ { $sort: { Launch: -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2184,
        "spider_question_id": 3745,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
        "question": "Find the names of the channels that are broadcast in the morning.",
        "query": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_info\" } }, { $unwind: \"$broadcast_info\" }, { $match: { \"broadcast_info.Time_of_day\": \"Morning\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_info\" } }, { $unwind: \"$broadcast_info\" }, { $match: { \"broadcast_info.Time_of_day\": \"Morning\" } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2185,
        "spider_question_id": 3746,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "query": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_info\" } }, { $unwind: \"$broadcast_info\" }, { $match: { \"broadcast_info.Time_of_day\": \"Morning\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.broadcast.aggregate([ { $match: { Time_of_day: 'Morning' } }, { $lookup: { from: \"channel\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"channel_info\" } }, { $unwind: \"$channel_info\" }, { $project: { \"channel_info.Name\": 1 } }, { $group: { _id: \"$channel_info.Name\" } } ])",
        "deepseek answer": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_info\" } }, { $unwind: \"$broadcast_info\" }, { $match: { \"broadcast_info.Time_of_day\": \"Morning\" } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2186,
        "spider_question_id": 3747,
        "db_id": "program_share",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'",
        "question": "what are the names of the channels that broadcast in both morning and night?",
        "query": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_docs\" } }, { $unwind: \"$broadcast_docs\" }, { $match: { $or: [ { \"broadcast_docs.Time_of_day\": \"Morning\" }, { \"broadcast_docs.Time_of_day\": \"Night\" } ] } }, { $group: { _id: \"$Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_docs\" } }, { $unwind: \"$broadcast_docs\" }, { $match: { $or: [ { \"broadcast_docs.Time_of_day\": \"Morning\" }, { \"broadcast_docs.Time_of_day\": \"Night\" } ] } }, { $group: { _id: \"$Name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Name: \"$_id\" } } ])"
    },
    {
        "question_id": 2187,
        "spider_question_id": 3748,
        "db_id": "program_share",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'",
        "question": "Which channels broadcast both in the morning and at night? Give me the channel names.",
        "query": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_docs\" } }, { $match: { $and: [ { \"broadcast_docs.Time_of_day\": \"Morning\" }, { \"broadcast_docs.Time_of_day\": \"Night\" } ] } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.channel.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Channel_ID\", foreignField: \"Channel_ID\", as: \"broadcast_docs\" } }, { $match: { $and: [ { \"broadcast_docs.Time_of_day\": \"Morning\" }, { \"broadcast_docs.Time_of_day\": \"Night\" } ] } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2188,
        "spider_question_id": 3749,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , time_of_day FROM broadcast GROUP BY time_of_day",
        "question": "how many programs are broadcast in each time section of the day?",
        "query": "db.broadcast.aggregate([ { $group: { _id: \"$Time_of_day\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.broadcast.aggregate([ { $group: { _id: \"$Time_of_day\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2189,
        "spider_question_id": 3750,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , time_of_day FROM broadcast GROUP BY time_of_day",
        "question": "Count the number of programs broadcast for each time section of a day.",
        "query": "db.broadcast.aggregate([ { $group: { _id: \"$Time_of_day\", count: { $sum: 1 } } }, { $project: { time_of_day: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.broadcast.aggregate([ { $group: { _id: \"$Time_of_day\", count: { $sum: 1 } } }, { $project: { time_of_day: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2190,
        "spider_question_id": 3751,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'",
        "question": "find the number of different programs that are broadcast during night time.",
        "query": "db.broadcast.aggregate([ { $match: { Time_of_day: 'Night' } }, { $group: { _id: \"$Program_ID\" } }, { $count: \"distinct_program_count\" } ])",
        "gpt4 answer": "db.broadcast.aggregate([ { $match: { Time_of_day: 'Night' } }, { $group: { _id: \"$Program_ID\" } }, { $count: \"distinct_program_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2191,
        "spider_question_id": 3752,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'",
        "question": "How many distinct programs are broadcast at 'Night' time?",
        "query": "db.broadcast.aggregate([ { $match: { Time_of_day: 'Night' } }, { $group: { _id: \"$Program_ID\" } }, { $count: \"distinct_program_count\" } ])",
        "gpt4 answer": "db.broadcast.aggregate([ { $match: { Time_of_day: 'Night' } }, { $group: { _id: \"$Program_ID\" } }, { $count: \"distinct_program_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2192,
        "spider_question_id": 3753,
        "db_id": "program_share",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning'",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $match: { \"broadcast_info.Time_of_day\": { $ne: \"Morning\" } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $match: { \"broadcast_info.Time_of_day\": { $ne: \"Morning\" } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2193,
        "spider_question_id": 3754,
        "db_id": "program_share",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning'",
        "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $match: { \"broadcast_info.Time_of_day\": { $ne: \"Morning\" } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $match: { \"broadcast_info\": { $not: { $elemMatch: { \"Time_of_day\": \"Morning\" } } } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $match: { \"broadcast_info.Time_of_day\": { $ne: \"Morning\" } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2194,
        "spider_question_id": 3755,
        "db_id": "program_share",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning' INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Night'",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_docs\" } }, { $unwind: \"$broadcast_docs\" }, { $match: { $or: [ { \"broadcast_docs.Time_of_day\": \"Morning\" }, { \"broadcast_docs.Time_of_day\": \"Night\" } ] } }, { $group: { _id: \"$Owner\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { owner: \"$_id\" } } ])",
        "gpt4 answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_info\" } }, { $unwind: \"$broadcast_info\" }, { $group: { _id: \"$Owner\", times: { $addToSet: \"$broadcast_info.Time_of_day\" } } }, { $match: { times: { $all: [\"Morning\", \"Night\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_docs\" } }, { $unwind: \"$broadcast_docs\" }, { $match: { $or: [ { \"broadcast_docs.Time_of_day\": \"Morning\" }, { \"broadcast_docs.Time_of_day\": \"Night\" } ] } }, { $group: { _id: \"$Owner\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { owner: \"$_id\" } } ])"
    },
    {
        "question_id": 2195,
        "spider_question_id": 3756,
        "db_id": "program_share",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning' INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Night'",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcasts\" } }, { $match: { \"broadcasts.Time_of_day\": { $all: [\"Morning\", \"Night\"] } } }, { $group: { _id: \"$Owner\" } }, { $project: { owner: \"$_id\" } } ])",
        "gpt4 answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcasts\" } }, { $match: { \"broadcasts.Time_of_day\": { $all: [\"Morning\", \"Night\"] } } }, { $group: { _id: \"$Owner\" } }, { $project: { owner: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2196,
        "spider_question_id": 3757,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT origin FROM program ORDER BY origin",
        "question": "List all program origins in the alphabetical order.",
        "query": "db.program.find({}, { Origin: 1 }).sort({ Origin: 1 })",
        "gpt4 answer": "db.program.find({}, { Origin: 1 }).sort({ Origin: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2197,
        "spider_question_id": 3758,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT origin FROM program ORDER BY origin",
        "question": "What is the list of program origins ordered alphabetically?",
        "query": "db.program.find({}, { Origin: 1 }).sort({ Origin: 1 })",
        "gpt4 answer": "db.program.find({}, { Origin: 1 }).sort({ Origin: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2198,
        "spider_question_id": 3759,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT OWNER) FROM channel",
        "question": "what is the number of different channel owners?",
        "query": "db.channel.aggregate([ { $group: { _id: \"$Owner\" } }, { $count: \"distinct_owners\" } ])",
        "gpt4 answer": "db.channel.aggregate([ { $group: { _id: \"$Owner\" } }, { $count: \"distinct_owners\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2199,
        "spider_question_id": 3761,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM program WHERE origin != 'Beijing'",
        "question": "find the names of programs whose origin is not in Beijing.",
        "query": "db.program.find({ \"Origin\": { $ne: \"Beijing\" } }, { \"Name\": 1, \"_id\": 0 })",
        "gpt4 answer": "db.program.find({ \"Origin\": { $ne: \"Beijing\" } }, { \"Name\": 1, \"_id\": 0 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2200,
        "spider_question_id": 3762,
        "db_id": "program_share",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM program WHERE origin != 'Beijing'",
        "question": "Which programs' origins are not 'Beijing'? Give me the program names.",
        "query": "db.program.find({ Origin: { $ne: 'Beijing' }}, { Name: 1 })",
        "gpt4 answer": "db.program.find({ Origin: { $ne: 'Beijing' }}, { Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2201,
        "spider_question_id": 3763,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "query": "db.channel.find({\"Owner\": {\"$in\": [\"CCTV\", \"HBS\"]}}, {\"Name\": 1, \"_id\": 0})",
        "gpt4 answer": "db.channel.find({ $or: [{ Owner: 'CCTV' }, { Owner: 'HBS' }] }, { Name: 1 })",
        "deepseek answer": "db.channel.find({\"Owner\": {\"$in\": [\"CCTV\", \"HBS\"]}}, {\"Name\": 1, \"_id\": 0})"
    },
    {
        "question_id": 2202,
        "spider_question_id": 3764,
        "db_id": "program_share",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
        "question": "List the names of all the channels owned by either CCTV or HBS",
        "query": "db.channel.find({\"Owner\": {\"$in\": [\"CCTV\", \"HBS\"]}}, {\"Name\": 1, \"_id\": 0})",
        "gpt4 answer": "db.channel.find( { $or: [{ Owner: 'CCTV' }, { Owner: 'HBS' }] }, { Name: 1 } )",
        "deepseek answer": "db.channel.find({\"Owner\": {\"$in\": [\"CCTV\", \"HBS\"]}}, {\"Name\": 1, \"_id\": 0})"
    },
    {
        "question_id": 2203,
        "spider_question_id": 3767,
        "db_id": "program_share",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the program that is broadcast most frequently.",
        "query": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_docs\" } }, { $unwind: \"$broadcast_docs\" }, { $group: { _id: \"$Program_ID\", name: { $first: \"$Name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.program.aggregate([ { $lookup: { from: \"broadcast\", localField: \"Program_ID\", foreignField: \"Program_ID\", as: \"broadcast_docs\" } }, { $unwind: \"$broadcast_docs\" }, { $group: { _id: \"$Program_ID\", name: { $first: \"$Name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 2204,
        "spider_question_id": 3771,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT course_description FROM COURSES WHERE course_name = 'database'",
        "question": "What are the descriptions of the courses with name 'database'?",
        "query": "db.Courses.find({course_name: 'database'}, {course_description: 1})",
        "gpt4 answer": "db.Courses.find({ course_name: 'database' }, { course_description: 1 })",
        "deepseek answer": "db.Courses.find({course_name: 'database'}, {course_description: 1})"
    },
    {
        "question_id": 2205,
        "spider_question_id": 3772,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT course_description FROM COURSES WHERE course_name = 'database'",
        "question": "Return the description for the courses named 'database'.",
        "query": "db.Courses.find({course_name: 'database'}, {course_description: 1})",
        "gpt4 answer": "db.Courses.find({ course_name: 'database' }, { course_description: 1 })",
        "deepseek answer": "db.Courses.find({course_name: 'database'}, {course_description: 1})"
    },
    {
        "question_id": 2206,
        "spider_question_id": 3773,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = 'Cathrine'",
        "question": "What are the addresses of the course authors or tutors with personal name 'Cathrine'",
        "query": "db.Course_Authors_and_Tutors.find({ personal_name: 'Cathrine' }, { address_line_1: 1 })",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find({ personal_name: 'Cathrine' }, { address_line_1: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({ personal_name: 'Cathrine' }, { address_line_1: 1 })"
    },
    {
        "question_id": 2207,
        "spider_question_id": 3774,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = 'Cathrine'",
        "question": "Return the addresses of the course authors or tutors whose personal name is 'Cathrine'.",
        "query": "db.Course_Authors_and_Tutors.find({personal_name: 'Cathrine'}, {address_line_1: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find({ personal_name: 'Cathrine' }, { address_line_1: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({personal_name: 'Cathrine'}, {address_line_1: 1})"
    },
    {
        "question_id": 2208,
        "spider_question_id": 3775,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "question": "List the addresses of all the course authors or tutors.",
        "query": "db.Course_Authors_and_Tutors.find({}, {address_line_1: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find({}, { address_line_1: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({}, {address_line_1: 1})"
    },
    {
        "question_id": 2209,
        "spider_question_id": 3776,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "question": "What is the address of each course author or tutor?",
        "query": "db.Course_Authors_and_Tutors.find({}, {address_line_1: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find({}, { address_line_1: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({}, {address_line_1: 1})"
    },
    {
        "question_id": 2210,
        "spider_question_id": 3777,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT login_name , family_name FROM Course_Authors_and_Tutors",
        "question": "List all the login names and family names of course author and tutors.",
        "query": "db.Course_Authors_and_Tutors.find({}, {login_name: 1, family_name: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find({}, { login_name: 1, family_name: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({}, {login_name: 1, family_name: 1})"
    },
    {
        "question_id": 2211,
        "spider_question_id": 3778,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT login_name , family_name FROM Course_Authors_and_Tutors",
        "question": "What are the login names and family names of course author and tutors?",
        "query": "db.Course_Authors_and_Tutors.find({}, {login_name: 1, family_name: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find({}, { login_name: 1, family_name: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({}, {login_name: 1, family_name: 1})"
    },
    {
        "question_id": 2212,
        "spider_question_id": 3789,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT login_name FROM Students WHERE family_name = 'Ward'",
        "question": "What are the login names of the students with family name 'Ward'?",
        "query": "db.Students.find({family_name: 'Ward'}, {login_name: 1})",
        "gpt4 answer": "db.Students.find({family_name: 'Ward'}, {login_name: 1})",
        "deepseek answer": "db.Students.find({family_name: 'Ward'}, {login_name: 1})"
    },
    {
        "question_id": 2213,
        "spider_question_id": 3790,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT login_name FROM Students WHERE family_name = 'Ward'",
        "question": "Return the login names of the students whose family name is 'Ward'.",
        "query": "db.Students.find({family_name: 'Ward'}, {login_name: 1})",
        "gpt4 answer": "db.Students.find({ family_name: 'Ward' }, { login_name: 1 })",
        "deepseek answer": "db.Students.find({family_name: 'Ward'}, {login_name: 1})"
    },
    {
        "question_id": 2214,
        "spider_question_id": 3795,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT subject_name FROM SUBJECTS",
        "question": "List all the subject names.",
        "query": "db.Subjects.find({}, { subject_name: 1})",
        "gpt4 answer": "db.Subjects.find({}, { subject_name: 1 })",
        "deepseek answer": "db.Subjects.find({}, { subject_name: 1})"
    },
    {
        "question_id": 2215,
        "spider_question_id": 3796,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT subject_name FROM SUBJECTS",
        "question": "What are the names of all the subjects.",
        "query": "db.Subjects.find({}, { subject_name: 1})",
        "gpt4 answer": "db.Subjects.find({}, { subject_name: 1 })",
        "deepseek answer": "db.Subjects.find({}, { subject_name: 1})"
    },
    {
        "question_id": 2216,
        "spider_question_id": 3797,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "query": "db.Course_Authors_and_Tutors.find().sort({personal_name: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find().sort({ personal_name: 1 })",
        "deepseek answer": "db.Course_Authors_and_Tutors.find().sort({personal_name: 1})"
    },
    {
        "question_id": 2217,
        "spider_question_id": 3798,
        "db_id": "e_learning",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
        "query": "db.Course_Authors_and_Tutors.find({}).sort({personal_name: 1})",
        "gpt4 answer": "db.Course_Authors_and_Tutors.find().sort({personal_name: 1})",
        "deepseek answer": "db.Course_Authors_and_Tutors.find({}).sort({personal_name: 1})"
    },
    {
        "question_id": 2218,
        "spider_question_id": 3799,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT personal_name , family_name FROM Students ORDER BY family_name",
        "question": "List the personal names and family names of all the students in alphabetical order of family name.",
        "query": "db.Students.find({}, {personal_name: 1, family_name: 1}).sort({family_name: 1})",
        "gpt4 answer": "db.Students.find({}, { personal_name: 1, family_name: 1 }).sort({ family_name: 1 })",
        "deepseek answer": "db.Students.find({}, {personal_name: 1, family_name: 1}).sort({family_name: 1})"
    },
    {
        "question_id": 2219,
        "spider_question_id": 3800,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT personal_name , family_name FROM Students ORDER BY family_name",
        "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.",
        "query": "db.Students.find({}, { personal_name: 1, family_name: 1}).sort({family_name: 1})",
        "gpt4 answer": "db.Students.find({}, {personal_name: 1, family_name: 1}).sort({family_name: 1})",
        "deepseek answer": "db.Students.find({}, { personal_name: 1, family_name: 1}).sort({family_name: 1})"
    },
    {
        "question_id": 2220,
        "spider_question_id": 3801,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "question": "List each test result and its count in descending order of count.",
        "query": "db.Student_Tests_Taken.aggregate([ { $group: { _id: \"$test_result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": "db.Student_Tests_Taken.aggregate([ { $group: { _id: \"$test_result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { test_result: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Student_Tests_Taken.aggregate([ { $group: { _id: \"$test_result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])"
    },
    {
        "question_id": 2221,
        "spider_question_id": 3802,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "question": "For each distinct test result, find the number of students who got the result.",
        "query": "db.Student_Tests_Taken.aggregate([ { $group: { _id: \"$test_result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": "db.Student_Tests_Taken.aggregate([ { $group: { _id: \"$test_result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "deepseek answer": "db.Student_Tests_Taken.aggregate([ { $group: { _id: \"$test_result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])"
    },
    {
        "question_id": 2222,
        "spider_question_id": 3803,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'advanced database'",
        "question": "Find the login name of the course author that teaches the course with name 'advanced database'.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.course_name\": \"advanced database\" } }, { $project: { \"_id\": 0, \"login_name\": 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $match: { course_name: 'advanced database' } }, { $lookup: { from: 'Course_Authors_and_Tutors', localField: 'author_id', foreignField: 'author_id', as: 'author_info' } }, { $unwind: '$author_info' }, { $project: { login_name: '$author_info.login_name' } } ])",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.course_name\": \"advanced database\" } }, { $project: { \"_id\": 0, \"login_name\": 1 } } ])"
    },
    {
        "question_id": 2223,
        "spider_question_id": 3804,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'advanced database'",
        "question": "Which course author teaches the 'advanced database' course? Give me his or her login name.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.course_name\": \"advanced database\" } }, { $project: { login_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.course_name\": \"advanced database\" } }, { $project: { login_name: 1 } } ])"
    },
    {
        "question_id": 2224,
        "spider_question_id": 3805,
        "db_id": "e_learning",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure'",
        "question": "Find the addresses of the course authors who teach the course with name 'operating system' or 'data structure'.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.course_name\": { $in: [\"operating system\", \"data structure\"] } } }, { $project: { address_line_1: 1 } } ])",
        "gpt4 answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"course_info\" } }, { $match: { \"course_info.course_name\": { $in: [\"operating system\", \"data structure\"] } } }, { $project: { address_line_1: 1 } } ])",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.course_name\": { $in: [\"operating system\", \"data structure\"] } } }, { $project: { address_line_1: 1 } } ])"
    },
    {
        "question_id": 2225,
        "spider_question_id": 3806,
        "db_id": "e_learning",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure'",
        "question": "What are the addresses of the course authors who teach either 'operating system' or 'data structure' course.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.course_name\": { $in: [\"operating system\", \"data structure\"] } } }, { $project: { address_line_1: 1 } } ])",
        "gpt4 answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courseDetails\" } }, { $match: { \"courseDetails.course_name\": { $in: [\"operating system\", \"data structure\"] } } }, { $project: { address_line_1: 1 } } ])",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.course_name\": { $in: [\"operating system\", \"data structure\"] } } }, { $project: { address_line_1: 1 } } ])"
    },
    {
        "question_id": 2226,
        "spider_question_id": 3809,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2",
        "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.1\": { $exists: true } } }, { $project: { address_line_1: 1, author_id: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $group: { _id: \"$author_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Course_Authors_and_Tutors\", localField: \"_id\", foreignField: \"author_id\", as: \"author_info\" } }, { $unwind: \"$author_info\" }, { $project: { address_line_1: \"$author_info.address_line_1\", author_id: \"$_id\" } } ])",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.1\": { $exists: true } } }, { $project: { address_line_1: 1, author_id: 1 } } ])"
    },
    {
        "question_id": 2227,
        "spider_question_id": 3810,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count(*) >= 2",
        "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.1\": { $exists: true } } }, { $project: { address_line_1: 1, author_id: 1 } } ])",
        "gpt4 answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $project: { address_line_1: 1, author_id: \"$author_id\", numberOfCourses: { $size: \"$courses\" } } }, { $match: { numberOfCourses: { $gte: 2 } } }, { $project: { address_line_1: 1, author_id: 1 } } ])",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $match: { \"courses.1\": { $exists: true } } }, { $project: { address_line_1: 1, author_id: 1 } } ])"
    },
    {
        "question_id": 2228,
        "spider_question_id": 3811,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = 'Julio'",
        "question": "Find the names of courses taught by the tutor who has personal name 'Julio'.",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $match: { personal_name: \"Julio\" } }, { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $project: { course_name: \"$courses.course_name\" } } ])",
        "gpt4 answer": "db.Course_Authors_and_Tutors.aggregate([ { $match: { personal_name: 'Julio' } }, { $lookup: { from: 'Courses', localField: 'author_id', foreignField: 'author_id', as: 'courses_taught' } }, { $unwind: '$courses_taught' }, { $project: { course_name: '$courses_taught.course_name' } } ])",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $match: { personal_name: \"Julio\" } }, { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $project: { course_name: \"$courses.course_name\" } } ])"
    },
    {
        "question_id": 2229,
        "spider_question_id": 3812,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = 'Julio'",
        "question": "What are the names of the courses taught by the tutor whose personal name is 'Julio'?",
        "query": "db.Course_Authors_and_Tutors.aggregate([ { $match: { personal_name: \"Julio\" } }, { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $project: { course_name: \"$courses.course_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Course_Authors_and_Tutors.aggregate([ { $match: { personal_name: \"Julio\" } }, { $lookup: { from: \"Courses\", localField: \"author_id\", foreignField: \"author_id\", as: \"courses\" } }, { $unwind: \"$courses\" }, { $project: { course_name: \"$courses.course_name\" } } ])"
    },
    {
        "question_id": 2230,
        "spider_question_id": 3813,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = 'Computer Science'",
        "question": "Find the names and descriptions of courses that belong to the subject named 'Computer Science'.",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $match: { \"subject_info.subject_name\": \"Computer Science\" } }, { $project: { course_name: 1, course_description: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $match: {\"subject_info.subject_name\": \"Computer Science\"} }, { $project: { course_name: 1, course_description: 1 } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $match: { \"subject_info.subject_name\": \"Computer Science\" } }, { $project: { course_name: 1, course_description: 1 } } ])"
    },
    {
        "question_id": 2231,
        "spider_question_id": 3814,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_name , T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = 'Computer Science'",
        "question": "What are the names and descriptions of the all courses under the 'Computer Science' subject?",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $match: { \"subject_info.subject_name\": \"Computer Science\" } }, { $project: { course_name: 1, course_description: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $match: { \"subject_info.subject_name\": \"Computer Science\" } }, { $project: { course_name: 1, course_description: 1 } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $match: { \"subject_info.subject_name\": \"Computer Science\" } }, { $project: { course_name: 1, course_description: 1 } } ])"
    },
    {
        "question_id": 2232,
        "spider_question_id": 3815,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
        "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, number_of_courses: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, number_of_courses: 1 } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } } ])"
    },
    {
        "question_id": 2233,
        "spider_question_id": 3816,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
        "question": "What are the subject ID, subject name, and the number of available courses for each subject?",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, number_of_courses: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, number_of_courses: 1 } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } } ])"
    },
    {
        "question_id": 2234,
        "spider_question_id": 3817,
        "db_id": "e_learning",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
        "question": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $group: { _id: \"$subject_id\", numberOfCourses: { $sum: 1 } } }, { $lookup: { from: \"Subjects\", localField: \"_id\", foreignField: \"subject_id\", as: \"subjectDetails\" } }, { $unwind: \"$subjectDetails\" }, { $project: { subject_id: \"$_id\", subject_name: \"$subjectDetails.subject_name\", numberOfCourses: 1 } }, { $sort: { numberOfCourses: 1 } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 2235,
        "spider_question_id": 3818,
        "db_id": "e_learning",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.subject_id , T2.subject_name , COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",
        "question": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subjectDetails\" }}, { $unwind: \"$subjectDetails\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subjectDetails.subject_name\" }, courseCount: { $sum: 1 } }}, { $sort: { courseCount: 1 } }, { $project: { subject_id: \"$_id\", subject_name: 1, number_of_courses: \"$courseCount\" }} ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Subjects\", localField: \"subject_id\", foreignField: \"subject_id\", as: \"subject_info\" } }, { $unwind: \"$subject_info\" }, { $group: { _id: \"$subject_id\", subject_name: { $first: \"$subject_info.subject_name\" }, count: { $sum: 1 } } }, { $project: { subject_id: \"$_id\", subject_name: 1, count: 1 } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 2236,
        "spider_question_id": 3821,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the course that has the most student enrollment?",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollment\" } }, { $project: { course_name: 1 } }, { $sort: { enrollmentCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Courses\", localField: \"_id\", foreignField: \"course_id\", as: \"courseDetails\" } }, { $unwind: \"$courseDetails\" }, { $project: { course_name: \"$courseDetails.course_name\" } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollment\" } }, { $project: { course_name: 1 } }, { $sort: { enrollmentCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2237,
        "spider_question_id": 3822,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which course is enrolled in by the most students? Give me the course name.",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollment\" } }, { $project: { course_name: 1} }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$course_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Courses\", localField: \"_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $project: { course_name: \"$course_info.course_name\" } } ])",
        "deepseek answer": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollment\" } }, { $project: { course_name: 1} }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2238,
        "spider_question_id": 3823,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1",
        "question": "What are the names of the courses that have exactly 1 student enrollment?",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrolments\" } }, { $project: { course_name: 1, enrolmentCount: { $size: \"$enrolments\" } } }, { $match: { enrolmentCount: 1 } }, { $project: { course_name: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrolments\" } }, { $project: { course_name: 1, enrolmentCount: { $size: \"$enrolments\" } } }, { $match: { enrolmentCount: 1 } }, { $project: { course_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2239,
        "spider_question_id": 3824,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1",
        "question": "Find the names of the courses that have just one student enrollment.",
        "query": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$course_id\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $lookup: { from: \"Courses\", localField: \"_id\", foreignField: \"course_id\", as: \"courseDetails\" } }, { $unwind: \"$courseDetails\" }, { $project: { course_name: \"$courseDetails.course_name\" } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$course_id\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $lookup: { from: \"Courses\", localField: \"_id\", foreignField: \"course_id\", as: \"courseDetails\" } }, { $unwind: \"$courseDetails\" }, { $project: { course_name: \"$courseDetails.course_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2240,
        "spider_question_id": 3825,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2",
        "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrolments\" } }, { $match: { \"enrolments.2\": { $exists: true } } }, { $project: { course_description: 1, course_name: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrolments\" } }, { $match: { \"enrolments.2\": { $exists: true } } }, { $project: { course_description: 1, course_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2241,
        "spider_question_id": 3826,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2",
        "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
        "query": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollments\" } }, { $project: { course_description: 1, course_name: 1, numberOfEnrollments: { $size: \"$enrollments\" } } }, { $match: { numberOfEnrollments: { $gt: 2 } } }, { $project: { course_description: 1, course_name: 1 } } ])",
        "gpt4 answer": "db.Courses.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"course_id\", foreignField: \"course_id\", as: \"enrollments\" } }, { $project: { course_description: 1, course_name: 1, numberOfEnrollments: { $size: \"$enrollments\" } } }, { $match: { numberOfEnrollments: { $gt: 2 } } }, { $project: { course_description: 1, course_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2242,
        "spider_question_id": 3827,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "query": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Courses\", localField: \"course_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.course_name\", numberOfEnrollments: { $sum: 1 } } }, { $project: { course_name: \"$_id\", numberOfEnrollments: 1 } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Courses\", localField: \"course_id\", foreignField: \"course_id\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $group: { _id: \"$course_info.course_name\", numberOfEnrollments: { $sum: 1 } } }, { $project: { course_name: \"$_id\", numberOfEnrollments: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2243,
        "spider_question_id": 3837,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Find the student ID and login name of the student with the most course enrollments",
        "query": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", login_name: { $first: \"$student_info.login_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { student_id: \"$_id\", login_name: 1 } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { student_id: \"$_id\", login_name: \"$student_info.login_name\" } } ])",
        "deepseek answer": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", login_name: { $first: \"$student_info.login_name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { student_id: \"$_id\", login_name: 1 } } ])"
    },
    {
        "question_id": 2244,
        "spider_question_id": 3838,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What are the student ID and login name of the student who are enrolled in the most courses?",
        "query": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $project: { student_id: \"$_id\", login_name: { $arrayElemAt: [\"$student_info.login_name\", 0] } } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_details\" } }, { $project: { student_id: \"$_id\", login_name: { $arrayElemAt: [\"$student_details.login_name\", 0] } } } ])",
        "deepseek answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $project: { student_id: \"$_id\", login_name: { $arrayElemAt: [\"$student_info.login_name\", 0] } } } ])"
    },
    {
        "question_id": 2245,
        "spider_question_id": 3839,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2",
        "question": "Find the student ID and personal name of the student with at least two enrollments.",
        "query": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", personal_name: { $first: \"$student_info.personal_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { student_id: \"$_id\", personal_name: 1 } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { student_id: \"$_id\", personal_name: \"$student_info.personal_name\" } } ])",
        "deepseek answer": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", personal_name: { $first: \"$student_info.personal_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { student_id: \"$_id\", personal_name: 1 } } ])"
    },
    {
        "question_id": 2246,
        "spider_question_id": 3840,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2",
        "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
        "query": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", personal_name: { $first: \"$student_info.personal_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { student_id: \"$_id\", personal_name: 1 } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", coursesCount: { $sum: 1 } } }, { $match: { coursesCount: { $gte: 2 } } }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { student_id: \"$_id\", personal_name: \"$student_info.personal_name\" } } ])",
        "deepseek answer": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", personal_name: { $first: \"$student_info.personal_name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { student_id: \"$_id\", personal_name: 1 } } ])"
    },
    {
        "question_id": 2247,
        "spider_question_id": 3841,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2",
        "question": "Find the student ID and middle name for all the students with at most two enrollments.",
        "query": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", middle_name: { $first: \"$student_info.middle_name\" }, count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $project: { student_id: \"$_id\", middle_name: 1 } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { student_id: \"$_id\", middle_name: \"$student_info.middle_name\" } } ])",
        "deepseek answer": "db.Student_Course_Enrolment.aggregate([ { $lookup: { from: \"Students\", localField: \"student_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_id\", middle_name: { $first: \"$student_info.middle_name\" }, count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $project: { student_id: \"$_id\", middle_name: 1 } } ])"
    },
    {
        "question_id": 2248,
        "spider_question_id": 3842,
        "db_id": "e_learning",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2",
        "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
        "query": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $project: { student_id: \"$_id\", middle_name: { $arrayElemAt: [\"$student_info.middle_name\", 0] } } } ])",
        "gpt4 answer": "db.Student_Course_Enrolment.aggregate([ { $group: { _id: \"$student_id\", count: { $sum: 1 } } }, { $match: { count: { $lte: 2 } } }, { $lookup: { from: \"Students\", localField: \"_id\", foreignField: \"student_id\", as: \"student_info\" } }, { $project: { student_id: \"$_id\", middle_name: { $arrayElemAt: [\"$student_info.middle_name\", 0] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2249,
        "spider_question_id": 3843,
        "db_id": "e_learning",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
        "question": "Find the personal names of students not enrolled in any course.",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollment\" } }, { $match: { \"enrollment\": { $size: 0 } } }, { $project: { personal_name: 1 } } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $match: { enrolments: [] } }, { $project: { personal_name: 1 } } ])",
        "deepseek answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollment\" } }, { $match: { \"enrollment\": { $size: 0 } } }, { $project: { personal_name: 1 } } ])"
    },
    {
        "question_id": 2250,
        "spider_question_id": 3844,
        "db_id": "e_learning",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
        "question": "Which students not enrolled in any course? Find their personal names.",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollment\" } }, { $match: { \"enrollment\": { $size: 0 } } }, { $project: { personal_name: 1 } } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollment_info\" } }, { $match: { enrollment_info: { $size: 0 } } }, { $project: { personal_name: 1 } } ])",
        "deepseek answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrollment\" } }, { $match: { \"enrollment\": { $size: 0 } } }, { $project: { personal_name: 1 } } ])"
    },
    {
        "question_id": 2251,
        "spider_question_id": 3845,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
        "question": "How many students did not have any course enrollment?",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $match: { enrolments: { $size: 0 } } }, { $count: \"students_without_enrolment\" } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $match: { enrolments: { $size: 0 } } }, { $count: \"students_without_enrolment\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2252,
        "spider_question_id": 3846,
        "db_id": "e_learning",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
        "question": "Count the number of students who did not enroll in any course.",
        "query": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $match: { enrolments: { $size: 0 } } }, { $count: \"studentsWithoutEnrolment\" } ])",
        "gpt4 answer": "db.Students.aggregate([ { $lookup: { from: \"Student_Course_Enrolment\", localField: \"student_id\", foreignField: \"student_id\", as: \"enrolments\" } }, { $match: { enrolments: { $size: 0 } } }, { $count: \"studentsWithoutEnrolment\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2253,
        "spider_question_id": 3854,
        "db_id": "insurance_policies",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2 EXCEPT SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id",
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $lookup: { from: \"Claims\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"claims\" } }, { $match: { \"claims\": { $size: 0 } } }, { $project: { Customer_Details: 1, Customer_ID: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $lookup: { from: \"Claims\", localField: \"policies.Policy_ID\", foreignField: \"Policy_ID\", as: \"claims\" } }, { $match: { \"claims\": { $size: 0 } } }, { $project: { Customer_Details: 1, Customer_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2254,
        "spider_question_id": 3855,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "query": "db.Payments.find({}, {Payment_Method_Code: 1, Date_Payment_Made: 1, Amount_Payment: 1}).sort({Date_Payment_Made: 1})",
        "gpt4 answer": "db.Payments.find({}, { Payment_Method_Code: 1, Date_Payment_Made: 1, Amount_Payment: 1 }).sort({ Date_Payment_Made: 1 })",
        "deepseek answer": "db.Payments.find({}, {Payment_Method_Code: 1, Date_Payment_Made: 1, Amount_Payment: 1}).sort({Date_Payment_Made: 1})"
    },
    {
        "question_id": 2255,
        "spider_question_id": 3856,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "query": "db.Payments.find({}, {Payment_Method_Code: 1, Date_Payment_Made: 1, Amount_Payment: 1}).sort({Date_Payment_Made: 1})",
        "gpt4 answer": "db.Payments.find({}, {Payment_Method_Code: 1, Date_Payment_Made: 1, Amount_Payment: 1}).sort({Date_Payment_Made: 1})",
        "deepseek answer": "db.Payments.find({}, {Payment_Method_Code: 1, Date_Payment_Made: 1, Amount_Payment: 1}).sort({Date_Payment_Made: 1})"
    },
    {
        "question_id": 2256,
        "spider_question_id": 3857,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "query": "db.Claims.aggregate([ { $sort: { Amount_Claimed: -1 } }, { $limit: 1 }, { $project: { Amount_Settled: 1, Amount_Claimed: 1 } } ])",
        "gpt4 answer": "db.Claims.find({}, {Amount_Settled: 1, Amount_Claimed: 1}).sort({Amount_Claimed: -1}).limit(1)",
        "deepseek answer": "db.Claims.aggregate([ { $sort: { Amount_Claimed: -1 } }, { $limit: 1 }, { $project: { Amount_Settled: 1, Amount_Claimed: 1 } } ])"
    },
    {
        "question_id": 2257,
        "spider_question_id": 3858,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
        "query": "db.Claims.aggregate([ { $sort: { Amount_Claimed: -1 } }, { $limit: 1 }, { $project: { Amount_Settled: 1, Amount_Claimed: 1 } } ])",
        "gpt4 answer": "db.Claims.find({}, { Amount_Settled: 1, Amount_Claimed: 1 }) .sort({ Amount_Claimed: -1 }) .limit(1)",
        "deepseek answer": "db.Claims.aggregate([ { $sort: { Amount_Claimed: -1 } }, { $limit: 1 }, { $project: { Amount_Settled: 1, Amount_Claimed: 1 } } ])"
    },
    {
        "question_id": 2258,
        "spider_question_id": 3859,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "query": "db.Claims.find({}, { Amount_Settled: 1, Amount_Claimed: 1 }).sort({ Amount_Settled: 1 }).limit(1)",
        "gpt4 answer": "db.Claims.find({}, { Amount_Settled: 1, Amount_Claimed: 1 }).sort({ Amount_Settled: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2259,
        "spider_question_id": 3860,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
        "query": "db.Claims.aggregate([ { $sort: { Amount_Settled: 1 } }, { $limit: 1 }, { $project: { Amount_Settled: 1, Amount_Claimed: 1 } } ])",
        "gpt4 answer": "db.Claims.find({}, { Amount_Settled: 1, Amount_Claimed: 1 }) .sort({ Amount_Settled: 1 }) .limit(1)",
        "deepseek answer": "db.Claims.aggregate([ { $sort: { Amount_Settled: 1 } }, { $limit: 1 }, { $project: { Amount_Settled: 1, Amount_Claimed: 1 } } ])"
    },
    {
        "question_id": 2260,
        "spider_question_id": 3861,
        "db_id": "insurance_policies",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )",
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "query": "db.Claims.aggregate([ { $group: { _id: null, averageAmountClaimed: { $avg: \"$Amount_Claimed\" } } }, { $lookup: { from: \"Claims\", let: { averageAmountClaimed: \"$averageAmountClaimed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Amount_Claimed\", \"$$averageAmountClaimed\"] } } }, { $project: { Date_Claim_Made: 1, Date_Claim_Settled: 1 } } ], as: \"claims_above_average\" } }, { $unwind: \"$claims_above_average\" }, { $replaceRoot: { newRoot: \"$claims_above_average\" } } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $group: { _id: null, averageAmountClaimed: { $avg: \"$Amount_Claimed\" } } }, { $lookup: { from: \"Claims\", let: { averageAmountClaimed: \"$averageAmountClaimed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Amount_Claimed\", \"$$averageAmountClaimed\"] } } }, { $project: { Date_Claim_Made: 1, Date_Claim_Settled: 1 } } ], as: \"claims_above_average\" } }, { $unwind: \"$claims_above_average\" }, { $replaceRoot: { newRoot: \"$claims_above_average\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2261,
        "spider_question_id": 3862,
        "db_id": "insurance_policies",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Claims WHERE Amount_Claimed > ( SELECT avg(Amount_Claimed) FROM Claims )",
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "query": "db.Claims.aggregate([ { $group: { _id: null, averageAmountClaimed: { $avg: \"$Amount_Claimed\" } } }, { $lookup: { from: \"Claims\", let: { avgAmountClaimed: \"$averageAmountClaimed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Amount_Claimed\", \"$$avgAmountClaimed\"] } } }, { $project: { Date_Claim_Made: 1, Date_Claim_Settled: 1 } } ], as: \"claimsAboveAverage\" } }, { $unwind: \"$claimsAboveAverage\" }, { $replaceRoot: { newRoot: \"$claimsAboveAverage\" } } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $group: { _id: null, averageAmountClaimed: { $avg: \"$Amount_Claimed\" } } }, { $lookup: { from: \"Claims\", let: { avgAmountClaimed: \"$averageAmountClaimed\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Amount_Claimed\", \"$$avgAmountClaimed\"] } } }, { $project: { Date_Claim_Made: 1, Date_Claim_Settled: 1 } } ], as: \"claimsAboveAverage\" } }, { $unwind: \"$claimsAboveAverage\" }, { $replaceRoot: { newRoot: \"$claimsAboveAverage\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2262,
        "spider_question_id": 3864,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg(Amount_Settled) FROM Claims )",
        "question": "Return the claim start date for the claims whose claimed amount is no more than the average",
        "query": "db.Claims.aggregate([ { $match: { Amount_Settled: { $lte: db.Claims.aggregate([ { $group: { _id: null, average: { $avg: \"$Amount_Settled\" } } } ]).toArray()[0].average } } }, { $project: { Date_Claim_Made: 1 } } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $group: { _id: null, averageAmountSettled: { $avg: \"$Amount_Settled\" } } }, { $lookup: { from: \"Claims\", let: { avgAmountSettled: \"$averageAmountSettled\" }, pipeline: [ { $match: { $expr: { $lte: [\"$Amount_Settled\", \"$$avgAmountSettled\"] } } } ], as: \"claims_with_date\" } }, { $unwind: \"$claims_with_date\" }, { $replaceRoot: { newRoot: \"$claims_with_date\" } }, { $project: { Date_Claim_Made: 1 } } ])",
        "deepseek answer": "db.Claims.aggregate([ { $match: { Amount_Settled: { $lte: db.Claims.aggregate([ { $group: { _id: null, average: { $avg: \"$Amount_Settled\" } } } ]).toArray()[0].average } } }, { $project: { Date_Claim_Made: 1 } } ])"
    },
    {
        "question_id": 2263,
        "spider_question_id": 3867,
        "db_id": "insurance_policies",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.claim_id , T1.date_claim_made , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "query": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"Settlements\" } }, { $project: { Claim_ID: 1, Date_Claim_Made: 1, NumberOfSettlements: { $size: \"$Settlements\" } } }, { $sort: { NumberOfSettlements: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"Settlements\" } }, { $project: { Claim_ID: 1, Date_Claim_Made: 1, NumberOfSettlements: { $size: \"$Settlements\" } } }, { $sort: { NumberOfSettlements: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2264,
        "spider_question_id": 3868,
        "db_id": "insurance_policies",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.claim_id , T1.date_claim_made , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "query": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"Settlements\" } }, { $unwind: \"$Settlements\" }, { $group: { _id: { Claim_ID: \"$Claim_ID\", Date_Claim_Made: \"$Date_Claim_Made\" }, SettlementCount: { $sum: 1 } } }, { $sort: { SettlementCount: -1 } }, { $limit: 1 }, { $project: { Claim_ID: \"$_id.Claim_ID\", Date_Claim_Made: \"$_id.Date_Claim_Made\", Count: \"$SettlementCount\" } } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"Settlements\" } }, { $unwind: \"$Settlements\" }, { $group: { _id: { Claim_ID: \"$Claim_ID\", Date_Claim_Made: \"$Date_Claim_Made\" }, SettlementCount: { $sum: 1 } } }, { $sort: { SettlementCount: -1 } }, { $limit: 1 }, { $project: { Claim_ID: \"$_id.Claim_ID\", Date_Claim_Made: \"$_id.Date_Claim_Made\", Count: \"$SettlementCount\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2265,
        "spider_question_id": 3869,
        "db_id": "insurance_policies",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "query": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"Settlements\" } }, { $unwind: \"$Settlements\" }, { $group: { _id: \"$Claim_ID\", Count: { $sum: 1 }, LatestSettlementDate: { $max: \"$Date_Claim_Settled\" } } }, { $sort: { LatestSettlementDate: -1 } }, { $limit: 1 }, { $project: { Claim_ID: \"$_id\", Number_of_Settlements: \"$Count\" } } ])",
        "gpt4 answer": "db.Claims.aggregate([ { $lookup: { from: \"Settlements\", localField: \"Claim_ID\", foreignField: \"Claim_ID\", as: \"Settlements\" } }, { $unwind: \"$Settlements\" }, { $group: { _id: \"$Claim_ID\", Count: { $sum: 1 }, LatestSettlementDate: { $max: \"$Date_Claim_Settled\" } } }, { $sort: { LatestSettlementDate: -1 } }, { $limit: 1 }, { $project: { Claim_ID: \"$_id\", Number_of_Settlements: \"$Count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2266,
        "spider_question_id": 3871,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "query": "db.Claims.find({}, {Date_Claim_Made: 1}).sort({Date_Claim_Made: 1}).limit(1)",
        "gpt4 answer": "db.Claims.find({}, {Date_Claim_Made: 1}).sort({Date_Claim_Made: 1}).limit(1)",
        "deepseek answer": "db.Claims.find({}, {Date_Claim_Made: 1}).sort({Date_Claim_Made: 1}).limit(1)"
    },
    {
        "question_id": 2267,
        "spider_question_id": 3872,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "question": "Tell me the the date when the first claim was made.",
        "query": "db.Claims.find({}, {Date_Claim_Made: 1}).sort({Date_Claim_Made: 1}).limit(1)",
        "gpt4 answer": "db.Claims.find({}, { Date_Claim_Made: 1 }).sort({ Date_Claim_Made: 1 }).limit(1)",
        "deepseek answer": "db.Claims.find({}, {Date_Claim_Made: 1}).sort({Date_Claim_Made: 1}).limit(1)"
    },
    {
        "question_id": 2268,
        "spider_question_id": 3873,
        "db_id": "insurance_policies",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Amount_Settled) FROM Settlements",
        "question": "What is the total amount of settlement made for all the settlements?",
        "query": "db.Settlements.aggregate([ { $group: { _id: null, totalAmountSettled: { $sum: \"$Amount_Settled\" } } } , { $project: { totalAmountSettled: 1 } }])",
        "gpt4 answer": "db.Settlements.aggregate([ { $group: { _id: null, totalSettlementAmount: { $sum: \"$Amount_Settled\" } } }, { $project: { totalSettlementAmount: 1 } } ])",
        "deepseek answer": "db.Settlements.aggregate([ { $group: { _id: null, totalAmountSettled: { $sum: \"$Amount_Settled\" } } } , { $project: { totalAmountSettled: 1 } }])"
    },
    {
        "question_id": 2269,
        "spider_question_id": 3874,
        "db_id": "insurance_policies",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Amount_Settled) FROM Settlements",
        "question": "Compute the total amount of settlement across all the settlements.",
        "query": "db.Settlements.aggregate([ { $group: { _id: null, totalAmountSettled: { $sum: \"$Amount_Settled\" } } } , { $project: { totalAmountSettled: 1 } }])",
        "gpt4 answer": "db.Settlements.aggregate([ { $group: { _id: null, totalAmountSettled: { $sum: \"$Amount_Settled\" } } }, { $project: { totalAmountSettled: 1 } } ])",
        "deepseek answer": "db.Settlements.aggregate([ { $group: { _id: null, totalAmountSettled: { $sum: \"$Amount_Settled\" } } } , { $project: { totalAmountSettled: 1 } }])"
    },
    {
        "question_id": 2270,
        "spider_question_id": 3875,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $project: { Customer_ID: 1, Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $match: { \"Policies.1\": { $exists: true } } }, { $project: { Customer_Details: 1, Customer_ID: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $project: { Customer_ID: 1, Customer_Details: 1 } } ])"
    },
    {
        "question_id": 2271,
        "spider_question_id": 3876,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $project: { Customer_ID: 1, Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $project: { Customer_Details: 1, Customer_ID: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies.1\": { $exists: true } } }, { $project: { Customer_ID: 1, Customer_Details: 1 } } ])"
    },
    {
        "question_id": 2272,
        "spider_question_id": 3877,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements",
        "question": "What are the claim dates and settlement dates of all the settlements?",
        "query": "db.Settlements.find({}, { Date_Claim_Made: 1, Date_Claim_Settled: 1 })",
        "gpt4 answer": "db.Settlements.find({}, { Date_Claim_Made: 1, Date_Claim_Settled: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2273,
        "spider_question_id": 3878,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_Claim_Made , Date_Claim_Settled FROM Settlements",
        "question": "Tell me the the claim date and settlement date for each settlement case.",
        "query": "db.Settlements.find({}, { Date_Claim_Made: 1, Date_Claim_Settled: 1 })",
        "gpt4 answer": "db.Settlements.find({}, { Date_Claim_Made: 1, Date_Claim_Settled: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2274,
        "spider_question_id": 3879,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular payment method?",
        "query": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Payment_Method_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } }}, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Payment_Method_Code: \"$_id\" } }])"
    },
    {
        "question_id": 2275,
        "spider_question_id": 3880,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which payment method is used the most often?",
        "query": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Payment_Method_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Payment_Method_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Payment_Method_Code: \"$_id\" } }])"
    },
    {
        "question_id": 2276,
        "spider_question_id": 3881,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "question": "With which kind of payment method were the least number of payments processed?",
        "query": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Payment_Method_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Payment_Method_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Payment_Method_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2277,
        "spider_question_id": 3882,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the payment method that were used the least often?",
        "query": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Payment_Method_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: \"$Payment_Method_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Payment_Method_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2278,
        "spider_question_id": 3883,
        "db_id": "insurance_policies",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Amount_Payment) FROM Payments",
        "question": "What is the total amount of payment?",
        "query": "db.Payments.aggregate([ { $group: { _id: null, totalAmountPayment: { $sum: \"$Amount_Payment\" } } } , { $project: { totalAmountPayment: 1 } }])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: null, totalAmountPayment: { $sum: \"$Amount_Payment\" } } }, { $project: { totalAmountPayment: 1 } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: null, totalAmountPayment: { $sum: \"$Amount_Payment\" } } } , { $project: { totalAmountPayment: 1 } }])"
    },
    {
        "question_id": 2279,
        "spider_question_id": 3884,
        "db_id": "insurance_policies",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Amount_Payment) FROM Payments",
        "question": "Compute the total amount of payment processed.",
        "query": "db.Payments.aggregate([ { $group: { _id: null, totalAmount: { $sum: \"$Amount_Payment\" } } }, { $project: { totalAmount: 1 } } ])",
        "gpt4 answer": "db.Payments.aggregate([ { $group: { _id: null, totalAmount: { $sum: \"$Amount_Payment\" } } }, { $project: { totalAmount: 1 } } ])",
        "deepseek answer": "db.Payments.aggregate([ { $group: { _id: null, totalAmount: { $sum: \"$Amount_Payment\" } } }, { $project: { totalAmount: 1 } } ])"
    },
    {
        "question_id": 2280,
        "spider_question_id": 3887,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which kind of policy type was chosen by the most customers?",
        "query": "db.Customer_Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Policy_Type_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Customer_Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Customer_Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Policy_Type_Code: \"$_id\" } }])"
    },
    {
        "question_id": 2281,
        "spider_question_id": 3888,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the policy type the most customers choose.",
        "query": "db.Customer_Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Policy_Type_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Customer_Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.Customer_Policies.aggregate([ { $group: { _id: \"$Policy_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Policy_Type_Code: \"$_id\" } }])"
    },
    {
        "question_id": 2282,
        "spider_question_id": 3891,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "query": "db.Payments.find({Payment_Method_Code: 'Visa'}, {Payment_ID: 1, Date_Payment_Made: 1, Amount_Payment: 1})",
        "gpt4 answer": "db.Payments.find( { Payment_Method_Code: 'Visa' }, { Payment_ID: 1, Date_Payment_Made: 1, Amount_Payment: 1 } )",
        "deepseek answer": "db.Payments.find({Payment_Method_Code: 'Visa'}, {Payment_ID: 1, Date_Payment_Made: 1, Amount_Payment: 1})"
    },
    {
        "question_id": 2283,
        "spider_question_id": 3892,
        "db_id": "insurance_policies",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "query": "db.Payments.find( { Payment_Method_Code: 'Visa' }, { Payment_ID: 1, Date_Payment_Made: 1, Amount_Payment: 1 } )",
        "gpt4 answer": "db.Payments.find({ \"Payment_Method_Code\": \"Visa\" }, { \"Payment_ID\": 1, \"Date_Payment_Made\": 1, \"Amount_Payment\": 1, \"_id\": 0 })",
        "deepseek answer": "db.Payments.find( { Payment_Method_Code: 'Visa' }, { Payment_ID: 1, Date_Payment_Made: 1, Amount_Payment: 1 } )"
    },
    {
        "question_id": 2284,
        "spider_question_id": 3893,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
        "question": "List the details of the customers who do not have any policies.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $match: { \"Policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"policies\" } }, { $match: { \"policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])"
    },
    {
        "question_id": 2285,
        "spider_question_id": 3894,
        "db_id": "insurance_policies",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $match: { \"Policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Policies\", localField: \"Customer_ID\", foreignField: \"Customer_ID\", as: \"Policies\" } }, { $match: { \"Policies\": { $size: 0 } } }, { $project: { Customer_Details: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2286,
        "spider_question_id": 3897,
        "db_id": "insurance_policies",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Amount_Claimed) FROM Claims",
        "question": "Find the total claimed amount of all the claims.",
        "query": "db.Claims.aggregate([ { $group: { _id: null, totalClaimedAmount: { $sum: \"$Amount_Claimed\" } } } , { $project: { totalClaimedAmount: 1 } }])",
        "gpt4 answer": "db.Claims.aggregate([ { $group: { _id: null, totalAmountClaimed: { $sum: \"$Amount_Claimed\" } } } ,{ $project: { totalAmountClaimed: 1 } } ])",
        "deepseek answer": "db.Claims.aggregate([ { $group: { _id: null, totalClaimedAmount: { $sum: \"$Amount_Claimed\" } } } , { $project: { totalClaimedAmount: 1 } }])"
    },
    {
        "question_id": 2287,
        "spider_question_id": 3898,
        "db_id": "insurance_policies",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Amount_Claimed) FROM Claims",
        "question": "What is total amount claimed summed across all the claims?",
        "query": "db.Claims.aggregate([ { $group: { _id: null, totalClaimedAmount: { $sum: \"$Amount_Claimed\" } } } , { $project: { totalClaimedAmount: 1 } }])",
        "gpt4 answer": "db.Claims.aggregate([ { $group: { _id: null, totalAmountClaimed: { $sum: \"$Amount_Claimed\" } } }, { $project: { totalAmountClaimed: 1 } } ])",
        "deepseek answer": "db.Claims.aggregate([ { $group: { _id: null, totalClaimedAmount: { $sum: \"$Amount_Claimed\" } } } , { $project: { totalClaimedAmount: 1 } }])"
    },
    {
        "question_id": 2288,
        "spider_question_id": 3899,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "question": "Which department has the largest number of employees?",
        "query": "db.Affiliated_With.aggregate([ { $group: { _id: \"$Department\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Department\", localField: \"_id\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { name: \"$department_info.Name\" } } ])",
        "gpt4 answer": "db.Affiliated_With.aggregate([ { $group: { _id: \"$Department\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Department\", localField: \"_id\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { name: \"$department_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2289,
        "spider_question_id": 3900,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "question": "Find the department with the most employees.",
        "query": "db.Affiliated_With.aggregate([ { $group: { _id: \"$Department\", numEmployees: { $sum: 1 } } }, { $sort: { numEmployees: -1 } }, { $limit: 1 }, { $lookup: { from: \"Department\", localField: \"_id\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { name: \"$department_info.Name\" } } ])",
        "gpt4 answer": "db.Affiliated_With.aggregate([ { $group: { _id: \"$Department\", numEmployees: { $sum: 1 } } }, { $sort: { numEmployees: -1 } }, { $limit: 1 }, { $lookup: { from: \"Department\", localField: \"_id\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { name: \"$department_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2290,
        "spider_question_id": 3905,
        "db_id": "hospital_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn",
        "question": "What are names of patients who made an appointment?",
        "query": "db.Appointment.aggregate([ { $lookup: { from: \"Patient\", localField: \"Patient\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $project: { Name: \"$patient_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Appointment.aggregate([ { $lookup: { from: \"Patient\", localField: \"Patient\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $project: { Name: \"$patient_info.Name\" } } ])"
    },
    {
        "question_id": 2291,
        "spider_question_id": 3907,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "query": "db.Appointment.aggregate([ { $group: { _id: \"$Patient\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"Patient\", localField: \"_id\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $project: { name: \"$patient_info.Name\", phone: \"$patient_info.Phone\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Appointment.aggregate([ { $group: { _id: \"$Patient\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"Patient\", localField: \"_id\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $project: { name: \"$patient_info.Name\", phone: \"$patient_info.Phone\" } } ])"
    },
    {
        "question_id": 2292,
        "spider_question_id": 3908,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count(*) > 1",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "query": "db.Appointment.aggregate([ { $lookup: { from: \"Patient\", localField: \"Patient\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $group: { _id: \"$Patient\", name: { $first: \"$patient_info.Name\" }, phone: { $first: \"$patient_info.Phone\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { name: 1, phone: 1 } } ])",
        "gpt4 answer": "db.Appointment.aggregate([ { $group: { _id: \"$Patient\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"Patient\", localField: \"_id\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $project: { name: \"$patient_info.Name\", phone: \"$patient_info.Phone\" } } ])",
        "deepseek answer": "db.Appointment.aggregate([ { $lookup: { from: \"Patient\", localField: \"Patient\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $group: { _id: \"$Patient\", name: { $first: \"$patient_info.Name\" }, phone: { $first: \"$patient_info.Phone\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { name: 1, phone: 1 } } ])"
    },
    {
        "question_id": 2293,
        "spider_question_id": 3909,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "question": "Find the id of the appointment with the most recent start date?",
        "query": "db.Appointment.find({}, { AppointmentID: 1 }).sort({ Start: -1 }).limit(1)",
        "gpt4 answer": "db.Appointment.find({}, { AppointmentID: 1 }).sort({ Start: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2294,
        "spider_question_id": 3910,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
        "question": "What is the id of the appointment that started most recently?",
        "query": "db.Appointment.find({}, {AppointmentID: 1}).sort({Start: -1}).limit(1)",
        "gpt4 answer": "db.Appointment.find({}, {AppointmentID: 1}).sort({Start: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2295,
        "spider_question_id": 3911,
        "db_id": "hospital_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
        "question": "List the name of physicians who took some appointment.",
        "query": "db.Appointment.aggregate([ { $lookup: { from: \"Physician\", localField: \"Physician\", foreignField: \"EmployeeID\", as: \"physician_info\" } }, { $unwind: \"$physician_info\" }, { $project: { name: \"$physician_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Appointment.aggregate([ { $lookup: { from: \"Physician\", localField: \"Physician\", foreignField: \"EmployeeID\", as: \"physician_info\" } }, { $unwind: \"$physician_info\" }, { $project: { name: \"$physician_info.Name\" } } ])"
    },
    {
        "question_id": 2296,
        "spider_question_id": 3912,
        "db_id": "hospital_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
        "question": "What are the names of all the physicians who took appointments.",
        "query": "db.Appointment.aggregate([ { $lookup: { from: \"Physician\", localField: \"Physician\", foreignField: \"EmployeeID\", as: \"physician_info\" } }, { $unwind: \"$physician_info\" }, { $project: { name: \"$physician_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Appointment.aggregate([ { $lookup: { from: \"Physician\", localField: \"Physician\", foreignField: \"EmployeeID\", as: \"physician_info\" } }, { $unwind: \"$physician_info\" }, { $project: { name: \"$physician_info.Name\" } } ])"
    },
    {
        "question_id": 2297,
        "spider_question_id": 3913,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
        "question": "List the name of physicians who never took any appointment.",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Appointment\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"appointments\" } }, { $match: { appointments: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Appointment\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"appointments\" } }, { $match: { appointments: { $size: 0 } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2298,
        "spider_question_id": 3921,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = 'John Dorian'",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "query": "db.Patient.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"SSN\", foreignField: \"Patient\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $lookup: { from: \"Physician\", localField: \"prescribes.Physician\", foreignField: \"EmployeeID\", as: \"physician\" } }, { $unwind: \"$physician\" }, { $match: { \"physician.Name\": \"John Dorian\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Patient.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"SSN\", foreignField: \"Patient\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $lookup: { from: \"Physician\", localField: \"prescribes.Physician\", foreignField: \"EmployeeID\", as: \"physician\" } }, { $unwind: \"$physician\" }, { $match: { \"physician.Name\": \"John Dorian\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 2299,
        "spider_question_id": 3922,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = 'John Dorian'",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "query": "db.Patient.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"SSN\", foreignField: \"Patient\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $lookup: { from: \"Physician\", localField: \"prescribes.Physician\", foreignField: \"EmployeeID\", as: \"physician\" } }, { $unwind: \"$physician\" }, { $match: { \"physician.Name\": \"John Dorian\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } }])",
        "gpt4 answer": "db.Prescribes.aggregate([ { $lookup: { from: \"Physician\", localField: \"Physician\", foreignField: \"EmployeeID\", as: \"PrescribingPhysician\" } }, { $match: { \"PrescribingPhysician.Name\": \"John Dorian\" } }, { $group: { _id: \"$Physician\", PrescriptionCount: { $sum: 1 } } } ])",
        "deepseek answer": "db.Patient.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"SSN\", foreignField: \"Patient\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $lookup: { from: \"Physician\", localField: \"prescribes.Physician\", foreignField: \"EmployeeID\", as: \"physician\" } }, { $unwind: \"$physician\" }, { $match: { \"physician.Name\": \"John Dorian\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } }])"
    },
    {
        "question_id": 2300,
        "spider_question_id": 3924,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "query": "db.Stay.aggregate([ { $match: { Room: 111 } }, { $lookup: { from: \"Patient\", localField: \"Patient\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $lookup: { from: \"Prescribes\", localField: \"patient_info.SSN\", foreignField: \"Patient\", as: \"prescribes_info\" } }, { $unwind: \"$prescribes_info\" }, { $lookup: { from: \"Medication\", localField: \"prescribes_info.Medication\", foreignField: \"Code\", as: \"medication_info\" } }, { $unwind: \"$medication_info\" }, { $project: { MedicationName: \"$medication_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Stay.aggregate([ { $match: { Room: 111 } }, { $lookup: { from: \"Patient\", localField: \"Patient\", foreignField: \"SSN\", as: \"patient_info\" } }, { $unwind: \"$patient_info\" }, { $lookup: { from: \"Prescribes\", localField: \"patient_info.SSN\", foreignField: \"Patient\", as: \"prescribes_info\" } }, { $unwind: \"$prescribes_info\" }, { $lookup: { from: \"Medication\", localField: \"prescribes_info.Medication\", foreignField: \"Code\", as: \"medication_info\" } }, { $unwind: \"$medication_info\" }, { $project: { MedicationName: \"$medication_info.Name\" } } ])"
    },
    {
        "question_id": 2301,
        "spider_question_id": 3927,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "db.Nurse.aggregate([ { $lookup: { from: \"Appointment\", localField: \"EmployeeID\", foreignField: \"PrepNurse\", as: \"appointments\" } }, { $project: { Name: 1} }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Nurse.aggregate([ { $lookup: { from: \"Appointment\", localField: \"EmployeeID\", foreignField: \"PrepNurse\", as: \"appointments\" } }, { $project: { Name: 1} }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2302,
        "spider_question_id": 3928,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "query": "db.Appointment.aggregate([ { $group: { _id: \"$PrepNurse\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Nurse\", localField: \"_id\", foreignField: \"EmployeeID\", as: \"nurse_info\" } }, { $unwind: \"$nurse_info\" }, { $project: { name: \"$nurse_info.Name\" } } ])",
        "gpt4 answer": "db.Appointment.aggregate([ { $group: { _id: \"$PrepNurse\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Nurse\", localField: \"_id\", foreignField: \"EmployeeID\", as: \"nurse_info\" } }, { $unwind: \"$nurse_info\" }, { $project: { name: \"$nurse_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2303,
        "spider_question_id": 3931,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Patient\", localField: \"EmployeeID\", foreignField: \"PCP\", as: \"patients\" } }, { $match: { \"patients.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Patient\", localField: \"EmployeeID\", foreignField: \"PCP\", as: \"patients\" } }, { $match: { \"patients.1\": { $exists: true } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2304,
        "spider_question_id": 3932,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count(*) > 1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Patient\", localField: \"EmployeeID\", foreignField: \"PCP\", as: \"patients\" } }, { $match: { \"patients.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $lookup: { from: \"Patient\", localField: \"EmployeeID\", foreignField: \"PCP\", as: \"Patients\" } }, { $project: { Name: 1, Patients: 1 } }, { $match: { \"Patients.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Patient\", localField: \"EmployeeID\", foreignField: \"PCP\", as: \"patients\" } }, { $match: { \"patients.1\": { $exists: true } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2305,
        "spider_question_id": 3933,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor",
        "question": "Find the number of rooms located on each block floor.",
        "query": "db.Room.aggregate([ { $group: { _id: \"$BlockFloor\", NumberOfRooms: { $sum: 1 } }} ])",
        "gpt4 answer": "db.Room.aggregate([ { $group: { _id: \"$BlockFloor\", NumberOfRooms: { $sum: 1 } }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2306,
        "spider_question_id": 3934,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor",
        "question": "How many rooms does each block floor have?",
        "query": "db.Room.aggregate([ { $group: { _id: \"$BlockFloor\", NumberOfRooms: { $sum: 1 } } }, { $project: { BlockFloor: \"$_id\", NumberOfRooms: 1 } } ])",
        "gpt4 answer": "db.Room.aggregate([ { $group: { _id: \"$BlockFloor\", NumberOfRooms: { $sum: 1 } } }, { $project: { BlockFloor: \"$_id\", NumberOfRooms: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2307,
        "spider_question_id": 3935,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode",
        "question": "Find the number of rooms for different block code?",
        "query": "db.Room.aggregate([ { $group: { _id: \"$BlockCode\", NumberOfRooms: { $sum: 1 } } }, { $project: { BlockCode: \"$_id\", NumberOfRooms: 1 } } ])",
        "gpt4 answer": "db.Room.aggregate([ { $group: { _id: \"$BlockCode\", NumberOfRooms: { $sum: 1 } } }, { $project: { BlockCode: \"$_id\", NumberOfRooms: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2308,
        "spider_question_id": 3936,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode",
        "question": "How many rooms are located for each block code?",
        "query": "db.Room.aggregate([ { $group: { _id: \"$BlockCode\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Room.aggregate([ { $group: { _id: \"$BlockCode\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2309,
        "spider_question_id": 3943,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.name , T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = 'X'",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $lookup: { from: \"Medication\", localField: \"prescribes.Medication\", foreignField: \"Code\", as: \"medication\" } }, { $unwind: \"$medication\" }, { $match: { \"medication.Brand\": \"X\" } }, { $project: { Name: 1, Position: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $lookup: { from: \"Medication\", localField: \"prescribes.Medication\", foreignField: \"Code\", as: \"medication\" } }, { $unwind: \"$medication\" }, { $match: { \"medication.Brand\": \"X\" } }, { $project: { Name: 1, Position: 1 } } ])"
    },
    {
        "question_id": 2310,
        "spider_question_id": 3947,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "query": "db.Physician.find({ Position: /senior/i }, { Name: 1 })",
        "gpt4 answer": "db.Physician.find({ Position: /senior/i }, { Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2311,
        "spider_question_id": 3948,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "query": "db.Physician.find({ Position: { $regex: /senior/i } }, { Name: 1 })",
        "gpt4 answer": "db.Physician.find({Position: /senior/i}, {Name: 1})",
        "deepseek answer": "db.Physician.find({ Position: { $regex: /senior/i } }, { Name: 1 })"
    },
    {
        "question_id": 2312,
        "spider_question_id": 3955,
        "db_id": "hospital_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "query": "db.Undergoes.aggregate([ { $lookup: { from: \"Nurse\", localField: \"AssistingNurse\", foreignField: \"EmployeeID\", as: \"nurse_details\" } }, { $match: { \"nurse_details\": { $ne: [] } } }, { $project: { \"nurse_details.Name\": 1 } }, { $unwind: \"$nurse_details\" }, { $group: { _id: \"$nurse_details.Name\" } } ])",
        "gpt4 answer": "db.Undergoes.aggregate([ { $lookup: { from: \"Nurse\", localField: \"AssistingNurse\", foreignField: \"EmployeeID\", as: \"nurse_details\" } }, { $match: { \"nurse_details\": { $ne: [] } } }, { $project: { \"nurse_details.Name\": 1 } }, { $unwind: \"$nurse_details\" }, { $group: { _id: \"$nurse_details.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2313,
        "spider_question_id": 3960,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $sort: { \"prescribes.Dose\": -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Prescribes.aggregate([ { $sort: { Dose: -1 } }, { $limit: 1 }, { $lookup: { from: \"Physician\", localField: \"Physician\", foreignField: \"EmployeeID\", as: \"physician_info\" } }, { $unwind: \"$physician_info\" }, { $project: { Name: \"$physician_info.Name\" } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Prescribes\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"prescribes\" } }, { $unwind: \"$prescribes\" }, { $sort: { \"prescribes.Dose\": -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2314,
        "spider_question_id": 3963,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "query": "db.Affiliated_With.aggregate([ { $match: { PrimaryAffiliation: 1 } }, { $lookup: { from: \"Department\", localField: \"Department\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.Affiliated_With.aggregate([ { $match: { PrimaryAffiliation: 1 } }, { $lookup: { from: \"Department\", localField: \"Department\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $group: { _id: \"$department_info.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2315,
        "spider_question_id": 3966,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
        "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
        "query": "db.On_Call.find({BlockFloor: 1, BlockCode: 1}, {Nurse: 1})",
        "gpt4 answer": "db.On_Call.find({ BlockFloor: 1, BlockCode: 1 }, { Nurse: 1 })",
        "deepseek answer": "db.On_Call.find({BlockFloor: 1, BlockCode: 1}, {Nurse: 1})"
    },
    {
        "question_id": 2316,
        "spider_question_id": 3967,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT MAX(cost) , MIN(cost) , AVG(cost) FROM procedures",
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "query": "db.Procedures.aggregate([ { $group: { _id: null, maxCost: { $max: \"$Cost\" }, minCost: { $min: \"$Cost\" }, avgCost: { $avg: \"$Cost\" } } }, { $project: { maxCost: 1, minCost:1, avgCost:1 } } ])",
        "gpt4 answer": "db.Procedures.aggregate([ { $group: { _id: null, HighestCost: { $max: \"$Cost\" }, LowestCost: { $min: \"$Cost\" }, AverageCost: { $avg: \"$Cost\" } } }, { $project: { HighestCost: 1, LowestCost: 1, AverageCost: 1 } } ])",
        "deepseek answer": "db.Procedures.aggregate([ { $group: { _id: null, maxCost: { $max: \"$Cost\" }, minCost: { $min: \"$Cost\" }, avgCost: { $avg: \"$Cost\" } } }, { $project: { maxCost: 1, minCost:1, avgCost:1 } } ])"
    },
    {
        "question_id": 2317,
        "spider_question_id": 3968,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT MAX(cost) , MIN(cost) , AVG(cost) FROM procedures",
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "query": "db.Procedures.aggregate([ { $group: { _id: null, maxCost: { $max: \"$Cost\" }, minCost: { $min: \"$Cost\" }, avgCost: { $avg: \"$Cost\" } } }, { $project: { maxCost: 1, minCost:1, avgCost:1 } } ])",
        "gpt4 answer": "db.Procedures.aggregate([ { $group: { _id: null, MaxCost: { $max: \"$Cost\" }, MinCost: { $min: \"$Cost\" }, AvgCost: { $avg: \"$Cost\" } } }, { $project: { MaxCost: 1, MinCost: 1, AvgCost: 1 } } ])",
        "deepseek answer": "db.Procedures.aggregate([ { $group: { _id: null, maxCost: { $max: \"$Cost\" }, minCost: { $min: \"$Cost\" }, avgCost: { $avg: \"$Cost\" } } }, { $project: { maxCost: 1, minCost:1, avgCost:1 } } ])"
    },
    {
        "question_id": 2318,
        "spider_question_id": 3969,
        "db_id": "hospital_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , cost FROM procedures ORDER BY cost DESC",
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "query": "db.Procedures.find({}, { Name: 1, Cost: 1}).sort({Cost: -1})",
        "gpt4 answer": "db.Procedures.find({}, { Name: 1, Cost: 1 }).sort({ Cost: -1 })",
        "deepseek answer": "db.Procedures.find({}, { Name: 1, Cost: 1}).sort({Cost: -1})"
    },
    {
        "question_id": 2319,
        "spider_question_id": 3974,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in\" } }, { $unwind: \"$trained_in\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in.Treatment\", foreignField: \"Code\", as: \"procedures\" } }, { $unwind: \"$procedures\" }, { $match: { \"procedures.Cost\": { $gt: 5000 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"Training\" } }, { $unwind: \"$Training\" }, { $lookup: { from: \"Procedures\", localField: \"Training.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $match: { \"ProcedureInfo.Cost\": { $gt: 5000 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in\" } }, { $unwind: \"$trained_in\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in.Treatment\", foreignField: \"Code\", as: \"procedures\" } }, { $unwind: \"$procedures\" }, { $match: { \"procedures.Cost\": { $gt: 5000 } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2320,
        "spider_question_id": 3975,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "question": "Find the physician who was trained in the most expensive procedure?",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"TrainingInfo\" } }, { $unwind: \"$TrainingInfo\" }, { $lookup: { from: \"Procedures\", localField: \"TrainingInfo.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $sort: { \"ProcedureInfo.Cost\": -1 } }, { $project: { Name: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"TrainingInfo\" } }, { $unwind: \"$TrainingInfo\" }, { $lookup: { from: \"Procedures\", localField: \"TrainingInfo.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $sort: { \"ProcedureInfo.Cost\": -1 } }, { $project: { Name: 1 } }, { $limit: 1 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2321,
        "spider_question_id": 3976,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"Training\" } }, { $unwind: \"$Training\" }, { $lookup: { from: \"Procedures\", localField: \"Training.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $sort: { \"ProcedureInfo.Cost\": -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"Training\" } }, { $unwind: \"$Training\" }, { $lookup: { from: \"Procedures\", localField: \"Training.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $sort: { \"ProcedureInfo.Cost\": -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2322,
        "spider_question_id": 3977,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "query": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in_docs\" } }, { $unwind: \"$trained_in_docs\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in_docs.Treatment\", foreignField: \"Code\", as: \"procedures_docs\" } }, { $unwind: \"$procedures_docs\" }, { $group: { _id: null, avgCost: { $avg: \"$procedures_docs.Cost\" } } }, { $project: { avgCost: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"TrainedIn\" } }, { $unwind: \"$TrainedIn\" }, { $lookup: { from: \"Procedures\", localField: \"TrainedIn.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $group: { _id: \"$Name\", AverageCost: { $avg: \"$ProcedureInfo.Cost\" } } }, { $project: { AverageCost: 1 } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in_docs\" } }, { $unwind: \"$trained_in_docs\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in_docs.Treatment\", foreignField: \"Code\", as: \"procedures_docs\" } }, { $unwind: \"$procedures_docs\" }, { $group: { _id: null, avgCost: { $avg: \"$procedures_docs.Cost\" } } }, { $project: { avgCost: 1 } } ])"
    },
    {
        "question_id": 2323,
        "spider_question_id": 3978,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
        "question": "Compute the mean price of procedures physician John Wen was trained in.",
        "query": "db.Physician.aggregate([ { $match: { \"Name\": \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in_docs\" } }, { $unwind: \"$trained_in_docs\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in_docs.Treatment\", foreignField: \"Code\", as: \"procedures_docs\" } }, { $unwind: \"$procedures_docs\" }, { $group: { \"_id\": null, \"meanCost\": { \"$avg\": \"$procedures_docs.Cost\" } } }, { $project: { avgCost: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"Training\" } }, { $unwind: \"$Training\" }, { $lookup: { from: \"Procedures\", localField: \"Training.Treatment\", foreignField: \"Code\", as: \"ProcedureDetails\" } }, { $unwind: \"$ProcedureDetails\" }, { $group: { _id: null, AverageCost: { $avg: \"$ProcedureDetails.Cost\" } } }, { $project: { AverageCost: 1 } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $match: { \"Name\": \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in_docs\" } }, { $unwind: \"$trained_in_docs\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in_docs.Treatment\", foreignField: \"Code\", as: \"procedures_docs\" } }, { $unwind: \"$procedures_docs\" }, { $group: { \"_id\": null, \"meanCost\": { \"$avg\": \"$procedures_docs.Cost\" } } }, { $project: { avgCost: 1 } } ])"
    },
    {
        "question_id": 2324,
        "spider_question_id": 3979,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "query": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in_docs\" } }, { $unwind: \"$trained_in_docs\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in_docs.Treatment\", foreignField: \"Code\", as: \"procedures_docs\" } }, { $unwind: \"$procedures_docs\" }, { $project: { Name: \"$procedures_docs.Name\" } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"TrainingInfo\" } }, { $unwind: \"$TrainingInfo\" }, { $lookup: { from: \"Procedures\", localField: \"TrainingInfo.Treatment\", foreignField: \"Code\", as: \"ProcedureInfo\" } }, { $unwind: \"$ProcedureInfo\" }, { $project: { \"ProcedureName\": \"$ProcedureInfo.Name\" } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $match: { Name: \"John Wen\" } }, { $lookup: { from: \"Trained_In\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"trained_in_docs\" } }, { $unwind: \"$trained_in_docs\" }, { $lookup: { from: \"Procedures\", localField: \"trained_in_docs.Treatment\", foreignField: \"Code\", as: \"procedures_docs\" } }, { $unwind: \"$procedures_docs\" }, { $project: { Name: \"$procedures_docs.Name\" } } ])"
    },
    {
        "question_id": 2325,
        "spider_question_id": 3986,
        "db_id": "hospital_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
        "question": "What procedures cost less than 5000 and have John Wen as a trained physician?",
        "query": "db.Procedures.aggregate([ { $match: { Cost: { $lt: 5000 } } }, { $lookup: { from: \"Trained_In\", localField: \"Code\", foreignField: \"Treatment\", as: \"TrainedIn\" } }, { $unwind: \"$TrainedIn\" }, { $lookup: { from: \"Physician\", localField: \"TrainedIn.Physician\", foreignField: \"EmployeeID\", as: \"Physician\" } }, { $unwind: \"$Physician\" }, { $match: { \"Physician.Name\": \"John Wen\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Procedures.aggregate([ { $match: { Cost: { $lt: 5000 } } }, { $lookup: { from: \"Trained_In\", localField: \"Code\", foreignField: \"Treatment\", as: \"TrainedIn\" } }, { $unwind: \"$TrainedIn\" }, { $lookup: { from: \"Physician\", localField: \"TrainedIn.Physician\", foreignField: \"EmployeeID\", as: \"Physician\" } }, { $unwind: \"$Physician\" }, { $match: { \"Physician.Name\": \"John Wen\" } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2326,
        "spider_question_id": 3989,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Affiliated_With\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"affiliated_with\" } }, { $unwind: \"$affiliated_with\" }, { $lookup: { from: \"Department\", localField: \"affiliated_with.Department\", foreignField: \"DepartmentID\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.Name\": { $in: [\"Surgery\", \"Psychiatry\"] } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $lookup: { from: \"Affiliated_With\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"Affiliations\" } }, { $unwind: \"$Affiliations\" }, { $lookup: { from: \"Department\", localField: \"Affiliations.Department\", foreignField: \"DepartmentID\", as: \"Departments\" } }, { $unwind: \"$Departments\" }, { $match: { $or: [ { \"Departments.Name\": \"Surgery\" }, { \"Departments.Name\": \"Psychiatry\" } ] } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Affiliated_With\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"affiliated_with\" } }, { $unwind: \"$affiliated_with\" }, { $lookup: { from: \"Department\", localField: \"affiliated_with.Department\", foreignField: \"DepartmentID\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.Name\": { $in: [\"Surgery\", \"Psychiatry\"] } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2327,
        "spider_question_id": 3990,
        "db_id": "hospital_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "query": "db.Physician.aggregate([ { $lookup: { from: \"Affiliated_With\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"affiliations\" } }, { $lookup: { from: \"Department\", localField: \"affiliations.Department\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $match: { \"department_info.Name\": { $in: [\"Surgery\", \"Psychiatry\"] } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Physician.aggregate([ { $lookup: { from: \"Affiliated_With\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"Affiliation\" } }, { $unwind: \"$Affiliation\" }, { $lookup: { from: \"Department\", localField: \"Affiliation.Department\", foreignField: \"DepartmentID\", as: \"DepartmentInfo\" } }, { $unwind: \"$DepartmentInfo\" }, { $match: { $or: [ { \"DepartmentInfo.Name\": \"Surgery\" }, { \"DepartmentInfo.Name\": \"Psychiatry\" } ] } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Physician.aggregate([ { $lookup: { from: \"Affiliated_With\", localField: \"EmployeeID\", foreignField: \"Physician\", as: \"affiliations\" } }, { $lookup: { from: \"Department\", localField: \"affiliations.Department\", foreignField: \"DepartmentID\", as: \"department_info\" } }, { $match: { \"department_info.Name\": { $in: [\"Surgery\", \"Psychiatry\"] } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2328,
        "spider_question_id": 3997,
        "db_id": "hospital_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
        "question": "Find the names of nurses who are on call.",
        "query": "db.Nurse.aggregate([ { $lookup: { from: \"On_Call\", localField: \"EmployeeID\", foreignField: \"Nurse\", as: \"on_call_info\" } }, { $match: { \"on_call_info\": { $ne: [] } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Nurse.aggregate([ { $lookup: { from: \"On_Call\", localField: \"EmployeeID\", foreignField: \"Nurse\", as: \"on_call_info\" } }, { $match: { \"on_call_info\": { $ne: [] } } }, { $group: { _id: \"$Name\" } } ])",
        "deepseek answer": "db.Nurse.aggregate([ { $lookup: { from: \"On_Call\", localField: \"EmployeeID\", foreignField: \"Nurse\", as: \"on_call_info\" } }, { $match: { \"on_call_info\": { $ne: [] } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2329,
        "spider_question_id": 3998,
        "db_id": "hospital_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
        "question": "What are the distinct names of nurses on call?",
        "query": "db.Nurse.aggregate([ { $lookup: { from: \"On_Call\", localField: \"EmployeeID\", foreignField: \"Nurse\", as: \"on_call_info\" } }, { $unwind: \"$on_call_info\" }, { $group: { _id: \"$Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.Nurse.aggregate([ { $lookup: { from: \"On_Call\", localField: \"EmployeeID\", foreignField: \"Nurse\", as: \"OnCallDetails\" } }, { $match: { \"OnCallDetails\": { $ne: [] } } }, { $group: { _id: \"$Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "db.Nurse.aggregate([ { $lookup: { from: \"On_Call\", localField: \"EmployeeID\", foreignField: \"Nurse\", as: \"on_call_info\" } }, { $unwind: \"$on_call_info\" }, { $group: { _id: \"$Name\" } }, { $project: { Name: \"$_id\" } } ])"
    },
    {
        "question_id": 2330,
        "spider_question_id": 4001,
        "db_id": "ship_mission",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC",
        "question": "List the name of ships in ascending order of tonnage.",
        "query": "db.ship.find({}, {Name: 1}).sort({Tonnage: 1})",
        "gpt4 answer": "db.ship.find({}, { Name: 1 }).sort({ Tonnage: 1 })",
        "deepseek answer": "db.ship.find({}, {Name: 1}).sort({Tonnage: 1})"
    },
    {
        "question_id": 2331,
        "spider_question_id": 4002,
        "db_id": "ship_mission",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC",
        "question": "what are the names of the ships ordered by ascending tonnage?",
        "query": "db.ship.find({}, { Name: 1 }).sort({ Tonnage: 1 })",
        "gpt4 answer": "db.ship.find({}, { Name: 1 }).sort({ Tonnage: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2332,
        "spider_question_id": 4003,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , Nationality FROM ship",
        "question": "What are the type and nationality of ships?",
        "query": "db.ship.find({}, { Type: 1, Nationality: 1})",
        "gpt4 answer": "db.ship.aggregate([ { $project: { Type: 1, Nationality: 1 } } ])",
        "deepseek answer": "db.ship.find({}, { Type: 1, Nationality: 1})"
    },
    {
        "question_id": 2333,
        "spider_question_id": 4004,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , Nationality FROM ship",
        "question": "What are the types and nationalities of every ship?",
        "query": "db.ship.find({}, { Type: 1, Nationality: 1})",
        "gpt4 answer": "db.ship.aggregate([ { $project: { Type: 1, Nationality: 1 } } ])",
        "deepseek answer": "db.ship.find({}, { Type: 1, Nationality: 1})"
    },
    {
        "question_id": 2334,
        "spider_question_id": 4005,
        "db_id": "ship_mission",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM ship WHERE Nationality != 'United States'",
        "question": "List the name of ships whose nationality is not 'United States'.",
        "query": "db.ship.find({ Nationality: { $ne: 'United States' } }, { Name: 1 })",
        "gpt4 answer": "db.ship.find({ Nationality: { $ne: 'United States' } }, { Name: 1 })",
        "deepseek answer": "db.ship.find({ Nationality: { $ne: 'United States' } }, { Name: 1 })"
    },
    {
        "question_id": 2335,
        "spider_question_id": 4006,
        "db_id": "ship_mission",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM ship WHERE Nationality != 'United States'",
        "question": "What are the names of the ships that are not from the United States?",
        "query": "db.ship.find({ Nationality: { $ne: 'United States' } }, { Name: 1 })",
        "gpt4 answer": "db.ship.find({ Nationality: { $ne: \"United States\" } }, { Name: 1 })",
        "deepseek answer": "db.ship.find({ Nationality: { $ne: 'United States' } }, { Name: 1 })"
    },
    {
        "question_id": 2336,
        "spider_question_id": 4007,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "query": "db.ship.find({ Nationality: { $in: ['United States', 'United Kingdom'] } }, { Name: 1 })",
        "gpt4 answer": "db.ship.find( { Nationality: { $in: ['United States', 'United Kingdom'] } }, { Name: 1 } )",
        "deepseek answer": "db.ship.find({ Nationality: { $in: ['United States', 'United Kingdom'] } }, { Name: 1 })"
    },
    {
        "question_id": 2337,
        "spider_question_id": 4008,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'",
        "question": "What are the names of the ships that are from either the US or the UK?",
        "query": "db.ship.find( { Nationality: { $in: [\"United States\", \"United Kingdom\"] } }, { Name: 1 } )",
        "gpt4 answer": "db.ship.find( { $or: [ { Nationality: 'United States' }, { Nationality: 'United Kingdom' } ] }, { Name: 1 } )",
        "deepseek answer": "db.ship.find( { Nationality: { $in: [\"United States\", \"United Kingdom\"] } }, { Name: 1 } )"
    },
    {
        "question_id": 2338,
        "spider_question_id": 4009,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
        "question": "What is the name of the ship with the largest tonnage?",
        "query": "db.ship.find({}, {Name: 1}).sort({Tonnage: -1}).limit(1)",
        "gpt4 answer": "db.ship.find({}, { Name: 1 }).sort({ Tonnage: -1 }).limit(1)",
        "deepseek answer": "db.ship.find({}, {Name: 1}).sort({Tonnage: -1}).limit(1)"
    },
    {
        "question_id": 2339,
        "spider_question_id": 4010,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
        "question": "What is the ship with the largest amount of tonnage called?",
        "query": "db.ship.find({}, {Name: 1}).sort({Tonnage: -1}).limit(1)",
        "gpt4 answer": "db.ship.find({}, { Name: 1 }).sort({ Tonnage: -1 }).limit(1)",
        "deepseek answer": "db.ship.find({}, {Name: 1}).sort({Tonnage: -1}).limit(1)"
    },
    {
        "question_id": 2340,
        "spider_question_id": 4011,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , COUNT(*) FROM ship GROUP BY TYPE",
        "question": "Show different types of ships and the number of ships of each type.",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", NumberOfShips: { $sum: 1 } } } ])",
        "deepseek answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2341,
        "spider_question_id": 4012,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , COUNT(*) FROM ship GROUP BY TYPE",
        "question": "For each type, how many ships are there?",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2342,
        "spider_question_id": 4013,
        "db_id": "ship_mission",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common type of ships.",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Type: \"$_id\" } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Type: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2343,
        "spider_question_id": 4014,
        "db_id": "ship_mission",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common type of ships?",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2344,
        "spider_question_id": 4015,
        "db_id": "ship_mission",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2",
        "question": "List the nations that have more than two ships.",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nationality: \"$_id\" } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Nationality\", Count: { $sum: 1 } } }, { $match: { Count: { $gt: 2 } } }, { $project: { Nationality: \"$_id\" } } ])",
        "deepseek answer": "db.ship.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nationality: \"$_id\" } } ])"
    },
    {
        "question_id": 2345,
        "spider_question_id": 4016,
        "db_id": "ship_mission",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2",
        "question": "What are the nations that have more than two ships?",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nationality: \"$_id\" } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Nationality\", shipCount: {$sum: 1} } }, { $match: { shipCount: {$gt: 2} } }, { $project: { Nationality: \"$_id\" } } ])",
        "deepseek answer": "db.ship.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Nationality: \"$_id\" } } ])"
    },
    {
        "question_id": 2346,
        "spider_question_id": 4017,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , avg(Tonnage) FROM ship GROUP BY TYPE",
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Type\", averageTonnage: { $avg: \"$Tonnage\" } } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", AverageTonnage: { $avg: \"$Tonnage\" } } }, { $project: { Type: \"$_id\", AverageTonnage: 1 } } ])",
        "deepseek answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", averageTonnage: { $avg: \"$Tonnage\" } } } ])"
    },
    {
        "question_id": 2347,
        "spider_question_id": 4018,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , avg(Tonnage) FROM ship GROUP BY TYPE",
        "question": "For each type, what is the average tonnage?",
        "query": "db.ship.aggregate([ { $group: { _id: \"$Type\", AvgTonnage: { $avg: \"$Tonnage\" } } }, { $project: { Type: \"$_id\", AvgTonnage: 1 } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $group: { _id: \"$Type\", AvgTonnage: { $avg: \"$Tonnage\" } } }, { $project: { Type: \"$_id\", AvgTonnage: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2348,
        "spider_question_id": 4022,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "query": "db.mission.aggregate([ { $match: { Launched_Year: { $gt: 1928 } } }, { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $project: { Name: \"$ship_info.Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.mission.aggregate([ { $match: { Launched_Year: { $gt: 1928 } } }, { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $project: { Name: \"$ship_info.Name\" } } ])"
    },
    {
        "question_id": 2349,
        "spider_question_id": 4023,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = 'United States'",
        "question": "Show the distinct fate of missions that involve ships with nationality 'United States'",
        "query": "db.mission.aggregate([ { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $match: { \"ship_info.Nationality\": \"United States\" } }, { $group: { _id: \"$Fate\" } }, { $project: { Fate: \"$_id\" } } ])",
        "gpt4 answer": "db.mission.aggregate([ { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $match: { \"ship_info.Nationality\": \"United States\" } }, { $group: { _id: \"$Fate\" } }, { $project: { Fate: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2350,
        "spider_question_id": 4024,
        "db_id": "ship_mission",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = 'United States'",
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "query": "db.mission.aggregate([ { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $match: { \"ship_info.Nationality\": \"United States\" } }, { $group: { _id: \"$Fate\" } }, { $project: { Fate: \"$_id\" } } ])",
        "gpt4 answer": "db.mission.aggregate([ { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $match: { \"ship_info.Nationality\": \"United States\" } }, { $group: { _id: \"$Fate\" } } ])",
        "deepseek answer": "db.mission.aggregate([ { $lookup: { from: \"ship\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $match: { \"ship_info.Nationality\": \"United States\" } }, { $group: { _id: \"$Fate\" } }, { $project: { Fate: \"$_id\" } } ])"
    },
    {
        "question_id": 2351,
        "spider_question_id": 4025,
        "db_id": "ship_mission",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "question": "List the name of ships that are not involved in any mission",
        "query": "db.ship.find({ Ship_ID: { $nin: db.mission.distinct(\"Ship_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.ship.aggregate([ { $lookup: { from: \"mission\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"missions\" } }, { $match: { missions: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.ship.find({ Ship_ID: { $nin: db.mission.distinct(\"Ship_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 2352,
        "spider_question_id": 4026,
        "db_id": "ship_mission",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
        "question": "What are the names of the ships that are not involved in any missions?",
        "query": "db.ship.find({ Ship_ID: { $nin: db.mission.distinct(\"Ship_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.ship.aggregate([ { $lookup: { from: \"mission\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"missions\" } }, { $match: { missions: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.ship.find({ Ship_ID: { $nin: db.mission.distinct(\"Ship_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 2353,
        "spider_question_id": 4028,
        "db_id": "ship_mission",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
        "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
        "query": "db.ship.aggregate([ { $facet: { \"HeavyShips\": [ { $match: { Tonnage: { $gt: 6000 } } }, { $group: { _id: \"$Type\" } } ], \"LightShips\": [ { $match: { Tonnage: { $lt: 4000 } } }, { $group: { _id: \"$Type\" } } ] } }, { $project: { CommonTypes: { $setIntersection: [\"$HeavyShips._id\", \"$LightShips._id\"] } } }, { $unwind: \"$CommonTypes\" }, { $replaceRoot: { newRoot: { Type: \"$CommonTypes\" } } } ])",
        "gpt4 answer": "db.ship.aggregate([ { $facet: { \"HeavyShips\": [ { $match: { Tonnage: { $gt: 6000 } } }, { $group: { _id: \"$Type\" } } ], \"LightShips\": [ { $match: { Tonnage: { $lt: 4000 } } }, { $group: { _id: \"$Type\" } } ] } }, { $project: { CommonTypes: { $setIntersection: [\"$HeavyShips._id\", \"$LightShips._id\"] } } }, { $unwind: \"$CommonTypes\" }, { $replaceRoot: { newRoot: { Type: \"$CommonTypes\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2354,
        "spider_question_id": 4031,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT lastname FROM list WHERE classroom = 111",
        "question": "Find the last names of students studying in room 111.",
        "query": "db.list.find({ Classroom: 111 }, { LastName: 1 })",
        "gpt4 answer": "db.list.find({ Classroom: 111 }, { LastName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2355,
        "spider_question_id": 4032,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT lastname FROM list WHERE classroom = 111",
        "question": "What are the last names of students in room 111?",
        "query": "db.list.find({Classroom: 111}, {LastName: 1})",
        "gpt4 answer": "db.list.find({ Classroom: 111 }, { LastName: 1 })",
        "deepseek answer": "db.list.find({Classroom: 111}, {LastName: 1})"
    },
    {
        "question_id": 2356,
        "spider_question_id": 4033,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT firstname FROM list WHERE classroom = 108",
        "question": "Find the first names of students studying in room 108.",
        "query": "db.list.find({ Classroom: 108 }, { FirstName: 1 })",
        "gpt4 answer": "db.list.find({ Classroom: 108 }, { FirstName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2357,
        "spider_question_id": 4034,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT firstname FROM list WHERE classroom = 108",
        "question": "What are the first names of students in room 108?",
        "query": "db.list.find({Classroom: 108}, {FirstName: 1})",
        "gpt4 answer": "db.list.find({ Classroom: 108 }, { FirstName: 1 })",
        "deepseek answer": "db.list.find({Classroom: 108}, {FirstName: 1})"
    },
    {
        "question_id": 2358,
        "spider_question_id": 4035,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
        "question": "What are the first names of students studying in room 107?",
        "query": "db.list.find({ Classroom: 107 }, { FirstName: 1 })",
        "gpt4 answer": "db.list.find({ Classroom: 107 }, { FirstName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2359,
        "spider_question_id": 4036,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
        "question": "List the first names of all the students in room 107.",
        "query": "db.list.find({ Classroom: 107 }, { FirstName: 1 })",
        "gpt4 answer": "db.list.find({ Classroom: 107 }, { FirstName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2360,
        "spider_question_id": 4037,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT classroom , grade FROM list",
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", Grade: { $first: \"$Grade\" } } }, { $project: { Classroom: \"$_id\", Grade: 1 } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", Grade: { $first: \"$Grade\" } } }, { $project: { Classroom: \"$_id\", Grade: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2361,
        "spider_question_id": 4038,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT classroom , grade FROM list",
        "question": "What are the grade number and classroom number of each class in the list?",
        "query": "db.list.aggregate([ {$group: { _id: {classroom: \"$Classroom\", grade: \"$Grade\"} }}, {$project: { classroom: \"$_id.classroom\", grade: \"$_id.grade\" }} ])",
        "gpt4 answer": "db.list.aggregate([ {$group: { _id: {classroom: \"$Classroom\", grade: \"$Grade\"} }}, {$project: { classroom: \"$_id.classroom\", grade: \"$_id.grade\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2362,
        "spider_question_id": 4047,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5",
        "question": "Find the last names of the teachers that teach fifth grade.",
        "query": "db.list.aggregate([ { $match: { Grade: 5 } }, { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teachers_info\" } }, { $unwind: \"$teachers_info\" }, { $group: { _id: \"$teachers_info.LastName\" } }, { $project: { LastName: \"$_id\" } } ])",
        "gpt4 answer": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"GradeList\" } }, { $unwind: \"$GradeList\" }, { $match: { \"GradeList.Grade\": 5 } }, { $group: { _id: { LastName: \"$LastName\" } } }, { $project: { LastName: \"$_id.LastName\" } } ])",
        "deepseek answer": "db.list.aggregate([ { $match: { Grade: 5 } }, { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teachers_info\" } }, { $unwind: \"$teachers_info\" }, { $group: { _id: \"$teachers_info.LastName\" } }, { $project: { LastName: \"$_id\" } } ])"
    },
    {
        "question_id": 2363,
        "spider_question_id": 4048,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5",
        "question": "what are the last names of the teachers who teach grade 5?",
        "query": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"class_info\" } }, { $match: { \"class_info.Grade\": 5 } }, { $group: { _id: \"$LastName\" } }, { $project: { LastName: \"$_id\" } } ])",
        "gpt4 answer": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"class_info\" } }, { $match: { \"class_info.Grade\": 5 } }, { $group: { _id: \"$LastName\" } }, { $project: { LastName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2364,
        "spider_question_id": 4049,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1",
        "question": "Find the first names of the teachers that teach first grade.",
        "query": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"first_grade_students\" } }, { $match: { \"first_grade_students.Grade\": 1 } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "gpt4 answer": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"first_grade_students\" } }, { $match: { \"first_grade_students.Grade\": 1 } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2365,
        "spider_question_id": 4050,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1",
        "question": "What are the first names of the teachers who teach grade 1?",
        "query": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"grade_class\" } }, { $unwind: \"$grade_class\" }, { $match: { \"grade_class.Grade\": 1 } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "gpt4 answer": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"grade_class\" } }, { $unwind: \"$grade_class\" }, { $match: { \"grade_class.Grade\": 1 } }, { $group: { _id: \"$FirstName\" } }, { $project: { FirstName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2366,
        "spider_question_id": 4051,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT firstname FROM teachers WHERE classroom = 110",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "query": "db.teachers.find({Classroom: 110}, {FirstName: 1})",
        "gpt4 answer": "db.teachers.find({ Classroom: 110 }, { FirstName: 1 })",
        "deepseek answer": "db.teachers.find({Classroom: 110}, {FirstName: 1})"
    },
    {
        "question_id": 2367,
        "spider_question_id": 4052,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT firstname FROM teachers WHERE classroom = 110",
        "question": "Which teachers teach in classroom 110? Give me their first names.",
        "query": "db.teachers.find({Classroom: 110}, {FirstName: 1})",
        "gpt4 answer": "db.teachers.find({ Classroom: 110 }, { FirstName: 1 })",
        "deepseek answer": "db.teachers.find({Classroom: 110}, {FirstName: 1})"
    },
    {
        "question_id": 2368,
        "spider_question_id": 4053,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT lastname FROM teachers WHERE classroom = 109",
        "question": "Find the last names of teachers teaching in classroom 109.",
        "query": "db.teachers.find({Classroom: 109}, {LastName: 1})",
        "gpt4 answer": "db.teachers.find({ Classroom: 109 }, { LastName: 1 })",
        "deepseek answer": "db.teachers.find({Classroom: 109}, {LastName: 1})"
    },
    {
        "question_id": 2369,
        "spider_question_id": 4054,
        "db_id": "student_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT lastname FROM teachers WHERE classroom = 109",
        "question": "Which teachers teach in classroom 109? Give me their last names.",
        "query": "db.teachers.find({Classroom: 109}, {LastName: 1})",
        "gpt4 answer": "db.teachers.find({ Classroom: 109 }, { LastName: 1 })",
        "deepseek answer": "db.teachers.find({Classroom: 109}, {LastName: 1})"
    },
    {
        "question_id": 2370,
        "spider_question_id": 4055,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT firstname , lastname FROM teachers",
        "question": "Report the first name and last name of all the teachers.",
        "query": "db.teachers.find({}, { FirstName: 1, LastName: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.teachers.find({}, { FirstName: 1, LastName: 1})"
    },
    {
        "question_id": 2371,
        "spider_question_id": 4056,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT firstname , lastname FROM teachers",
        "question": "What are the first name and last name of all the teachers?",
        "query": "db.teachers.find({}, { FirstName: 1, LastName: 1})",
        "gpt4 answer": "db.teachers.find({}, { FirstName: 1, LastName: 1 })",
        "deepseek answer": "db.teachers.find({}, { FirstName: 1, LastName: 1})"
    },
    {
        "question_id": 2372,
        "spider_question_id": 4077,
        "db_id": "student_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'OTHA' AND T2.lastname = 'MOYER'",
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "query": "db.list.aggregate([ { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teacher\" } }, { $match: { Grade: 1, teacher: { $not: { $elemMatch: { FirstName: \"OTHA\", LastName: \"MOYER\" } } } } }, { $group: { _id: { FirstName: \"$FirstName\", LastName: \"$LastName\" } } }, { $project: { FirstName: \"$_id.FirstName\", LastName: \"$_id.LastName\" } } ])",
        "gpt4 answer": "db.list.aggregate([ { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teacher\" } }, { $match: { Grade: 1, teacher: { $not: { $elemMatch: { FirstName: \"OTHA\", LastName: \"MOYER\" } } } } }, { $group: { _id: { FirstName: \"$FirstName\", LastName: \"$LastName\" } } }, { $project: { FirstName: \"$_id.FirstName\", LastName: \"$_id.LastName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2373,
        "spider_question_id": 4078,
        "db_id": "student_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname , T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'OTHA' AND T2.lastname = 'MOYER'",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "query": "db.list.aggregate([ { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teacher_info\" } }, { $match: { Grade: 1, \"teacher_info\": { $not: { $elemMatch: { FirstName: \"OTHA\", LastName: \"MOYER\" } } } } }, { $project: { FirstName: 1, LastName: 1 } }, { $group: { _id: { FirstName: \"$FirstName\", LastName: \"$LastName\" } } }, { $project: { FirstName: \"$_id.FirstName\", LastName: \"$_id.LastName\" } } ])",
        "gpt4 answer": "db.list.aggregate([ { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teacher_info\" } }, { $match: { Grade: 1, \"teacher_info\": { $not: { $elemMatch: { FirstName: \"OTHA\", LastName: \"MOYER\" } } } } }, { $project: { FirstName: 1, LastName: 1 } }, { $group: { _id: { FirstName: \"$FirstName\", LastName: \"$LastName\" } } }, { $project: { FirstName: \"$_id.FirstName\", LastName: \"$_id.LastName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2374,
        "spider_question_id": 4079,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != 'COVIN' AND T2.lastname != 'JEROME'",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "query": "db.list.aggregate([ { $match: { Grade: 3 } }, { $lookup: { from: 'teachers', localField: 'Classroom', foreignField: 'Classroom', as: 'teacher_info' } }, { $match: { 'teacher_info.FirstName': { $ne: 'COVIN' }, 'teacher_info.LastName': { $ne: 'JEROME' } } }, { $group: { _id: \"$LastName\" } }, { $project: { LastName: \"$_id\" } } ])",
        "gpt4 answer": "db.list.aggregate([ { $match: { Grade: 3 } }, { $lookup: { from: 'teachers', localField: 'Classroom', foreignField: 'Classroom', as: 'teacher_info' } }, { $match: { 'teacher_info.FirstName': { $ne: 'COVIN' }, 'teacher_info.LastName': { $ne: 'JEROME' } } }, { $group: { _id: \"$LastName\" } }, { $project: { LastName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2375,
        "spider_question_id": 4080,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname != 'COVIN' AND T2.lastname != 'JEROME'",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "query": "db.list.aggregate([ { $match: { Grade: 3 } }, { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teacher_info\" } }, { $match: { \"teacher_info.FirstName\": { $ne: \"JEROME\" }, \"teacher_info.LastName\": { $ne: \"COVIN\" } } }, { $group: { _id: \"$LastName\" } } ])",
        "gpt4 answer": "db.list.aggregate([ { $match: { Grade: 3 } }, { $lookup: { from: \"teachers\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"teacher_info\" } }, { $match: { \"teacher_info.FirstName\": { $ne: \"JEROME\" }, \"teacher_info.LastName\": { $ne: \"COVIN\" } } }, { $group: { _id: \"$LastName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2376,
        "spider_question_id": 4081,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Grade\", totalStudents: { $sum: 1 }, totalClassrooms: { $addToSet: \"$Classroom\" } } }, { $project: { grade: \"$_id\", totalClassrooms: { $size: \"$totalClassrooms\" }, totalStudents: 1 } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Grade\", numClassrooms: { $addToSet: \"$Classroom\" }, totalStudents: { $sum: 1 } } }, { $project: { grade: \"$_id\", numClassrooms: { $size: \"$numClassrooms\" }, totalStudents: 1 } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Grade\", totalStudents: { $sum: 1 }, totalClassrooms: { $addToSet: \"$Classroom\" } } }, { $project: { grade: \"$_id\", totalClassrooms: { $size: \"$totalClassrooms\" }, totalStudents: 1 } } ])"
    },
    {
        "question_id": 2377,
        "spider_question_id": 4082,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT grade , count(DISTINCT classroom) , count(*) FROM list GROUP BY grade",
        "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Grade\", totalStudents: { $sum: 1 }, totalClassrooms: { $addToSet: \"$Classroom\" } } }, { $project: { grade: \"$_id\", totalClassrooms: { $size: \"$totalClassrooms\" }, totalStudents: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Grade\", totalStudents: { $sum: 1 }, totalClassrooms: { $addToSet: \"$Classroom\" } } }, { $project: { grade: \"$_id\", totalClassrooms: { $size: \"$totalClassrooms\" }, totalStudents: 1 } } ])"
    },
    {
        "question_id": 2378,
        "spider_question_id": 4083,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT classroom , count(DISTINCT grade) FROM list GROUP BY classroom",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $addToSet: \"$Grade\" } } }, { $project: { _id: 1, count: { $size: \"$count\" } } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", NumberOfGrades: { $addToSet: \"$Grade\" } } }, { $project: { Classroom: \"$_id\", NumberOfGrades: { $size: \"$NumberOfGrades\" } } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $addToSet: \"$Grade\" } } }, { $project: { _id: 1, count: { $size: \"$count\" } } } ])"
    },
    {
        "question_id": 2379,
        "spider_question_id": 4084,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT classroom , count(DISTINCT grade) FROM list GROUP BY classroom",
        "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $addToSet: \"$Grade\" } } }, { $project: { Classroom: \"$_id\", count: { $size: \"$count\" } } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", distinctGrades: { $addToSet: \"$Grade\" } } }, { $project: { Classroom: \"$_id\", NumberOfDistinctGrades: { $size: \"$distinctGrades\" } } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $addToSet: \"$Grade\" } } }, { $project: { Classroom: \"$_id\", count: { $size: \"$count\" } } } ])"
    },
    {
        "question_id": 2380,
        "spider_question_id": 4085,
        "db_id": "student_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "question": "Which classroom has the most students?",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { classroom: \"$_id\" } }])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { classroom: \"$_id\" } }])"
    },
    {
        "question_id": 2381,
        "spider_question_id": 4086,
        "db_id": "student_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the classroom that the most students use.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { classroom: \"$_id\" } }])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", studentCount: { $sum: 1 } } }, { $sort: { studentCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { classroom: \"$_id\" } }])"
    },
    {
        "question_id": 2382,
        "spider_question_id": 4087,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT classroom , count(*) FROM list GROUP BY classroom",
        "question": "Report the number of students in each classroom.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", NumberOfStudents: { $sum: 1 } } }, { $project: { Classroom: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2383,
        "spider_question_id": 4088,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT classroom , count(*) FROM list GROUP BY classroom",
        "question": "For each classroom, show the classroom number and find how many students are using it.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", NumberOfStudents: { $sum: 1 } } }, { $project: { Classroom: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2384,
        "spider_question_id": 4093,
        "db_id": "student_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname , T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "query": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"students\" } }, { $project: { FirstName: 1, LastName: 1, numberOfStudents: { $size: \"$students\" } } }, { $sort: { numberOfStudents: -1 } }, { $limit: 1 }, { $project: { FirstName: 1, LastName: 1 } } ])",
        "gpt4 answer": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"students\" } }, { $project: { FirstName: 1, LastName: 1, numberOfStudents: { $size: \"$students\" } } }, { $sort: { numberOfStudents: -1 } }, { $limit: 1 }, { $project: { FirstName: 1, LastName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2385,
        "spider_question_id": 4094,
        "db_id": "student_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.firstname , T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname , T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"students\" } }, { $project: { FirstName: 1, LastName: 1, studentCount: { $size: \"$students\" } } }, { $sort: { studentCount: -1 } }, { $limit: 1 }, { $project: { FirstName: 1, LastName: 1 } } ])",
        "gpt4 answer": "db.teachers.aggregate([ { $lookup: { from: \"list\", localField: \"Classroom\", foreignField: \"Classroom\", as: \"students\" } }, { $project: { FirstName: 1, LastName: 1, studentCount: { $size: \"$students\" } } }, { $sort: { studentCount: -1 } }, { $limit: 1 }, { $project: { FirstName: 1, LastName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2386,
        "spider_question_id": 4095,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , classroom FROM list GROUP BY classroom",
        "question": "Find the number of students in one classroom.",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", NumberOfStudents: { $sum: 1 } } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2387,
        "spider_question_id": 4096,
        "db_id": "student_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , classroom FROM list GROUP BY classroom",
        "question": "How many students does one classroom have?",
        "query": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.list.aggregate([ { $group: { _id: '$Classroom', count: { $sum: 1 } } } ])",
        "deepseek answer": "db.list.aggregate([ { $group: { _id: \"$Classroom\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2388,
        "spider_question_id": 4098,
        "db_id": "company_employee",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "question": "List the names of companies by ascending number of sales.",
        "query": "db.company.aggregate([ { $project: { Name: 1, Sales_in_Billion: 1 } }, { $sort: { Sales_in_Billion: 1 } }, { $project: { Name: 1} } ])",
        "gpt4 answer": "db.company.find({}, { Name: 1 }).sort({ Sales_in_Billion: 1 })",
        "deepseek answer": "db.company.aggregate([ { $project: { Name: 1, Sales_in_Billion: 1 } }, { $sort: { Sales_in_Billion: 1 } }, { $project: { Name: 1} } ])"
    },
    {
        "question_id": 2389,
        "spider_question_id": 4099,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Headquarters , Industry FROM company",
        "question": "What are the headquarters and industries of all companies?",
        "query": "db.company.find({}, {Headquarters: 1, Industry: 1})",
        "gpt4 answer": "db.company.find({}, { Headquarters: 1, Industry: 1 })",
        "deepseek answer": "db.company.find({}, {Headquarters: 1, Industry: 1})"
    },
    {
        "question_id": 2390,
        "spider_question_id": 4100,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM company WHERE Industry = 'Banking' OR Industry = 'Retailing'",
        "question": "Show the names of companies in the banking or retailing industry?",
        "query": "db.company.find({ Industry: { $in: ['Banking', 'Retailing'] } }, { Name: 1 })",
        "gpt4 answer": "db.company.find({ Industry: { $in: ['Banking', 'Retailing'] } }, { Name: 1 })",
        "deepseek answer": "db.company.find({ Industry: { $in: ['Banking', 'Retailing'] } }, { Name: 1 })"
    },
    {
        "question_id": 2391,
        "spider_question_id": 4101,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Market_Value_in_Billion) , min(Market_Value_in_Billion) FROM company",
        "question": "What is the maximum and minimum market value of companies?",
        "query": "db.company.aggregate([ { $group: { _id: null, maxMarketValue: { $max: \"$Market_Value_in_Billion\" }, minMarketValue: { $min: \"$Market_Value_in_Billion\" } } }, { $project: { maxMarketValue: 1, minMarketValue: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: null, maxMarketValue: { $max: \"$Market_Value_in_Billion\" }, minMarketValue: { $min: \"$Market_Value_in_Billion\" } } }, { $project: { maxMarketValue: 1, minMarketValue: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: null, maxMarketValue: { $max: \"$Market_Value_in_Billion\" }, minMarketValue: { $min: \"$Market_Value_in_Billion\" } } }, { $project: { maxMarketValue: 1, minMarketValue: 1 } } ])"
    },
    {
        "question_id": 2392,
        "spider_question_id": 4102,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1",
        "question": "What is the headquarter of the company with the largest sales?",
        "query": "db.company.find({}, {Headquarters: 1}).sort({Sales_in_Billion: -1}).limit(1)",
        "gpt4 answer": "db.company.find({}, { Headquarters: 1 }).sort({ Sales_in_Billion: -1 }).limit(1)",
        "deepseek answer": "db.company.find({}, {Headquarters: 1}).sort({Sales_in_Billion: -1}).limit(1)"
    },
    {
        "question_id": 2393,
        "spider_question_id": 4103,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "query": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $project: { Headquarters: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", NumberOfCompanies: { $sum: 1 } }} ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $project: { Headquarters: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2394,
        "spider_question_id": 4104,
        "db_id": "company_employee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common headquarter for companies.",
        "query": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 2395,
        "spider_question_id": 4105,
        "db_id": "company_employee",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*) >= 2",
        "question": "Show the headquarters that have at least two companies.",
        "query": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $project: { Headquarters: \"$_id\" }} ])",
        "deepseek answer": "db.company.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 2396,
        "spider_question_id": 4106,
        "db_id": "company_employee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Headquarters FROM company WHERE Industry = 'Banking' INTERSECT SELECT Headquarters FROM company WHERE Industry = 'Oil and gas'",
        "question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "query": "db.company.aggregate([ { $match: { $or: [ { Industry: 'Banking' }, { Industry: 'Oil and gas' } ] } }, { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.company.aggregate([ { $match: { $or: [ { Industry: 'Banking' }, { Industry: 'Oil and gas' } ] } }, { $group: { _id: '$Headquarters', industries: { $addToSet: '$Industry' } } }, { $match: { industries: { $all: ['Banking', 'Oil and gas'] } } }, { $project: { Headquarters: '$_id' } } ])",
        "deepseek answer": "db.company.aggregate([ { $match: { $or: [ { Industry: 'Banking' }, { Industry: 'Oil and gas' } ] } }, { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 2397,
        "spider_question_id": 4107,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID",
        "question": "Show the names of companies and of employees.",
        "query": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employee_info\" } }, { $unwind: \"$employee_info\" }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $project: { \"company_name\": \"$company_info.Name\", \"employee_name\": \"$employee_info.Name\" } } ])",
        "gpt4 answer": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employee_info\" } }, { $unwind: \"$employee_info\" }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $project: { \"company_name\": \"$company_info.Name\", \"employee_name\": \"$employee_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2398,
        "spider_question_id": 4108,
        "db_id": "company_employee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID ORDER BY T1.Year_working",
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "query": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employee\" } }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company\" } }, { $unwind: \"$employee\" }, { $unwind: \"$company\" }, { $project: { Company_Name: \"$company.Name\", Employee_Name: \"$employee.Name\" } }, { $sort: { Year_working: -1 } } ])",
        "gpt4 answer": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employee\" } }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company\" } }, { $unwind: \"$employee\" }, { $unwind: \"$company\" }, { $project: { \"companyName\": \"$company.Name\", \"employeeName\": \"$employee.Name\" } }, { $sort: { \"Year_working\": -1 } } ])",
        "deepseek answer": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employee\" } }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company\" } }, { $unwind: \"$employee\" }, { $unwind: \"$company\" }, { $project: { Company_Name: \"$company.Name\", Employee_Name: \"$employee.Name\" } }, { $sort: { Year_working: -1 } } ])"
    },
    {
        "question_id": 2399,
        "spider_question_id": 4110,
        "db_id": "company_employee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Name , COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name",
        "question": "Show the names of companies and the number of employees they have",
        "query": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $group: { _id: \"$company_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.employment.aggregate([ { $group: { _id: \"$Company_ID\", name: { $first: \"$Company_ID\" }, employees: { $sum: 1 } } }, { $lookup: { from: \"company\", localField: \"name\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $project: { name: \"$company_info.Name\", employees: 1 } }, { $unwind: \"$name\" } ])",
        "deepseek answer": "db.employment.aggregate([ { $lookup: { from: \"people\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"people_info\" } }, { $lookup: { from: \"company\", localField: \"Company_ID\", foreignField: \"Company_ID\", as: \"company_info\" } }, { $unwind: \"$company_info\" }, { $group: { _id: \"$company_info.Name\", count: { $sum: 1 } } }, { $project: { Name: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2400,
        "spider_question_id": 4111,
        "db_id": "company_employee",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
        "question": "List the names of people that are not employed by any company",
        "query": "db.people.aggregate([ { $lookup: { from: \"employment\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employment\" } }, { $match: { \"employment\": {$size: 0} } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.people.aggregate([ { $lookup: { from: \"employment\", localField: \"People_ID\", foreignField: \"People_ID\", as: \"employment\" } }, { $match: { \"employment\": {$size: 0} } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2401,
        "spider_question_id": 4112,
        "db_id": "company_employee",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion , Profits_in_Billion DESC",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "db.company.find( { Sales_in_Billion: { $gt: 200 } }, { Name: 1 } ).sort({ Sales_in_Billion: -1, Profits_in_Billion: -1 })",
        "gpt4 answer": "db.company.find({ Sales_in_Billion: { $gt: 200 } }, { Name: 1 }).sort({ Sales_in_Billion: -1, Profits_in_Billion: -1 })",
        "deepseek answer": "db.company.find( { Sales_in_Billion: { $gt: 200 } }, { Name: 1 } ).sort({ Sales_in_Billion: -1, Profits_in_Billion: -1 })"
    },
    {
        "question_id": 2402,
        "spider_question_id": 4117,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Gross_in_dollar) FROM film",
        "question": "What is the average ticket sales gross in dollars of films?",
        "query": "db.film.aggregate([ { $group: { _id: null, averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $project: { averageGross: 1} } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: null, averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $project: { averageGross: 1 } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: null, averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $project: { averageGross: 1} } ])"
    },
    {
        "question_id": 2403,
        "spider_question_id": 4118,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Gross_in_dollar) FROM film",
        "question": "Return the average gross sales in dollars across all films.",
        "query": "db.film.aggregate([ { $group: { _id: null, averageGross: { $avg: \"$Gross_in_dollar\" } } } , { $project: { averageGross: 1 } }])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: null, averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $project: { averageGross: 1 } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: null, averageGross: { $avg: \"$Gross_in_dollar\" } } } , { $project: { averageGross: 1 } }])"
    },
    {
        "question_id": 2404,
        "spider_question_id": 4119,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
        "question": "What are the low and high estimates of film markets?",
        "query": "db.film_market_estimation.find({}, {Low_Estimate: 1, High_Estimate: 1})",
        "gpt4 answer": "db.film_market_estimation.find({}, { Low_Estimate: 1, High_Estimate: 1 })",
        "deepseek answer": "db.film_market_estimation.find({}, {Low_Estimate: 1, High_Estimate: 1})"
    },
    {
        "question_id": 2405,
        "spider_question_id": 4120,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
        "question": "Return the low and high estimates for all film markets.",
        "query": "db.film_market_estimation.find({}, {Low_Estimate: 1, High_Estimate: 1})",
        "gpt4 answer": "db.film_market_estimation.find({}, { Low_Estimate: 1, High_Estimate: 1 })",
        "deepseek answer": "db.film_market_estimation.find({}, {Low_Estimate: 1, High_Estimate: 1})"
    },
    {
        "question_id": 2406,
        "spider_question_id": 4121,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995",
        "question": "What are the types of film market estimations in year 1995?",
        "query": "db.film_market_estimation.find({Year: 1995}, { Type: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.film_market_estimation.find({Year: 1995}, { Type: 1})"
    },
    {
        "question_id": 2407,
        "spider_question_id": 4123,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Number_cities) , min(Number_cities) FROM market",
        "question": "What are the maximum and minimum number of cities in all markets.",
        "query": "db.market.aggregate([ { $group: { _id: null, maxNumberCities: { $max: \"$Number_cities\" }, minNumberCities: { $min: \"$Number_cities\" } } }, { $project: { maxNumberCities: 1, minNumberCities: 1 } } ])",
        "gpt4 answer": "db.market.aggregate([ { $group: { _id: null, MaximumCities: { $max: \"$Number_cities\" }, MinimumCities: { $min: \"$Number_cities\" } } }, { $project: { MaximumCities: 1, MinimumCities: 1 } } ])",
        "deepseek answer": "db.market.aggregate([ { $group: { _id: null, maxNumberCities: { $max: \"$Number_cities\" }, minNumberCities: { $min: \"$Number_cities\" } } }, { $project: { maxNumberCities: 1, minNumberCities: 1 } } ])"
    },
    {
        "question_id": 2408,
        "spider_question_id": 4124,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Number_cities) , min(Number_cities) FROM market",
        "question": "Return the maximum and minimum number of cities across all markets.",
        "query": "db.market.aggregate([ { $group: { _id: null, maxNumberCities: { $max: \"$Number_cities\" }, minNumberCities: { $min: \"$Number_cities\" } } }, { $project: { maxNumberCities: 1, minNumberCities: 1 } } ])",
        "gpt4 answer": "db.market.aggregate([ { $group: { _id: null, max_cities: { $max: \"$Number_cities\" }, min_cities: { $min: \"$Number_cities\" } } }, { $project: { max_cities: 1, min_cities: 1 } } ])",
        "deepseek answer": "db.market.aggregate([ { $group: { _id: null, maxNumberCities: { $max: \"$Number_cities\" }, minNumberCities: { $min: \"$Number_cities\" } } }, { $project: { maxNumberCities: 1, minNumberCities: 1 } } ])"
    },
    {
        "question_id": 2409,
        "spider_question_id": 4127,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM market ORDER BY Country ASC",
        "question": "List all countries of markets in ascending alphabetical order.",
        "query": "db.market.find({}, {Country: 1}).sort({Country: 1})",
        "gpt4 answer": "db.market.aggregate([ { $sort: { Country: 1 } }, { $project: { Country: 1 } } ])",
        "deepseek answer": "db.market.find({}, {Country: 1}).sort({Country: 1})"
    },
    {
        "question_id": 2410,
        "spider_question_id": 4128,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM market ORDER BY Country ASC",
        "question": "What are the countries for each market, ordered alphabetically?",
        "query": "db.market.find({}, {Country: 1}).sort({Country: 1})",
        "gpt4 answer": "db.market.find({}, {Country: 1}).sort({Country: 1})",
        "deepseek answer": "db.market.find({}, {Country: 1}).sort({Country: 1})"
    },
    {
        "question_id": 2411,
        "spider_question_id": 4129,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "question": "List all countries of markets in descending order of number of cities.",
        "query": "db.market.find({}, {Country: 1}).sort({Number_cities: -1})",
        "gpt4 answer": "db.market.find({}, { Country: 1 }).sort({ Number_cities: -1 })",
        "deepseek answer": "db.market.find({}, {Country: 1}).sort({Number_cities: -1})"
    },
    {
        "question_id": 2412,
        "spider_question_id": 4130,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM market ORDER BY Number_cities DESC",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "query": "db.market.find({}, {Country: 1}).sort({Number_cities: -1})",
        "gpt4 answer": "db.market.find({}, { Country: 1 }).sort({ Number_cities: -1 })",
        "deepseek answer": "db.market.find({}, {Country: 1}).sort({Number_cities: -1})"
    },
    {
        "question_id": 2413,
        "spider_question_id": 4133,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995",
        "question": "Show the distinct director of films with market estimation in the year of 1995.",
        "query": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $match: { \"estimation.Year\": 1995 } }, { $group: { _id: \"$Director\" } }, { $project: { Director: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $match: { \"estimation.Year\": 1995 } }, { $group: { _id: \"$Director\" } }, { $project: { Director: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2414,
        "spider_question_id": 4134,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995",
        "question": "Who are the different directors of films which had market estimation in 1995?",
        "query": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"film_market_estimation\" } }, { $unwind: \"$film_market_estimation\" }, { $match: { \"film_market_estimation.Year\": 1995 } }, { $group: { _id: \"$Director\" } }, { $project: { Director: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $match: { \"estimation.Year\": 1995 } }, { $group: { _id: \"$Director\" } } ])",
        "deepseek answer": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"film_market_estimation\" } }, { $unwind: \"$film_market_estimation\" }, { $match: { \"film_market_estimation.Year\": 1995 } }, { $group: { _id: \"$Director\" } }, { $project: { Director: \"$_id\" } } ])"
    },
    {
        "question_id": 2415,
        "spider_question_id": 4135,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
        "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "query": "db.film_market_estimation.aggregate([ { $match: { Low_Estimate: { $gt: 10000 } } }, { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $unwind: \"$market_data\" }, { $group: { _id: null, avgNumberOfCities: { $avg: \"$market_data.Number_cities\" } } }, { $project: { avgNumberOfCities: 1 } } ])",
        "gpt4 answer": "db.film_market_estimation.aggregate([ { $match: { Low_Estimate: { $gt: 10000 } } }, { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $group: { _id: null, avgNumberCities: { $avg: \"$market_info.Number_cities\" } } }, { $project: { avgNumberCities: 1 } } ])",
        "deepseek answer": "db.film_market_estimation.aggregate([ { $match: { Low_Estimate: { $gt: 10000 } } }, { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $unwind: \"$market_data\" }, { $group: { _id: null, avgNumberOfCities: { $avg: \"$market_data.Number_cities\" } } }, { $project: { avgNumberOfCities: 1 } } ])"
    },
    {
        "question_id": 2416,
        "spider_question_id": 4136,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
        "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
        "query": "db.film_market_estimation.aggregate([ { $match: { Low_Estimate: { $gt: 10000 } } }, { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $unwind: \"$market_data\" }, { $group: { _id: null, avgNumberOfCities: { $avg: \"$market_data.Number_cities\" } } }, { $project: { avgNumberOfCities:1 } } ])",
        "gpt4 answer": "db.film_market_estimation.aggregate([ { $match: { Low_Estimate: { $gt: 10000 } } }, { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $group: { _id: null, average_number_cities: { $avg: \"$market_info.Number_cities\" } } }, { $project: { average_number_cities: 1 } } ])",
        "deepseek answer": "db.film_market_estimation.aggregate([ { $match: { Low_Estimate: { $gt: 10000 } } }, { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $unwind: \"$market_data\" }, { $group: { _id: null, avgNumberOfCities: { $avg: \"$market_data.Number_cities\" } } }, { $project: { avgNumberOfCities:1 } } ])"
    },
    {
        "question_id": 2417,
        "spider_question_id": 4137,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID",
        "question": "Please list the countries and years of film market estimations.",
        "query": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $project: { Country: \"$market_info.Country\", Year: \"$Year\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $project: { Country: \"$market_info.Country\", Year: \"$Year\" } } ])"
    },
    {
        "question_id": 2418,
        "spider_question_id": 4138,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Country , T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "query": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $project: { Country: \"$market_info.Country\", Year: \"$Year\" } } ])",
        "gpt4 answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $project: { Country: \"$market_info.Country\", Year: \"$Year\" } } ])",
        "deepseek answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $unwind: \"$market_info\" }, { $project: { Country: \"$market_info.Country\", Year: \"$Year\" } } ])"
    },
    {
        "question_id": 2419,
        "spider_question_id": 4139,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = 'Japan' ORDER BY T1.Year DESC",
        "question": "Please list the years of film market estimations when the market is in country 'Japan' in descending order.",
        "query": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $match: { \"market_data.Country\": \"Japan\" } }, { $project: { Year: 1 } }, { $sort: { Year: -1 } } ])",
        "gpt4 answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $match: { \"market_info.Country\": \"Japan\" } }, { $project: { Year: 1 } }, { $sort: { Year: -1 } } ])",
        "deepseek answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $match: { \"market_data.Country\": \"Japan\" } }, { $project: { Year: 1 } }, { $sort: { Year: -1 } } ])"
    },
    {
        "question_id": 2420,
        "spider_question_id": 4140,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = 'Japan' ORDER BY T1.Year DESC",
        "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "query": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $match: { \"market_data.Country\": \"Japan\" } }, { $project: { Year: 1 } }, { $sort: { Year: -1 } } ])",
        "gpt4 answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_info\" } }, { $match: { \"market_info.Country\": \"Japan\" } }, { $project: { Year: 1 } }, { $sort: { Year: -1 } } ])",
        "deepseek answer": "db.film_market_estimation.aggregate([ { $lookup: { from: \"market\", localField: \"Market_ID\", foreignField: \"Market_ID\", as: \"market_data\" } }, { $match: { \"market_data.Country\": \"Japan\" } }, { $project: { Year: 1 } }, { $sort: { Year: -1 } } ])"
    },
    {
        "question_id": 2421,
        "spider_question_id": 4141,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio",
        "question": "List the studios of each film and the number of films produced by that studio.",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $project: { Studio: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", NumberOfFilms: { $sum: 1 } } }, { $project: { Studio: \"$_id\", NumberOfFilms: 1 } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $project: { Studio: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2422,
        "spider_question_id": 4142,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Studio , COUNT(*) FROM film GROUP BY Studio",
        "question": "How films are produced by each studio?",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2423,
        "spider_question_id": 4143,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the name of film studio that have the most number of films.",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2424,
        "spider_question_id": 4144,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of teh studio that created the most films?",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2425,
        "spider_question_id": 4145,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2",
        "question": "List the names of studios that have at least two films.",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", filmCount: { $sum: 1 } } }, { $match: { filmCount: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2426,
        "spider_question_id": 4146,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2",
        "question": "What are the names of studios that have made two or more films?",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", numFilms: { $sum: 1 } } }, { $match: { numFilms: { $gte: 2 } } }, { $project: { Studio: \"$_id\" } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2427,
        "spider_question_id": 4149,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Studio FROM film WHERE Director = 'Nicholas Meyer' INTERSECT SELECT Studio FROM film WHERE Director = 'Walter Hill'",
        "question": "Show the studios that have produced films with director 'Nicholas Meyer' and 'Walter Hill'.",
        "query": "db.film.aggregate([ { $match: { $or: [ { Director: \"Nicholas Meyer\" }, { Director: \"Walter Hill\" } ] } }, { $group: { _id: \"$Studio\" } }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $match: { $or: [ { Director: 'Nicholas Meyer' }, { Director: 'Walter Hill' } ] } }, { $group: { _id: '$Studio', directors: { $addToSet: '$Director' } } }, { $match: { directors: { $all: ['Nicholas Meyer', 'Walter Hill'] } } }, { $project: { Studio: '$_id' } } ])",
        "deepseek answer": "db.film.aggregate([ { $match: { $or: [ { Director: \"Nicholas Meyer\" }, { Director: \"Walter Hill\" } ] } }, { $group: { _id: \"$Studio\" } }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2428,
        "spider_question_id": 4150,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Studio FROM film WHERE Director = 'Nicholas Meyer' INTERSECT SELECT Studio FROM film WHERE Director = 'Walter Hill'",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "query": "db.film.aggregate([ { $match: { $or: [ { Director: \"Nicholas Meyer\" }, { Director: \"Walter Hill\" } ] } }, { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $match: { $or: [{ Director: 'Nicholas Meyer' }, { Director: 'Walter Hill' }] } }, { $group: { _id: \"$Studio\", directors: { $addToSet: \"$Director\" } } }, { $match: { directors: { $all: ['Nicholas Meyer', 'Walter Hill'] } } }, { $project: { Studio: \"$_id\" } } ])",
        "deepseek answer": "db.film.aggregate([ { $match: { $or: [ { Director: \"Nicholas Meyer\" }, { Director: \"Walter Hill\" } ] } }, { $group: { _id: \"$Studio\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2429,
        "spider_question_id": 4151,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , Studio FROM film WHERE Studio LIKE '%Universal%'",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word 'Universal'.",
        "query": "db.film.find({Studio: {$regex: /Universal/}}, {Title: 1, Studio: 1})",
        "gpt4 answer": "db.film.find({ Studio: /Universal/ }, { Title: 1, Studio: 1 })",
        "deepseek answer": "db.film.find({Studio: {$regex: /Universal/}}, {Title: 1, Studio: 1})"
    },
    {
        "question_id": 2430,
        "spider_question_id": 4152,
        "db_id": "film_rank",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , Studio FROM film WHERE Studio LIKE '%Universal%'",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains 'Universal'?",
        "query": "db.film.find({Studio: {$regex: /Universal/}}, {Title: 1, Studio: 1})",
        "gpt4 answer": "db.film.find({ Studio: /Universal/ }, { Title: 1, Studio: 1 })",
        "deepseek answer": "db.film.find({Studio: {$regex: /Universal/}}, {Title: 1, Studio: 1})"
    },
    {
        "question_id": 2431,
        "spider_question_id": 4154,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = 'Walter Hill'",
        "question": "Which studios have never worked with the director Walter Hill?",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", directors: { $addToSet: \"$Director\" } } }, { $match: { directors: { $ne: \"Walter Hill\" } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", directors: { $addToSet: \"$Director\" } } }, { $match: { directors: { $ne: \"Walter Hill\" } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2432,
        "spider_question_id": 4155,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000",
        "question": "List the studios which average gross is above 4500000.",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $match: { averageGross: { $gt: 4500000 } } }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $match: { averageGross: { $gte: 4500000 } } }, { $project: { Studio: \"$_id\" } } ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", averageGross: { $avg: \"$Gross_in_dollar\" } } }, { $match: { averageGross: { $gt: 4500000 } } }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2433,
        "spider_question_id": 4156,
        "db_id": "film_rank",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar) >= 4500000",
        "question": "Which studios have an average gross of over 4500000?",
        "query": "db.film.aggregate([ { $group: { _id: \"$Studio\", avgGross: { $avg: \"$Gross_in_dollar\" } } }, { $match: { avgGross: { $gte: 4500000 } } }, { $project: { Studio: \"$_id\" } } ])",
        "gpt4 answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", averageGross: { $avg: \"$Gross_in_dollar\" } }}, { $match: { averageGross: { $gte: 4500000 } }}, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.film.aggregate([ { $group: { _id: \"$Studio\", avgGross: { $avg: \"$Gross_in_dollar\" } } }, { $match: { avgGross: { $gte: 4500000 } } }, { $project: { Studio: \"$_id\" } } ])"
    },
    {
        "question_id": 2434,
        "spider_question_id": 4157,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "question": "What is the title of the film that has the highest high market estimation.",
        "query": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $sort: { \"estimation.High_Estimate\": -1 } }, { $limit: 1 }, { $project: { Title: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $sort: { \"estimation.High_Estimate\": -1 } }, { $limit: 1 }, { $project: { Title: 1 } } ])"
    },
    {
        "question_id": 2435,
        "spider_question_id": 4158,
        "db_id": "film_rank",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
        "question": "Return the title of the film with the highest high estimate?",
        "query": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $sort: { \"estimation.High_Estimate\": -1 } }, { $limit: 1 }, { $project: { Title: 1 } } ])",
        "gpt4 answer": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimations\" } }, { $unwind: \"$estimations\" }, { $sort: { \"estimations.High_Estimate\": -1 } }, { $limit: 1 }, { $project: { Title: 1 } } ])",
        "deepseek answer": "db.film.aggregate([ { $lookup: { from: \"film_market_estimation\", localField: \"Film_ID\", foreignField: \"Film_ID\", as: \"estimation\" } }, { $unwind: \"$estimation\" }, { $sort: { \"estimation.High_Estimate\": -1 } }, { $limit: 1 }, { $project: { Title: 1 } } ])"
    },
    {
        "question_id": 2436,
        "spider_question_id": 4167,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code , document_type_name FROM Ref_document_types",
        "question": "List all document type codes and document type names.",
        "query": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1})",
        "gpt4 answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1 })",
        "deepseek answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1})"
    },
    {
        "question_id": 2437,
        "spider_question_id": 4168,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code , document_type_name FROM Ref_document_types",
        "question": "What are all the document type codes and document type names?",
        "query": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1})",
        "gpt4 answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1 })",
        "deepseek answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1})"
    },
    {
        "question_id": 2438,
        "spider_question_id": 4169,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = 'RV'",
        "question": "What is the name and description for document type code RV?",
        "query": "db.Ref_Document_Types.find( { Document_Type_Code: 'RV' }, { Document_Type_Name: 1, Document_Type_Description: 1 } )",
        "gpt4 answer": "db.Ref_Document_Types.find( { Document_Type_Code: \"RV\" }, { Document_Type_Name: 1, Document_Type_Description: 1 } )",
        "deepseek answer": "db.Ref_Document_Types.find( { Document_Type_Code: 'RV' }, { Document_Type_Name: 1, Document_Type_Description: 1 } )"
    },
    {
        "question_id": 2439,
        "spider_question_id": 4170,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_name , document_type_description FROM Ref_document_types WHERE document_type_code = 'RV'",
        "question": "Give me the name and description of the document type code RV.",
        "query": "db.Ref_Document_Types.find( { Document_Type_Code: 'RV' }, { Document_Type_Name: 1, Document_Type_Description: 1 } )",
        "gpt4 answer": "db.Ref_Document_Types.find({ Document_Type_Code: \"RV\" }, { Document_Type_Name: 1, Document_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Document_Types.find( { Document_Type_Code: 'RV' }, { Document_Type_Name: 1, Document_Type_Description: 1 } )"
    },
    {
        "question_id": 2440,
        "spider_question_id": 4171,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = 'Paper'",
        "question": "What is the document type code for document type 'Paper'?",
        "query": "db.Ref_Document_Types.findOne({Document_Type_Name: 'Paper'}, {Document_Type_Code: 1})",
        "gpt4 answer": "db.Ref_Document_Types.find({ Document_Type_Name: 'Paper' }, { Document_Type_Code: 1 })",
        "deepseek answer": "db.Ref_Document_Types.findOne({Document_Type_Name: 'Paper'}, {Document_Type_Code: 1})"
    },
    {
        "question_id": 2441,
        "spider_question_id": 4172,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = 'Paper'",
        "question": "Find the code of the document type 'Paper'.",
        "query": "db.Ref_Document_Types.findOne({ Document_Type_Name: 'Paper' }, { Document_Type_Code: 1 })",
        "gpt4 answer": "db.Ref_Document_Types.findOne({ Document_Type_Name: 'Paper' }, { Document_Type_Code: 1 })",
        "deepseek answer": "db.Ref_Document_Types.findOne({ Document_Type_Name: 'Paper' }, { Document_Type_Code: 1 })"
    },
    {
        "question_id": 2442,
        "spider_question_id": 4173,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM All_documents WHERE document_type_code = 'CV' OR document_type_code = 'BK'",
        "question": "Show the number of documents with document type code CV or BK.",
        "query": "db.All_Documents.aggregate([ { $match: { $or: [ { Document_Type_Code: 'CV' }, { Document_Type_Code: 'BK' } ] } }, { $count: \"number_of_documents\" } ])",
        "gpt4 answer": "db.All_Documents.aggregate([ { $match: { $or: [ { Document_Type_Code: 'CV' }, { Document_Type_Code: 'BK' } ] } }, { $count: \"number_of_documents\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2443,
        "spider_question_id": 4179,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = 'How to read a book'",
        "question": "What is the document type name for the document with name 'How to read a book'?",
        "query": "db.All_Documents.aggregate([ { $match: { Document_Name: \"How to read a book\" } }, { $lookup: { from: \"Ref_Document_Types\", localField: \"Document_Type_Code\", foreignField: \"Document_Type_Code\", as: \"document_type\" } }, { $project: { Document_Type_Name: { $arrayElemAt: [\"$document_type.Document_Type_Name\", 0] } } } ])",
        "gpt4 answer": "db.All_Documents.aggregate([ { $match: { Document_Name: 'How to read a book' } }, { $lookup: { from: 'Ref_Document_Types', localField: 'Document_Type_Code', foreignField: 'Document_Type_Code', as: 'DocumentType' } }, { $unwind: '$DocumentType' }, { $project: { Document_Type_Name: '$DocumentType.Document_Type_Name' } } ])",
        "deepseek answer": "db.All_Documents.aggregate([ { $match: { Document_Name: \"How to read a book\" } }, { $lookup: { from: \"Ref_Document_Types\", localField: \"Document_Type_Code\", foreignField: \"Document_Type_Code\", as: \"document_type\" } }, { $project: { Document_Type_Name: { $arrayElemAt: [\"$document_type.Document_Type_Name\", 0] } } } ])"
    },
    {
        "question_id": 2444,
        "spider_question_id": 4180,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = 'How to read a book'",
        "question": "Find the document type name of the document named 'How to read a book'.",
        "query": "db.All_Documents.aggregate([ { $match: { Document_Name: 'How to read a book' } }, { $lookup: { from: 'Ref_Document_Types', localField: 'Document_Type_Code', foreignField: 'Document_Type_Code', as: 'docType' } }, { $unwind: '$docType' }, { $project: { Document_Type_Name: '$docType.Document_Type_Name' } } ])",
        "gpt4 answer": "db.All_Documents.aggregate([ { $match: { Document_Name: 'How to read a book' } }, { $lookup: { from: 'Ref_Document_Types', localField: 'Document_Type_Code', foreignField: 'Document_Type_Code', as: 'docType' } }, { $unwind: '$docType' }, { $project: { Document_Type_Name: '$docType.Document_Type_Name' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2445,
        "spider_question_id": 4183,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT location_code , location_name FROM Ref_locations",
        "question": "List all location codes and location names.",
        "query": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1})",
        "gpt4 answer": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1})",
        "deepseek answer": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1})"
    },
    {
        "question_id": 2446,
        "spider_question_id": 4184,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT location_code , location_name FROM Ref_locations",
        "question": "What are all the location codes and location names?",
        "query": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1})",
        "gpt4 answer": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1 })",
        "deepseek answer": "db.Ref_Locations.find({}, { Location_Code: 1, Location_Name: 1})"
    },
    {
        "question_id": 2447,
        "spider_question_id": 4185,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT location_name , location_description FROM Ref_locations WHERE location_code = 'x'",
        "question": "What are the name and description for location code x?",
        "query": "db.Ref_Locations.find({ Location_Code: 'x' }, { Location_Name: 1, Location_Description: 1 })",
        "gpt4 answer": "db.Ref_Locations.find({ Location_Code: 'x' }, { Location_Name: 1, Location_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2448,
        "spider_question_id": 4186,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT location_name , location_description FROM Ref_locations WHERE location_code = 'x'",
        "question": "Give me the name and description of the location with code x.",
        "query": "db.Ref_Locations.find({ Location_Code: 'x' }, { Location_Name: 1, Location_Description: 1 })",
        "gpt4 answer": "db.Ref_Locations.find({ Location_Code: 'x' }, { Location_Name: 1, Location_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2449,
        "spider_question_id": 4187,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT location_code FROM Ref_locations WHERE location_name = 'Canada'",
        "question": "What is the location code for the country 'Canada'?",
        "query": "db.Ref_Locations.find({Location_Name: 'Canada'}, {Location_Code: 1})",
        "gpt4 answer": "db.Ref_Locations.findOne({ Location_Name: 'Canada' }, { Location_Code: 1 })",
        "deepseek answer": "db.Ref_Locations.find({Location_Name: 'Canada'}, {Location_Code: 1})"
    },
    {
        "question_id": 2450,
        "spider_question_id": 4188,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT location_code FROM Ref_locations WHERE location_name = 'Canada'",
        "question": "Show the location code of the country 'Canada'.",
        "query": "db.Ref_Locations.find({ Location_Name: 'Canada' }, { Location_Code: 1 })",
        "gpt4 answer": "db.Ref_Locations.find({ Location_Name: 'Canada' }, { Location_Code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2451,
        "spider_question_id": 4191,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_code , role_name , role_description FROM ROLES",
        "question": "List all role codes, role names, and role descriptions.",
        "query": "db.Roles.find({}, { Role_Code: 1, Role_Name: 1, Role_Description: 1 })",
        "gpt4 answer": "db.Roles.find({}, { Role_Code: 1, Role_Name: 1, Role_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2452,
        "spider_question_id": 4192,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_code , role_name , role_description FROM ROLES",
        "question": "What are all the role codes, role names, and role descriptions?",
        "query": "db.Roles.find({}, { Role_Code: 1, Role_Name: 1, Role_Description: 1 })",
        "gpt4 answer": "db.Roles.find({}, { Role_Code: 1, Role_Name: 1, Role_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2453,
        "spider_question_id": 4193,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_name , role_description FROM ROLES WHERE role_code = 'MG'",
        "question": "What are the name and description for role code 'MG'?",
        "query": "db.Roles.find( { Role_Code: 'MG' }, { Role_Name: 1, Role_Description: 1 } )",
        "gpt4 answer": "db.Roles.find({ Role_Code: 'MG' }, { Role_Name: 1, Role_Description: 1 })",
        "deepseek answer": "db.Roles.find( { Role_Code: 'MG' }, { Role_Name: 1, Role_Description: 1 } )"
    },
    {
        "question_id": 2454,
        "spider_question_id": 4194,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_name , role_description FROM ROLES WHERE role_code = 'MG'",
        "question": "Find the name and description of the role with code 'MG'.",
        "query": "db.Roles.find( { Role_Code: 'MG' }, { Role_Name: 1, Role_Description: 1 } )",
        "gpt4 answer": "db.Roles.find({ Role_Code: 'MG' }, { Role_Name: 1, Role_Description: 1 })",
        "deepseek answer": "db.Roles.find( { Role_Code: 'MG' }, { Role_Name: 1, Role_Description: 1 } )"
    },
    {
        "question_id": 2455,
        "spider_question_id": 4195,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'",
        "question": "Show the description for role name 'Proof Reader'.",
        "query": "db.Roles.find({Role_Name: 'Proof Reader'}, {Role_Description: 1})",
        "gpt4 answer": "db.Roles.find({ Role_Name: 'Proof Reader' }, { Role_Description: 1 })",
        "deepseek answer": "db.Roles.find({Role_Name: 'Proof Reader'}, {Role_Description: 1})"
    },
    {
        "question_id": 2456,
        "spider_question_id": 4196,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'",
        "question": "What is the description of the role named 'Proof Reader'?",
        "query": "db.Roles.find({Role_Name: 'Proof Reader'}, {Role_Description: 1})",
        "gpt4 answer": "db.Roles.findOne({ Role_Name: 'Proof Reader' }, { Role_Description: 1 })",
        "deepseek answer": "db.Roles.find({Role_Name: 'Proof Reader'}, {Role_Description: 1})"
    },
    {
        "question_id": 2457,
        "spider_question_id": 4201,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
        "question": "What is the id for the employee called Ebba?",
        "query": "db.Employees.find({Employee_Name: \"Ebba\"}, {Employee_ID: 1})",
        "gpt4 answer": "db.Employees.findOne({ Employee_Name: 'Ebba' }, { Employee_ID: 1 })",
        "deepseek answer": "db.Employees.find({Employee_Name: \"Ebba\"}, {Employee_ID: 1})"
    },
    {
        "question_id": 2458,
        "spider_question_id": 4202,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
        "question": "Show the id of the employee named Ebba.",
        "query": "db.Employees.find({Employee_Name: 'Ebba'}, {Employee_ID: 1})",
        "gpt4 answer": "db.Employees.find({ \"Employee_Name\": \"Ebba\" }, { \"Employee_ID\": 1, \"_id\": 0 })",
        "deepseek answer": "db.Employees.find({Employee_Name: 'Ebba'}, {Employee_ID: 1})"
    },
    {
        "question_id": 2459,
        "spider_question_id": 4203,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
        "question": "Show the names of all the employees with role 'HR'.",
        "query": "db.Employees.find({ Role_Code: 'HR' }, { Employee_Name: 1 })",
        "gpt4 answer": "db.Employees.find({Role_Code: 'HR'}, {Employee_Name: 1})",
        "deepseek answer": "db.Employees.find({ Role_Code: 'HR' }, { Employee_Name: 1 })"
    },
    {
        "question_id": 2460,
        "spider_question_id": 4204,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
        "question": "Which employees have the role with code 'HR'? Find their names.",
        "query": "db.Employees.find({ Role_Code: 'HR' }, { Employee_Name: 1 })",
        "gpt4 answer": "db.Employees.find({ Role_Code: 'HR' }, { Employee_Name: 1 })",
        "deepseek answer": "db.Employees.find({ Role_Code: 'HR' }, { Employee_Name: 1 })"
    },
    {
        "question_id": 2461,
        "spider_question_id": 4205,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_code , count(*) FROM Employees GROUP BY role_code",
        "question": "Show all role codes and the number of employees in each role.",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $project: { Role_Code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $project: { Role_Code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2462,
        "spider_question_id": 4206,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT role_code , count(*) FROM Employees GROUP BY role_code",
        "question": "What is the code of each role and the number of employees in each role?",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", NumberOfEmployees: { $sum: 1 } } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2463,
        "spider_question_id": 4207,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the role code with the largest number of employees?",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Role_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Role_Code: \"$_id\" } }])"
    },
    {
        "question_id": 2464,
        "spider_question_id": 4208,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the code of the role that have the most employees.",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])"
    },
    {
        "question_id": 2465,
        "spider_question_id": 4209,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3",
        "question": "Show all role codes with at least 3 employees.",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Role_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Role_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Role_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2466,
        "spider_question_id": 4210,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*) >= 3",
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Role_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", total: { $sum: 1 } } }, { $match: { total: { $gte: 3 } } }, { $project: { Role_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Role_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2467,
        "spider_question_id": 4212,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the role with the smallest number of employees? Find the role codes.",
        "query": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $group: { _id: \"$Role_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2468,
        "spider_question_id": 4213,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.role_name , T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = 'Ebba'",
        "question": "What is the role name and role description for employee called Ebba?",
        "query": "db.Employees.aggregate([ { $match: { Employee_Name: \"Ebba\" } }, { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $unwind: \"$role_info\" }, { $project: { role_name: \"$role_info.Role_Name\", role_description: \"$role_info.Role_Description\" } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $match: { Employee_Name: 'Ebba' } }, { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $unwind: \"$role_info\" }, { $project: { role_name: \"$role_info.Role_Name\", role_description: \"$role_info.Role_Description\" } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $match: { Employee_Name: \"Ebba\" } }, { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $unwind: \"$role_info\" }, { $project: { role_name: \"$role_info.Role_Name\", role_description: \"$role_info.Role_Description\" } } ])"
    },
    {
        "question_id": 2469,
        "spider_question_id": 4215,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Editor'",
        "question": "Show the names of employees with role name Editor.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": \"Editor\" } }, { $project: { Employee_Name: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": \"Editor\" } }, { $project: { Employee_Name: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": \"Editor\" } }, { $project: { Employee_Name: 1 } } ])"
    },
    {
        "question_id": 2470,
        "spider_question_id": 4216,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Editor'",
        "question": "Find the names of all the employees whose the role name is 'Editor'.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": \"Editor\" } }, { $project: { Employee_Name: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": \"Editor\" } }, { $project: { Employee_Name: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": \"Editor\" } }, { $project: { Employee_Name: 1 } } ])"
    },
    {
        "question_id": 2471,
        "spider_question_id": 4217,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Human Resource' OR T2.role_name = 'Manager'",
        "question": "Show the employee ids for all employees with role name 'Human Resource' or 'Manager'.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": { $in: [\"Human Resource\", \"Manager\"] } } }, { $project: { Employee_ID: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"_Roles\" } }, { $match: { \"_Roles.Role_Name\": { $in: [\"Human Resource\", \"Manager\"] } } }, { $project: { Employee_ID: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": { $in: [\"Human Resource\", \"Manager\"] } } }, { $project: { Employee_ID: 1 } } ])"
    },
    {
        "question_id": 2472,
        "spider_question_id": 4218,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Human Resource' OR T2.role_name = 'Manager'",
        "question": "What are the employee ids of the employees whose role name is 'Human Resource' or 'Manager'?",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": { $in: [\"Human Resource\", \"Manager\"] } } }, { $project: { Employee_ID: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": { $in: [\"Human Resource\", \"Manager\"] } } }, { $project: { Employee_ID: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Roles\", localField: \"Role_Code\", foreignField: \"Role_Code\", as: \"role_info\" } }, { $match: { \"role_info.Role_Name\": { $in: [\"Human Resource\", \"Manager\"] } } }, { $project: { Employee_ID: 1 } } ])"
    },
    {
        "question_id": 2473,
        "spider_question_id": 4221,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'",
        "question": "Show the location name for document 'Robin CV'.",
        "query": "db.All_Documents.aggregate([ { $match: { Document_Name: \"Robin CV\" } }, { $lookup: { from: \"Document_Locations\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_locations\" } }, { $unwind: \"$document_locations\" }, { $lookup: { from: \"Ref_Locations\", localField: \"document_locations.Location_Code\", foreignField: \"Location_Code\", as: \"ref_locations\" } }, { $unwind: \"$ref_locations\" }, { $project: { Location_Name: \"$ref_locations.Location_Name\" } } ])",
        "gpt4 answer": "db.All_Documents.aggregate([ { $match: { Document_Name: 'Robin CV' } }, { $lookup: { from: 'Document_Locations', localField: 'Document_ID', foreignField: 'Document_ID', as: 'doc_locations' } }, { $unwind: '$doc_locations' }, { $lookup: { from: 'Ref_Locations', localField: 'doc_locations.Location_Code', foreignField: 'Location_Code', as: 'location_info' } }, { $unwind: '$location_info' }, { $project: { Location_Name: '$location_info.Location_Name' } } ])",
        "deepseek answer": "db.All_Documents.aggregate([ { $match: { Document_Name: \"Robin CV\" } }, { $lookup: { from: \"Document_Locations\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_locations\" } }, { $unwind: \"$document_locations\" }, { $lookup: { from: \"Ref_Locations\", localField: \"document_locations.Location_Code\", foreignField: \"Location_Code\", as: \"ref_locations\" } }, { $unwind: \"$ref_locations\" }, { $project: { Location_Name: \"$ref_locations.Location_Name\" } } ])"
    },
    {
        "question_id": 2474,
        "spider_question_id": 4222,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'",
        "question": "What is the location name of the document 'Robin CV'?",
        "query": "db.All_Documents.aggregate([ { $match: { Document_Name: \"Robin CV\" } }, { $lookup: { from: \"Document_Locations\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_locations\" } }, { $unwind: \"$document_locations\" }, { $lookup: { from: \"Ref_Locations\", localField: \"document_locations.Location_Code\", foreignField: \"Location_Code\", as: \"ref_locations\" } }, { $unwind: \"$ref_locations\" }, { $project: { Location_Name: \"$ref_locations.Location_Name\" } } ])",
        "gpt4 answer": "db.All_Documents.aggregate([ { $match: { Document_Name: 'Robin CV' } }, { $lookup: { from: 'Document_Locations', localField: 'Document_ID', foreignField: 'Document_ID', as: 'DocumentLocation' } }, { $unwind: '$DocumentLocation' }, { $lookup: { from: 'Ref_Locations', localField: 'DocumentLocation.Location_Code', foreignField: 'Location_Code', as: 'LocationDetails' } }, { $unwind: '$LocationDetails' }, { $project: { Location_Name: '$LocationDetails.Location_Name' } } ])",
        "deepseek answer": "db.All_Documents.aggregate([ { $match: { Document_Name: \"Robin CV\" } }, { $lookup: { from: \"Document_Locations\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"document_locations\" } }, { $unwind: \"$document_locations\" }, { $lookup: { from: \"Ref_Locations\", localField: \"document_locations.Location_Code\", foreignField: \"Location_Code\", as: \"ref_locations\" } }, { $unwind: \"$ref_locations\" }, { $project: { Location_Name: \"$ref_locations.Location_Name\" } } ])"
    },
    {
        "question_id": 2475,
        "spider_question_id": 4227,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT location_code , count(*) FROM Document_locations GROUP BY location_code",
        "question": "Show the location codes and the number of documents in each location.",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", NumberOfDocuments: { $sum: 1 } } }, { $project: { Location_Code: \"$_id\", NumberOfDocuments: 1 } } ])",
        "deepseek answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2476,
        "spider_question_id": 4228,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT location_code , count(*) FROM Document_locations GROUP BY location_code",
        "question": "What is the code of each location and the number of documents in that location?",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", NumberOfDocuments: { $sum: 1 } } } ])",
        "deepseek answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2477,
        "spider_question_id": 4229,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the location code with the most documents?",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Location_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Location_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2478,
        "spider_question_id": 4230,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the code of the location with the largest number of documents.",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { location_code: \"$_id\" } } ])",
        "deepseek answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2479,
        "spider_question_id": 4231,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3",
        "question": "Show the location codes with at least 3 documents.",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Location_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { location_code: \"$_id\" } } ])",
        "deepseek answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Location_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2480,
        "spider_question_id": 4232,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*) >= 3",
        "question": "What are the codes of the locations with at least three documents?",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Location_Code: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 3 } } }, { $project: { Location_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2481,
        "spider_question_id": 4233,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the location name and code with the least documents.",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Locations\", localField: \"_id\", foreignField: \"Location_Code\", as: \"location_info\" } }, { $project: { location_name: { $arrayElemAt: [\"$location_info.Location_Name\", 0] }, location_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Locations\", localField: \"_id\", foreignField: \"Location_Code\", as: \"location_info\" } }, { $project: { location_name: { $arrayElemAt: [\"$location_info.Location_Name\", 0] }, location_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2482,
        "spider_question_id": 4234,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "query": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Locations\", localField: \"_id\", foreignField: \"Location_Code\", as: \"location_info\" } }, { $unwind: \"$location_info\" }, { $project: { location_name: \"$location_info.Location_Name\", location_code: \"$location_info.Location_Code\" } } ])",
        "gpt4 answer": "db.Document_Locations.aggregate([ { $group: { _id: \"$Location_Code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Locations\", localField: \"_id\", foreignField: \"Location_Code\", as: \"location_info\" } }, { $unwind: \"$location_info\" }, { $project: { location_name: \"$location_info.Location_Name\", location_code: \"$location_info.Location_Code\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2483,
        "spider_question_id": 4235,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $lookup: { from: \"Employees\", localField: \"Destruction_Authorised_by_Employee_ID\", foreignField: \"Employee_ID\", as: \"authorised_employee\" } }, { $lookup: { from: \"Employees\", localField: \"Destroyed_by_Employee_ID\", foreignField: \"Employee_ID\", as: \"destroyed_employee\" } }, { $project: { authorised_employee: { $arrayElemAt: [\"$authorised_employee.Employee_Name\", 0] }, destroyed_employee: { $arrayElemAt: [\"$destroyed_employee.Employee_Name\", 0] } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Documents_to_be_Destroyed.aggregate([ { $lookup: { from: \"Employees\", localField: \"Destruction_Authorised_by_Employee_ID\", foreignField: \"Employee_ID\", as: \"authorised_employee\" } }, { $lookup: { from: \"Employees\", localField: \"Destroyed_by_Employee_ID\", foreignField: \"Employee_ID\", as: \"destroyed_employee\" } }, { $project: { authorised_employee: { $arrayElemAt: [\"$authorised_employee.Employee_Name\", 0] }, destroyed_employee: { $arrayElemAt: [\"$destroyed_employee.Employee_Name\", 0] } } } ])"
    },
    {
        "question_id": 2484,
        "spider_question_id": 4237,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destruction_Authorised_by_Employee_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destruction_Authorised_by_Employee_ID\", count: { $sum: 1 } } }, { $project: { Destruction_Authorised_by_Employee_ID: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destruction_Authorised_by_Employee_ID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2485,
        "spider_question_id": 4238,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destruction_Authorised_by_Employee_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destruction_Authorised_by_Employee_ID\", count: { $sum: 1 } } }, { $project: { Destruction_Authorised_by_Employee_ID: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destruction_Authorised_by_Employee_ID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2486,
        "spider_question_id": 4239,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destroyed_by_Employee_ID\", count: { $sum: 1 } } }, { $project: { Destroyed_by_Employee_ID: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destroyed_by_Employee_ID\", totalDocumentsDestroyed: { $sum: 1 } } }, { $project: { _id: 1, totalDocumentsDestroyed: 1 } } ])",
        "deepseek answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destroyed_by_Employee_ID\", count: { $sum: 1 } } }, { $project: { Destroyed_by_Employee_ID: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2487,
        "spider_question_id": 4240,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Destroyed_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destroyed_by_Employee_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destroyed_by_Employee_ID\", numberOfDocumentsDestroyed: { $sum: 1 } }} ])",
        "deepseek answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: \"$Destroyed_by_Employee_ID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2488,
        "spider_question_id": 4241,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destruction_Authorised_by_Employee_ID\", as: \"authorized_documents\" } }, { $match: { \"authorized_documents\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destruction_Authorised_by_Employee_ID\", as: \"Destructions\" } }, { $match: { \"Destructions\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destruction_Authorised_by_Employee_ID\", as: \"authorized_documents\" } }, { $match: { \"authorized_documents\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])"
    },
    {
        "question_id": 2489,
        "spider_question_id": 4242,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destruction_Authorised_by_Employee_ID\", as: \"destruction_authorized\" } }, { $match: { \"destruction_authorized\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destruction_Authorised_by_Employee_ID\", as: \"AuthorisedDestructions\" } }, { $match: { AuthorisedDestructions: { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destruction_Authorised_by_Employee_ID\", as: \"destruction_authorized\" } }, { $match: { \"destruction_authorized\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])"
    },
    {
        "question_id": 2490,
        "spider_question_id": 4247,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "question": "Show the ids of all employees who don't destroy any document.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destroyed_by_Employee_ID\", as: \"destroyed_documents\" } }, { $match: { \"destroyed_documents\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destroyed_by_Employee_ID\", as: \"DestructionRecords\" } }, { $match: { \"DestructionRecords\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destroyed_by_Employee_ID\", as: \"destroyed_documents\" } }, { $match: { \"destroyed_documents\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])"
    },
    {
        "question_id": 2491,
        "spider_question_id": 4248,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "question": "Which employees do not destroy any document? Find their employee ids.",
        "query": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destroyed_by_Employee_ID\", as: \"destroyed_documents\" } }, { $match: { \"destroyed_documents\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "gpt4 answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destroyed_by_Employee_ID\", as: \"DestroyInfo\" } }, { $match: { \"DestroyInfo\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])",
        "deepseek answer": "db.Employees.aggregate([ { $lookup: { from: \"Documents_to_be_Destroyed\", localField: \"Employee_ID\", foreignField: \"Destroyed_by_Employee_ID\", as: \"destroyed_documents\" } }, { $match: { \"destroyed_documents\": { $size: 0 } } }, { $project: { Employee_ID: 1 } } ])"
    },
    {
        "question_id": 2492,
        "spider_question_id": 4249,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: null, destroyed: { $addToSet: \"$Destroyed_by_Employee_ID\" }, authorised: { $addToSet: \"$Destruction_Authorised_by_Employee_ID\" } } }, { $project: { allIds: { $setUnion: [\"$destroyed\", \"$authorised\"] } } }, { $unwind: \"$allIds\" }, { $replaceRoot: { newRoot: { Employee_ID: \"$allIds\" } } } ])",
        "gpt4 answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: null, destroyed: { $addToSet: \"$Destroyed_by_Employee_ID\" }, authorised: { $addToSet: \"$Destruction_Authorised_by_Employee_ID\" } } }, { $project: { allIds: { $setUnion: [\"$destroyed\", \"$authorised\"] } } }, { $unwind: \"$allIds\" }, { $replaceRoot: { newRoot: { Employee_ID: \"$allIds\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2493,
        "spider_question_id": 4250,
        "db_id": "cre_Doc_Tracking_DB",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
        "query": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: null, destroyers: { $addToSet: \"$Destroyed_by_Employee_ID\" }, authors: { $addToSet: \"$Destruction_Authorised_by_Employee_ID\" } } }, { $project: { employee_ids: { $setUnion: [\"$destroyers\", \"$authors\"] } } }, { $unwind: \"$employee_ids\" }, { $project: { _id: \"$employee_ids\" } } ])",
        "gpt4 answer": "db.Documents_to_be_Destroyed.aggregate([ { $group: { _id: null, destroyers: { $addToSet: \"$Destroyed_by_Employee_ID\" }, authors: { $addToSet: \"$Destruction_Authorised_by_Employee_ID\" } } }, { $project: { employee_ids: { $setUnion: [\"$destroyers\", \"$authors\"] } } }, { $unwind: \"$employee_ids\" }, { $project: { _id: \"$employee_ids\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2494,
        "spider_question_id": 4253,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubname FROM club",
        "question": "What are the names of all clubs?",
        "query": "db.Club.find({}, {ClubName: 1})",
        "gpt4 answer": "db.Club.find({}, { ClubName: 1 })",
        "deepseek answer": "db.Club.find({}, {ClubName: 1})"
    },
    {
        "question_id": 2495,
        "spider_question_id": 4254,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubname FROM club",
        "question": "Give me the name of each club.",
        "query": "db.Club.find({}, { ClubName: 1 })",
        "gpt4 answer": "db.Club.find({}, { ClubName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2496,
        "spider_question_id": 4261,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'",
        "question": "Who are the members of the club named 'Hopkins Student Enterprises'? Show the last name.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"member_of_club\" } }, { $lookup: { from: \"Club\", localField: \"member_of_club.ClubID\", foreignField: \"ClubID\", as: \"club\" } }, { $match: { \"club.ClubName\": \"Hopkins Student Enterprises\" } }, { $project: { LName: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"member_of_club\" } }, { $lookup: { from: \"Club\", localField: \"member_of_club.ClubID\", foreignField: \"ClubID\", as: \"club\" } }, { $match: { \"club.ClubName\": \"Hopkins Student Enterprises\" } }, { $project: { LName: 1 } } ])"
    },
    {
        "question_id": 2497,
        "spider_question_id": 4262,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'",
        "question": "Return the last name for the members of the club named 'Hopkins Student Enterprises'.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\" } }, { $project: { LName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\" } }, { $project: { LName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2498,
        "spider_question_id": 4263,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Tennis Club'",
        "question": "How many members does the club 'Tennis Club' has?",
        "query": "db.Club.aggregate([ { $match: { ClubName: \"Tennis Club\" } }, { $lookup: { from: \"Member_of_club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"Members\" } }, { $unwind: \"$Members\" }, { $count: \"NumberOfMembers\" } ])",
        "gpt4 answer": "db.Club.aggregate([ { $match: { ClubName: \"Tennis Club\" } }, { $lookup: { from: \"Member_of_club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"Members\" } }, { $unwind: \"$Members\" }, { $count: \"NumberOfMembers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2499,
        "spider_question_id": 4268,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Linda' AND t3.lname = 'Smith'",
        "question": "How many clubs does 'Linda Smith' have membership for?",
        "query": "db.Student.aggregate([ { $match: { Fname: 'Linda', LName: 'Smith' } }, { $lookup: { from: 'Member_of_club', localField: 'StuID', foreignField: 'StuID', as: 'memberships' } }, { $project: { numberOfClubs: { $size: \"$memberships\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Fname: 'Linda', LName: 'Smith' } }, { $lookup: { from: 'Member_of_club', localField: 'StuID', foreignField: 'StuID', as: 'memberships' } }, { $project: { numberOfClubs: { $size: \"$memberships\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2500,
        "spider_question_id": 4271,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.sex = 'F'",
        "question": "Find all the female members of club 'Bootup Baltimore'. Show the first name and last name.",
        "query": "db.Student.aggregate([ { $match: { Sex: 'F' }}, { $lookup: { from: 'Member_of_club', localField: 'StuID', foreignField: 'StuID', as: 'membership' }}, { $unwind: '$membership' }, { $lookup: { from: 'Club', localField: 'membership.ClubID', foreignField: 'ClubID', as: 'club_info' }}, { $unwind: '$club_info' }, { $match: { 'club_info.ClubName': 'Bootup Baltimore' }}, { $project: { Fname: 1, LName: 1 }} ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'F' }}, { $lookup: { from: 'Member_of_club', localField: 'StuID', foreignField: 'StuID', as: 'membership' }}, { $unwind: '$membership' }, { $lookup: { from: 'Club', localField: 'membership.ClubID', foreignField: 'ClubID', as: 'club_info' }}, { $unwind: '$club_info' }, { $match: { 'club_info.ClubName': 'Bootup Baltimore' }}, { $project: { Fname: 1, LName: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2501,
        "spider_question_id": 4272,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.sex = 'F'",
        "question": "Give me the first name and last name for all the female members of the club 'Bootup Baltimore'.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"clubInfo\" } }, { $unwind: \"$clubInfo\" }, { $match: { \"clubInfo.ClubName\": \"Bootup Baltimore\", Sex: \"F\" } }, { $project: { Fname: 1, LName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"clubInfo\" } }, { $unwind: \"$clubInfo\" }, { $match: { \"clubInfo.ClubName\": \"Bootup Baltimore\", Sex: \"F\" } }, { $project: { Fname: 1, LName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2502,
        "spider_question_id": 4281,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'",
        "question": "What is the description of the club named 'Tennis Club'?",
        "query": "db.Club.find({ ClubName: 'Tennis Club' }, { ClubDesc: 1 })",
        "gpt4 answer": "db.Club.find({ ClubName: 'Tennis Club' }, { ClubDesc: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2503,
        "spider_question_id": 4282,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'",
        "question": "Find the description of the club called 'Tennis Club'.",
        "query": "db.Club.findOne({ ClubName: 'Tennis Club' }, { ClubDesc: 1 })",
        "gpt4 answer": "db.Club.findOne({ ClubName: 'Tennis Club' }, { ClubDesc: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2504,
        "spider_question_id": 4284,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
        "question": "What is the description of the club 'Pen and Paper Gaming'?",
        "query": "db.Club.findOne({ ClubName: \"Pen and Paper Gaming\" }, { ClubDesc: 1 })",
        "gpt4 answer": "db.Club.findOne({ ClubName: \"Pen and Paper Gaming\" }, { ClubDesc: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2505,
        "spider_question_id": 4285,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
        "question": "What is the location of the club named 'Tennis Club'?",
        "query": "db.Club.find({ ClubName: 'Tennis Club' }, { ClubLocation: 1 })",
        "gpt4 answer": "db.Club.find({ ClubName: 'Tennis Club' }, { ClubLocation: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2506,
        "spider_question_id": 4286,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
        "question": "Where us the club named 'Tennis Club' located?",
        "query": "db.Club.findOne({ClubName: 'Tennis Club'}, {ClubLocation: 1})",
        "gpt4 answer": "db.Club.find({ ClubName: 'Tennis Club' }, { ClubLocation: 1 })",
        "deepseek answer": "db.Club.findOne({ClubName: 'Tennis Club'}, {ClubLocation: 1})"
    },
    {
        "question_id": 2507,
        "spider_question_id": 4287,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Pen and Paper Gaming'",
        "question": "Find the location of the club 'Pen and Paper Gaming'.",
        "query": "db.Club.find({ClubName: 'Pen and Paper Gaming'}, {ClubLocation: 1})",
        "gpt4 answer": "db.Club.find({ ClubName: 'Pen and Paper Gaming' }, { ClubLocation: 1 })",
        "deepseek answer": "db.Club.find({ClubName: 'Pen and Paper Gaming'}, {ClubLocation: 1})"
    },
    {
        "question_id": 2508,
        "spider_question_id": 4288,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Pen and Paper Gaming'",
        "question": "Where is the club 'Pen and Paper Gaming' located?",
        "query": "db.Club.find({ ClubName: 'Pen and Paper Gaming' }, { ClubLocation: 1 })",
        "gpt4 answer": "db.Club.find({ ClubName: 'Pen and Paper Gaming' }, { ClubLocation: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2509,
        "spider_question_id": 4289,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Hopkins Student Enterprises'",
        "question": "Where is the club 'Hopkins Student Enterprises' located?",
        "query": "db.Club.findOne({ClubName: 'Hopkins Student Enterprises'}, {ClubLocation: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Club.findOne({ClubName: 'Hopkins Student Enterprises'}, {ClubLocation: 1})"
    },
    {
        "question_id": 2510,
        "spider_question_id": 4290,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Hopkins Student Enterprises'",
        "question": "Tell me the location of the club 'Hopkins Student Enterprises'.",
        "query": "db.Club.findOne({ClubName: 'Hopkins Student Enterprises'}, {ClubLocation: 1})",
        "gpt4 answer": "db.Club.find({ ClubName: 'Hopkins Student Enterprises' }, { ClubLocation: 1 })",
        "deepseek answer": "db.Club.findOne({ClubName: 'Hopkins Student Enterprises'}, {ClubLocation: 1})"
    },
    {
        "question_id": 2511,
        "spider_question_id": 4291,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubname FROM club WHERE clublocation = 'AKW'",
        "question": "Find the name of all the clubs at 'AKW'.",
        "query": "db.Club.find({ ClubLocation: 'AKW' }, { ClubName: 1 })",
        "gpt4 answer": "db.Club.find({ ClubLocation: 'AKW' }, { ClubName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2512,
        "spider_question_id": 4292,
        "db_id": "club_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT clubname FROM club WHERE clublocation = 'AKW'",
        "question": "Which clubs are located at 'AKW'? Return the club names.",
        "query": "db.Club.find({ ClubLocation: \"AKW\" }, { ClubName: 1 })",
        "gpt4 answer": "db.Club.find({ ClubLocation: \"AKW\" }, { ClubName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2513,
        "spider_question_id": 4297,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises' AND t2.position = 'CTO'",
        "question": "Who is the 'CTO' of club 'Hopkins Student Enterprises'? Show the first name and last name.",
        "query": "db.Member_of_club.aggregate([ { $match: { Position: \"CTO\" } }, { $lookup: { from: \"Club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\" } }, { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { fname: \"$student_info.Fname\", lname: \"$student_info.LName\" } } ])",
        "gpt4 answer": "db.Member_of_club.aggregate([ { $match: { Position: \"CTO\" } }, { $lookup: { from: \"Club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\" } }, { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $project: { fname: \"$student_info.Fname\", lname: \"$student_info.LName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2514,
        "spider_question_id": 4298,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises' AND t2.position = 'CTO'",
        "question": "Find the first name and last name for the 'CTO' of the club 'Hopkins Student Enterprises'?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\", \"membership.Position\": \"CTO\" } }, { $project: { Fname: 1, LName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\", \"membership.Position\": \"CTO\" } }, { $project: { Fname: 1, LName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2515,
        "spider_question_id": 4299,
        "db_id": "club_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = 'Bootup Baltimore'",
        "question": "How many different roles are there in the club 'Bootup Baltimore'?",
        "query": "db.Club.aggregate([ { $match: { ClubName: \"Bootup Baltimore\" } }, { $lookup: { from: \"Member_of_club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"club_members\" } }, { $unwind: \"$club_members\" }, { $group: { _id: null, uniqueRoles: { $addToSet: \"$club_members.Position\" } } }, { $project: { count: { $size: \"$uniqueRoles\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Club.aggregate([ { $match: { ClubName: \"Bootup Baltimore\" } }, { $lookup: { from: \"Member_of_club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"club_members\" } }, { $unwind: \"$club_members\" }, { $group: { _id: null, uniqueRoles: { $addToSet: \"$club_members.Position\" } } }, { $project: { count: { $size: \"$uniqueRoles\" } } } ])"
    },
    {
        "question_id": 2516,
        "spider_question_id": 4304,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.age < 18",
        "question": "Count the number of members in club 'Bootup Baltimore' whose age is below 18.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Bootup Baltimore\", \"Age\": { $lt: 18 } } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Bootup Baltimore\", \"Age\": { $lt: 18 } } }, { $count: \"count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2517,
        "spider_question_id": 4305,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'BAL'",
        "question": "Find the names of all the clubs that have at least a member from the city with city code 'BAL'.",
        "query": "db.Student.aggregate([ { $match: { city_code: 'BAL' } }, { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"clubDetails\" } }, { $unwind: \"$clubDetails\" }, { $group: { _id: \"$clubDetails.ClubID\", ClubName: { $first: \"$clubDetails.ClubName\" } } }, { $project: { ClubName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { city_code: 'BAL' } }, { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"clubDetails\" } }, { $unwind: \"$clubDetails\" }, { $group: { _id: \"$clubDetails.ClubID\", ClubName: { $first: \"$clubDetails.ClubName\" } } }, { $project: { ClubName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2518,
        "spider_question_id": 4306,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'BAL'",
        "question": "Which clubs have one or more members from the city with code 'BAL'? Give me the names of the clubs.",
        "query": "db.Student.aggregate([ { $match: { city_code: 'BAL' } }, { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"clubInfo\" } }, { $unwind: \"$clubInfo\" }, { $group: { _id: \"$clubInfo.ClubName\" } }, { $project: { ClubName: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { city_code: 'BAL' } }, { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"clubInfo\" } }, { $unwind: \"$clubInfo\" }, { $group: { _id: \"$clubInfo.ClubName\" } }, { $project: { ClubName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2519,
        "spider_question_id": 4307,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'HOU'",
        "question": "Find the names of the clubs that have at least a member from the city with city code 'HOU'.",
        "query": "db.Club.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"members\" } }, { $unwind: \"$members\" }, { $lookup: { from: \"Student\", localField: \"members.StuID\", foreignField: \"StuID\", as: \"student_members\" } }, { $unwind: \"$student_members\" }, { $match: { \"student_members.city_code\": \"HOU\" } }, { $group: { _id: \"$ClubName\" } }, { $project: { ClubName: \"$_id\" } } ])",
        "gpt4 answer": "db.Club.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"ClubID\", foreignField: \"ClubID\", as: \"members\" } }, { $unwind: \"$members\" }, { $lookup: { from: \"Student\", localField: \"members.StuID\", foreignField: \"StuID\", as: \"student_members\" } }, { $unwind: \"$student_members\" }, { $match: { \"student_members.city_code\": \"HOU\" } }, { $group: { _id: \"$ClubName\" } }, { $project: { ClubName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2520,
        "spider_question_id": 4308,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'HOU'",
        "question": "Which clubs have one or more members from the city with code 'HOU'? Give me the names of the clubs.",
        "query": "db.Student.aggregate([ { $match: { city_code: 'HOU' } }, { $lookup: { from: 'Member_of_club', localField: 'StuID', foreignField: 'StuID', as: 'membership' } }, { $unwind: '$membership' }, { $lookup: { from: 'Club', localField: 'membership.ClubID', foreignField: 'ClubID', as: 'club_info' } }, { $unwind: '$club_info' }, { $group: { _id: '$club_info.ClubName' } }, { $project: { ClubName: '$_id' } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { city_code: 'HOU' } }, { $lookup: { from: 'Member_of_club', localField: 'StuID', foreignField: 'StuID', as: 'membership' } }, { $unwind: '$membership' }, { $lookup: { from: 'Club', localField: 'membership.ClubID', foreignField: 'ClubID', as: 'club_info' } }, { $unwind: '$club_info' }, { $group: { _id: '$club_info.ClubName' } }, { $project: { ClubName: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2521,
        "spider_question_id": 4317,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'",
        "question": "Find the average age of members of the club 'Hopkins Student Enterprises'.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\" } }, { $group: { _id: null, average_age: { $avg: \"$Age\" } } }, { $project: { average_age: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Hopkins Student Enterprises\" } }, { $group: { _id: null, average_age: { $avg: \"$Age\" } } }, { $project: { average_age: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2522,
        "spider_question_id": 4320,
        "db_id": "club_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Tennis Club'",
        "question": "Compute the average age of the members in the club 'Tennis Club'.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Tennis Club\" } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Member_of_club\", localField: \"StuID\", foreignField: \"StuID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Club\", localField: \"membership.ClubID\", foreignField: \"ClubID\", as: \"club_info\" } }, { $unwind: \"$club_info\" }, { $match: { \"club_info.ClubName\": \"Tennis Club\" } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2523,
        "spider_question_id": 4323,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $match: { $and: [ { \"project_outcomes.outcome_code\": \"Paper\" }, { \"project_outcomes.outcome_code\": \"Patent\" } ] } }, { $project: { project_details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $match: { \"outcomes.outcome_code\": { $all: [\"Paper\", \"Patent\"] } } }, { $project: { project_details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $match: { $and: [ { \"project_outcomes.outcome_code\": \"Paper\" }, { \"project_outcomes.outcome_code\": \"Patent\" } ] } }, { $project: { project_details: 1 } } ])"
    },
    {
        "question_id": 2524,
        "spider_question_id": 4324,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'",
        "question": "What are the details of the project that is producing both patents and papers as outcomes?",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $match: { \"outcomes.outcome_code\": { $all: [\"Paper\", \"Patent\"] } } }, { $project: { project_details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $match: { \"outcomes.outcome_code\": { $all: [\"Paper\", \"Patent\"] } } }, { $project: { project_details: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2525,
        "spider_question_id": 4329,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000",
        "question": "Find the organisation ids and details of the organisations which are involved in",
        "query": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", totalGrantAmount: { $sum: \"$grant_amount\" } } }, { $match: { totalGrantAmount: { $gt: 6000 } } }, { $lookup: { from: \"Organisations\", localField: \"_id\", foreignField: \"organisation_id\", as: \"organisationDetails\" } }, { $unwind: \"$organisationDetails\" }, { $project: { organisation_id: \"$organisationDetails.organisation_id\", organisation_details: \"$organisationDetails.organisation_details\" } } ])",
        "gpt4 answer": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", totalGrantAmount: { $sum: \"$grant_amount\" } } }, { $match: { totalGrantAmount: { $gt: 6000 } } }, { $lookup: { from: \"Organisations\", localField: \"_id\", foreignField: \"organisation_id\", as: \"organisationDetails\" } }, { $unwind: \"$organisationDetails\" }, { $project: { organisation_id: \"$organisationDetails.organisation_id\", organisation_details: \"$organisationDetails.organisation_details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2526,
        "spider_question_id": 4330,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.organisation_id , T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount) > 6000",
        "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
        "query": "db.Grants.aggregate([ { $match: { grant_amount: { $gt: 6000 } } }, { $group: { _id: \"$organisation_id\", total_grant_amount: { $sum: \"$grant_amount\" } } }, { $match: { total_grant_amount: { $gt: 6000 } } }, { $lookup: { from: \"Organisations\", localField: \"_id\", foreignField: \"organisation_id\", as: \"organisation_details\" } }, { $unwind: \"$organisation_details\" }, { $project: { _id: \"$organisation_details.organisation_id\", organisation_details: \"$organisation_details.organisation_details\" } } ])",
        "gpt4 answer": "db.Grants.aggregate([ { $match: { grant_amount: { $gt: 6000 } } }, { $group: { _id: \"$organisation_id\", total_grant_amount: { $sum: \"$grant_amount\" } } }, { $match: { total_grant_amount: { $gt: 6000 } } }, { $lookup: { from: \"Organisations\", localField: \"_id\", foreignField: \"organisation_id\", as: \"organisation_details\" } }, { $unwind: \"$organisation_details\" }, { $project: { _id: \"$organisation_details.organisation_id\", organisation_details: \"$organisation_details.organisation_details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2527,
        "spider_question_id": 4331,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "query": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: { organisation_type: \"$organisation_type\", organisation_id: \"$organisation_id\" }, count: { $sum: { $size: \"$research_staff\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_type: \"$_id.organisation_type\", organisation_id: \"$_id.organisation_id\" } } ])",
        "gpt4 answer": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: { organisation_type: \"$organisation_type\", organisation_id: \"$organisation_id\" }, count: { $sum: { $size: \"$research_staff\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_type: \"$_id.organisation_type\", organisation_id: \"$_id.organisation_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2528,
        "spider_question_id": 4333,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
        "question": "Which organisation type hires most research staff?",
        "query": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: \"$organisation_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { organisation_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"Research_Staff\" } }, { $group: { _id: \"$organisation_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: \"$organisation_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { organisation_type: \"$_id\" } } ])"
    },
    {
        "question_id": 2529,
        "spider_question_id": 4334,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the type of the organization with the most research staff?",
        "query": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: \"$organisation_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_type: \"$_id\" } } ])",
        "gpt4 answer": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: \"$organisation_type\", count: { $sum: { $size: \"$research_staff\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_type: \"$_id\" } } ])",
        "deepseek answer": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: \"$organisation_type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_type: \"$_id\" } } ])"
    },
    {
        "question_id": 2530,
        "spider_question_id": 4339,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' )",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "query": "db.Projects.find( { project_id: { $nin: db.Project_Staff.distinct( \"project_id\", { role_code: \"researcher\" } ) } }, { project_details: 1 } )",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Staff\", localField: \"project_id\", foreignField: \"project_id\", as: \"staff_info\" } }, { $match: { \"staff_info\": { $not: { $elemMatch: { \"role_code\": \"researcher\" } } } } }, { $project: { project_details: 1 } } ])",
        "deepseek answer": "db.Projects.find( { project_id: { $nin: db.Project_Staff.distinct( \"project_id\", { role_code: \"researcher\" } ) } }, { project_details: 1 } )"
    },
    {
        "question_id": 2531,
        "spider_question_id": 4340,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code = 'researcher' )",
        "question": "What are the details for all projects that did not hire any staff in a research role?",
        "query": "db.Projects.find( { project_id: { $nin: db.Project_Staff.distinct(\"project_id\", { role_code: \"researcher\" }) } }, { project_details: 1 } )",
        "gpt4 answer": "db.Projects.find( { project_id: { $nin: db.Project_Staff.distinct(\"project_id\", { role_code: \"researcher\" }) } }, { project_details: 1 } )",
        "deepseek answer": "db.Projects.find( { project_id: { $nin: db.Project_Staff.distinct(\"project_id\", { role_code: \"researcher\" }) } }, { project_details: 1 } )"
    },
    {
        "question_id": 2532,
        "spider_question_id": 4347,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "question": "What is the total amount of grants given by each organisations? Also list the organisation id.",
        "query": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", total_grant_amount: { $sum: \"$grant_amount\" } } } ])",
        "gpt4 answer": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", totalGrantAmount: { $sum: \"$grant_amount\" } } }, { $project: { organisation_id: \"$_id\", totalGrantAmount: 1 } } ])",
        "deepseek answer": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", total_grant_amount: { $sum: \"$grant_amount\" } } } ])"
    },
    {
        "question_id": 2533,
        "spider_question_id": 4348,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "question": "What is the total amount of grant money given to each organization and what is its id?",
        "query": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", total_grant_amount: { $sum: \"$grant_amount\" } } } ])",
        "gpt4 answer": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", totalGrantAmount: { $sum: \"$grant_amount\" } } }, { $project: { organisation_id: \"$_id\", totalGrantAmount: 1 } } ])",
        "deepseek answer": "db.Grants.aggregate([ { $group: { _id: \"$organisation_id\", total_grant_amount: { $sum: \"$grant_amount\" } } } ])"
    },
    {
        "question_id": 2534,
        "spider_question_id": 4349,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'",
        "question": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $lookup: { from: \"Research_Outcomes\", localField: \"project_outcomes.outcome_code\", foreignField: \"outcome_code\", as: \"research_outcomes\" } }, { $unwind: \"$research_outcomes\" }, { $match: { \"research_outcomes.outcome_description\": { $regex: /Published/, $options: \"i\" } } }, { $project: { project_details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"ProjectOutcomeDetails\" } }, { $unwind: \"$ProjectOutcomeDetails\" }, { $lookup: { from: \"Research_Outcomes\", localField: \"ProjectOutcomeDetails.outcome_code\", foreignField: \"outcome_code\", as: \"ResearchOutcomeDetails\" } }, { $unwind: \"$ResearchOutcomeDetails\" }, { $match: { \"ResearchOutcomeDetails.outcome_description\": { $regex: \"Published\", $options: \"i\" } } }, { $project: { project_details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $lookup: { from: \"Research_Outcomes\", localField: \"project_outcomes.outcome_code\", foreignField: \"outcome_code\", as: \"research_outcomes\" } }, { $unwind: \"$research_outcomes\" }, { $match: { \"research_outcomes.outcome_description\": { $regex: /Published/, $options: \"i\" } } }, { $project: { project_details: 1 } } ])"
    },
    {
        "question_id": 2535,
        "spider_question_id": 4350,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'",
        "question": "What are the details for the project whose research has been published?",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $lookup: { from: \"Research_Outcomes\", localField: \"project_outcomes.outcome_code\", foreignField: \"outcome_code\", as: \"research_outcomes\" } }, { $unwind: \"$research_outcomes\" }, { $match: { \"research_outcomes.outcome_description\": { $regex: /Published/, $options: \"i\" } } }, { $project: { project_details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $lookup: { from: \"Research_Outcomes\", localField: \"project_outcomes.outcome_code\", foreignField: \"outcome_code\", as: \"research_outcomes\" } }, { $unwind: \"$research_outcomes\" }, { $match: { \"research_outcomes.outcome_description\": /Published/ } }, { $project: { project_details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $lookup: { from: \"Research_Outcomes\", localField: \"project_outcomes.outcome_code\", foreignField: \"outcome_code\", as: \"research_outcomes\" } }, { $unwind: \"$research_outcomes\" }, { $match: { \"research_outcomes.outcome_description\": { $regex: /Published/, $options: \"i\" } } }, { $project: { project_details: 1 } } ])"
    },
    {
        "question_id": 2536,
        "spider_question_id": 4351,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "question": "How many staff does each project has? List the project id and the number in an ascending order.",
        "query": "db.Project_Staff.aggregate([ { $group: { _id: \"$project_id\", count: { $sum: 1 } } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$project_id\", numberOfStaff: { $sum: 1 } } }, { $sort: { numberOfStaff: 1 } }, { $project: { project_id: \"$_id\", numberOfStaff: 1 } } ])",
        "deepseek answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$project_id\", count: { $sum: 1 } } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 2537,
        "spider_question_id": 4352,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.project_id , count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
        "question": "For each project id, how many staff does it have? List them in increasing order.",
        "query": "db.Project_Staff.aggregate([ { $lookup: { from: \"Projects\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_info\" } }, { $unwind: \"$project_info\" }, { $group: { _id: \"$project_id\", count: { $sum: 1 } } }, { $sort: { count: 1 } } ])",
        "gpt4 answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$project_id\", staff_count: { $sum: 1 } } }, { $sort: { staff_count: 1 } }, { $project: { project_id: \"$_id\", staff_count: 1 } } ])",
        "deepseek answer": "db.Project_Staff.aggregate([ { $lookup: { from: \"Projects\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_info\" } }, { $unwind: \"$project_info\" }, { $group: { _id: \"$project_id\", count: { $sum: 1 } } }, { $sort: { count: 1 } } ])"
    },
    {
        "question_id": 2538,
        "spider_question_id": 4353,
        "db_id": "tracking_grants_for_research",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'",
        "question": "What is the complete description of the researcher role.",
        "query": "db.Staff_Roles.findOne({role_code: 'researcher'}, {role_description: 1})",
        "gpt4 answer": "db.Staff_Roles.findOne({ role_code: 'researcher' }, { role_description: 1 })",
        "deepseek answer": "db.Staff_Roles.findOne({role_code: 'researcher'}, {role_description: 1})"
    },
    {
        "question_id": 2539,
        "spider_question_id": 4354,
        "db_id": "tracking_grants_for_research",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'",
        "question": "What is the complete description of the job of a researcher?",
        "query": "db.Staff_Roles.findOne({role_code: 'researcher'}, {role_description: 1})",
        "gpt4 answer": "db.Staff_Roles.findOne({role_code: 'researcher'}, { role_description: 1})",
        "deepseek answer": "db.Staff_Roles.findOne({role_code: 'researcher'}, {role_description: 1})"
    },
    {
        "question_id": 2540,
        "spider_question_id": 4357,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which project made the most number of outcomes? List the project details and the project id.",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $project: { project_details: 1, project_id: 1, numberOfOutcomes: { $size: \"$outcomes\" } } }, { $sort: { numberOfOutcomes: -1 } }, { $limit: 1 }, { $project: { project_id: 1, project_details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $project: { project_details: 1, project_id: 1, numberOfOutcomes: { $size: \"$outcomes\" } } }, { $sort: { numberOfOutcomes: -1 } }, { $limit: 1 }, { $project: { project_id: 1, project_details: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2541,
        "spider_question_id": 4358,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the details and id of the project with the most outcomes?",
        "query": "db.Project_Outcomes.aggregate([ { $group: { _id: \"$project_id\", outcomeCount: { $sum: 1 } } }, { $sort: { outcomeCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"project_id\", as: \"projectDetails\" } }, { $unwind: \"$projectDetails\" }, { $project: { project_details: \"$projectDetails.project_details\", project_id: \"$projectDetails.project_id\" } } ])",
        "gpt4 answer": "db.Project_Outcomes.aggregate([ { $group: { _id: \"$project_id\", outcomeCount: { $sum: 1 } } }, { $sort: { outcomeCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"project_id\", as: \"projectDetails\" } }, { $unwind: \"$projectDetails\" }, { $project: { project_details: \"$projectDetails.project_details\", project_id: \"$projectDetails.project_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2542,
        "spider_question_id": 4359,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
        "question": "Which projects have no outcome? List the project details.",
        "query": "db.Projects.find( { \"project_id\": { \"$nin\": db.Project_Outcomes.distinct(\"project_id\") } }, { \"project_details\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.Projects.find( { \"project_id\": { \"$nin\": db.Project_Outcomes.distinct(\"project_id\") } }, { \"project_details\": 1, \"_id\": 0 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 2543,
        "spider_question_id": 4361,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "query": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: { organisation_id: \"$organisation_id\", organisation_type: \"$organisation_type\", organisation_details: \"$organisation_details\" }, count: { $sum: { $size: \"$research_staff\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_id: \"$_id.organisation_id\", organisation_type: \"$_id.organisation_type\", organisation_details: \"$_id.organisation_details\" } } ])",
        "gpt4 answer": "db.Organisations.aggregate([ { $lookup: { from: \"Research_Staff\", localField: \"organisation_id\", foreignField: \"employer_organisation_id\", as: \"research_staff\" } }, { $group: { _id: { organisation_id: \"$organisation_id\", organisation_type: \"$organisation_type\", organisation_details: \"$organisation_details\" }, count: { $sum: { $size: \"$research_staff\" } } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { organisation_id: \"$_id.organisation_id\", organisation_type: \"$_id.organisation_type\", organisation_details: \"$_id.organisation_details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2544,
        "spider_question_id": 4362,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the ids, types, and details of the organization with the most research staff?",
        "query": "db.Research_Staff.aggregate([ { $group: { _id: \"$employer_organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Organisations\", localField: \"_id\", foreignField: \"organisation_id\", as: \"organisationDetails\" } }, { $project: { organisation_id: \"$_id\", organisation_type: { $arrayElemAt: [\"$organisationDetails.organisation_type\", 0] }, organisation_details: { $arrayElemAt: [\"$organisationDetails.organisation_details\", 0] } } } ])",
        "gpt4 answer": "db.Research_Staff.aggregate([ { $group: { _id: \"$employer_organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Organisations\", localField: \"_id\", foreignField: \"organisation_id\", as: \"organisationDetails\" } }, { $project: { organisation_id: \"$_id\", organisation_type: { $arrayElemAt: [\"$organisationDetails.organisation_type\", 0] }, organisation_details: { $arrayElemAt: [\"$organisationDetails.organisation_details\", 0] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2545,
        "spider_question_id": 4363,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "query": "db.Staff_Roles.aggregate([ { $lookup: { from: \"Project_Staff\", localField: \"role_code\", foreignField: \"role_code\", as: \"project_staff\" } }, { $unwind: \"$project_staff\" }, { $lookup: { from: \"Project_Outcomes\", localField: \"project_staff.project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $group: { _id: \"$project_staff.staff_id\", role_description: { $first: \"$role_description\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { role_description:1, staff_id: \"$_id\" } }])",
        "gpt4 answer": "db.Project_Staff.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $group: { _id: \"$staff_id\", count: { $sum: 1 }, role_code: { $first: \"$role_code\" } } }, { $sort: { count: -1 } }, { $lookup: { from: \"Staff_Roles\", localField: \"role_code\", foreignField: \"role_code\", as: \"staff_roles\" } }, { $unwind: \"$staff_roles\" }, { $project: { role_description: \"$staff_roles.role_description\", staff_id: \"$_id\" } }, { $limit: 1 } ])",
        "deepseek answer": "db.Staff_Roles.aggregate([ { $lookup: { from: \"Project_Staff\", localField: \"role_code\", foreignField: \"role_code\", as: \"project_staff\" } }, { $unwind: \"$project_staff\" }, { $lookup: { from: \"Project_Outcomes\", localField: \"project_staff.project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $group: { _id: \"$project_staff.staff_id\", role_description: { $first: \"$role_description\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { role_description:1, staff_id: \"$_id\" } }])"
    },
    {
        "question_id": 2546,
        "spider_question_id": 4364,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
        "query": "db.Staff_Roles.aggregate([ { $lookup: { from: \"Project_Staff\", localField: \"role_code\", foreignField: \"role_code\", as: \"project_staff\" } }, { $unwind: \"$project_staff\" }, { $lookup: { from: \"Project_Outcomes\", localField: \"project_staff.project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $group: { _id: \"$project_staff.staff_id\", role_description: { $first: \"$role_description\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { role_description:1, staff_id: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Staff_Roles.aggregate([ { $lookup: { from: \"Project_Staff\", localField: \"role_code\", foreignField: \"role_code\", as: \"project_staff\" } }, { $unwind: \"$project_staff\" }, { $lookup: { from: \"Project_Outcomes\", localField: \"project_staff.project_id\", foreignField: \"project_id\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $group: { _id: \"$project_staff.staff_id\", role_description: { $first: \"$role_description\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { role_description:1, staff_id: \"$_id\" } }])"
    },
    {
        "question_id": 2547,
        "spider_question_id": 4365,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "question": "Which document type is described with the prefix 'Initial'?",
        "query": "db.Document_Types.find({document_description: /^Initial/}, {document_type_code: 1})",
        "gpt4 answer": "db.Document_Types.find({ document_description: /^Initial/ }, { document_type_code: 1 })",
        "deepseek answer": "db.Document_Types.find({document_description: /^Initial/}, {document_type_code: 1})"
    },
    {
        "question_id": 2548,
        "spider_question_id": 4366,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
        "question": "What is the type of the document whose description starts with the word 'Initial'?",
        "query": "db.Document_Types.find({document_description: /^Initial/}, {document_type_code: 1})",
        "gpt4 answer": "db.Document_Types.find({document_description: /^Initial/}, {document_type_code: 1})",
        "deepseek answer": "db.Document_Types.find({document_description: /^Initial/}, {document_type_code: 1})"
    },
    {
        "question_id": 2549,
        "spider_question_id": 4369,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT grant_id , count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many documents can one grant have at most? List the grant id and number.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$grant_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$grant_id\", numberOfDocuments: { $sum: 1 } } }, { $sort: { numberOfDocuments: -1 } }, { $limit: 1 }, { $project: { grant_id: \"$_id\", numberOfDocuments: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$grant_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2550,
        "spider_question_id": 4370,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT grant_id , count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each grant id, how many documents does it have, and which one has the most?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$grant_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$grant_id\", documentCount: { $sum: 1 } }}, { $sort: { documentCount: -1 }}, { $limit: 1 } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$grant_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2551,
        "spider_question_id": 4371,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'",
        "question": "Find the organisation type description of the organisation detailed as 'quo'.",
        "query": "db.Organisation_Types.aggregate([ { $lookup: { from: \"Organisations\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_details\" } }, { $match: { \"organisation_details.organisation_details\": \"quo\" } }, { $project: { organisation_type_description: 1 } } ])",
        "gpt4 answer": "db.Organisation_Types.aggregate([ { $lookup: { from: \"Organisations\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisations\" } }, { $match: { \"organisations.organisation_details\": \"quo\" } }, { $project: { organisation_type_description: 1 } } ])",
        "deepseek answer": "db.Organisation_Types.aggregate([ { $lookup: { from: \"Organisations\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_details\" } }, { $match: { \"organisation_details.organisation_details\": \"quo\" } }, { $project: { organisation_type_description: 1 } } ])"
    },
    {
        "question_id": 2552,
        "spider_question_id": 4372,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'",
        "question": "What is the type description of the organization whose detail is listed as 'quo'?",
        "query": "db.Organisation_Types.aggregate([ { $lookup: { from: \"Organisations\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_details\" } }, { $match: { \"organisation_details.organisation_details\": \"quo\" } }, { $project: { organisation_type_description: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Organisation_Types.aggregate([ { $lookup: { from: \"Organisations\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_details\" } }, { $match: { \"organisation_details.organisation_details\": \"quo\" } }, { $project: { organisation_type_description: 1 } } ])"
    },
    {
        "question_id": 2553,
        "spider_question_id": 4373,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
        "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "query": "db.Organisations.aggregate([ { $lookup: { from: \"Organisation_Types\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_type_data\" } }, { $unwind: \"$organisation_type_data\" }, { $match: { \"organisation_type_data.organisation_type_description\": \"Sponsor\" } }, { $project: { organisation_details: 1 } }, { $sort: { organisation_details: 1 } } ])",
        "gpt4 answer": "db.Organisations.aggregate([ { $lookup: { from: \"Organisation_Types\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisationTypeInfo\" } }, { $match: { \"organisationTypeInfo.organisation_type_description\": \"Sponsor\" } }, { $unwind: \"$organisationTypeInfo\" }, { $project: { organisation_details: 1 } }, { $sort: { organisation_details: 1 } } ])",
        "deepseek answer": "db.Organisations.aggregate([ { $lookup: { from: \"Organisation_Types\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_type_data\" } }, { $unwind: \"$organisation_type_data\" }, { $match: { \"organisation_type_data.organisation_type_description\": \"Sponsor\" } }, { $project: { organisation_details: 1 } }, { $sort: { organisation_details: 1 } } ])"
    },
    {
        "question_id": 2554,
        "spider_question_id": 4374,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details",
        "question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "query": "db.Organisations.aggregate([ { $lookup: { from: \"Organisation_Types\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_type_data\" } }, { $unwind: \"$organisation_type_data\" }, { $match: { \"organisation_type_data.organisation_type_description\": \"Sponsor\" } }, { $project: { organisation_details: 1 } }, { $sort: { organisation_details: 1 } } ])",
        "gpt4 answer": "db.Organisations.aggregate([ { $lookup: { from: \"Organisation_Types\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"org_type\" } }, { $unwind: \"$org_type\" }, { $match: { \"org_type.organisation_type_description\": \"Sponsor\" } }, { $project: { organisation_details: 1 } }, { $sort: { organisation_details: 1 } } ])",
        "deepseek answer": "db.Organisations.aggregate([ { $lookup: { from: \"Organisation_Types\", localField: \"organisation_type\", foreignField: \"organisation_type\", as: \"organisation_type_data\" } }, { $unwind: \"$organisation_type_data\" }, { $match: { \"organisation_type_data.organisation_type_description\": \"Sponsor\" } }, { $project: { organisation_details: 1 } }, { $sort: { organisation_details: 1 } } ])"
    },
    {
        "question_id": 2555,
        "spider_question_id": 4381,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
        "question": "What are the result description of the project whose detail is 'sint'?",
        "query": "db.Projects.aggregate([ { $match: { project_details: 'sint' } }, { $lookup: { from: 'Project_Outcomes', localField: 'project_id', foreignField: 'project_id', as: 'project_outcomes' } }, { $unwind: '$project_outcomes' }, { $lookup: { from: 'Research_Outcomes', localField: 'project_outcomes.outcome_code', foreignField: 'outcome_code', as: 'research_outcomes' } }, { $unwind: '$research_outcomes' }, { $project: { outcome_description: '$research_outcomes.outcome_description' } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $match: { project_details: 'sint' } }, { $lookup: { from: 'Project_Outcomes', localField: 'project_id', foreignField: 'project_id', as: 'project_outcomes' } }, { $unwind: '$project_outcomes' }, { $lookup: { from: 'Research_Outcomes', localField: 'project_outcomes.outcome_code', foreignField: 'outcome_code', as: 'research_outcomes' } }, { $unwind: '$research_outcomes' }, { $project: { outcome_description: '$research_outcomes.outcome_description' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2556,
        "spider_question_id": 4382,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
        "question": "What is the description for the results whose project detail is 'sint'?",
        "query": "db.Projects.aggregate([ { $match: { project_details: 'sint' } }, { $lookup: { from: 'Project_Outcomes', localField: 'project_id', foreignField: 'project_id', as: 'project_outcomes' } }, { $unwind: '$project_outcomes' }, { $lookup: { from: 'Research_Outcomes', localField: 'project_outcomes.outcome_code', foreignField: 'outcome_code', as: 'research_outcomes' } }, { $unwind: '$research_outcomes' }, { $project: { outcome_description: '$research_outcomes.outcome_description' } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $match: { project_details: 'sint' } }, { $lookup: { from: 'Project_Outcomes', localField: 'project_id', foreignField: 'project_id', as: 'project_outcomes' } }, { $unwind: '$project_outcomes' }, { $lookup: { from: 'Research_Outcomes', localField: 'project_outcomes.outcome_code', foreignField: 'outcome_code', as: 'research_outcomes' } }, { $unwind: '$research_outcomes' }, { $project: { outcome_description: '$research_outcomes.outcome_description' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2557,
        "spider_question_id": 4383,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_id , count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "List the organisation id with the maximum outcome count, and the count.",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $group: { _id: \"$organisation_id\", outcomeCount: { $sum: { $size: \"$outcomes\" } } } }, { $sort: { outcomeCount: -1 } }, { $limit: 1 }, { $project: { organisation_id: \"$_id\", outcomeCount: \"$outcomeCount\" } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $group: { _id: \"$organisation_id\", outcomeCount: { $sum: { $size: \"$outcomes\" } } } }, { $sort: { outcomeCount: -1 } }, { $limit: 1 }, { $project: { organisation_id: \"$_id\", outcomeCount: \"$outcomeCount\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2558,
        "spider_question_id": 4384,
        "db_id": "tracking_grants_for_research",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.organisation_id , count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $group: { _id: \"$organisation_id\", numberOfOutcomes: { $sum: { $size: \"$outcomes\" } } } }, { $sort: { numberOfOutcomes: -1 } }, { $limit: 1 }, { $project: { organisation_id: \"$_id\", numberOfOutcomes: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"project_id\", foreignField: \"project_id\", as: \"outcomes\" } }, { $group: { _id: \"$organisation_id\", numberOfOutcomes: { $sum: { $size: \"$outcomes\" } } } }, { $sort: { numberOfOutcomes: -1 } }, { $limit: 1 }, { $project: { organisation_id: \"$_id\", numberOfOutcomes: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2559,
        "spider_question_id": 4385,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "question": "List the project details of the projects launched by the organisation",
        "query": "db.Projects.aggregate([ { $group: { _id: \"$organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"organisation_id\", as: \"projects\" } }, { $unwind: \"$projects\" }, { $project: { project_details: \"$projects.project_details\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Projects.aggregate([ { $group: { _id: \"$organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"organisation_id\", as: \"projects\" } }, { $unwind: \"$projects\" }, { $project: { project_details: \"$projects.project_details\" } } ])"
    },
    {
        "question_id": 2560,
        "spider_question_id": 4386,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
        "question": "What are the details for the projects which were launched by the organization with the most projects?",
        "query": "db.Projects.aggregate([ { $group: { _id: \"$organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"organisation_id\", as: \"projects\" } }, { $unwind: \"$projects\" }, { $project: { project_details: \"$projects.project_details\" } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $group: { _id: \"$organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"organisation_id\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $replaceRoot: { newRoot: \"$project_details\" } }, { $project: { project_details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $group: { _id: \"$organisation_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"organisation_id\", as: \"projects\" } }, { $unwind: \"$projects\" }, { $project: { project_details: \"$projects.project_details\" } } ])"
    },
    {
        "question_id": 2561,
        "spider_question_id": 4391,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "query": "db.Tasks.aggregate([ { $lookup: { from: \"Projects\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $group: { _id: \"$project_details.project_id\", count: { $sum: 1 }, project_details: { $first: \"$project_details.project_details\" } } }, { $project: { count: 1, project_details: 1 } } ])",
        "gpt4 answer": "db.Tasks.aggregate([ { $group: { _id: \"$project_id\", taskCount: { $sum: 1 } } }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"project_id\", as: \"projectDetails\" } }, { $unwind: \"$projectDetails\" }, { $project: { taskCount: 1, projectDetails: \"$projectDetails.project_details\" } } ])",
        "deepseek answer": "db.Tasks.aggregate([ { $lookup: { from: \"Projects\", localField: \"project_id\", foreignField: \"project_id\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $group: { _id: \"$project_details.project_id\", count: { $sum: 1 }, project_details: { $first: \"$project_details.project_details\" } } }, { $project: { count: 1, project_details: 1 } } ])"
    },
    {
        "question_id": 2562,
        "spider_question_id": 4392,
        "db_id": "tracking_grants_for_research",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
        "question": "For each project id, how many tasks are there?",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Tasks\", localField: \"project_id\", foreignField: \"project_id\", as: \"tasks\" } }, { $project: { project_details: 1, taskCount: { $size: \"$tasks\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Tasks\", localField: \"project_id\", foreignField: \"project_id\", as: \"tasks\" } }, { $project: { project_details: 1, taskCount: { $size: \"$tasks\" } } } ])"
    },
    {
        "question_id": 2563,
        "spider_question_id": 4395,
        "db_id": "tracking_grants_for_research",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code",
        "question": "What are the descriptions of all the project outcomes?",
        "query": "db.Research_Outcomes.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"outcome_code\", foreignField: \"outcome_code\", as: \"joined_outcomes\" } }, { $unwind: \"$joined_outcomes\" }, { $project: { outcome_description: 1 } } ])",
        "gpt4 answer": "db.Research_Outcomes.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"outcome_code\", foreignField: \"outcome_code\", as: \"project_outcomes\" } }, { $unwind: \"$project_outcomes\" }, { $project: { outcome_description: 1 } } ])",
        "deepseek answer": "db.Research_Outcomes.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"outcome_code\", foreignField: \"outcome_code\", as: \"joined_outcomes\" } }, { $unwind: \"$joined_outcomes\" }, { $project: { outcome_description: 1 } } ])"
    },
    {
        "question_id": 2564,
        "spider_question_id": 4396,
        "db_id": "tracking_grants_for_research",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code",
        "question": "List the description of the outcomes for all projects.",
        "query": "db.Research_Outcomes.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"outcome_code\", foreignField: \"outcome_code\", as: \"joined\" } }, { $unwind: \"$joined\" }, { $project: { outcome_description: 1 } } ])",
        "gpt4 answer": "db.Research_Outcomes.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"outcome_code\", foreignField: \"outcome_code\", as: \"project_outcome\" } }, { $unwind: \"$project_outcome\" }, { $project: { outcome_description: 1 } } ])",
        "deepseek answer": "db.Research_Outcomes.aggregate([ { $lookup: { from: \"Project_Outcomes\", localField: \"outcome_code\", foreignField: \"outcome_code\", as: \"joined\" } }, { $unwind: \"$joined\" }, { $project: { outcome_description: 1 } } ])"
    },
    {
        "question_id": 2565,
        "spider_question_id": 4397,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which role is most common for the staff?",
        "query": "db.Project_Staff.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])"
    },
    {
        "question_id": 2566,
        "spider_question_id": 4398,
        "db_id": "tracking_grants_for_research",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common role for the staff?",
        "query": "db.Project_Staff.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])",
        "deepseek answer": "db.Project_Staff.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { role_code: \"$_id\" } } ])"
    },
    {
        "question_id": 2567,
        "spider_question_id": 4403,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(age) FROM Person",
        "question": "What is the average age for all person?",
        "query": "db.Person.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$age\" } } } , { $project: { averageAge: 1 } }])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$age\" } } } , { $project: { averageAge: 1 } }])"
    },
    {
        "question_id": 2568,
        "spider_question_id": 4404,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(age) FROM Person",
        "question": "What is the average age for all people in the table?",
        "query": "db.Person.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$age\" } } } , { $project: { averageAge: 1 } }])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$age\" } }}, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$age\" } } } , { $project: { averageAge: 1 } }])"
    },
    {
        "question_id": 2569,
        "spider_question_id": 4409,
        "db_id": "network_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)",
        "question": "Who is the oldest person?",
        "query": "db.Person.find({}, { name: 1 }).sort({ age: -1 }).limit(1)",
        "gpt4 answer": "db.Person.find({}, { name: 1 }).sort({ age: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2570,
        "spider_question_id": 4410,
        "db_id": "network_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM Person WHERE age = (SELECT max(age) FROM person)",
        "question": "What is the name of the person who is the oldest?",
        "query": "db.Person.find({}, {name: 1}).sort({age: -1}).limit(1)",
        "gpt4 answer": "db.Person.find({}, {name: 1}).sort({age: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2571,
        "spider_question_id": 4411,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
        "question": "Who is the oldest person whose job is student?",
        "query": "db.Person.find({job: 'student'}, {name: 1}).sort({age: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.find({job: 'student'}, {name: 1}).sort({age: -1}).limit(1)"
    },
    {
        "question_id": 2572,
        "spider_question_id": 4412,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT max(age) FROM person WHERE job = 'student' )",
        "question": "What is the name of the oldest student?",
        "query": "db.Person.find({job: 'student'}, {name: 1}).sort({age: -1}).limit(1)",
        "gpt4 answer": "db.Person.aggregate([ { $match: { job: 'student' } }, { $group: { _id: null, maxAge: { $max: '$age' } } }, { $lookup: { from: 'Person', localField: 'maxAge', foreignField: 'age', as: 'oldestStudents' } }, { $unwind: '$oldestStudents' }, { $match: { 'oldestStudents.job': 'student' } }, { $project: { name: '$oldestStudents.name' } } ])",
        "deepseek answer": "db.Person.find({job: 'student'}, {name: 1}).sort({age: -1}).limit(1)"
    },
    {
        "question_id": 2573,
        "spider_question_id": 4413,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
        "question": "Who is the youngest male?",
        "query": "db.Person.find({gender: 'male'}, {name: 1}).sort({age: 1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.find({gender: 'male'}, {name: 1}).sort({age: 1}).limit(1)"
    },
    {
        "question_id": 2574,
        "spider_question_id": 4414,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT min(age) FROM person WHERE gender = 'male' )",
        "question": "What is the name of the youngest male?",
        "query": "db.Person.find({gender: 'male'}, {name: 1}).sort({age: 1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.find({gender: 'male'}, {name: 1}).sort({age: 1}).limit(1)"
    },
    {
        "question_id": 2575,
        "spider_question_id": 4415,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'",
        "question": "How old is the doctor named Zach?",
        "query": "db.Person.find({job: 'doctor', name: 'Zach'}, {age: 1})",
        "gpt4 answer": "db.Person.find({ job: \"doctor\", name: \"Zach\" }, { age: 1 })",
        "deepseek answer": "db.Person.find({job: 'doctor', name: 'Zach'}, {age: 1})"
    },
    {
        "question_id": 2576,
        "spider_question_id": 4416,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'",
        "question": "What is the age of the doctor named Zach?",
        "query": "db.Person.find({job: 'doctor', name: 'Zach'}, {age: 1})",
        "gpt4 answer": "db.Person.find({ job: \"doctor\", name: \"Zach\" }, { age: 1 })",
        "deepseek answer": "db.Person.find({job: 'doctor', name: 'Zach'}, {age: 1})"
    },
    {
        "question_id": 2577,
        "spider_question_id": 4417,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Person WHERE age < 30",
        "question": "Who is the person whose age is below 30?",
        "query": "db.Person.find({age: {$lt: 30}}, { name: 1})",
        "gpt4 answer": "db.Person.find({ age: { $lt: 30 } }, { name: 1 })",
        "deepseek answer": "db.Person.find({age: {$lt: 30}}, { name: 1})"
    },
    {
        "question_id": 2578,
        "spider_question_id": 4418,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Person WHERE age < 30",
        "question": "What is the name of the person whose age is below 30?",
        "query": "db.Person.find({age: {$lt: 30}}, {name: 1})",
        "gpt4 answer": "db.Person.find({ age: { $lt: 30 } }, { name: 1 })",
        "deepseek answer": "db.Person.find({age: {$lt: 30}}, {name: 1})"
    },
    {
        "question_id": 2579,
        "spider_question_id": 4421,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , gender FROM Person GROUP BY gender",
        "question": "What is the average age for each gender?",
        "query": "db.Person.aggregate([ { $group: { _id: \"$gender\", averageAge: { $avg: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: \"$gender\", averageAge: { $avg: \"$age\" } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: \"$gender\", averageAge: { $avg: \"$age\" } } } ])"
    },
    {
        "question_id": 2580,
        "spider_question_id": 4422,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , gender FROM Person GROUP BY gender",
        "question": "How old is each gender, on average?",
        "query": "db.Person.aggregate([ { $group: { _id: \"$gender\", averageAge: { $avg: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: \"$gender\", averageAge: { $avg: \"$age\" } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: \"$gender\", averageAge: { $avg: \"$age\" } } } ])"
    },
    {
        "question_id": 2581,
        "spider_question_id": 4423,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , job FROM Person GROUP BY job",
        "question": "What is average age for different job title?",
        "query": "db.Person.aggregate([ { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } }} ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])"
    },
    {
        "question_id": 2582,
        "spider_question_id": 4424,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , job FROM Person GROUP BY job",
        "question": "How old is the average person for each job?",
        "query": "db.Person.aggregate([ { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])"
    },
    {
        "question_id": 2583,
        "spider_question_id": 4425,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , job FROM Person WHERE gender = 'male' GROUP BY job",
        "question": "What is average age of male for different job title?",
        "query": "db.Person.aggregate([ { $match: { gender: \"male\" } }, { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { gender: 'male' } }, { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $match: { gender: \"male\" } }, { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])"
    },
    {
        "question_id": 2584,
        "spider_question_id": 4426,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , job FROM Person WHERE gender = 'male' GROUP BY job",
        "question": "What is the average age for a male in each job?",
        "query": "db.Person.aggregate([ { $match: { gender: \"male\" } }, { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { gender: 'male' } }, { $group: { _id: \"$job\", avgAge: { $avg: \"$age\" } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $match: { gender: \"male\" } }, { $group: { _id: \"$job\", averageAge: { $avg: \"$age\" } } } ])"
    },
    {
        "question_id": 2585,
        "spider_question_id": 4427,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(age) , job FROM Person GROUP BY job",
        "question": "What is minimum age for different job title?",
        "query": "db.Person.aggregate([ { $group: { _id: \"$job\", minAge: { $min: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: \"$job\", minAge: { $min: \"$age\" } } }, { $project: { job: \"$_id\", minAge: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: \"$job\", minAge: { $min: \"$age\" } } } ])"
    },
    {
        "question_id": 2586,
        "spider_question_id": 4428,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(age) , job FROM Person GROUP BY job",
        "question": "How old is the youngest person for each job?",
        "query": "db.Person.aggregate([ { $group: { _id: \"$job\", youngest: { $min: \"$age\" } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $group: { _id: \"$job\", minAge: { $min: \"$age\" } } }, { $project: { job: \"$_id\", minAge: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $group: { _id: \"$job\", youngest: { $min: \"$age\" } } } ])"
    },
    {
        "question_id": 2587,
        "spider_question_id": 4429,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , gender FROM Person WHERE age < 40 GROUP BY gender",
        "question": "Find the number of people who is under 40 for each gender.",
        "query": "db.Person.aggregate([ { $match: { age: { $lt: 40 } } }, { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { age: { $lt: 40 } } }, { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $match: { age: { $lt: 40 } } }, { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2588,
        "spider_question_id": 4430,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , gender FROM Person WHERE age < 40 GROUP BY gender",
        "question": "How many people are under 40 for each gender?",
        "query": "db.Person.aggregate([ { $match: { age: { $lt: 40 } } }, { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { age: { $lt: 40 } } }, { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Person.aggregate([ { $match: { age: { $lt: 40 } } }, { $group: { _id: \"$gender\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2589,
        "spider_question_id": 4431,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "query": "db.Person.aggregate([ { $match: { age: { $gt: db.Person.findOne({ job: \"engineer\" }).age } } }, { $sort: { age: 1 } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.aggregate([ { $match: { age: { $gt: db.Person.findOne({ job: \"engineer\" }).age } } }, { $sort: { age: 1 } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 2590,
        "spider_question_id": 4432,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM Person WHERE age > (SELECT min(age) FROM person WHERE job = 'engineer') ORDER BY age",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "db.Person.aggregate([ { $match: { job: \"engineer\" } }, { $group: { _id: null, minAge: { $min: \"$age\" } } }, { $lookup: { from: \"Person\", let: { minAge: \"$minAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$age\", \"$$minAge\" ] } } }, { $project: { name: 1 } }, { $sort: { age: 1 } } ], as: \"olderThanEngineer\" } }, { $unwind: \"$olderThanEngineer\" }, { $replaceRoot: { newRoot: \"$olderThanEngineer\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.aggregate([ { $match: { job: \"engineer\" } }, { $group: { _id: null, minAge: { $min: \"$age\" } } }, { $lookup: { from: \"Person\", let: { minAge: \"$minAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$age\", \"$$minAge\" ] } } }, { $project: { name: 1 } }, { $sort: { age: 1 } } ], as: \"olderThanEngineer\" } }, { $unwind: \"$olderThanEngineer\" }, { $replaceRoot: { newRoot: \"$olderThanEngineer\" } } ])"
    },
    {
        "question_id": 2591,
        "spider_question_id": 4433,
        "db_id": "network_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM Person WHERE age > (SELECT max(age) FROM person WHERE job = 'engineer')",
        "question": "Find the number of people whose age is greater than all engineers.",
        "query": "db.Person.aggregate([ { $match: { job: \"engineer\" } }, { $group: { _id: null, maxAge: { $max: \"$age\" } } }, { $lookup: { from: \"Person\", let: { maxAge: \"$maxAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$age\", \"$$maxAge\" ] } } }, { $count: \"count\" } ], as: \"count\" } }, { $unwind: \"$count\" }, { $project: { count: \"$count.count\" } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { job: 'engineer' } }, { $group: { _id: null, maxAge: { $max: \"$age\" } } }, { $lookup: { from: \"Person\", let: { max_engineer_age: \"$maxAge\" }, pipeline: [ { $match: { $expr: { $gt: [\"$age\", \"$$max_engineer_age\"] } } }, { $count: \"numberOfPeople\" } ], as: \"result\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ \"$result\", 0 ] }, \"$$ROOT\" ] } } }, { $project: { numberOfPeople: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $match: { job: \"engineer\" } }, { $group: { _id: null, maxAge: { $max: \"$age\" } } }, { $lookup: { from: \"Person\", let: { maxAge: \"$maxAge\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$age\", \"$$maxAge\" ] } } }, { $count: \"count\" } ], as: \"count\" } }, { $unwind: \"$count\" }, { $project: { count: \"$count.count\" } } ])"
    },
    {
        "question_id": 2592,
        "spider_question_id": 4435,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , job FROM Person ORDER BY name",
        "question": "list the name, job title of all people ordered by their names.",
        "query": "db.Person.find({}, {name: 1, job: 1}).sort({name: 1})",
        "gpt4 answer": "db.Person.find({}, {name: 1, job: 1}).sort({name: 1})",
        "deepseek answer": "db.Person.find({}, {name: 1, job: 1}).sort({name: 1})"
    },
    {
        "question_id": 2593,
        "spider_question_id": 4436,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , job FROM Person ORDER BY name",
        "question": "What are the names and job titles of every person ordered alphabetically by name?",
        "query": "db.Person.find({}, {name: 1, job: 1}).sort({name: 1})",
        "gpt4 answer": "db.Person.find({}, { name: 1, job: 1 }).sort({ name: 1 })",
        "deepseek answer": "db.Person.find({}, {name: 1, job: 1}).sort({name: 1})"
    },
    {
        "question_id": 2594,
        "spider_question_id": 4437,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Person ORDER BY age DESC",
        "question": "Find the names of all person sorted in the descending order using age.",
        "query": "db.Person.find({}, {name: 1}).sort({age: -1})",
        "gpt4 answer": "db.Person.find({}, { name: 1}).sort({age: -1})",
        "deepseek answer": "db.Person.find({}, {name: 1}).sort({age: -1})"
    },
    {
        "question_id": 2595,
        "spider_question_id": 4438,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Person ORDER BY age DESC",
        "question": "What are the names of everybody sorted by age in descending order?",
        "query": "db.Person.find({}, {name: 1}).sort({age: -1})",
        "gpt4 answer": "db.Person.find({}, { name: 1 }).sort({ age: -1 })",
        "deepseek answer": "db.Person.find({}, {name: 1}).sort({age: -1})"
    },
    {
        "question_id": 2596,
        "spider_question_id": 4439,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age",
        "question": "Find the name and age of all males in order of their age.",
        "query": "db.Person.find({ gender: 'male' }, { name: 1 }).sort({ age: 1 })",
        "gpt4 answer": "db.Person.find({ gender: \"male\" }, { name: 1 }).sort({ age: 1 })",
        "deepseek answer": "db.Person.find({ gender: 'male' }, { name: 1 }).sort({ age: 1 })"
    },
    {
        "question_id": 2597,
        "spider_question_id": 4440,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age",
        "question": "What is the name and age of every male? Order the results by age.",
        "query": "db.Person.find({gender: 'male'}, {name: 1}).sort({age: 1})",
        "gpt4 answer": "db.Person.find({ gender: \"male\" }, { name: 1 }).sort({ age: 1 })",
        "deepseek answer": "db.Person.find({gender: 'male'}, {name: 1}).sort({age: 1})"
    },
    {
        "question_id": 2598,
        "spider_question_id": 4441,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends.friend\": { $all: [\"Dan\", \"Alice\"] } } }, { $project: { name: 1, age: 1 } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { $and: [ { \"friends.friend\": \"Dan\" }, { \"friends.friend\": \"Alice\" } ] } }, { $project: { name: 1, age: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends.friend\": { $all: [\"Dan\", \"Alice\"] } } }, { $project: { name: 1, age: 1 } } ])"
    },
    {
        "question_id": 2599,
        "spider_question_id": 4442,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'",
        "question": "What are the names and ages of every person who is a friend of both Dan and Alice?",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends.friend\": { $all: [\"Dan\", \"Alice\"] } } }, { $project: { name: 1, age: 1 } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" }}, { $match: { \"friends.friend\": { $all: [\"Dan\", \"Alice\"] } }}, { $project: { name: 1, age: 1 }} ])",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends.friend\": { $all: [\"Dan\", \"Alice\"] } } }, { $project: { name: 1, age: 1 } } ])"
    },
    {
        "question_id": 2600,
        "spider_question_id": 4447,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
        "question": "Find the name of the person who has friends with age above 40 but not under age 30?",
        "query": "db.PersonFriend.aggregate([ { $lookup: { from: \"Person\", localField: \"friend\", foreignField: \"name\", as: \"friendDetails\" } }, { $match: { \"friendDetails.age\": { $gt: 40 } } }, { $group: { _id: \"$name\", friendsAge: { $push: \"$friendDetails.age\" } } }, { $match: { friendsAge: { $not: { $elemMatch: { $lt: 30 } } } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $lookup: { from: \"Person\", localField: \"friend\", foreignField: \"name\", as: \"friendDetails\" } }, { $match: { \"friendDetails.age\": { $gt: 40 } } }, { $group: { _id: \"$name\", friendsAge: { $push: \"$friendDetails.age\" } } }, { $match: { friendsAge: { $not: { $elemMatch: { $lt: 30 } } } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2601,
        "spider_question_id": 4451,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1",
        "question": "Find the person who has exactly one friend.",
        "query": "db.PersonFriend.aggregate([ { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "db.PersonFriend.aggregate([ { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 2602,
        "spider_question_id": 4452,
        "db_id": "network_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*) = 1",
        "question": "What are the names of everybody who has exactly one friend?",
        "query": "db.PersonFriend.aggregate([ { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "db.PersonFriend.aggregate([ { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 2603,
        "spider_question_id": 4453,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'",
        "question": "Who are the friends of Bob?",
        "query": "db.PersonFriend.aggregate([ { $match: { name: \"Bob\" } }, { $project: { friend: 1 } } ])",
        "gpt4 answer": "db.PersonFriend.find({ name: 'Bob' }, { friend: 1 })",
        "deepseek answer": "db.PersonFriend.aggregate([ { $match: { name: \"Bob\" } }, { $project: { friend: 1 } } ])"
    },
    {
        "question_id": 2604,
        "spider_question_id": 4454,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'",
        "question": "Who are Bob's friends?",
        "query": "db.PersonFriend.find({name: 'Bob'}, { friend: 1})",
        "gpt4 answer": "db.PersonFriend.find({ name: 'Bob' }, { friend: 1 })",
        "deepseek answer": "db.PersonFriend.find({name: 'Bob'}, { friend: 1})"
    },
    {
        "question_id": 2605,
        "spider_question_id": 4455,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'",
        "question": "Find the name of persons who are friends with Bob.",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $match: { \"friends.friend\": \"Bob\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.PersonFriend.find({ friend: \"Bob\" }, { name: 1 })",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $match: { \"friends.friend\": \"Bob\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 2606,
        "spider_question_id": 4456,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'",
        "question": "What are the names of all of Bob's friends?",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends.friend\": \"Bob\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.PersonFriend.find({ friend: \"Bob\" }, { name: 1 })",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends.friend\": \"Bob\" } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 2607,
        "spider_question_id": 4463,
        "db_id": "network_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'",
        "question": "Who has a friend that is from new york city?",
        "query": "db.Person.aggregate([ { $match: { city: 'new york city' } }, { $lookup: { from: 'PersonFriend', localField: 'name', foreignField: 'friend', as: 'friends' } }, { $unwind: '$friends' }, { $project: { name: '$friends.name' } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { city: 'new york city' } }, { $lookup: { from: 'PersonFriend', localField: 'name', foreignField: 'friend', as: 'friends' } }, { $unwind: '$friends' }, { $project: { name: '$friends.name' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2608,
        "spider_question_id": 4469,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
        "question": "Who is the friend of Zach with longest year relationship?",
        "query": "db.PersonFriend.find( { name: 'Zach' }, { friend: 1 } ).sort({ year: -1 }).limit(1)",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $match: { name: \"Zach\" } }, { $sort: { year: -1 } }, { $limit: 1 }, { $project: { friend: 1 } } ])",
        "deepseek answer": "db.PersonFriend.find( { name: 'Zach' }, { friend: 1 } ).sort({ year: -1 }).limit(1)"
    },
    {
        "question_id": 2609,
        "spider_question_id": 4470,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
        "question": "Which friend of Zach has the longest-lasting friendship?",
        "query": "db.PersonFriend.aggregate([ { $match: { name: \"Zach\" } }, { $sort: { year: -1 } }, { $limit: 1 }, { $project: { friend: 1 } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $match: { name: 'Zach' } }, { $group: { _id: '$name', maxYear: { $max: '$year' } } }, { $lookup: { from: 'PersonFriend', localField: 'maxYear', foreignField: 'year', as: 'longestFriendship' } }, { $match: { 'longestFriendship.name': 'Zach' } }, { $unwind: '$longestFriendship' }, { $project: { friend: '$longestFriendship.friend' } } ])",
        "deepseek answer": "db.PersonFriend.aggregate([ { $match: { name: \"Zach\" } }, { $sort: { year: -1 } }, { $limit: 1 }, { $project: { friend: 1 } } ])"
    },
    {
        "question_id": 2610,
        "spider_question_id": 4471,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "query": "db.PersonFriend.aggregate([ { $match: { name: 'Zach' } }, { $group: { _id: '$name', latestYear: { $max: '$year' } } }, { $lookup: { from: 'PersonFriend', localField: 'latestYear', foreignField: 'year', as: 'friends' } }, { $unwind: '$friends' }, { $match: { 'friends.name': 'Zach' } }, { $lookup: { from: 'Person', localField: 'friends.friend', foreignField: 'name', as: 'friend_details' } }, { $unwind: '$friend_details' }, { $project: { age: '$friend_details.age' } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $match: { name: 'Zach' } }, { $group: { _id: '$name', latestYear: { $max: '$year' } } }, { $lookup: { from: 'PersonFriend', localField: 'latestYear', foreignField: 'year', as: 'friends' } }, { $unwind: '$friends' }, { $match: { 'friends.name': 'Zach' } }, { $lookup: { from: 'Person', localField: 'friends.friend', foreignField: 'name', as: 'friend_details' } }, { $unwind: '$friend_details' }, { $project: { age: '$friend_details.age' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2611,
        "spider_question_id": 4472,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE name = 'Zach')",
        "question": "What are the ages of all of Zach's friends who are in the longest relationship?",
        "query": "db.PersonFriend.aggregate([ { $match: { name: \"Zach\" } }, { $group: { _id: \"$name\", maxYear: { $max: \"$year\" } } }, { $lookup: { from: \"PersonFriend\", localField: \"maxYear\", foreignField: \"year\", as: \"longestRelation\" } }, { $unwind: \"$longestRelation\" }, { $match: { \"longestRelation.name\": \"Zach\" } }, { $lookup: { from: \"Person\", localField: \"longestRelation.friend\", foreignField: \"name\", as: \"friendDetails\" } }, { $unwind: \"$friendDetails\" }, { $project: { age: \"$friendDetails.age\" } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $match: { name: \"Zach\" } }, { $group: { _id: \"$name\", maxYear: { $max: \"$year\" } } }, { $lookup: { from: \"PersonFriend\", localField: \"maxYear\", foreignField: \"year\", as: \"longestRelation\" } }, { $unwind: \"$longestRelation\" }, { $match: { \"longestRelation.name\": \"Zach\" } }, { $lookup: { from: \"Person\", localField: \"longestRelation.friend\", foreignField: \"name\", as: \"friendDetails\" } }, { $unwind: \"$friendDetails\" }, { $project: { age: \"$friendDetails.age\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2612,
        "spider_question_id": 4473,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "query": "db.PersonFriend.aggregate([ { $match: { friend: 'Alice' } }, { $group: { _id: null, minYear: { $min: '$year' } } }, { $lookup: { from: \"PersonFriend\", let: { minYear: '$minYear' }, pipeline: [ { $match: { $expr: { $and: [ { $eq: ['$friend', 'Alice'] }, { $eq: ['$year', '$$minYear'] } ] } } }, { $project: { name: 1 } } ], as: \"shortestFriendship\" } }, { $unwind: \"$shortestFriendship\" }, { $replaceRoot: { newRoot: \"$shortestFriendship\" } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $match: { friend: 'Alice' } }, { $group: { _id: null, minYear: { $min: '$year' } } }, { $lookup: { from: \"PersonFriend\", let: { minYear: '$minYear' }, pipeline: [ { $match: { $expr: { $and: [ { $eq: ['$friend', 'Alice'] }, { $eq: ['$year', '$$minYear'] } ] } } }, { $project: { name: 1 } } ], as: \"shortestFriendship\" } }, { $unwind: \"$shortestFriendship\" }, { $replaceRoot: { newRoot: \"$shortestFriendship\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2613,
        "spider_question_id": 4474,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT min(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "query": "db.PersonFriend.aggregate([ { $match: { friend: \"Alice\" } }, { $group: { _id: null, minYear: { $min: \"$year\" } } }, { $lookup: { from: \"PersonFriend\", localField: \"minYear\", foreignField: \"year\", as: \"shortestFriends\" } }, { $unwind: \"$shortestFriends\" }, { $match: { \"shortestFriends.friend\": \"Alice\" } }, { $project: { name: \"$shortestFriends.name\" } } ])",
        "gpt4 answer": "db.PersonFriend.aggregate([ { $match: { friend: \"Alice\" } }, { $group: { _id: null, minYear: { $min: \"$year\" } } }, { $lookup: { from: \"PersonFriend\", localField: \"minYear\", foreignField: \"year\", as: \"shortestFriends\" } }, { $unwind: \"$shortestFriends\" }, { $match: { \"shortestFriends.friend\": \"Alice\" } }, { $project: { name: \"$shortestFriends.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2614,
        "spider_question_id": 4475,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT max(YEAR) FROM PersonFriend WHERE friend = 'Alice')",
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $match: { \"friends.friend\": \"Alice\" } }, { $sort: { \"friends.year\": -1 } }, { $limit: 1 }, { $project: { name: 1, age: 1, job: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $match: { \"friends.friend\": \"Alice\" } }, { $sort: { \"friends.year\": -1 } }, { $limit: 1 }, { $project: { name: 1, age: 1, job: 1 } } ])"
    },
    {
        "question_id": 2615,
        "spider_question_id": 4477,
        "db_id": "network_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "question": "Who is the person that has no friend?",
        "query": "db.Person.find({ name: { $nin: db.PersonFriend.distinct(\"name\") } }, { name: 1 })",
        "gpt4 answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.Person.find({ name: { $nin: db.PersonFriend.distinct(\"name\") } }, { name: 1 })"
    },
    {
        "question_id": 2616,
        "spider_question_id": 4478,
        "db_id": "network_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "question": "What are the names of all people who do not have friends?",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends\" } }, { $match: { \"friends\": { $size: 0 } } }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 2617,
        "spider_question_id": 4480,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name , avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "question": "What is the name of the person who has the oldest average age for their friends, and what is that average age?",
        "query": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"friend\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $group: { _id: \"$friends.name\", avgAge: { $avg: \"$age\" } } }, { $sort: { avgAge: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"friend\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $group: { _id: \"$friends.name\", avgAge: { $avg: \"$age\" } } }, { $sort: { avgAge: -1 } }, { $limit: 1 }, { $project: { name: \"$_id\", avgAge: 1 } } ])",
        "deepseek answer": "db.Person.aggregate([ { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"friend\", as: \"friends\" } }, { $unwind: \"$friends\" }, { $group: { _id: \"$friends.name\", avgAge: { $avg: \"$age\" } } }, { $sort: { avgAge: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2618,
        "spider_question_id": 4483,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'",
        "question": "Find Alice's friends of friends.",
        "query": "db.PersonFriend.aggregate([ { $match: { name: \"Alice\" } }, { $lookup: { from: \"PersonFriend\", localField: \"friend\", foreignField: \"name\", as: \"friend_of_friend\" } }, { $unwind: \"$friend_of_friend\" }, { $lookup: { from: \"Person\", localField: \"friend_of_friend.friend\", foreignField: \"name\", as: \"friend_of_friend_info\" } }, { $unwind: \"$friend_of_friend_info\" }, { $match: { \"friend_of_friend_info.name\": { $ne: \"Alice\" } } }, { $project: { name: \"$friend_of_friend_info.name\" } } ])",
        "gpt4 answer": "db.Person.aggregate([ { $match: { name: \"Alice\" } }, { $lookup: { from: \"PersonFriend\", localField: \"name\", foreignField: \"name\", as: \"friends1\" }}, { $unwind: \"$friends1\" }, { $lookup: { from: \"PersonFriend\", localField: \"friends1.friend\", foreignField: \"name\", as: \"friends2\" }}, { $unwind: \"$friends2\" }, { $lookup: { from: \"PersonFriend\", localField: \"friends2.friend\", foreignField: \"name\", as: \"friendsOfFriends\" }}, { $unwind: \"$friendsOfFriends\" }, { $project: { \"friendsOfFriends.name\": 1 } }, { $match: { \"friendsOfFriends.name\": { $ne: \"Alice\" } } }, { $group: { _id: \"$friendsOfFriends.name\" } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "db.PersonFriend.aggregate([ { $match: { name: \"Alice\" } }, { $lookup: { from: \"PersonFriend\", localField: \"friend\", foreignField: \"name\", as: \"friend_of_friend\" } }, { $unwind: \"$friend_of_friend\" }, { $lookup: { from: \"Person\", localField: \"friend_of_friend.friend\", foreignField: \"name\", as: \"friend_of_friend_info\" } }, { $unwind: \"$friend_of_friend_info\" }, { $match: { \"friend_of_friend_info.name\": { $ne: \"Alice\" } } }, { $project: { name: \"$friend_of_friend_info.name\" } } ])"
    },
    {
        "question_id": 2619,
        "spider_question_id": 4484,
        "db_id": "network_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name != 'Alice'",
        "question": "What are the names of all of Alice's friends of friends?",
        "query": "db.PersonFriend.aggregate([ { $match: { name: \"Alice\" } }, { $lookup: { from: \"PersonFriend\", localField: \"friend\", foreignField: \"name\", as: \"friend_of_friend\" } }, { $unwind: \"$friend_of_friend\" }, { $lookup: { from: \"Person\", localField: \"friend_of_friend.friend\", foreignField: \"name\", as: \"friend_of_friend_info\" } }, { $unwind: \"$friend_of_friend_info\" }, { $match: { \"friend_of_friend_info.name\": { $ne: \"Alice\" } } }, { $project: { name: \"$friend_of_friend_info.name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.PersonFriend.aggregate([ { $match: { name: \"Alice\" } }, { $lookup: { from: \"PersonFriend\", localField: \"friend\", foreignField: \"name\", as: \"friend_of_friend\" } }, { $unwind: \"$friend_of_friend\" }, { $lookup: { from: \"Person\", localField: \"friend_of_friend.friend\", foreignField: \"name\", as: \"friend_of_friend_info\" } }, { $unwind: \"$friend_of_friend_info\" }, { $match: { \"friend_of_friend_info.name\": { $ne: \"Alice\" } } }, { $project: { name: \"$friend_of_friend_info.name\" } } ])"
    },
    {
        "question_id": 2620,
        "spider_question_id": 4486,
        "db_id": "decoration_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM member ORDER BY Name ASC",
        "question": "List the names of members in ascending alphabetical order.",
        "query": "db.member.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.member.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.member.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 2621,
        "spider_question_id": 4487,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Country FROM member",
        "question": "What are the names and countries of members?",
        "query": "db.member.find({}, { Name: 1, Country: 1})",
        "gpt4 answer": "db.member.find({}, { Name: 1, Country: 1 })",
        "deepseek answer": "db.member.find({}, { Name: 1, Country: 1})"
    },
    {
        "question_id": 2622,
        "spider_question_id": 4488,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM member WHERE Country = 'United States' OR Country = 'Canada'",
        "question": "Show the names of members whose country is 'United States' or 'Canada'.",
        "query": "db.member.find({ Country: { $in: [\"United States\", \"Canada\"] } }, { Name: 1 })",
        "gpt4 answer": "db.member.find( { Country: { $in: ['United States', 'Canada'] } }, { Name: 1 } )",
        "deepseek answer": "db.member.find({ Country: { $in: [\"United States\", \"Canada\"] } }, { Name: 1 })"
    },
    {
        "question_id": 2623,
        "spider_question_id": 4489,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "question": "Show the different countries and the number of members from each.",
        "query": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { Country: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Country\", NumberOfMembers: { $sum: 1 } } }, { $project: { Country: \"$_id\", NumberOfMembers: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $project: { Country: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2624,
        "spider_question_id": 4490,
        "db_id": "decoration_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common country across members.",
        "query": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 2625,
        "spider_question_id": 4491,
        "db_id": "decoration_competition",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2",
        "question": "Which countries have more than two members?",
        "query": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 2626,
        "spider_question_id": 4492,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Leader_Name , College_Location FROM college",
        "question": "Show the leader names and locations of colleges.",
        "query": "db.college.find({}, {Leader_Name: 1, College_Location: 1})",
        "gpt4 answer": "db.college.find({}, { Leader_Name: 1, College_Location: 1 })",
        "deepseek answer": "db.college.find({}, {Leader_Name: 1, College_Location: 1})"
    },
    {
        "question_id": 2627,
        "spider_question_id": 4493,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID",
        "question": "Show the names of members and names of colleges they go to.",
        "query": "db.member.aggregate([ { $lookup: { from: \"college\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"college_info\" } }, { $project: { \"Name\": 1, \"college_info.Name\": 1 } }, { $unwind: \"$college_info\" }, { $project: { \"MemberName\": \"$Name\", \"CollegeName\": \"$college_info.Name\" } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"college\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"college_info\" } }, { $project: { \"Name\": 1, \"college_info.Name\": 1 } }, { $unwind: \"$college_info\" }, { $project: { \"MemberName\": \"$Name\", \"CollegeName\": \"$college_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2628,
        "spider_question_id": 4494,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC",
        "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "query": "db.college.aggregate([ { $lookup: { from: \"member\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"members\" } }, { $unwind: \"$members\" }, { $project: { \"Member Name\": \"$members.Name\", \"College Location\": \"$College_Location\" } }, { $sort: { \"Member Name\": 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"college\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"college_info\" } }, { $unwind: \"$college_info\" }, { $project: { Name: 1, College_Location: \"$college_info.College_Location\" } }, { $sort: { Name: 1 } } ])",
        "deepseek answer": "db.college.aggregate([ { $lookup: { from: \"member\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"members\" } }, { $unwind: \"$members\" }, { $project: { \"Member Name\": \"$members.Name\", \"College Location\": \"$College_Location\" } }, { $sort: { \"Member Name\": 1 } } ])"
    },
    {
        "question_id": 2629,
        "spider_question_id": 4495,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = 'Canada'",
        "question": "Show the distinct leader names of colleges associated with members from country 'Canada'.",
        "query": "db.college.aggregate([ { $lookup: { from: \"member\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"members\" } }, { $unwind: \"$members\" }, { $match: { \"members.Country\": \"Canada\" } }, { $group: { _id: \"$Leader_Name\" } }, { $project: { Leader_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.college.aggregate([ { $lookup: { from: \"member\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"members\" } }, { $match: { \"members.Country\": \"Canada\" } }, { $group: { _id: \"$Leader_Name\" } }, { $project: { Leader_Name: \"$_id\" } } ])",
        "deepseek answer": "db.college.aggregate([ { $lookup: { from: \"member\", localField: \"College_ID\", foreignField: \"College_ID\", as: \"members\" } }, { $unwind: \"$members\" }, { $match: { \"members.Country\": \"Canada\" } }, { $group: { _id: \"$Leader_Name\" } }, { $project: { Leader_Name: \"$_id\" } } ])"
    },
    {
        "question_id": 2630,
        "spider_question_id": 4496,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
        "question": "Show the names of members and the decoration themes they have.",
        "query": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $project: { Name: 1, \"round_info.Decoration_Theme\": 1 } }, { $unwind: \"$round_info\" }, { $project: { Name: 1, Decoration_Theme: \"$round_info.Decoration_Theme\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $project: { Name: 1, \"round_info.Decoration_Theme\": 1 } }, { $unwind: \"$round_info\" }, { $project: { Name: 1, Decoration_Theme: \"$round_info.Decoration_Theme\" } } ])"
    },
    {
        "question_id": 2631,
        "spider_question_id": 4497,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3",
        "question": "Show the names of members that have a rank in round higher than 3.",
        "query": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $unwind: \"$round_info\" }, { $match: { \"round_info.Rank_in_Round\": { $gt: 3 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $unwind: \"$round_info\" }, { $match: { \"round_info.Rank_in_Round\": { $gt: 3 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $unwind: \"$round_info\" }, { $match: { \"round_info.Rank_in_Round\": { $gt: 3 } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2632,
        "spider_question_id": 4498,
        "db_id": "decoration_competition",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC",
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "query": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $unwind: \"$round_info\" }, { $sort: { \"round_info.Rank_in_Round\": 1 } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"Rounds\" } }, { $unwind: \"$Rounds\" }, { $sort: { \"Rounds.Rank_in_Round\": 1 } }, { $project: { \"Name\": 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"round_info\" } }, { $unwind: \"$round_info\" }, { $sort: { \"round_info.Rank_in_Round\": 1 } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 2633,
        "spider_question_id": 4499,
        "db_id": "decoration_competition",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
        "question": "List the names of members who did not participate in any round.",
        "query": "db.member.find({ Member_ID: { $nin: db.round.distinct(\"Member_ID\") } }, { Name: 1 })",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"round\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"rounds\" } }, { $match: { \"rounds\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.member.find({ Member_ID: { $nin: db.round.distinct(\"Member_ID\") } }, { Name: 1 })"
    },
    {
        "question_id": 2634,
        "spider_question_id": 4500,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , access_count FROM documents ORDER BY document_name",
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "query": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ document_name: 1 })",
        "gpt4 answer": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ document_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2635,
        "spider_question_id": 4501,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , access_count FROM documents ORDER BY document_name",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "query": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ document_name: 1 })",
        "gpt4 answer": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ document_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2636,
        "spider_question_id": 4502,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "query": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ access_count: -1 }).limit(1)",
        "gpt4 answer": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ access_count: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2637,
        "spider_question_id": 4503,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "query": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ access_count: -1 }).limit(1)",
        "gpt4 answer": "db.Documents.find({}, { document_name: 1, access_count: 1 }).sort({ access_count: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2638,
        "spider_question_id": 4505,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4",
        "question": "What are the codes of types of documents of which there are for or more?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 4 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 4 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2639,
        "spider_question_id": 4506,
        "db_id": "document_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the total access count of all documents in the most popular document type.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", totalAccess: { $sum: \"$access_count\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { totalAccess: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", totalAccess: { $sum: \"$access_count\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { totalAccess: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2640,
        "spider_question_id": 4507,
        "db_id": "document_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the total access count of documents that are of the most common document type?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", totalAccess: { $sum: \"$access_count\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { totalAccess: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", totalAccess: { $sum: \"$access_count\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { totalAccess: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2641,
        "spider_question_id": 4508,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(access_count) FROM documents",
        "question": "What is the average access count of documents?",
        "query": "db.Documents.aggregate([ { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2642,
        "spider_question_id": 4509,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(access_count) FROM documents",
        "question": "Find the average access count across all documents?",
        "query": "db.Documents.aggregate([ { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2643,
        "spider_question_id": 4510,
        "db_id": "document_management",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the structure of the document with the least number of accesses?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$document_structure_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Document_Structures\", localField: \"_id\", foreignField: \"document_structure_code\", as: \"structure_info\" } }, { $unwind: \"$structure_info\" }, { $project: { document_structure_description: \"$structure_info.document_structure_description\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$document_structure_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Document_Structures\", localField: \"_id\", foreignField: \"document_structure_code\", as: \"structure_info\" } }, { $unwind: \"$structure_info\" }, { $project: { document_structure_description: \"$structure_info.document_structure_description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2644,
        "spider_question_id": 4512,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM documents WHERE document_name = 'David CV'",
        "question": "What is the type of the document named 'David CV'?",
        "query": "db.Documents.findOne({ document_name: 'David CV' }, { document_type_code: 1 })",
        "gpt4 answer": "db.Documents.findOne({ document_name: 'David CV' }, { document_type_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2645,
        "spider_question_id": 4513,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM documents WHERE document_name = 'David CV'",
        "question": "Return the type code of the document named 'David CV'.",
        "query": "db.Documents.findOne({ document_name: 'David CV' }, { document_type_code: 1 })",
        "gpt4 answer": "db.Documents.findOne({ document_name: 'David CV' }, { document_type_code: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2646,
        "spider_question_id": 4516,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count) > 10000",
        "question": "What document types do have more than 10000 total access number.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", totalAccess: { $sum: \"$access_count\" } }}, { $match: { totalAccess: { $gt: 10000 } }}, { $project: { _id: 1 }} ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", totalAccess: { $sum: \"$access_count\" } }}, { $match: { totalAccess: { $gt: 10000 } }}, { $project: { _id: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2647,
        "spider_question_id": 4520,
        "db_id": "document_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "question": "Find all the name of documents without any sections.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Document_Sections\", localField: \"document_code\", foreignField: \"document_code\", as: \"section\" } }, { $match: { \"section\": { $size: 0 } } }, { $project: { document_name: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Document_Sections\", localField: \"document_code\", foreignField: \"document_code\", as: \"section\" } }, { $match: { \"section\": { $size: 0 } } }, { $project: { document_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2648,
        "spider_question_id": 4521,
        "db_id": "document_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
        "question": "What are the names of documents that do not have any sections?",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Document_Sections\", localField: \"document_code\", foreignField: \"document_code\", as: \"sections\" } }, { $match: { sections: { $size: 0 } } }, { $project: { document_name: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Document_Sections\", localField: \"document_code\", foreignField: \"document_code\", as: \"sections\" } }, { $match: { sections: { $size: 0 } } }, { $project: { document_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2649,
        "spider_question_id": 4524,
        "db_id": "document_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = 'Acknowledgement'",
        "question": "Find the average access counts of documents with functional area 'Acknowledgement'.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Document_Functional_Areas\", localField: \"document_code\", foreignField: \"document_code\", as: \"document_functional_areas\" } }, { $unwind: \"$document_functional_areas\" }, { $lookup: { from: \"Functional_Areas\", localField: \"document_functional_areas.functional_area_code\", foreignField: \"functional_area_code\", as: \"functional_areas\" } }, { $unwind: \"$functional_areas\" }, { $match: { \"functional_areas.functional_area_description\": \"Acknowledgement\" } }, { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Document_Functional_Areas\", localField: \"document_code\", foreignField: \"document_code\", as: \"document_functional_areas\" } }, { $unwind: \"$document_functional_areas\" }, { $lookup: { from: \"Functional_Areas\", localField: \"document_functional_areas.functional_area_code\", foreignField: \"functional_area_code\", as: \"functional_areas\" } }, { $unwind: \"$functional_areas\" }, { $match: { \"functional_areas.functional_area_description\": \"Acknowledgement\" } }, { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Document_Functional_Areas\", localField: \"document_code\", foreignField: \"document_code\", as: \"document_functional_areas\" } }, { $unwind: \"$document_functional_areas\" }, { $lookup: { from: \"Functional_Areas\", localField: \"document_functional_areas.functional_area_code\", foreignField: \"functional_area_code\", as: \"functional_areas\" } }, { $unwind: \"$functional_areas\" }, { $match: { \"functional_areas.functional_area_description\": \"Acknowledgement\" } }, { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])"
    },
    {
        "question_id": 2650,
        "spider_question_id": 4525,
        "db_id": "document_management",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = 'Acknowledgement'",
        "question": "What are the average access counts of documents that have the functional area description 'Acknowledgement'?",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Document_Functional_Areas\", localField: \"document_code\", foreignField: \"document_code\", as: \"document_functional_areas\" } }, { $unwind: \"$document_functional_areas\" }, { $lookup: { from: \"Functional_Areas\", localField: \"document_functional_areas.functional_area_code\", foreignField: \"functional_area_code\", as: \"functional_areas\" } }, { $unwind: \"$functional_areas\" }, { $match: { \"functional_areas.functional_area_description\": \"Acknowledgement\" } }, { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Document_Functional_Areas\", localField: \"document_code\", foreignField: \"document_code\", as: \"functional_area_info\" } }, { $unwind: \"$functional_area_info\" }, { $lookup: { from: \"Functional_Areas\", localField: \"functional_area_info.functional_area_code\", foreignField: \"functional_area_code\", as: \"functional_area\" } }, { $unwind: \"$functional_area\" }, { $match: { \"functional_area.functional_area_description\": \"Acknowledgement\" } }, { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Document_Functional_Areas\", localField: \"document_code\", foreignField: \"document_code\", as: \"document_functional_areas\" } }, { $unwind: \"$document_functional_areas\" }, { $lookup: { from: \"Functional_Areas\", localField: \"document_functional_areas.functional_area_code\", foreignField: \"functional_area_code\", as: \"functional_areas\" } }, { $unwind: \"$functional_areas\" }, { $match: { \"functional_areas.functional_area_description\": \"Acknowledgement\" } }, { $group: { _id: null, averageAccessCount: { $avg: \"$access_count\" } } }, { $project: { averageAccessCount: 1 } } ])"
    },
    {
        "question_id": 2651,
        "spider_question_id": 4530,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name FROM documents WHERE document_name LIKE '%CV%'",
        "question": "List all the document names which contains 'CV'.",
        "query": "db.Documents.find({document_name: /CV/}, {document_name: 1})",
        "gpt4 answer": "db.Documents.find({document_name: /CV/}, {document_name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 2652,
        "spider_question_id": 4531,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name FROM documents WHERE document_name LIKE '%CV%'",
        "question": "What are the names of documents that contain the substring 'CV'?",
        "query": "db.Documents.find( { document_name: /CV/ }, { document_name: 1 } )",
        "gpt4 answer": "db.Documents.find( { document_name: /CV/ }, { document_name: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 2653,
        "spider_question_id": 4538,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT image_name , image_url FROM images ORDER BY image_name",
        "question": "List all the image name and URLs in the order of their names.",
        "query": "db.Images.find({}, {image_name: 1, image_url: 1}).sort({image_name: 1})",
        "gpt4 answer": "db.Images.find({}, { image_name: 1, image_url: 1 }).sort({ image_name: 1 })",
        "deepseek answer": "db.Images.find({}, {image_name: 1, image_url: 1}).sort({image_name: 1})"
    },
    {
        "question_id": 2654,
        "spider_question_id": 4539,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT image_name , image_url FROM images ORDER BY image_name",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "query": "db.Images.find({}, {image_name: 1, image_url: 1}).sort({image_name: 1})",
        "gpt4 answer": "db.Images.find({}, { image_name: 1, image_url: 1 }).sort({ image_name: 1 })",
        "deepseek answer": "db.Images.find({}, {image_name: 1, image_url: 1}).sort({image_name: 1})"
    },
    {
        "question_id": 2655,
        "spider_question_id": 4540,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , role_code FROM users GROUP BY role_code",
        "question": "Find the number of users in each role.",
        "query": "db.Users.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Users.aggregate([ { $group: { _id: \"$role_code\", numberOfUsers: { $sum: 1 } } } ])",
        "deepseek answer": "db.Users.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2656,
        "spider_question_id": 4541,
        "db_id": "document_management",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , role_code FROM users GROUP BY role_code",
        "question": "What are the different role codes for users, and how many users have each?",
        "query": "db.Users.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Users.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } }, { $project: { role_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Users.aggregate([ { $group: { _id: \"$role_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2657,
        "spider_question_id": 4543,
        "db_id": "document_management",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 2",
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$document_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2658,
        "spider_question_id": 4546,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "question": "List the names of companies in descending order of market value.",
        "query": "db.Companies.find({}, {name: 1}).sort({Market_Value_billion: -1})",
        "gpt4 answer": "db.Companies.find({}, { name: 1 }).sort({ Market_Value_billion: -1 })",
        "deepseek answer": "db.Companies.find({}, {name: 1}).sort({Market_Value_billion: -1})"
    },
    {
        "question_id": 2659,
        "spider_question_id": 4547,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "question": "Sort the company names in descending order of the company's market value.",
        "query": "db.Companies.find({}, {name: 1}).sort({Market_Value_billion: -1})",
        "gpt4 answer": "db.Companies.find({}, { name: 1 }).sort({ Market_Value_billion: -1 })",
        "deepseek answer": "db.Companies.find({}, {name: 1}).sort({Market_Value_billion: -1})"
    },
    {
        "question_id": 2660,
        "spider_question_id": 4548,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
        "question": "What are the names of companies whose headquarters are not 'USA'?",
        "query": "db.Companies.find({Headquarters: {$ne: 'USA'}}, { name: 1})",
        "gpt4 answer": "db.Companies.find({ Headquarters: { $ne: 'USA' }}, { name: 1 })",
        "deepseek answer": "db.Companies.find({Headquarters: {$ne: 'USA'}}, { name: 1})"
    },
    {
        "question_id": 2661,
        "spider_question_id": 4549,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
        "question": "Find the names of the companies whose headquarters are not located in 'USA'.",
        "query": "db.Companies.find({Headquarters: {$ne: 'USA'}}, {name: 1})",
        "gpt4 answer": "db.Companies.find({ Headquarters: { $ne: 'USA' } }, { name: 1 })",
        "deepseek answer": "db.Companies.find({Headquarters: {$ne: 'USA'}}, {name: 1})"
    },
    {
        "question_id": 2662,
        "spider_question_id": 4550,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "query": "db.Companies.find({}, {name: 1, Assets_billion: 1}).sort({name: 1})",
        "gpt4 answer": "db.Companies.find({}, { name: 1, Assets_billion: 1 }).sort({ name: 1 })",
        "deepseek answer": "db.Companies.find({}, {name: 1, Assets_billion: 1}).sort({name: 1})"
    },
    {
        "question_id": 2663,
        "spider_question_id": 4551,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , Assets_billion FROM Companies ORDER BY name ASC",
        "question": "List the name and assets of each company in ascending order of company name.",
        "query": "db.Companies.find({}, {name: 1, Assets_billion: 1}).sort({name: 1})",
        "gpt4 answer": "db.Companies.find({}, { name: 1, Assets_billion: 1 }).sort({ name: 1 })",
        "deepseek answer": "db.Companies.find({}, {name: 1, Assets_billion: 1}).sort({name: 1})"
    },
    {
        "question_id": 2664,
        "spider_question_id": 4552,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Profits_billion) FROM Companies",
        "question": "What are the average profits of companies?",
        "query": "db.Companies.aggregate([ { $group: { _id: null, averageProfits: { $avg: \"$Profits_billion\" } } }, { $project: { averageProfits: 1} } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: null, averageProfits: { $avg: \"$Profits_billion\" } } }, { $project: { averageProfits: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: null, averageProfits: { $avg: \"$Profits_billion\" } } }, { $project: { averageProfits: 1} } ])"
    },
    {
        "question_id": 2665,
        "spider_question_id": 4553,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Profits_billion) FROM Companies",
        "question": "Compute the average profits companies make.",
        "query": "db.Companies.aggregate([ { $group: { _id: null, averageProfits: { $avg: \"$Profits_billion\" } } }, { $project: { averageProfits: 1 } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: null, averageProfits: { $avg: \"$Profits_billion\" } } }, { $project: { averageProfits: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: null, averageProfits: { $avg: \"$Profits_billion\" } } }, { $project: { averageProfits: 1 } } ])"
    },
    {
        "question_id": 2666,
        "spider_question_id": 4554,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Sales_billion) , min(Sales_billion) FROM Companies WHERE Industry != 'Banking'",
        "question": "What are the maximum and minimum sales of the companies whose industries are not 'Banking'.",
        "query": "db.Companies.aggregate([ { $match: { Industry: { $ne: 'Banking' } } }, { $group: { _id: null, maxSales: { $max: \"$Sales_billion\" }, minSales: { $min: \"$Sales_billion\" } } }, { $project: { maxSales: 1, minSales: 1 } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $match: { Industry: { $ne: 'Banking' } } }, { $group: { _id: null, maxSales: { $max: \"$Sales_billion\" }, minSales: { $min: \"$Sales_billion\" } } }, { $project: { maxSales: 1, minSales: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $match: { Industry: { $ne: 'Banking' } } }, { $group: { _id: null, maxSales: { $max: \"$Sales_billion\" }, minSales: { $min: \"$Sales_billion\" } } }, { $project: { maxSales: 1, minSales: 1 } } ])"
    },
    {
        "question_id": 2667,
        "spider_question_id": 4555,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Sales_billion) , min(Sales_billion) FROM Companies WHERE Industry != 'Banking'",
        "question": "Find the maximum and minimum sales of the companies that are not in the 'Banking' industry.",
        "query": "db.Companies.aggregate([ { $match: { Industry: { $ne: 'Banking' } } }, { $group: { _id: null, maxSales: { $max: \"$Sales_billion\" }, minSales: { $min: \"$Sales_billion\" } } }, { $project: { maxSales: 1, minSales: 1 } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $match: { Industry: { $ne: 'Banking' } } }, { $group: { _id: null, maxSales: { $max: \"$Sales_billion\" }, minSales: { $min: \"$Sales_billion\" } } }, { $project: { maxSales: 1, minSales: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $match: { Industry: { $ne: 'Banking' } } }, { $group: { _id: null, maxSales: { $max: \"$Sales_billion\" }, minSales: { $min: \"$Sales_billion\" } } }, { $project: { maxSales: 1, minSales: 1 } } ])"
    },
    {
        "question_id": 2668,
        "spider_question_id": 4558,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM buildings ORDER BY Height DESC",
        "question": "List the names of buildings in descending order of building height.",
        "query": "db.buildings.find({}, {name: 1}).sort({Height: -1})",
        "gpt4 answer": "db.buildings.find({}, { name: 1 }).sort({ Height: -1 })",
        "deepseek answer": "db.buildings.find({}, {name: 1}).sort({Height: -1})"
    },
    {
        "question_id": 2669,
        "spider_question_id": 4559,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM buildings ORDER BY Height DESC",
        "question": "What are the names of buildings sorted in descending order of building height?",
        "query": "db.buildings.find({}, {name: 1}).sort({Height: -1})",
        "gpt4 answer": "db.buildings.find({}, { name: 1 }).sort({ Height: -1 })",
        "deepseek answer": "db.buildings.find({}, {name: 1}).sort({Height: -1})"
    },
    {
        "question_id": 2670,
        "spider_question_id": 4560,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "question": "Find the stories of the building with the largest height.",
        "query": "db.buildings.find({}, {Stories: 1}).sort({Height: -1}).limit(1)",
        "gpt4 answer": "db.buildings.find({}, { Stories: 1 }).sort({ Height: -1 }).limit(1)",
        "deepseek answer": "db.buildings.find({}, {Stories: 1}).sort({Height: -1}).limit(1)"
    },
    {
        "question_id": 2671,
        "spider_question_id": 4561,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "question": "What is the stories of highest building?",
        "query": "db.buildings.find({}, {Stories: 1}).sort({Height: -1}).limit(1)",
        "gpt4 answer": "db.buildings.find({}, { Stories: 1 }).sort({ Height: -1 }).limit(1)",
        "deepseek answer": "db.buildings.find({}, {Stories: 1}).sort({Height: -1}).limit(1)"
    },
    {
        "question_id": 2672,
        "spider_question_id": 4563,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
        "question": "For each company, return the company name and the name of the building its office is located in.",
        "query": "db.Office_locations.aggregate([ { $lookup: { from: \"buildings\", localField: \"building_id\", foreignField: \"id\", as: \"building_info\" } }, { $lookup: { from: \"Companies\", localField: \"company_id\", foreignField: \"id\", as: \"company_info\" } }, { $unwind: \"$building_info\" }, { $unwind: \"$company_info\" }, { $project: { \"company_name\": \"$company_info.name\", \"building_name\": \"$building_info.name\" } } ])",
        "gpt4 answer": "db.Office_locations.aggregate([ { $lookup: { from: \"buildings\", localField: \"building_id\", foreignField: \"id\", as: \"building_info\" } }, { $lookup: { from: \"Companies\", localField: \"company_id\", foreignField: \"id\", as: \"company_info\" } }, { $unwind: \"$building_info\" }, { $unwind: \"$company_info\" }, { $project: { \"company_name\": \"$company_info.name\", \"building_name\": \"$building_info.name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2673,
        "spider_question_id": 4566,
        "db_id": "company_office",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the building that has the most company offices.",
        "query": "db.Office_locations.aggregate([ { $lookup: { from: \"buildings\", localField: \"building_id\", foreignField: \"id\", as: \"building\" } }, { $unwind: \"$building\" }, { $group: { _id: \"$building.id\", name: { $first: \"$building.name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Office_locations.aggregate([ { $lookup: { from: \"buildings\", localField: \"building_id\", foreignField: \"id\", as: \"building\" } }, { $unwind: \"$building\" }, { $group: { _id: \"$building.id\", name: { $first: \"$building.name\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])"
    },
    {
        "question_id": 2674,
        "spider_question_id": 4568,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC",
        "question": "Please show the names of the buildings whose status is 'on-hold', in ascending order of stories.",
        "query": "db.buildings.find( { Status: 'on-hold' }, { name: 1 } ).sort({ Stories: 1 })",
        "gpt4 answer": "db.buildings.find({ Status: 'on-hold' }, { name: 1 }).sort({ Stories: 1 })",
        "deepseek answer": "db.buildings.find( { Status: 'on-hold' }, { name: 1 } ).sort({ Stories: 1 })"
    },
    {
        "question_id": 2675,
        "spider_question_id": 4569,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC",
        "question": "Find the names of the buildings in 'on-hold' status, and sort them in ascending order of building stories.",
        "query": "db.buildings.find( { Status: 'on-hold' }, { name: 1 } ).sort({ Stories: 1 })",
        "gpt4 answer": "db.buildings.find( { Status: 'on-hold' }, { name: 1 } ).sort({ Stories: 1 })",
        "deepseek answer": "db.buildings.find( { Status: 'on-hold' }, { name: 1 } ).sort({ Stories: 1 })"
    },
    {
        "question_id": 2676,
        "spider_question_id": 4570,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $project: { Industry: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", NumberOfCompanies: { $sum: 1 } } }, { $project: { Industry: \"$_id\", NumberOfCompanies: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $project: { Industry: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2677,
        "spider_question_id": 4571,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $project: { Industry: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", NumberOfCompanies: { $sum: 1 } } }, { $project: { Industry: \"$_id\", NumberOfCompanies: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $project: { Industry: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2678,
        "spider_question_id": 4572,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Industry: \"$_id\" } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Industry: \"$_id\" } } ])"
    },
    {
        "question_id": 2679,
        "spider_question_id": 4573,
        "db_id": "company_office",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Industry: \"$_id\"} } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Industry: \"$_id\"} } ])"
    },
    {
        "question_id": 2680,
        "spider_question_id": 4574,
        "db_id": "company_office",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the industry shared by the most companies.",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Industry: \"$_id\" } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Industry: \"$_id\" } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Industry: \"$_id\" } } ])"
    },
    {
        "question_id": 2681,
        "spider_question_id": 4575,
        "db_id": "company_office",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which industry has the most companies?",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Industry: \"$_id\" } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", numOfCompanies: { $sum: 1 } } }, { $sort: { numOfCompanies: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Industry\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Industry: \"$_id\" } } ])"
    },
    {
        "question_id": 2682,
        "spider_question_id": 4576,
        "db_id": "company_office",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "question": "List the names of buildings that have no company office.",
        "query": "db.buildings.aggregate([ { $lookup: { from: \"Office_locations\", localField: \"id\", foreignField: \"building_id\", as: \"office_info\" } }, { $match: { office_info: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.buildings.aggregate([ { $lookup: { from: \"Office_locations\", localField: \"id\", foreignField: \"building_id\", as: \"office_info\" } }, { $match: { office_info: { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2683,
        "spider_question_id": 4577,
        "db_id": "company_office",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "question": "Which buildings do not have any company office? Give me the building names.",
        "query": "db.buildings.aggregate([ { $lookup: { from: \"Office_locations\", localField: \"id\", foreignField: \"building_id\", as: \"offices\" } }, { $match: { \"offices\": { $size: 0 } } }, { $project: { \"name\": 1, \"_id\": 0 } } ])",
        "gpt4 answer": "db.buildings.aggregate([ { $lookup: { from: \"Office_locations\", localField: \"id\", foreignField: \"building_id\", as: \"offices\" } }, { $match: { \"offices\": { $size: 0 } } }, { $project: { \"name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2684,
        "spider_question_id": 4578,
        "db_id": "company_office",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Industry FROM Companies WHERE Headquarters = 'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters = 'China'",
        "question": "Show the industries shared by companies whose headquarters are 'USA' and companies whose headquarters are 'China'.",
        "query": "db.Companies.aggregate([ { $facet: { \"USA\": [ { $match: { Headquarters: \"USA\" } }, { $group: { _id: \"$Industry\" } } ], \"China\": [ { $match: { Headquarters: \"China\" } }, { $group: { _id: \"$Industry\" } } ] } }, { $project: { commonIndustries: { $setIntersection: [\"$USA._id\", \"$China._id\"] } } }, { $unwind: \"$commonIndustries\" }, { $replaceRoot: { newRoot: { Industry: \"$commonIndustries\" }}} ])",
        "gpt4 answer": "db.Companies.aggregate([ { $facet: { \"USA\": [ { $match: { Headquarters: \"USA\" } }, { $group: { _id: \"$Industry\" } } ], \"China\": [ { $match: { Headquarters: \"China\" } }, { $group: { _id: \"$Industry\" } } ] } }, { $project: { commonIndustries: { $setIntersection: [\"$USA._id\", \"$China._id\"] } } }, { $unwind: \"$commonIndustries\" }, { $replaceRoot: { newRoot: { Industry: \"$commonIndustries\" }}} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2685,
        "spider_question_id": 4579,
        "db_id": "company_office",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Industry FROM Companies WHERE Headquarters = 'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters = 'China'",
        "question": "Which industries have both companies with headquarter in 'USA' and companies with headquarter in 'China'?",
        "query": "db.Companies.aggregate([ { $match: { $or: [ { Headquarters: \"USA\" }, { Headquarters: \"China\" } ] } }, { $group: { _id: \"$Industry\", headquarters: { $addToSet: \"$Headquarters\" } } }, { $match: { headquarters: { $all: [\"USA\", \"China\"] } } }, { $project: { Industry: \"$_id\" } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $match: { $or: [{ Headquarters: 'USA' }, { Headquarters: 'China' }] } }, { $group: { _id: \"$Industry\", countries: { $addToSet: \"$Headquarters\" } } }, { $match: { countries: { $all: [\"USA\", \"China\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $match: { $or: [ { Headquarters: \"USA\" }, { Headquarters: \"China\" } ] } }, { $group: { _id: \"$Industry\", headquarters: { $addToSet: \"$Headquarters\" } } }, { $match: { headquarters: { $all: [\"USA\", \"China\"] } } }, { $project: { Industry: \"$_id\" } } ])"
    },
    {
        "question_id": 2686,
        "spider_question_id": 4582,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2",
        "question": "Show the headquarters shared by more than two companies.",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } }}, { $match: { count: { $gt: 2 } }}, { $project: { Headquarters: \"$_id\" }} ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 2687,
        "spider_question_id": 4583,
        "db_id": "company_office",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2",
        "question": "Which headquarter locations are used by more than 2 companies?",
        "query": "db.Companies.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "gpt4 answer": "db.Companies.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])",
        "deepseek answer": "db.Companies.aggregate([ { $group: { _id: \"$Headquarters\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Headquarters: \"$_id\" } } ])"
    },
    {
        "question_id": 2688,
        "spider_question_id": 4585,
        "db_id": "solvency_ii",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "question": "List the name of products in ascending order of price.",
        "query": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: 1})",
        "gpt4 answer": "db.Products.find({}, { Product_Name: 1 }).sort({ Product_Price: 1 })",
        "deepseek answer": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: 1})"
    },
    {
        "question_id": 2689,
        "spider_question_id": 4586,
        "db_id": "solvency_ii",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Name , Product_Type_Code FROM Products",
        "question": "What are the names and type codes of products?",
        "query": "db.Products.find({}, {Product_Name: 1, Product_Type_Code: 1})",
        "gpt4 answer": "db.Products.find({}, { Product_Name: 1, Product_Type_Code: 1 })",
        "deepseek answer": "db.Products.find({}, {Product_Name: 1, Product_Type_Code: 1})"
    },
    {
        "question_id": 2690,
        "spider_question_id": 4587,
        "db_id": "solvency_ii",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Price FROM Products WHERE Product_Name = 'Dining' OR Product_Name = 'Trading Policy'",
        "question": "Show the prices of the products named 'Dining' or 'Trading Policy'.",
        "query": "db.Products.find( { Product_Name: { $in: [\"Dining\", \"Trading Policy\"] } }, { Product_Price: 1 } )",
        "gpt4 answer": "db.Products.find({ Product_Name: { $in: ['Dining', 'Trading Policy'] } }, { Product_Price: 1 })",
        "deepseek answer": "db.Products.find( { Product_Name: { $in: [\"Dining\", \"Trading Policy\"] } }, { Product_Price: 1 } )"
    },
    {
        "question_id": 2691,
        "spider_question_id": 4588,
        "db_id": "solvency_ii",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Product_Price) FROM Products",
        "question": "What is the average price for products?",
        "query": "db.Products.aggregate([ { $group: { _id: null, averagePrice: { $avg: \"$Product_Price\" } } }, { $project: { averagePrice: 1} } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: null, avgPrice: { $avg: \"$Product_Price\" } } }, { $project: { avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: null, averagePrice: { $avg: \"$Product_Price\" } } }, { $project: { averagePrice: 1} } ])"
    },
    {
        "question_id": 2692,
        "spider_question_id": 4589,
        "db_id": "solvency_ii",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
        "question": "What is the name of the product with the highest price?",
        "query": "db.Products.find({}, { Product_Name: 1 }).sort({ Product_Price: -1 }).limit(1)",
        "gpt4 answer": "db.Products.find({}, { Product_Name: 1 }).sort({ Product_Price: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2693,
        "spider_question_id": 4590,
        "db_id": "solvency_ii",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "question": "Show different type codes of products and the number of products with each type code.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } }, { $project: { Product_Type_Code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2694,
        "spider_question_id": 4591,
        "db_id": "solvency_ii",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common type code across products.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { product_type_code: \"$_id\" } }])",
        "gpt4 answer": "db.Products.aggregate([ { $group: {_id: \"$Product_Type_Code\", count: {$sum: 1}} }, { $sort: {count: -1} }, { $limit: 1 }, { $project: {_id: 1} } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { product_type_code: \"$_id\" } }])"
    },
    {
        "question_id": 2695,
        "spider_question_id": 4592,
        "db_id": "solvency_ii",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2",
        "question": "Show the product type codes that have at least two products.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Product_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Product_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2696,
        "spider_question_id": 4593,
        "db_id": "solvency_ii",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", highPrice: { $max: \"$Product_Price\" }, lowPrice: { $min: \"$Product_Price\" } } }, { $match: { highPrice: { $gt: 4500 }, lowPrice: { $lt: 3000 } } }, { $project: { Product_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Type_Code\", highPrice: { $max: \"$Product_Price\" }, lowPrice: { $min: \"$Product_Price\" } } }, { $match: { highPrice: { $gt: 4500 }, lowPrice: { $lt: 3000 } } }, { $project: { Product_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 2697,
        "spider_question_id": 4598,
        "db_id": "solvency_ii",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
        "question": "List the names of products that are not in any event.",
        "query": "db.Products.find( { Product_ID: { $nin: db.Products_in_Events.distinct(\"Product_ID\") } }, { Product_Name: 1 } )",
        "gpt4 answer": "db.Products.find( { \"Product_ID\": { \"$nin\": db.Products_in_Events.distinct(\"Product_ID\") } }, { \"Product_Name\": 1, \"_id\": 0 } )",
        "deepseek answer": "db.Products.find( { Product_ID: { $nin: db.Products_in_Events.distinct(\"Product_ID\") } }, { Product_Name: 1 } )"
    },
    {
        "question_id": 2698,
        "spider_question_id": 4600,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM artwork ORDER BY Name ASC",
        "question": "List the name of artworks in ascending alphabetical order.",
        "query": "db.artwork.find({}, { Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.artwork.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.artwork.find({}, { Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 2699,
        "spider_question_id": 4601,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM artwork WHERE TYPE != 'Program Talent Show'",
        "question": "List the name of artworks whose type is not 'Program Talent Show'.",
        "query": "db.artwork.find( { Type: { $ne: 'Program Talent Show' } }, { Name: 1 } )",
        "gpt4 answer": "db.artwork.find({ Type: { $ne: 'Program Talent Show' } }, { Name: 1 })",
        "deepseek answer": "db.artwork.find( { Type: { $ne: 'Program Talent Show' } }, { Name: 1 } )"
    },
    {
        "question_id": 2700,
        "spider_question_id": 4602,
        "db_id": "entertainment_awards",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Festival_Name , LOCATION FROM festival_detail",
        "question": "What are the names and locations of festivals?",
        "query": "db.festival_detail.find({}, {Festival_Name: 1, Location: 1})",
        "gpt4 answer": "db.festival_detail.find({}, { Festival_Name: 1, Location: 1 })",
        "deepseek answer": "db.festival_detail.find({}, {Festival_Name: 1, Location: 1})"
    },
    {
        "question_id": 2701,
        "spider_question_id": 4603,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "query": "db.festival_detail.find({}, {Chair_Name: 1}).sort({Year: 1})",
        "gpt4 answer": "db.festival_detail.find({}, { Chair_Name: 1 }).sort({ Year: 1 })",
        "deepseek answer": "db.festival_detail.find({}, {Chair_Name: 1}).sort({Year: 1})"
    },
    {
        "question_id": 2702,
        "spider_question_id": 4604,
        "db_id": "entertainment_awards",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "question": "What is the location of the festival with the largest number of audience?",
        "query": "db.festival_detail.find({}, { Location: 1}).sort({Num_of_Audience: -1}).limit(1)",
        "gpt4 answer": "db.festival_detail.find({}, { Location: 1 }).sort({ Num_of_Audience: -1 }).limit(1)",
        "deepseek answer": "db.festival_detail.find({}, { Location: 1}).sort({Num_of_Audience: -1}).limit(1)"
    },
    {
        "question_id": 2703,
        "spider_question_id": 4605,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007",
        "question": "What are the names of festivals held in year 2007?",
        "query": "db.festival_detail.find({Year: 2007}, {Festival_Name: 1})",
        "gpt4 answer": "db.festival_detail.find({ Year: 2007 }, { Festival_Name: 1 })",
        "deepseek answer": "db.festival_detail.find({Year: 2007}, {Festival_Name: 1})"
    },
    {
        "question_id": 2704,
        "spider_question_id": 4606,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Num_of_Audience) FROM festival_detail",
        "question": "What is the average number of audience for festivals?",
        "query": "db.festival_detail.aggregate([ { $group: { _id: null, averageAudience: { $avg: \"$Num_of_Audience\" } } } ,{ $project: { averageAudience: 1 } }])",
        "gpt4 answer": "db.festival_detail.aggregate([ { $group: { _id: null, averageNumOfAudience: { $avg: \"$Num_of_Audience\" } } }, { $project: { averageNumOfAudience: 1 } } ])",
        "deepseek answer": "db.festival_detail.aggregate([ { $group: { _id: null, averageAudience: { $avg: \"$Num_of_Audience\" } } } ,{ $project: { averageAudience: 1 } }])"
    },
    {
        "question_id": 2705,
        "spider_question_id": 4608,
        "db_id": "entertainment_awards",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID",
        "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "query": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $project: { \"artwork_name\": \"$artwork_info.Name\", \"festival_name\": \"$festival_info.Festival_Name\", \"_id\": 0 } }, { $unwind: \"$artwork_name\" }, { $unwind: \"$festival_name\" } ])",
        "gpt4 answer": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $project: { \"artwork_name\": \"$artwork_info.Name\", \"festival_name\": \"$festival_info.Festival_Name\", \"_id\": 0 } }, { $unwind: \"$artwork_name\" }, { $unwind: \"$festival_name\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2706,
        "spider_question_id": 4609,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "query": "db.artwork.aggregate([ { $lookup: { from: \"nomination\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"nomination_info\" } }, { $unwind: \"$nomination_info\" }, { $lookup: { from: \"festival_detail\", localField: \"nomination_info.Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$festival_info\" }, { $match: { \"festival_info.Year\": 2007 } }, { $group: { _id: \"$Type\" } }, { $project: { Type: \"$_id\" } } ])",
        "gpt4 answer": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $match: { \"festival_info.Year\": 2007 } }, { $unwind: \"$artwork_info\" }, { $group: { _id: \"$artwork_info.Type\" } }, { $project: { Type: \"$_id\" } } ])",
        "deepseek answer": "db.artwork.aggregate([ { $lookup: { from: \"nomination\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"nomination_info\" } }, { $unwind: \"$nomination_info\" }, { $lookup: { from: \"festival_detail\", localField: \"nomination_info.Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$festival_info\" }, { $match: { \"festival_info.Year\": 2007 } }, { $group: { _id: \"$Type\" } }, { $project: { Type: \"$_id\" } } ])"
    },
    {
        "question_id": 2707,
        "spider_question_id": 4610,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year",
        "question": "Show the names of artworks in ascending order of the year they are nominated in.",
        "query": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$artwork_info\" }, { $unwind: \"$festival_info\" }, { $project: { Name: \"$artwork_info.Name\"} }, { $sort: { Year: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$artwork_info\" }, { $unwind: \"$festival_info\" }, { $project: { Name: \"$artwork_info.Name\"} }, { $sort: { Year: 1 } } ])"
    },
    {
        "question_id": 2708,
        "spider_question_id": 4611,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = 'Program Talent Show'",
        "question": "Show the names of festivals that have nominated artworks of type 'Program Talent Show'.",
        "query": "db.festival_detail.aggregate([ { $lookup: { from: \"nomination\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"nomination_info\" } }, { $unwind: \"$nomination_info\" }, { $lookup: { from: \"artwork\", localField: \"nomination_info.Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $unwind: \"$artwork_info\" }, { $match: { \"artwork_info.Type\": \"Program Talent Show\" } }, { $project: { \"_id\": 0, \"Festival_Name\": 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.festival_detail.aggregate([ { $lookup: { from: \"nomination\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"nomination_info\" } }, { $unwind: \"$nomination_info\" }, { $lookup: { from: \"artwork\", localField: \"nomination_info.Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $unwind: \"$artwork_info\" }, { $match: { \"artwork_info.Type\": \"Program Talent Show\" } }, { $project: { \"_id\": 0, \"Festival_Name\": 1 } } ])"
    },
    {
        "question_id": 2709,
        "spider_question_id": 4612,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Festival_ID , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "query": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$festival_info\" }, { $group: { _id: \"$Festival_ID\", Festival_Name: { $first: \"$festival_info.Festival_Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Festival_ID: \"$_id\", Festival_Name: 1 } } ])",
        "gpt4 answer": "db.nomination.aggregate([ { $group: { _id: \"$Festival_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"festival_detail\", localField: \"_id\", foreignField: \"Festival_ID\", as: \"festival\" } }, { $unwind: \"$festival\" }, { $project: { Festival_ID: \"$_id\", Festival_Name: \"$festival.Festival_Name\" } } ])",
        "deepseek answer": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$festival_info\" }, { $group: { _id: \"$Festival_ID\", Festival_Name: { $first: \"$festival_info.Festival_Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Festival_ID: \"$_id\", Festival_Name: 1 } } ])"
    },
    {
        "question_id": 2710,
        "spider_question_id": 4613,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Festival_ID , T3.Festival_Name , COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "query": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$festival_info\" }, { $group: { _id: \"$Festival_ID\", Festival_Name: { $first: \"$festival_info.Festival_Name\" }, count: { $sum: 1 } } }, { $project: { _id: 1, Festival_Name: 1, count: 1 } } ])",
        "gpt4 answer": "db.nomination.aggregate([ { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival\" } }, { $unwind: \"$festival\" }, { $group: { _id: \"$Festival_ID\", Festival_Name: { $first: \"$festival.Festival_Name\" }, Num_of_Artworks: { $sum: 1 } } }, { $project: { Festival_ID: \"$_id\", Festival_Name: 1, Num_of_Artworks: 1 } } ])",
        "deepseek answer": "db.nomination.aggregate([ { $lookup: { from: \"artwork\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"artwork_info\" } }, { $lookup: { from: \"festival_detail\", localField: \"Festival_ID\", foreignField: \"Festival_ID\", as: \"festival_info\" } }, { $unwind: \"$festival_info\" }, { $group: { _id: \"$Festival_ID\", Festival_Name: { $first: \"$festival_info.Festival_Name\" }, count: { $sum: 1 } } }, { $project: { _id: 1, Festival_Name: 1, count: 1 } } ])"
    },
    {
        "question_id": 2711,
        "spider_question_id": 4614,
        "db_id": "entertainment_awards",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , COUNT(*) FROM artwork GROUP BY TYPE",
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "query": "db.artwork.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.artwork.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $project: { Type: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.artwork.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2712,
        "spider_question_id": 4615,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of artworks.",
        "query": "db.artwork.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 },{ $project: { type: \"$_id\" } } ])",
        "gpt4 answer": "db.artwork.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.artwork.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 },{ $project: { type: \"$_id\" } } ])"
    },
    {
        "question_id": 2713,
        "spider_question_id": 4616,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1",
        "question": "List the year in which there are more than one festivals.",
        "query": "db.festival_detail.aggregate([ { $group: { _id: \"$Year\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Year: \"$_id\" } } ])",
        "gpt4 answer": "db.festival_detail.aggregate([ { $group: { _id: \"$Year\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Year: \"$_id\" } } ])",
        "deepseek answer": "db.festival_detail.aggregate([ { $group: { _id: \"$Year\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Year: \"$_id\" } } ])"
    },
    {
        "question_id": 2714,
        "spider_question_id": 4617,
        "db_id": "entertainment_awards",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)",
        "question": "List the name of artworks that are not nominated.",
        "query": "db.artwork.aggregate([ { $lookup: { from: \"nomination\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"nominations\" } }, { $match: { nominations: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.artwork.aggregate([ { $lookup: { from: \"nomination\", localField: \"Artwork_ID\", foreignField: \"Artwork_ID\", as: \"nominations\" } }, { $match: { nominations: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2715,
        "spider_question_id": 4618,
        "db_id": "entertainment_awards",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
        "question": "Show the number of audience in year 2008 or 2010.",
        "query": "db.festival_detail.find( { Year: { $in: [2008, 2010] } }, { Num_of_Audience: 1 } )",
        "gpt4 answer": "db.festival_detail.find( { Year: { $in: [2008, 2010] } }, { Num_of_Audience: 1 } )",
        "deepseek answer": "db.festival_detail.find( { Year: { $in: [2008, 2010] } }, { Num_of_Audience: 1 } )"
    },
    {
        "question_id": 2716,
        "spider_question_id": 4619,
        "db_id": "entertainment_awards",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "query": "db.festival_detail.aggregate([ { $group: { _id: null, total_audience: { $sum: \"$Num_of_Audience\" } } }, { $project: { total_audience: 1 } } ])",
        "gpt4 answer": "db.festival_detail.aggregate([ { $group: { _id: null, total_audience: { $sum: \"$Num_of_Audience\" } } }, { $project: { total_audience: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2717,
        "spider_question_id": 4623,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT premises_type , premise_details FROM premises ORDER BY premises_type",
        "question": "Find the types and details for all premises and order by the premise type.",
        "query": "db.Premises.find({}, { premises_type: 1, premise_details: 1}).sort({premises_type: 1})",
        "gpt4 answer": "db.Premises.find({}, { premises_type: 1, premise_details: 1 }).sort({ premises_type: 1 })",
        "deepseek answer": "db.Premises.find({}, { premises_type: 1, premise_details: 1}).sort({premises_type: 1})"
    },
    {
        "question_id": 2718,
        "spider_question_id": 4624,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT premises_type , count(*) FROM premises GROUP BY premises_type",
        "question": "Show each premise type and the number of premises in that type.",
        "query": "db.Premises.aggregate([ { $group: { _id: '$premises_type', count: { $sum: 1 } } }, { $project: { premises_type: '$_id', count: 1 } } ])",
        "gpt4 answer": "db.Premises.aggregate([ { $group: { _id: '$premises_type', count: { $sum: 1 } } }, { $project: { premises_type: '$_id', count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2719,
        "spider_question_id": 4625,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "query": "db.Mailshot_Campaigns.aggregate([ { $group: { _id: \"$product_category\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Mailshot_Campaigns.aggregate([ { $group: { _id: \"$product_category\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2720,
        "spider_question_id": 4626,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "question": "Show the name and phone of the customer without any mailshot.",
        "query": "db.Customers.find( { customer_id: { $nin: db.Mailshot_Customers.distinct(\"customer_id\") } }, { customer_name: 1, customer_phone: 1 } )",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Mailshot_Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"mailshots\" } }, { $match: { mailshots: { $size: 0 } } }, { $project: { customer_name: 1, customer_phone: 1 } } ])",
        "deepseek answer": "db.Customers.find( { customer_id: { $nin: db.Mailshot_Customers.distinct(\"customer_id\") } }, { customer_name: 1, customer_phone: 1 } )"
    },
    {
        "question_id": 2721,
        "spider_question_id": 4628,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "query": "db.Mailshot_Customers.aggregate([ { $group: { _id: \"$outcome_code\", count: { $sum: 1 } } }, { $project: { outcome_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Mailshot_Customers.aggregate([ { $group: { _id: \"$outcome_code\", count: { $sum: 1 } } }, { $project: { outcome_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2722,
        "spider_question_id": 4632,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
        "question": "Show the premise type and address type code for all customer addresses.",
        "query": "db.Customer_Addresses.aggregate([ { $lookup: { from: \"Premises\", localField: \"premise_id\", foreignField: \"premise_id\", as: \"premise_details\" } }, { $project: { premises_type: \"$premise_details.premises_type\", address_type_code: 1 } }, { $unwind: \"$premises_type\" } ])",
        "gpt4 answer": "db.Customer_Addresses.aggregate([ { $lookup: { from: \"Premises\", localField: \"premise_id\", foreignField: \"premise_id\", as: \"premise_details\" } }, { $project: { premises_type: \"$premise_details.premises_type\", address_type_code: 1 } }, { $unwind: \"$premises_type\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2723,
        "spider_question_id": 4634,
        "db_id": "customers_campaigns_ecommerce",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT order_shipping_charges , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "db.Customer_Orders.find( { order_status_code: { $in: ['Cancelled', 'Paid'] } }, { order_shipping_charges: 1, customer_id: 1 } )",
        "gpt4 answer": "db.Customer_Orders.find( { $or: [{ order_status_code: 'Cancelled' }, { order_status_code: 'Paid' }] }, { order_shipping_charges: 1, customer_id: 1 } )",
        "deepseek answer": "db.Customer_Orders.find( { order_status_code: { $in: ['Cancelled', 'Paid'] } }, { order_shipping_charges: 1, customer_id: 1 } )"
    },
    {
        "question_id": 2724,
        "spider_question_id": 4640,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT CName FROM COURSE WHERE Credits = 1",
        "question": "List all names of courses with 1 credit?",
        "query": "db.Course.find({Credits: 1}, {CName: 1})",
        "gpt4 answer": "db.Course.find({ Credits: 1 }, { CName: 1 })",
        "deepseek answer": "db.Course.find({Credits: 1}, {CName: 1})"
    },
    {
        "question_id": 2725,
        "spider_question_id": 4641,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT CName FROM COURSE WHERE Credits = 1",
        "question": "What are the names of courses with 1 credit?",
        "query": "db.Course.find({Credits: 1}, {CName: 1})",
        "gpt4 answer": "db.Course.find({ Credits: 1 }, { CName: 1 })",
        "deepseek answer": "db.Course.find({Credits: 1}, {CName: 1})"
    },
    {
        "question_id": 2726,
        "spider_question_id": 4646,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
        "question": "What are the phones of departments in Room 268?",
        "query": "db.Department.find({ Room: \"268\" }, { DPhone: 1 })",
        "gpt4 answer": "db.Department.find({ Room: \"268\" }, { DPhone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2727,
        "spider_question_id": 4647,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
        "question": "Give the phones for departments in room 268.",
        "query": "db.Department.find({ Room: \"268\" }, { DPhone: 1 })",
        "gpt4 answer": "db.Department.find({ Room: \"268\" }, { DPhone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2728,
        "spider_question_id": 4648,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = 'B'",
        "question": "Find the number of students that have at least one grade 'B'.",
        "query": "db.Enrolled_in.aggregate([ { $match: { Grade: 'B' } }, { $group: { _id: \"$StuID\" } }, { $count: \"numberOfStudents\" } ])",
        "gpt4 answer": "db.Enrolled_in.aggregate([ { $match: { Grade: 'B' } }, { $group: { _id: \"$StuID\" } }, { $count: \"numberOfStudents\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2729,
        "spider_question_id": 4649,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = 'B'",
        "question": "How many students have had at least one 'B' grade?",
        "query": "db.Enrolled_in.aggregate([ { $match: { Grade: 'B' } }, { $group: { _id: \"$StuID\" } }, { $count: \"NumStudentsWithB\" } ])",
        "gpt4 answer": "db.Enrolled_in.aggregate([ { $match: { Grade: 'B' } }, { $group: { _id: \"$StuID\" } }, { $count: \"NumStudentsWithB\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2730,
        "spider_question_id": 4650,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
        "question": "Find the max and min grade point for all letter grade.",
        "query": "db.Gradeconversion.aggregate([ { $group: { _id: null, max_gradepoint: { $max: \"$gradepoint\" }, min_gradepoint: { $min: \"$gradepoint\" } } }, { $project: { max_gradepoint: 1, min_gradepoint: 1 } } ])",
        "gpt4 answer": "db.Gradeconversion.aggregate([ { $group: { _id: null, maxGradePoint: { $max: \"$gradepoint\" }, minGradePoint: { $min: \"$gradepoint\" } } }, { $project: { maxGradePoint: 1, minGradePoint: 1 } } ])",
        "deepseek answer": "db.Gradeconversion.aggregate([ { $group: { _id: null, max_gradepoint: { $max: \"$gradepoint\" }, min_gradepoint: { $min: \"$gradepoint\" } } }, { $project: { max_gradepoint: 1, min_gradepoint: 1 } } ])"
    },
    {
        "question_id": 2731,
        "spider_question_id": 4651,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(gradepoint) , min(gradepoint) FROM GRADECONVERSION",
        "question": "What are the maximum and minumum grade points?",
        "query": "db.Gradeconversion.aggregate([ { $group: { _id: null, max_gradepoint: { $max: \"$gradepoint\" }, min_gradepoint: { $min: \"$gradepoint\" } } }, { $project: { max_gradepoint: 1, min_gradepoint: 1 } } ])",
        "gpt4 answer": "db.Gradeconversion.aggregate([ { $group: { _id: null, maxGradePoint: { $max: \"$gradepoint\" }, minGradePoint: { $min: \"$gradepoint\" } } }, { $project: { maxGradePoint: 1, minGradePoint: 1 } } ])",
        "deepseek answer": "db.Gradeconversion.aggregate([ { $group: { _id: null, max_gradepoint: { $max: \"$gradepoint\" }, min_gradepoint: { $min: \"$gradepoint\" } } }, { $project: { max_gradepoint: 1, min_gradepoint: 1 } } ])"
    },
    {
        "question_id": 2732,
        "spider_question_id": 4654,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Fname , Lname FROM FACULTY WHERE sex = 'M' AND Building = 'NEB'",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "db.Faculty.find( { \"Sex\": \"M\", \"Building\": \"NEB\" }, { \"Fname\": 1, \"Lname\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.Faculty.find({ Sex: \"M\", Building: \"NEB\" }, { Fname: 1, Lname: 1 })",
        "deepseek answer": "db.Faculty.find( { \"Sex\": \"M\", \"Building\": \"NEB\" }, { \"Fname\": 1, \"Lname\": 1, \"_id\": 0 } )"
    },
    {
        "question_id": 2733,
        "spider_question_id": 4655,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Fname , Lname FROM FACULTY WHERE sex = 'M' AND Building = 'NEB'",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "db.Faculty.find({ Sex: 'M', Building: 'NEB' }, { Fname: 1, Lname: 1 })",
        "gpt4 answer": "db.Faculty.find({Sex: 'M', Building: 'NEB'}, { Fname: 1, Lname: 1})",
        "deepseek answer": "db.Faculty.find({ Sex: 'M', Building: 'NEB' }, { Fname: 1, Lname: 1 })"
    },
    {
        "question_id": 2734,
        "spider_question_id": 4656,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Room FROM FACULTY WHERE Rank = 'Professor' AND Building = 'NEB'",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "query": "db.Faculty.find( { Rank: 'Professor', Building: 'NEB' }, { Room: 1 } )",
        "gpt4 answer": "db.Faculty.find({ Rank: 'Professor', Building: 'NEB' }, { Room: 1 })",
        "deepseek answer": "db.Faculty.find( { Rank: 'Professor', Building: 'NEB' }, { Room: 1 } )"
    },
    {
        "question_id": 2735,
        "spider_question_id": 4657,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Room FROM FACULTY WHERE Rank = 'Professor' AND Building = 'NEB'",
        "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "query": "db.Faculty.find({ Rank: 'Professor', Building: 'NEB' }, { Room: 1 })",
        "gpt4 answer": "db.Faculty.find({Rank: 'Professor', Building: 'NEB'}, { Room: 1})",
        "deepseek answer": "db.Faculty.find({ Rank: 'Professor', Building: 'NEB' }, { Room: 1 })"
    },
    {
        "question_id": 2736,
        "spider_question_id": 4658,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'",
        "question": "Find the department name that is in Building 'Mergenthaler'.",
        "query": "db.Department.find({Building: 'Mergenthaler'}, {DName: 1})",
        "gpt4 answer": "db.Department.find({ Building: 'Mergenthaler' }, { DName: 1 })",
        "deepseek answer": "db.Department.find({Building: 'Mergenthaler'}, {DName: 1})"
    },
    {
        "question_id": 2737,
        "spider_question_id": 4659,
        "db_id": "college_3",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'",
        "question": "What is the name of the department in the Building Mergenthaler?",
        "query": "db.Department.find({Building: 'Mergenthaler'}, {DName: 1})",
        "gpt4 answer": "db.Department.find({ Building: 'Mergenthaler' }, { DName: 1 })",
        "deepseek answer": "db.Department.find({Building: 'Mergenthaler'}, {DName: 1})"
    },
    {
        "question_id": 2738,
        "spider_question_id": 4666,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LName FROM STUDENT WHERE Sex = 'F' ORDER BY Age DESC",
        "question": "Find the last name of female (sex is F) students in the descending order of age.",
        "query": "db.Student.find({ Sex: 'F' }, { LName: 1 }).sort({ Age: -1 })",
        "gpt4 answer": "db.Student.find({Sex: 'F'}, {LName: 1}).sort({Age: -1})",
        "deepseek answer": "db.Student.find({ Sex: 'F' }, { LName: 1 }).sort({ Age: -1 })"
    },
    {
        "question_id": 2739,
        "spider_question_id": 4667,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LName FROM STUDENT WHERE Sex = 'F' ORDER BY Age DESC",
        "question": "What are the last names of female students, ordered by age descending?",
        "query": "db.Student.find({ Sex: 'F' }, { LName: 1 }).sort({ Age: -1 })",
        "gpt4 answer": "db.Student.find({ Sex: 'F' }, { LName: 1 }).sort({ Age: -1 })",
        "deepseek answer": "db.Student.find({ Sex: 'F' }, { LName: 1 }).sort({ Age: -1 })"
    },
    {
        "question_id": 2740,
        "spider_question_id": 4668,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Lname FROM FACULTY WHERE Building = 'Barton' ORDER BY Lname",
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "query": "db.Faculty.find({Building: 'Barton'}, {Lname: 1}).sort({Lname: 1})",
        "gpt4 answer": "db.Faculty.find({ Building: 'Barton' }, { Lname: 1 }).sort({ Lname: 1 })",
        "deepseek answer": "db.Faculty.find({Building: 'Barton'}, {Lname: 1}).sort({Lname: 1})"
    },
    {
        "question_id": 2741,
        "spider_question_id": 4669,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Lname FROM FACULTY WHERE Building = 'Barton' ORDER BY Lname",
        "question": "What are the last names of faculty in building Barton, sorted by last name?",
        "query": "db.Faculty.find({Building: 'Barton'}, {Lname: 1}).sort({Lname: 1})",
        "gpt4 answer": "db.Faculty.find({ Building: 'Barton' }, { Lname: 1 }).sort({ Lname: 1 })",
        "deepseek answer": "db.Faculty.find({Building: 'Barton'}, {Lname: 1}).sort({Lname: 1})"
    },
    {
        "question_id": 2742,
        "spider_question_id": 4672,
        "db_id": "college_3",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the department that has the biggest number of students minored in?",
        "query": "db.Department.aggregate([ { $lookup: { from: \"Minor_in\", localField: \"DNO\", foreignField: \"DNO\", as: \"Minors\" } }, { $unwind: \"$Minors\" }, { $group: { _id: \"$DNO\", DName: { $first: \"$DName\" }, NumberOfMinors: { $sum: 1 } } }, { $sort: { NumberOfMinors: -1 } }, { $limit: 1 }, { $project: { DName: 1 } } ])",
        "gpt4 answer": "db.Department.aggregate([ { $lookup: { from: \"Minor_in\", localField: \"DNO\", foreignField: \"DNO\", as: \"Minors\" } }, { $unwind: \"$Minors\" }, { $group: { _id: \"$DNO\", DName: { $first: \"$DName\" }, NumberOfMinors: { $sum: 1 } } }, { $sort: { NumberOfMinors: -1 } }, { $limit: 1 }, { $project: { DName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2743,
        "spider_question_id": 4674,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
        "question": "Find the name of the department that has no students minored in?",
        "query": "db.Department.find({ DNO: { $nin: db.Minor_in.distinct(\"DNO\") } }, { DName: 1 })",
        "gpt4 answer": "db.Department.aggregate([ { $lookup: { from: \"Minor_in\", localField: \"DNO\", foreignField: \"DNO\", as: \"minored_students\" } }, { $match: { minored_students: { $size: 0 } } }, { $project: { DName: 1 } } ])",
        "deepseek answer": "db.Department.find({ DNO: { $nin: db.Minor_in.distinct(\"DNO\") } }, { DName: 1 })"
    },
    {
        "question_id": 2744,
        "spider_question_id": 4675,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
        "question": "What is the name of the department htat has no students minoring in it?",
        "query": "db.Department.aggregate([ { $lookup: { from: \"Minor_in\", localField: \"DNO\", foreignField: \"DNO\", as: \"minoring\" } }, { $match: { \"minoring\": { $size: 0 } } }, { $project: { DName: 1 } } ])",
        "gpt4 answer": "db.Department.aggregate([ { $lookup: { from: \"Minor_in\", localField: \"DNO\", foreignField: \"DNO\", as: \"minoring\" } }, { $match: { \"minoring\": { $size: 0 } } }, { $project: { DName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2745,
        "spider_question_id": 4678,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
        "question": "Find the rank of the faculty that the fewest faculties belong to.",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Rank: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Rank: \"$_id\" } } ])"
    },
    {
        "question_id": 2746,
        "spider_question_id": 4679,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the least common faculty rank?",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Rank: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Rank: \"$_id\" } } ])"
    },
    {
        "question_id": 2747,
        "spider_question_id": 4680,
        "db_id": "college_3",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "query": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"CoursesTaught\" } }, { $project: { Fname: 1, Lname: 1, numCourses: { $size: \"$CoursesTaught\" } } }, { $sort: { numCourses: -1 } }, { $limit: 3 }, { $project: { Fname: 1, Lname: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"CoursesTaught\" } }, { $project: { Fname: 1, Lname: 1, numCourses: { $size: \"$CoursesTaught\" } } }, { $sort: { numCourses: -1 } }, { $limit: 3 }, { $project: { Fname: 1, Lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2748,
        "spider_question_id": 4681,
        "db_id": "college_3",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the full names of the 3 instructors who teach the most courses?",
        "query": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"CoursesTaught\" } }, { $project: { Fname: 1, Lname: 1, numCourses: { $size: \"$CoursesTaught\" } } }, { $sort: { numCourses: -1 } }, { $limit: 3 }, { $project: { Fname: 1, Lname: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"CoursesTaught\" } }, { $project: { Fname: 1, Lname: 1, numCourses: { $size: \"$CoursesTaught\" } } }, { $sort: { numCourses: -1 } }, { $limit: 3 }, { $project: { Fname: 1, Lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2749,
        "spider_question_id": 4682,
        "db_id": "college_3",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "query": "db.Course.aggregate([ { $lookup: { from: \"Faculty\", localField: \"Instructor\", foreignField: \"FacID\", as: \"instructor_info\" } }, { $unwind: \"$instructor_info\" }, { $group: { _id: \"$instructor_info.FacID\", building: { $first: \"$instructor_info.Building\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { building: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Course.aggregate([ { $lookup: { from: \"Faculty\", localField: \"Instructor\", foreignField: \"FacID\", as: \"instructor_info\" } }, { $unwind: \"$instructor_info\" }, { $group: { _id: \"$instructor_info.FacID\", building: { $first: \"$instructor_info.Building\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { building: 1 } } ])"
    },
    {
        "question_id": 2750,
        "spider_question_id": 4685,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5",
        "question": "Give the names of the courses with at least five enrollments.",
        "query": "db.Course.aggregate([ { $lookup: { from: \"Enrolled_in\", localField: \"CID\", foreignField: \"CID\", as: \"enrollments\" } }, { $match: { \"enrollments.4\": { $exists: true } } }, { $project: { CName: 1 } } ])",
        "gpt4 answer": "db.Course.aggregate([ { $lookup: { from: \"Enrolled_in\", localField: \"CID\", foreignField: \"CID\", as: \"enrollments\" } }, { $match: { \"enrollments.4\": { $exists: true } } }, { $project: { CName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2751,
        "spider_question_id": 4686,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = 'COMPUTER LITERACY'",
        "question": "Find the first name and last name of the instructor of course that has course name",
        "query": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.CName\": \"COMPUTER LITERACY\" } }, { $project: { Fname: 1, Lname: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"course_info\" } }, { $unwind: \"$course_info\" }, { $match: { \"course_info.CName\": \"COMPUTER LITERACY\" } }, { $project: { Fname: 1, Lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2752,
        "spider_question_id": 4687,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = 'COMPUTER LITERACY'",
        "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?",
        "query": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"CourseInfo\" } }, { $match: { \"CourseInfo.CName\": \"COMPUTER LITERACY\" } }, { $project: { Fname: 1, Lname: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Course\", localField: \"FacID\", foreignField: \"Instructor\", as: \"CourseInfo\" } }, { $match: { \"CourseInfo.CName\": \"COMPUTER LITERACY\" } }, { $project: { Fname: 1, Lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2753,
        "spider_question_id": 4688,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = 'INTRODUCTION TO COMPUTER SCIENCE'",
        "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "query": "db.Course.aggregate([ { $match: { CName: \"INTRODUCTION TO COMPUTER SCIENCE\" } }, { $lookup: { from: \"Department\", localField: \"DNO\", foreignField: \"DNO\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { DName: \"$department_info.DName\", Room: \"$department_info.Room\" } } ])",
        "gpt4 answer": "db.Course.aggregate([ { $match: { CName: \"INTRODUCTION TO COMPUTER SCIENCE\" } }, { $lookup: { from: \"Department\", localField: \"DNO\", foreignField: \"DNO\", as: \"department_info\" } }, { $unwind: \"$department_info\" }, { $project: { DName: \"$department_info.DName\", Room: \"$department_info.Room\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2754,
        "spider_question_id": 4689,
        "db_id": "college_3",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Dname , T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = 'INTRODUCTION TO COMPUTER SCIENCE'",
        "question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "query": "db.Course.aggregate([ { $match: { CName: \"INTRODUCTION TO COMPUTER SCIENCE\" } }, { $lookup: { from: \"Department\", localField: \"DNO\", foreignField: \"DNO\", as: \"department\" } }, { $unwind: \"$department\" }, { $project: { DName: \"$department.DName\", Room: \"$department.Room\" } } ])",
        "gpt4 answer": "db.Course.aggregate([ { $match: { CName: \"INTRODUCTION TO COMPUTER SCIENCE\" } }, { $lookup: { from: \"Department\", localField: \"DNO\", foreignField: \"DNO\", as: \"department\" } }, { $unwind: \"$department\" }, { $project: { DName: \"$department.DName\", Room: \"$department.Room\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2755,
        "spider_question_id": 4698,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = 'Computer Science'",
        "question": "Find the last names of faculties who are members of computer science department.",
        "query": "db.Department.aggregate([ { $match: { DName: \"Computer Science\" } }, { $lookup: { from: \"Member_of\", localField: \"DNO\", foreignField: \"DNO\", as: \"members\" } }, { $unwind: \"$members\" }, { $lookup: { from: \"Faculty\", localField: \"members.FacID\", foreignField: \"FacID\", as: \"faculty\" } }, { $unwind: \"$faculty\" }, { $project: { Lname: \"$faculty.Lname\" } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Member_of\", localField: \"FacID\", foreignField: \"FacID\", as: \"Membership\" } }, { $unwind: \"$Membership\" }, { $lookup: { from: \"Department\", localField: \"Membership.DNO\", foreignField: \"DNO\", as: \"DepartmentInfo\" } }, { $unwind: \"$DepartmentInfo\" }, { $match: { \"DepartmentInfo.DName\": \"Computer Science\" } }, { $project: { Lname: 1 } } ])",
        "deepseek answer": "db.Department.aggregate([ { $match: { DName: \"Computer Science\" } }, { $lookup: { from: \"Member_of\", localField: \"DNO\", foreignField: \"DNO\", as: \"members\" } }, { $unwind: \"$members\" }, { $lookup: { from: \"Faculty\", localField: \"members.FacID\", foreignField: \"FacID\", as: \"faculty\" } }, { $unwind: \"$faculty\" }, { $project: { Lname: \"$faculty.Lname\" } } ])"
    },
    {
        "question_id": 2756,
        "spider_question_id": 4699,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = 'Computer Science'",
        "question": "What are the last names of faculty who are part of the computer science department?",
        "query": "db.Department.aggregate([ { $match: { DName: \"Computer Science\" } }, { $lookup: { from: \"Member_of\", localField: \"DNO\", foreignField: \"DNO\", as: \"member_of_data\" } }, { $unwind: \"$member_of_data\" }, { $lookup: { from: \"Faculty\", localField: \"member_of_data.FacID\", foreignField: \"FacID\", as: \"faculty_data\" } }, { $unwind: \"$faculty_data\" }, { $project: { Lname: \"$faculty_data.Lname\" } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Member_of\", localField: \"FacID\", foreignField: \"FacID\", as: \"membership\" } }, { $unwind: \"$membership\" }, { $lookup: { from: \"Department\", localField: \"membership.DNO\", foreignField: \"DNO\", as: \"department\" } }, { $unwind: \"$department\" }, { $match: { \"department.DName\": \"Computer Science\" } }, { $project: { Lname: 1 } } ])",
        "deepseek answer": "db.Department.aggregate([ { $match: { DName: \"Computer Science\" } }, { $lookup: { from: \"Member_of\", localField: \"DNO\", foreignField: \"DNO\", as: \"member_of_data\" } }, { $unwind: \"$member_of_data\" }, { $lookup: { from: \"Faculty\", localField: \"member_of_data.FacID\", foreignField: \"FacID\", as: \"faculty_data\" } }, { $unwind: \"$faculty_data\" }, { $project: { Lname: \"$faculty_data.Lname\" } } ])"
    },
    {
        "question_id": 2757,
        "spider_question_id": 4700,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = 'Smith'",
        "question": "Find the average grade point of student whose last name is Smith.",
        "query": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Enrolled_in\", localField: \"StuID\", foreignField: \"StuID\", as: \"enrollments\" } }, { $unwind: \"$enrollments\" }, { $lookup: { from: \"Gradeconversion\", localField: \"enrollments.Grade\", foreignField: \"lettergrade\", as: \"enrollments.grade_info\" } }, { $unwind: \"$enrollments.grade_info\" }, { $group: { _id: null, avgGradePoint: { $avg: \"$enrollments.grade_info.gradepoint\" } } } , { $project: { avgGradePoint:1 } }])",
        "gpt4 answer": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.LName\": \"Smith\" } }, { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $group: { _id: null, averageGradePoint: { $avg: \"$grade_info.gradepoint\" } } }, { $project: { averageGradePoint: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Enrolled_in\", localField: \"StuID\", foreignField: \"StuID\", as: \"enrollments\" } }, { $unwind: \"$enrollments\" }, { $lookup: { from: \"Gradeconversion\", localField: \"enrollments.Grade\", foreignField: \"lettergrade\", as: \"enrollments.grade_info\" } }, { $unwind: \"$enrollments.grade_info\" }, { $group: { _id: null, avgGradePoint: { $avg: \"$enrollments.grade_info.gradepoint\" } } } , { $project: { avgGradePoint:1 } }])"
    },
    {
        "question_id": 2758,
        "spider_question_id": 4701,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = 'Smith'",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "query": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.LName\": \"Smith\" } }, { $group: { _id: null, averageGradepoint: { $avg: \"$grade_info.gradepoint\" } } }, { $project: { averageGradepoint: 1 } } ])",
        "gpt4 answer": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.LName\": \"Smith\" } }, { $group: { _id: null, averageGradepoint: { $avg: \"$grade_info.gradepoint\" } } }, { $project: { averageGradepoint: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2759,
        "spider_question_id": 4702,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = 'NYC'",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "query": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $match: { \"student_info.city_code\": \"NYC\" } }, { $group: { _id: null, maxGradePoint: { $max: \"$grade_info.gradepoint\" }, minGradePoint: { $min: \"$grade_info.gradepoint\" } } }, { $project: { maxGradePoint: 1, minGradePoint: 1 } } ])",
        "gpt4 answer": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $match: { \"student_info.city_code\": \"NYC\" } }, { $group: { _id: null, maxGradePoint: { $max: \"$grade_info.gradepoint\" }, minGradePoint: { $min: \"$grade_info.gradepoint\" } } }, { $project: { maxGradePoint: 1, minGradePoint: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2760,
        "spider_question_id": 4703,
        "db_id": "college_3",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T2.gradepoint) , min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = 'NYC'",
        "question": "Give the maximum and minimum gradepoints for students living in NYC?",
        "query": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.city_code\": \"NYC\" } }, { $group: { _id: null, maxGradePoint: { $max: \"$grade_info.gradepoint\" }, minGradePoint: { $min: \"$grade_info.gradepoint\" } } }, { $project: { maxGradePoint: 1, minGradePoint: 1 } } ])",
        "gpt4 answer": "db.Enrolled_in.aggregate([ { $lookup: { from: \"Gradeconversion\", localField: \"Grade\", foreignField: \"lettergrade\", as: \"grade_info\" } }, { $unwind: \"$grade_info\" }, { $lookup: { from: \"Student\", localField: \"StuID\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $match: { \"student_info.city_code\": \"NYC\" } }, { $group: { _id: null, maxGradePoint: { $max: \"$grade_info.gradepoint\" }, minGradePoint: { $min: \"$grade_info.gradepoint\" } } }, { $project: { maxGradePoint: 1, minGradePoint: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2761,
        "spider_question_id": 4710,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "query": "db.Product_Suppliers.aggregate([ { $sort: { total_amount_purchased: -1 } }, { $limit: 3 }, { $project: { product_id: 1 } } ])",
        "gpt4 answer": "db.Product_Suppliers.aggregate([ { $sort: { total_amount_purchased: -1 } }, { $limit: 3 }, { $project: { product_id: 1 } } ])",
        "deepseek answer": "db.Product_Suppliers.aggregate([ { $sort: { total_amount_purchased: -1 } }, { $limit: 3 }, { $project: { product_id: 1 } } ])"
    },
    {
        "question_id": 2762,
        "spider_question_id": 4711,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "question": "Give the ids of the three products purchased in the largest amounts.",
        "query": "db.Product_Suppliers.aggregate([ { $sort: { total_amount_purchased: -1 } }, { $limit: 3 }, { $project: { product_id: 1 } } ])",
        "gpt4 answer": "db.Product_Suppliers.aggregate([ { $sort: { total_amount_purchased: -1 } }, { $limit: 3 }, { $project: { product_id: 1 } } ])",
        "deepseek answer": "db.Product_Suppliers.aggregate([ { $sort: { total_amount_purchased: -1 } }, { $limit: 3 }, { $project: { product_id: 1 } } ])"
    },
    {
        "question_id": 2763,
        "spider_question_id": 4712,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
        "question": "What are the product id and product type of the cheapest product?",
        "query": "db.Products.aggregate([ { $sort: { product_price: 1 } }, { $limit: 1 }, { $project: { product_id: 1, product_type_code: 1 } } ])",
        "gpt4 answer": "db.Products.find({}, { product_id: 1, product_type_code: 1 }).sort({ product_price: 1 }).limit(1)",
        "deepseek answer": "db.Products.aggregate([ { $sort: { product_price: 1 } }, { $limit: 1 }, { $project: { product_id: 1, product_type_code: 1 } } ])"
    },
    {
        "question_id": 2764,
        "spider_question_id": 4713,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
        "question": "Give the id and product type of the product with the lowest price.",
        "query": "db.Products.aggregate([ { $sort: { product_price: 1 } }, { $limit: 1 }, { $project: { product_id: 1, product_type_code: 1 } } ])",
        "gpt4 answer": "db.Products.find({}, { product_id: 1, product_type_code: 1 }).sort({ product_price: 1 }).limit(1)",
        "deepseek answer": "db.Products.aggregate([ { $sort: { product_price: 1 } }, { $limit: 1 }, { $project: { product_id: 1, product_type_code: 1 } } ])"
    },
    {
        "question_id": 2765,
        "spider_question_id": 4716,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10",
        "question": "Return the address of customer 10.",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $match: { \"customer_addresses.customer_id\": 10 } }, { $project: { address_details: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $match: { \"customer_addresses.customer_id\": 10 } }, { $project: { address_details: 1 } } ])"
    },
    {
        "question_id": 2766,
        "spider_question_id": 4717,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10",
        "question": "What is the address for the customer with id 10?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $match: { \"customer_addresses.customer_id\": 10 } }, { $project: { address_details: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $match: { \"customer_addresses.customer_id\": 10 } }, { $project: { address_details: 1 } } ])"
    },
    {
        "question_id": 2767,
        "spider_question_id": 4718,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Department Manager'",
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $match: { \"staff_assignments.job_title_code\": \"Department Manager\" } }, { $project: { staff_id: 1, staff_gender: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $unwind: \"$assignments\" }, { $match: { \"assignments.job_title_code\": \"Department Manager\" } }, { $project: { staff_id: 1, staff_gender: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $match: { \"staff_assignments.job_title_code\": \"Department Manager\" } }, { $project: { staff_id: 1, staff_gender: 1 } } ])"
    },
    {
        "question_id": 2768,
        "spider_question_id": 4719,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.staff_id , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Department Manager'",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $match: { \"staff_assignments.job_title_code\": \"Department Manager\" } }, { $project: { staff_id: 1, staff_gender: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $unwind: \"$assignments\" }, { $match: { \"assignments.job_title_code\": \"Department Manager\" } }, { $project: { staff_id: 1, staff_gender: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $match: { \"staff_assignments.job_title_code\": \"Department Manager\" } }, { $project: { staff_id: 1, staff_gender: 1 } } ])"
    },
    {
        "question_id": 2769,
        "spider_question_id": 4720,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code",
        "question": "For each payment method, return how many customers use it.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $project: { payment_method_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $project: { payment_method_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2770,
        "spider_question_id": 4721,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code",
        "question": "How many customers use each payment method?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2771,
        "spider_question_id": 4722,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the product that was ordered the most often?",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2772,
        "spider_question_id": 4723,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the product id for the product that was ordered most frequently.",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2773,
        "spider_question_id": 4724,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1} }, { $sort: { orderCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Customer_Orders.aggregate([ { $group: { _id: \"$customer_id\", total_orders: { $sum: 1 } } }, { $sort: { total_orders: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer_details\" } }, { $unwind: \"$customer_details\" }, { $project: { customer_name: \"$customer_details.customer_name\", customer_phone: \"$customer_details.customer_phone\", customer_email: \"$customer_details.customer_email\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1} }, { $sort: { orderCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2774,
        "spider_question_id": 4725,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1, orderCount: { $size: \"$orders\" } } }, { $sort: { orderCount: -1 } }, { $limit: 1 }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1, numberOfOrders: { $size: \"$orders\" } } }, { $sort: { numberOfOrders: -1 } }, { $limit: 1 }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1, orderCount: { $size: \"$orders\" } } }, { $sort: { orderCount: -1 } }, { $limit: 1 }, { $project: { customer_name: 1, customer_phone: 1, customer_email: 1 } } ])"
    },
    {
        "question_id": 2775,
        "spider_question_id": 4726,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
        "question": "What is the average price for each type of product?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", averagePrice: { $avg: \"$product_price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", avgPrice: { $avg: \"$product_price\" } } }, { $project: { product_type_code: \"$_id\", avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", averagePrice: { $avg: \"$product_price\" } } } ])"
    },
    {
        "question_id": 2776,
        "spider_question_id": 4727,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
        "question": "Return the average price for each product type.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", averagePrice: { $avg: \"$product_price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", avgPrice: { $avg: \"$product_price\" } } }, { $project: { product_type_code: \"$_id\", avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", averagePrice: { $avg: \"$product_price\" } } } ])"
    },
    {
        "question_id": 2777,
        "spider_question_id": 4728,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = 'South'",
        "question": "How many department stores does the store chain South have?",
        "query": "db.Department_Stores.aggregate([ { $lookup: { from: \"Department_Store_Chain\", localField: \"dept_store_chain_id\", foreignField: \"dept_store_chain_id\", as: \"store_chain\" } }, { $match: { \"store_chain.dept_store_chain_name\": \"South\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.Department_Stores.aggregate([ { $lookup: { from: \"Department_Store_Chain\", localField: \"dept_store_chain_id\", foreignField: \"dept_store_chain_id\", as: \"chain\" } }, { $match: { \"chain.dept_store_chain_name\": \"South\" } }, { $count: \"count\" } ])",
        "deepseek answer": "db.Department_Stores.aggregate([ { $lookup: { from: \"Department_Store_Chain\", localField: \"dept_store_chain_id\", foreignField: \"dept_store_chain_id\", as: \"store_chain\" } }, { $match: { \"store_chain.dept_store_chain_name\": \"South\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 2778,
        "spider_question_id": 4729,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = 'South'",
        "question": "Count the number of stores the chain South has.",
        "query": "db.Department_Stores.aggregate([ { $lookup: { from: \"Department_Store_Chain\", localField: \"dept_store_chain_id\", foreignField: \"dept_store_chain_id\", as: \"chain\" } }, { $match: { \"chain.dept_store_chain_name\": \"South\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.Department_Stores.aggregate([ { $lookup: { from: \"Department_Store_Chain\", localField: \"dept_store_chain_id\", foreignField: \"dept_store_chain_id\", as: \"chain\" } }, { $match: { \"chain.dept_store_chain_name\": \"South\" } }, { $count: \"number_of_stores\" } ])",
        "deepseek answer": "db.Department_Stores.aggregate([ { $lookup: { from: \"Department_Store_Chain\", localField: \"dept_store_chain_id\", foreignField: \"dept_store_chain_id\", as: \"chain\" } }, { $match: { \"chain.dept_store_chain_name\": \"South\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 2779,
        "spider_question_id": 4730,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $sort: { \"staff_assignments.date_assigned_to\": -1 } }, { $limit: 1 }, { $project: { staff_name: 1, job_title_code: \"$staff_assignments.job_title_code\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $sort: { \"staff_assignments.date_assigned_to\": -1 } }, { $limit: 1 }, { $project: { staff_name: 1, job_title_code: \"$staff_assignments.job_title_code\" } } ])"
    },
    {
        "question_id": 2780,
        "spider_question_id": 4731,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.staff_name , T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "question": "Return the name and job title of the staff with the latest date assigned.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $sort: { \"staff_assignments.date_assigned_to\": -1 } }, { $limit: 1 }, { $project: { staff_name: 1, job_title_code: \"$staff_assignments.job_title_code\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $sort: { \"staff_assignments.date_assigned_to\": -1 } }, { $limit: 1 }, { $project: { staff_name: 1, job_title_code: \"$staff_assignments.job_title_code\" } } ])"
    },
    {
        "question_id": 2781,
        "spider_question_id": 4732,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3",
        "question": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "query": "db.Product_Suppliers.aggregate([ { $match: { supplier_id: 3 } }, { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $project: { product_type_code: \"$product_info.product_type_code\", product_name: \"$product_info.product_name\", product_price: \"$product_info.product_price\" } } ])",
        "gpt4 answer": "db.Product_Suppliers.aggregate([ { $match: { supplier_id: 3 } }, { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" }}, { $unwind: \"$product_info\" }, { $project: { product_type_code: \"$product_info.product_type_code\", product_name: \"$product_info.product_name\", product_price: \"$product_info.product_price\" }} ])",
        "deepseek answer": "db.Product_Suppliers.aggregate([ { $match: { supplier_id: 3 } }, { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $project: { product_type_code: \"$product_info.product_type_code\", product_name: \"$product_info.product_name\", product_price: \"$product_info.product_price\" } } ])"
    },
    {
        "question_id": 2782,
        "spider_question_id": 4733,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "query": "db.Product_Suppliers.aggregate([ { $match: { supplier_id: 3 } }, { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $project: { product_type_code: \"$product_info.product_type_code\", product_name: \"$product_info.product_name\", product_price: \"$product_info.product_price\" } } ])",
        "gpt4 answer": "db.Product_Suppliers.aggregate([ { $match: { supplier_id: 3 } }, { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"productDetails\" } }, { $unwind: \"$productDetails\" }, { $project: { product_type_code: \"$productDetails.product_type_code\", product_name: \"$productDetails.product_name\", product_price: \"$productDetails.product_price\" } } ])",
        "deepseek answer": "db.Product_Suppliers.aggregate([ { $match: { supplier_id: 3 } }, { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $project: { product_type_code: \"$product_info.product_type_code\", product_name: \"$product_info.product_name\", product_price: \"$product_info.product_price\" } } ])"
    },
    {
        "question_id": 2783,
        "spider_question_id": 4734,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending' ORDER BY T2.customer_id",
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $match: { \"customer_orders.order_status_code\": \"Pending\" } }, { $project: { customer_name: 1 } }, { $sort: { \"customer_orders.customer_id\": 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $match: { \"orders.order_status_code\": \"Pending\" } }, { $group: { _id: \"$customer_name\" } }, { $sort: { \"orders.customer_id\": 1 } }, { $project: { customer_name: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $match: { \"customer_orders.order_status_code\": \"Pending\" } }, { $project: { customer_name: 1 } }, { $sort: { \"customer_orders.customer_id\": 1 } } ])"
    },
    {
        "question_id": 2784,
        "spider_question_id": 4735,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending' ORDER BY T2.customer_id",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $match: { \"orders.order_status_code\": \"Pending\" } }, { $project: { customer_name: 1 } }, { $sort: { customer_id: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $match: { \"orders.order_status_code\": \"Pending\" } }, { $group: { _id: \"$customer_name\" } }, { $sort: { \"_id\": 1 } }, { $project: { customer_name: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $match: { \"orders.order_status_code\": \"Pending\" } }, { $project: { customer_name: 1 } }, { $sort: { customer_id: 1 } } ])"
    },
    {
        "question_id": 2785,
        "spider_question_id": 4736,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'New' INTERSECT SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending'",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $match: { $or: [ { \"orders.order_status_code\": \"New\" }, { \"orders.order_status_code\": \"Pending\" } ] } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" }, customer_address: { $first: \"$customer_address\" }, order_statuses: { $addToSet: \"$orders.order_status_code\" } } }, { $match: { order_statuses: { $all: [\"New\", \"Pending\"] } } }, { $project: { customer_name: 1, customer_address: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $match: { $or: [ { \"orders.order_status_code\": \"New\" }, { \"orders.order_status_code\": \"Pending\" } ] } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" }, customer_address: { $first: \"$customer_address\" }, order_statuses: { $addToSet: \"$orders.order_status_code\" } } }, { $match: { order_statuses: { $all: [\"New\", \"Pending\"] } } }, { $project: { customer_name: 1, customer_address: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2786,
        "spider_question_id": 4740,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'marketing' INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'managing'",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "query": "db.Departments.aggregate([ { $match: { department_name: { $in: ['marketing', 'managing'] } } }, { $group: { _id: \"$dept_store_id\", departments: { $addToSet: \"$department_name\" }, count: { $sum: 1 } } }, { $match: { count: 2 } }, { $lookup: { from: \"Department_Stores\", localField: \"_id\", foreignField: \"dept_store_id\", as: \"store_info\" } }, { $unwind: \"$store_info\" }, { $project: { _id: \"$store_info.dept_store_id\", name: \"$store_info.store_name\" } } ])",
        "gpt4 answer": "db.Departments.aggregate([ { $match: { department_name: { $in: ['marketing', 'managing'] } } }, { $group: { _id: \"$dept_store_id\", departments: { $addToSet: \"$department_name\" }, count: { $sum: 1 } } }, { $match: { count: 2 } }, { $lookup: { from: \"Department_Stores\", localField: \"_id\", foreignField: \"dept_store_id\", as: \"store_info\" } }, { $unwind: \"$store_info\" }, { $project: { _id: \"$store_info.dept_store_id\", name: \"$store_info.store_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2787,
        "spider_question_id": 4741,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'marketing' INTERSECT SELECT T2.dept_store_id , T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'managing'",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "query": "db.Departments.aggregate([ { $match: { department_name: { $in: ['marketing', 'managing'] } } }, { $group: { _id: \"$dept_store_id\", departmentNames: { $addToSet: \"$department_name\" }, count: { $sum: 1 } } }, { $match: { count: 2, departmentNames: { $all: ['marketing', 'managing'] } } }, { $lookup: { from: \"Department_Stores\", localField: \"_id\", foreignField: \"dept_store_id\", as: \"storeDetails\" } }, { $unwind: \"$storeDetails\" }, { $project: { dept_store_id: \"$storeDetails.dept_store_id\", store_name: \"$storeDetails.store_name\" } } ])",
        "gpt4 answer": "db.Departments.aggregate([ { $match: { department_name: { $in: ['marketing', 'managing'] } } }, { $group: { _id: \"$dept_store_id\", departmentNames: { $addToSet: \"$department_name\" }, count: { $sum: 1 } } }, { $match: { count: 2, departmentNames: { $all: ['marketing', 'managing'] } } }, { $lookup: { from: \"Department_Stores\", localField: \"_id\", foreignField: \"dept_store_id\", as: \"storeDetails\" } }, { $unwind: \"$storeDetails\" }, { $project: { dept_store_id: \"$storeDetails.dept_store_id\", store_name: \"$storeDetails.store_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2788,
        "spider_question_id": 4742,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "query": "db.Department_Stores.aggregate([ { $group: { _id: \"$dept_store_chain_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 2 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Department_Stores.aggregate([ { $group: { _id: \"$dept_store_chain_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 2 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2789,
        "spider_question_id": 4743,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "query": "db.Department_Stores.aggregate([ { $group: { _id: \"$dept_store_chain_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 2 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Department_Stores.aggregate([ { $group: { _id: \"$dept_store_chain_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 2 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2790,
        "spider_question_id": 4746,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_type_code , max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
        "question": "For each product type, return the maximum and minimum price.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } } ])"
    },
    {
        "question_id": 2791,
        "spider_question_id": 4747,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_type_code , max(product_price) , min(product_price) FROM products GROUP BY product_type_code",
        "question": "What are the maximum and minimum product prices for each product type?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } } ])"
    },
    {
        "question_id": 2792,
        "spider_question_id": 4748,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)",
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", avgTypePrice: { $avg: \"$product_price\" } } }, { $group: { _id: null, avgPrice: { $avg: \"$avgTypePrice\" }, types: { $push: { type: \"$_id\", avgTypePrice: \"$avgTypePrice\" } } } }, { $unwind: \"$types\" }, { $project: { type: \"$types.type\", typeAvg: \"$types.avgTypePrice\", overallAvg: \"$avgPrice\" } }, { $match: { $expr: { $gt: [\"$typeAvg\", \"$overallAvg\"] } } }, { $project: { type: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", avgTypePrice: { $avg: \"$product_price\" } } }, { $group: { _id: null, avgPrice: { $avg: \"$avgTypePrice\" }, types: { $push: { type: \"$_id\", avgTypePrice: \"$avgTypePrice\" } } } }, { $unwind: \"$types\" }, { $project: { type: \"$types.type\", typeAvg: \"$types.avgTypePrice\", overallAvg: \"$avgPrice\" } }, { $match: { $expr: { $gt: [\"$typeAvg\", \"$overallAvg\"] } } }, { $project: { type: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2793,
        "spider_question_id": 4749,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price) > (SELECT avg(product_price) FROM products)",
        "question": "What is the code of the product type with an average price higher than the average price of all products?",
        "query": "db.Products.aggregate([ { $group: { _id: '$product_type_code', avgTypePrice: { $avg: '$product_price' } } }, { $lookup: { from: 'Products', let: { avgAll: { $avg: '$product_price' } }, as: 'allProducts', pipeline: [ { $group: { _id: null, avgPrice: { $avg: '$product_price' } } } ] } }, { $unwind: '$allProducts' }, { $match: { $expr: { $gt: ['$avgTypePrice', '$allProducts.avgPrice'] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: '$product_type_code', avgTypePrice: { $avg: '$product_price' } } }, { $lookup: { from: 'Products', let: { avgAll: { $avg: '$product_price' } }, as: 'allProducts', pipeline: [ { $group: { _id: null, avgPrice: { $avg: '$product_price' } } } ] } }, { $unwind: '$allProducts' }, { $match: { $expr: { $gt: ['$avgTypePrice', '$allProducts.avgPrice'] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2794,
        "spider_question_id": 4752,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "query": "db.Products.find({product_price: {$gte: 600, $lte: 700}}, {product_name: 1, product_id: 1})",
        "gpt4 answer": "db.Products.find({ product_price: { $gte: 600, $lte: 700 } }, { product_name: 1, product_id: 1 })",
        "deepseek answer": "db.Products.find({product_price: {$gte: 600, $lte: 700}}, {product_name: 1, product_id: 1})"
    },
    {
        "question_id": 2795,
        "spider_question_id": 4753,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "question": "What are the names and ids of products costing between 600 and 700?",
        "query": "db.Products.find( { product_price: { $gte: 600, $lte: 700 } }, { product_name: 1, product_id: 1 } )",
        "gpt4 answer": "db.Products.find( { product_price: { $gte: 600, $lte: 700 } }, { product_name: 1, product_id: 1 } )",
        "deepseek answer": "db.Products.find( { product_price: { $gte: 600, $lte: 700 } }, { product_name: 1, product_id: 1 } )"
    },
    {
        "question_id": 2796,
        "spider_question_id": 4754,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = 'Cancelled')",
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "query": "db.Customer_Orders.aggregate([ { $match: { order_status_code: 'Cancelled' } }, { $group: { _id: null, minDate: { $min: \"$order_date\" } } }, { $lookup: { from: \"Customer_Orders\", let: { min_date: \"$minDate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$order_date\", \"$$min_date\"] } } }, { $group: { _id: \"$customer_id\" } } ], as: \"orders_after_cancelled\" } }, { $unwind: \"$orders_after_cancelled\" }, { $replaceRoot: { newRoot: \"$orders_after_cancelled\" } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Customer_Orders.aggregate([ { $match: { order_status_code: 'Cancelled' } }, { $group: { _id: null, minDate: { $min: \"$order_date\" } } }, { $lookup: { from: \"Customer_Orders\", let: { min_date: \"$minDate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$order_date\", \"$$min_date\"] } } }, { $group: { _id: \"$customer_id\" } } ], as: \"orders_after_cancelled\" } }, { $unwind: \"$orders_after_cancelled\" }, { $replaceRoot: { newRoot: \"$orders_after_cancelled\" } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2797,
        "spider_question_id": 4755,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code = 'Cancelled')",
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
        "query": "db.Customer_Orders.aggregate([ { $match: { order_status_code: 'Cancelled' } }, { $group: { _id: null, minDate: { $min: \"$order_date\" } } }, { $addFields: { minCancelledDate: \"$minDate\" } }, { $lookup: { from: \"Customer_Orders\", let: { minCancelledDate: \"$minCancelledDate\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$order_date\", \"$$minCancelledDate\" ] } } }, { $group: { _id: \"$customer_id\" } } ], as: \"customersWithOrdersAfterCancelled\" } }, { $unwind: \"$customersWithOrdersAfterCancelled\" }, { $replaceRoot: { newRoot: \"$customersWithOrdersAfterCancelled\" } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Customer_Orders.aggregate([ { $match: { order_status_code: 'Cancelled' } }, { $group: { _id: null, minDate: { $min: \"$order_date\" } } }, { $addFields: { minCancelledDate: \"$minDate\" } }, { $lookup: { from: \"Customer_Orders\", let: { minCancelledDate: \"$minCancelledDate\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$order_date\", \"$$minCancelledDate\" ] } } }, { $group: { _id: \"$customer_id\" } } ], as: \"customersWithOrdersAfterCancelled\" } }, { $unwind: \"$customersWithOrdersAfterCancelled\" }, { $replaceRoot: { newRoot: \"$customersWithOrdersAfterCancelled\" } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2798,
        "spider_question_id": 4756,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "query": "db.Staff_Department_Assignments.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", let: { clericalDate: \"$date_assigned_to\", jobId: \"$job_title_code\" }, pipeline: [ { $match: { $expr: { $and: [{ $eq: [\"$job_title_code\", \"Clerical Staff\"] }] } } }, { $group: { _id: null, maxClericalDate: { $max: \"$date_assigned_to\" } } } ], as: \"clericalInfo\" } }, { $unwind: \"$clericalInfo\" }, { $match: { $expr: { $lt: [\"$date_assigned_to\", \"$clericalInfo.maxClericalDate\"] } } }, { $project: { staff_id: 1 } } ])",
        "gpt4 answer": "db.Staff_Department_Assignments.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", let: { clericalDate: \"$date_assigned_to\", jobId: \"$job_title_code\" }, pipeline: [ { $match: { $expr: { $and: [{ $eq: [\"$job_title_code\", \"Clerical Staff\"] }] } } }, { $group: { _id: null, maxClericalDate: { $max: \"$date_assigned_to\" } } } ], as: \"clericalInfo\" } }, { $unwind: \"$clericalInfo\" }, { $match: { $expr: { $lt: [\"$date_assigned_to\", \"$clericalInfo.maxClericalDate\"] } } }, { $project: { staff_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2799,
        "spider_question_id": 4758,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE '%TN%'",
        "question": "What are the names and ids of customers whose address contains TN?",
        "query": "db.Customers.find( { customer_address: { $regex: /TN/ } }, { customer_name: 1, customer_id: 1 } )",
        "gpt4 answer": "db.Customers.find({ customer_address: /TN/ }, { customer_name: 1, customer_id: 1 })",
        "deepseek answer": "db.Customers.find( { customer_address: { $regex: /TN/ } }, { customer_name: 1, customer_id: 1 } )"
    },
    {
        "question_id": 2800,
        "spider_question_id": 4759,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE '%TN%'",
        "question": "Return the names and ids of customers who have TN in their address.",
        "query": "db.Customers.find({customer_address: {$regex: /TN/}}, {customer_name: 1, customer_id: 1})",
        "gpt4 answer": "db.Customers.find({ customer_address: /TN/ }, { customer_name: 1, customer_id: 1 })",
        "deepseek answer": "db.Customers.find({customer_address: {$regex: /TN/}}, {customer_name: 1, customer_id: 1})"
    },
    {
        "question_id": 2801,
        "spider_question_id": 4760,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE '2016%'",
        "question": "Return the name and gender of the staff who was assigned in 2016.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $match: { \"staff_assignments.date_assigned_from\": { $regex: /^2016/ } } }, { $project: { staff_name: 1, staff_gender: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $unwind: \"$assignments\" }, { $match: { \"assignments.date_assigned_from\": { $regex: /^2016/ } } }, { $project: { staff_name: 1, staff_gender: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $match: { \"staff_assignments.date_assigned_from\": { $regex: /^2016/ } } }, { $project: { staff_name: 1, staff_gender: 1 } } ])"
    },
    {
        "question_id": 2802,
        "spider_question_id": 4761,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE '2016%'",
        "question": "What are the names and genders of staff who were assigned in 2016?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $match: { \"staff_assignments.date_assigned_from\": { $regex: /^2016/ } } }, { $project: { staff_name: 1, staff_gender: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_assignments\" } }, { $unwind: \"$staff_assignments\" }, { $match: { \"staff_assignments.date_assigned_from\": { $regex: /^2016/ } } }, { $project: { staff_name: 1, staff_gender: 1 } } ])"
    },
    {
        "question_id": 2803,
        "spider_question_id": 4762,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*) > 1",
        "question": "List the name of staff who has been assigned multiple jobs.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.1\": { $exists: true } } }, { $project: { staff_name: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $project: { staff_name: 1, num_assignments: { $size: \"$assignments\" } } }, { $match: { num_assignments: { $gt: 1 } } }, { $project: { staff_name: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.1\": { $exists: true } } }, { $project: { staff_name: 1 } } ])"
    },
    {
        "question_id": 2804,
        "spider_question_id": 4763,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*) > 1",
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.1\": { $exists: true } } }, { $project: { staff_name: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $project: { staff_name: 1, numberOfJobs: { $size: \"$assignments\" } } }, { $match: { numberOfJobs: { $gt: 1 } } }, { $project: { staff_name: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.1\": { $exists: true } } }, { $project: { staff_name: 1 } } ])"
    },
    {
        "question_id": 2805,
        "spider_question_id": 4764,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details",
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "query": "db.Suppliers.aggregate([ { $lookup: { from: \"Supplier_Addresses\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_addresses\" } }, { $unwind: \"$supplier_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"supplier_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $project: { supplier_name: 1, supplier_phone: 1 } }, { $sort: { \"address_details\": 1 } } ])",
        "gpt4 answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Supplier_Addresses\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_addresses\" } }, { $unwind: \"$supplier_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"supplier_addresses.address_id\", foreignField: \"address_id\", as: \"address_details\" } }, { $unwind: \"$address_details\" }, { $project: { supplier_name: 1, supplier_phone: 1, address_details: \"$address_details.address_details\" } }, { $sort: { \"address_details\": 1 } }, { $project: { supplier_name: 1, supplier_phone: 1 } } ])",
        "deepseek answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Supplier_Addresses\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_addresses\" } }, { $unwind: \"$supplier_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"supplier_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $project: { supplier_name: 1, supplier_phone: 1 } }, { $sort: { \"address_details\": 1 } } ])"
    },
    {
        "question_id": 2806,
        "spider_question_id": 4765,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details",
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "query": "db.Suppliers.aggregate([ { $lookup: { from: \"Supplier_Addresses\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_addresses\" } }, { $unwind: \"$supplier_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"supplier_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $project: { supplier_name: 1, supplier_phone: 1 } }, { $sort: { address_details: 1 } } ])",
        "gpt4 answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Supplier_Addresses\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_addresses\" } }, { $unwind: \"$supplier_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"supplier_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $sort: { \"addresses.address_details\": 1 } }, { $project: { supplier_name: 1, supplier_phone: 1 } } ])",
        "deepseek answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Supplier_Addresses\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_addresses\" } }, { $unwind: \"$supplier_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"supplier_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $project: { supplier_name: 1, supplier_phone: 1 } }, { $sort: { address_details: 1 } } ])"
    },
    {
        "question_id": 2807,
        "spider_question_id": 4770,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "query": "db.Products.find( { $or: [ { product_price: { $lt: 600 } }, { product_price: { $gt: 900 } } ] }, { product_id: 1, product_name: 1 } )",
        "gpt4 answer": "db.Products.find( { $or: [ { product_price: { $lt: 600 } }, { product_price: { $gt: 900 } } ] }, { product_id: 1, product_name: 1 } )",
        "deepseek answer": "db.Products.find( { $or: [ { product_price: { $lt: 600 } }, { product_price: { $gt: 900 } } ] }, { product_id: 1, product_name: 1 } )"
    },
    {
        "question_id": 2808,
        "spider_question_id": 4771,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_id , product_name FROM products WHERE product_price < 600 OR product_price > 900",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "query": "db.Products.find( { $or: [ { product_price: { $lt: 600 } }, { product_price: { $gt: 900 } } ] }, { product_id: 1, product_name: 1 } )",
        "gpt4 answer": "db.Products.find( { $or: [ { product_price: { $lt: 600 } }, { product_price: { $gt: 900 } } ] }, { product_id: 1, product_name: 1 } )",
        "deepseek answer": "db.Products.find( { $or: [ { product_price: { $lt: 600 } }, { product_price: { $gt: 900 } } ] }, { product_id: 1, product_name: 1 } )"
    },
    {
        "question_id": 2809,
        "spider_question_id": 4776,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(customer_code) , min(customer_code) FROM Customers",
        "question": "What is the largest and smallest customer codes?",
        "query": "db.Customers.aggregate([ { $group: { _id: null, max_customer_code: { $max: \"$customer_code\" }, min_customer_code: { $min: \"$customer_code\" } } }, { $project: { max_customer_code: 1, min_customer_code: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: null, maxCustomerCode: { $max: \"$customer_code\" }, minCustomerCode: { $min: \"$customer_code\" } } }, { $project: { maxCustomerCode: 1, minCustomerCode: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: null, max_customer_code: { $max: \"$customer_code\" }, min_customer_code: { $min: \"$customer_code\" } } }, { $project: { max_customer_code: 1, min_customer_code: 1 } } ])"
    },
    {
        "question_id": 2810,
        "spider_question_id": 4777,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(customer_code) , min(customer_code) FROM Customers",
        "question": "Return the maximum and minimum customer codes.",
        "query": "db.Customers.aggregate([ { $group: { _id: null, max_customer_code: { $max: \"$customer_code\" }, min_customer_code: { $min: \"$customer_code\" } } }, { $project: { max_customer_code: 1, min_customer_code: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: null, maxCustomerCode: { $max: \"$customer_code\" }, minCustomerCode: { $min: \"$customer_code\" } } }, { $project: { maxCustomerCode: 1, minCustomerCode: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: null, max_customer_code: { $max: \"$customer_code\" }, min_customer_code: { $min: \"$customer_code\" } } }, { $project: { max_customer_code: 1, min_customer_code: 1 } } ])"
    },
    {
        "question_id": 2811,
        "spider_question_id": 4778,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'keyboard'",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $lookup: { from: \"Products\", localField: \"orderItems.product_id\", foreignField: \"product_id\", as: \"productDetails\" } }, { $unwind: \"$productDetails\" }, { $match: { \"productDetails.product_name\": \"keyboard\" } }, { $group: { _id: \"$customer_name\" } }, { $project: { \"_id\": 0, \"customer_name\": \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $lookup: { from: \"Products\", localField: \"orderItems.product_id\", foreignField: \"product_id\", as: \"productDetails\" } }, { $unwind: \"$productDetails\" }, { $match: { \"productDetails.product_name\": \"keyboard\" } }, { $group: { _id: \"$customer_name\" } }, { $project: { \"_id\": 0, \"customer_name\": \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2812,
        "spider_question_id": 4779,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'keyboard'",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $lookup: { from: \"Products\", localField: \"orderItems.product_id\", foreignField: \"product_id\", as: \"productDetails\" } }, { $unwind: \"$productDetails\" }, { $match: { \"productDetails.product_name\": \"keyboard\" } }, { $group: { _id: \"$customer_name\" } }, { $project: { customer_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $lookup: { from: \"Products\", localField: \"orderItems.product_id\", foreignField: \"product_id\", as: \"productDetails\" } }, { $unwind: \"$productDetails\" }, { $match: { \"productDetails.product_name\": \"keyboard\" } }, { $group: { _id: \"$customer_name\" } }, { $project: { customer_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2813,
        "spider_question_id": 4780,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = 'red jeans'",
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "query": "db.Suppliers.aggregate([ { $lookup: { from: \"Product_Suppliers\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_products\" } }, { $unwind: \"$supplier_products\" }, { $lookup: { from: \"Products\", localField: \"supplier_products.product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $match: { \"product_info.product_name\": \"red jeans\" } }, { $project: { supplier_name: 1, supplier_phone: 1 } } ])",
        "gpt4 answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Product_Suppliers\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"product_suppliers\" } }, { $unwind: \"$product_suppliers\" }, { $lookup: { from: \"Products\", localField: \"product_suppliers.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"red jeans\" } }, { $project: { supplier_name: 1, supplier_phone: 1 } }, { $group: { _id: { supplier_name: \"$supplier_name\", supplier_phone: \"$supplier_phone\" } } }, { $project: { supplier_name: \"$_id.supplier_name\", supplier_phone: \"$_id.supplier_phone\" } } ])",
        "deepseek answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Product_Suppliers\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_products\" } }, { $unwind: \"$supplier_products\" }, { $lookup: { from: \"Products\", localField: \"supplier_products.product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $match: { \"product_info.product_name\": \"red jeans\" } }, { $project: { supplier_name: 1, supplier_phone: 1 } } ])"
    },
    {
        "question_id": 2814,
        "spider_question_id": 4781,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.supplier_name , T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = 'red jeans'",
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans?",
        "query": "db.Suppliers.aggregate([ { $lookup: { from: \"Product_Suppliers\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_products\" } }, { $unwind: \"$supplier_products\" }, { $lookup: { from: \"Products\", localField: \"supplier_products.product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $match: { \"product_info.product_name\": \"red jeans\" } }, { $project: { supplier_name: 1, supplier_phone: 1 } } ])",
        "gpt4 answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Product_Suppliers\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"ProductSuppliers\" } }, { $unwind: \"$ProductSuppliers\" }, { $lookup: { from: \"Products\", localField: \"ProductSuppliers.product_id\", foreignField: \"product_id\", as: \"Products\" } }, { $unwind: \"$Products\" }, { $match: { \"Products.product_name\": \"red jeans\" } }, { $group: { _id: { supplier_name: \"$supplier_name\", supplier_phone: \"$supplier_phone\" } } }, { $project: { supplier_name: \"$_id.supplier_name\", supplier_phone: \"$_id.supplier_phone\" } } ])",
        "deepseek answer": "db.Suppliers.aggregate([ { $lookup: { from: \"Product_Suppliers\", localField: \"supplier_id\", foreignField: \"supplier_id\", as: \"supplier_products\" } }, { $unwind: \"$supplier_products\" }, { $lookup: { from: \"Products\", localField: \"supplier_products.product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $match: { \"product_info.product_name\": \"red jeans\" } }, { $project: { supplier_name: 1, supplier_phone: 1 } } ])"
    },
    {
        "question_id": 2815,
        "spider_question_id": 4782,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } }, { $sort: { _id: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", highestPrice: { $max: \"$product_price\" }, lowestPrice: { $min: \"$product_price\" } } }, { $sort: { _id: 1 } }, { $project: { product_type_code: \"$_id\", highestPrice: 1, lowestPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxPrice: { $max: \"$product_price\" }, minPrice: { $min: \"$product_price\" } } }, { $sort: { _id: 1 } } ])"
    },
    {
        "question_id": 2816,
        "spider_question_id": 4783,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT max(product_price) , min(product_price) , product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", max_price: { $max: \"$product_price\" }, min_price: { $min: \"$product_price\" } } }, { $sort: { _id: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", maxProductPrice: { $max: \"$product_price\" }, minProductPrice: { $min: \"$product_price\" } } }, { $sort: { _id: 1 } }, { $project: { product_type_code: \"$_id\", maxProductPrice: 1, minProductPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", max_price: { $max: \"$product_price\" }, min_price: { $min: \"$product_price\" } } }, { $sort: { _id: 1 } } ])"
    },
    {
        "question_id": 2817,
        "spider_question_id": 4784,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' ORDER BY order_date",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "db.Customer_Orders.find( { order_status_code: 'Cancelled' }, { order_id: 1, customer_id: 1 } ).sort({ order_date: 1 })",
        "gpt4 answer": "db.Customer_Orders.find( { order_status_code: 'Cancelled' }, { order_id: 1, customer_id: 1 } ).sort({ order_date: 1 })",
        "deepseek answer": "db.Customer_Orders.find( { order_status_code: 'Cancelled' }, { order_id: 1, customer_id: 1 } ).sort({ order_date: 1 })"
    },
    {
        "question_id": 2818,
        "spider_question_id": 4785,
        "db_id": "department_store",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' ORDER BY order_date",
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "query": "db.Customer_Orders.find( { order_status_code: 'Cancelled' }, { order_id: 1, customer_id: 1 } ).sort({ order_date: 1 })",
        "gpt4 answer": "db.Customer_Orders.find( { order_status_code: 'Cancelled' }, { order_id: 1, customer_id: 1 } ).sort({ order_date: 1 })",
        "deepseek answer": "db.Customer_Orders.find( { order_status_code: 'Cancelled' }, { order_id: 1, customer_id: 1 } ).sort({ order_date: 1 })"
    },
    {
        "question_id": 2819,
        "spider_question_id": 4788,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: { customer_id: \"$customer_id\", customer_name: \"$customer_name\" }, distinct_products: { $addToSet: \"$order_items.product_id\" } } }, { $match: { $expr: { $gte: [{ $size: \"$distinct_products\" }, 3] } } }, { $project: { customer_name: \"$_id.customer_name\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: { customer_id: \"$customer_id\", customer_name: \"$customer_name\" }, distinct_products: { $addToSet: \"$order_items.product_id\" } } }, { $match: { $expr: { $gte: [{ $size: \"$distinct_products\" }, 3] } } }, { $project: { customer_name: \"$_id.customer_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2820,
        "spider_question_id": 4789,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id) >= 3",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $group: { _id: { customer_id: \"$customer_id\", customer_name: \"$customer_name\" }, distinctProductCount: { $addToSet: \"$orderItems.product_id\" } } }, { $match: { $expr: { $gte: [{ $size: \"$distinctProductCount\" }, 3] } } }, { $project: { customer_name: \"$_id.customer_name\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $group: { _id: { customer_id: \"$customer_id\", customer_name: \"$customer_name\" }, distinctProductCount: { $addToSet: \"$orderItems.product_id\" } } }, { $match: { $expr: { $gte: [{ $size: \"$distinctProductCount\" }, 3] } } }, { $project: { customer_name: \"$_id.customer_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2821,
        "spider_question_id": 4790,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Sales Person' EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Clerical Staff'",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.job_title_code\": \"Sales Person\" } }, { $addFields: { hasClerical: { $in: [\"Clerical Staff\", \"$assignments.job_title_code\"] } } }, { $match: { hasClerical: false } }, { $project: { staff_name: 1, staff_gender: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.job_title_code\": \"Sales Person\" } }, { $project: { staff_name: 1, staff_gender: 1, assignments: 1 } }, { $unwind: \"$assignments\" }, { $group: { _id: { staff_name: \"$staff_name\", staff_gender: \"$staff_gender\" }, job_codes: { $push: \"$assignments.job_title_code\" } } }, { $match: { job_codes: { $not: { $elemMatch: { $eq: \"Clerical Staff\" } } } } }, { $project: { staff_name: \"$_id.staff_name\", staff_gender: \"$_id.staff_gender\" } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.job_title_code\": \"Sales Person\" } }, { $addFields: { hasClerical: { $in: [\"Clerical Staff\", \"$assignments.job_title_code\"] } } }, { $match: { hasClerical: false } }, { $project: { staff_name: 1, staff_gender: 1 } } ])"
    },
    {
        "question_id": 2822,
        "spider_question_id": 4791,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Sales Person' EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Clerical Staff'",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.job_title_code\": \"Sales Person\" } }, { $addFields: { hasClerical: { $in: [\"Clerical Staff\", \"$assignments.job_title_code\"] } } }, { $match: { hasClerical: false } }, { $project: { staff_name: 1, staff_gender: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.job_title_code\": \"Sales Person\" } }, { $project: { staff_name: 1, staff_gender: 1, assignments: 1 } }, { $addFields: { hasClericalJob: { $in: [\"Clerical Staff\", \"$assignments.job_title_code\"] } } }, { $match: { hasClericalJob: false } }, { $project: { staff_name: 1, staff_gender: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Staff_Department_Assignments\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"assignments\" } }, { $match: { \"assignments.job_title_code\": \"Sales Person\" } }, { $addFields: { hasClerical: { $in: [\"Clerical Staff\", \"$assignments.job_title_code\"] } } }, { $match: { hasClerical: false } }, { $project: { staff_name: 1, staff_gender: 1 } } ])"
    },
    {
        "question_id": 2823,
        "spider_question_id": 4792,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "query": "db.Customers.find( { customer_address: { $regex: /WY/ }, payment_method_code: { $ne: 'Credit Card' } }, { customer_id: 1, customer_name: 1 } )",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_address: /WY/, payment_method_code: { $ne: \"Credit Card\" } } }, { $project: { customer_id: 1, customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.find( { customer_address: { $regex: /WY/ }, payment_method_code: { $ne: 'Credit Card' } }, { customer_id: 1, customer_name: 1 } )"
    },
    {
        "question_id": 2824,
        "spider_question_id": 4793,
        "db_id": "department_store",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "query": "db.Customers.find( { customer_address: { $regex: /WY/ }, payment_method_code: { $ne: 'Credit Card' } }, { customer_id: 1, customer_name: 1 } )",
        "gpt4 answer": "db.Customers.find({ $and: [ { customer_address: /WY/ }, { payment_method_code: { $ne: 'Credit Card' } } ] }, { customer_id: 1, customer_name: 1 })",
        "deepseek answer": "db.Customers.find( { customer_address: { $regex: /WY/ }, payment_method_code: { $ne: 'Credit Card' } }, { customer_id: 1, customer_name: 1 } )"
    },
    {
        "question_id": 2825,
        "spider_question_id": 4794,
        "db_id": "department_store",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'",
        "question": "Find the average price of all product clothes.",
        "query": "db.Products.aggregate([ { $match: { product_type_code: \"Clothes\" } }, { $group: { _id: null, averagePrice: { $avg: \"$product_price\" } } } , { $project: { averagePrice: 1 } }])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_type_code: 'Clothes' } }, { $group: { _id: null, avgPrice: { $avg: \"$product_price\" } } }, { $project: { avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_type_code: \"Clothes\" } }, { $group: { _id: null, averagePrice: { $avg: \"$product_price\" } } } , { $project: { averagePrice: 1 } }])"
    },
    {
        "question_id": 2826,
        "spider_question_id": 4795,
        "db_id": "department_store",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(product_price) FROM products WHERE product_type_code = 'Clothes'",
        "question": "What is the average price of clothes?",
        "query": "db.Products.aggregate([ { $match: { product_type_code: \"Clothes\" } }, { $group: { _id: null, averagePrice: { $avg: \"$product_price\" } } } , { $project: { averagePrice: 1 } }])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_type_code: 'Clothes' } }, { $group: { _id: null, avgPrice: { $avg: '$product_price' } } }, { $project: { avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_type_code: \"Clothes\" } }, { $group: { _id: null, averagePrice: { $avg: \"$product_price\" } } } , { $project: { averagePrice: 1 } }])"
    },
    {
        "question_id": 2827,
        "spider_question_id": 4796,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
        "question": "Find the name of the most expensive hardware product.",
        "query": "db.Products.find( { product_type_code: 'Hardware' }, { product_name: 1 } ).sort({ product_price: -1 }).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.find( { product_type_code: 'Hardware' }, { product_name: 1 } ).sort({ product_price: -1 }).limit(1)"
    },
    {
        "question_id": 2828,
        "spider_question_id": 4797,
        "db_id": "department_store",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1",
        "question": "What is the name of the hardware product with the greatest price?",
        "query": "db.Products.find({product_type_code: 'Hardware'}, {product_name: 1}).sort({product_price: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.find({product_type_code: 'Hardware'}, {product_name: 1}).sort({product_price: -1}).limit(1)"
    },
    {
        "question_id": 2829,
        "spider_question_id": 4800,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Description FROM aircraft",
        "question": "List the description of all aircrafts.",
        "query": "db.aircraft.find({}, {Description: 1})",
        "gpt4 answer": "db.aircraft.find({}, { Description: 1 })",
        "deepseek answer": "db.aircraft.find({}, {Description: 1})"
    },
    {
        "question_id": 2830,
        "spider_question_id": 4801,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Description FROM aircraft",
        "question": "What are the descriptions for the aircrafts?",
        "query": "db.aircraft.find({}, {Description: 1})",
        "gpt4 answer": "db.aircraft.find({}, { Description: 1 })",
        "deepseek answer": "db.aircraft.find({}, {Description: 1})"
    },
    {
        "question_id": 2831,
        "spider_question_id": 4802,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(International_Passengers) FROM airport",
        "question": "What is the average number of international passengers of all airports?",
        "query": "db.airport.aggregate([ { $group: { _id: null, avgInternationalPassengers: { $avg: \"$International_Passengers\" } } }, { $project: { avgInternationalPassengers: 1 } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $group: { _id: null, AverageInternationalPassengers: { $avg: \"$International_Passengers\" } } }, { $project: { AverageInternationalPassengers: 1 } } ])",
        "deepseek answer": "db.airport.aggregate([ { $group: { _id: null, avgInternationalPassengers: { $avg: \"$International_Passengers\" } } }, { $project: { avgInternationalPassengers: 1 } } ])"
    },
    {
        "question_id": 2832,
        "spider_question_id": 4803,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(International_Passengers) FROM airport",
        "question": "What is the average number of international passengers for an airport?",
        "query": "db.airport.aggregate([ { $group: { _id: null, avgInternationalPassengers: { $avg: \"$International_Passengers\" } } }, { $project: { avgInternationalPassengers: 1 } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $group: { _id: null, avgInternationalPassengers: { $avg: \"$International_Passengers\" } } }, { $project: { avgInternationalPassengers: 1 } } ])",
        "deepseek answer": "db.airport.aggregate([ { $group: { _id: null, avgInternationalPassengers: { $avg: \"$International_Passengers\" } } }, { $project: { avgInternationalPassengers: 1 } } ])"
    },
    {
        "question_id": 2833,
        "spider_question_id": 4804,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT International_Passengers , Domestic_Passengers FROM airport WHERE Airport_Name = 'London Heathrow'",
        "question": "What are the number of international and domestic passengers of the airport named London 'Heathrow'?",
        "query": "db.airport.find( { Airport_Name: 'London Heathrow' }, { International_Passengers: 1, Domestic_Passengers: 1 } )",
        "gpt4 answer": "db.airport.find({ Airport_Name: 'London Heathrow' }, { International_Passengers: 1, Domestic_Passengers: 1 })",
        "deepseek answer": "db.airport.find( { Airport_Name: 'London Heathrow' }, { International_Passengers: 1, Domestic_Passengers: 1 } )"
    },
    {
        "question_id": 2834,
        "spider_question_id": 4805,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT International_Passengers , Domestic_Passengers FROM airport WHERE Airport_Name = 'London Heathrow'",
        "question": "How many international and domestic passengers are there in the airport London Heathrow?",
        "query": "db.airport.find( { Airport_Name: 'London Heathrow' }, { International_Passengers: 1, Domestic_Passengers: 1 } )",
        "gpt4 answer": "db.airport.find({ Airport_Name: 'London Heathrow' }, { International_Passengers: 1, Domestic_Passengers: 1 })",
        "deepseek answer": "db.airport.find( { Airport_Name: 'London Heathrow' }, { International_Passengers: 1, Domestic_Passengers: 1 } )"
    },
    {
        "question_id": 2835,
        "spider_question_id": 4806,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE '%London%'",
        "question": "What are the total number of Domestic Passengers of airports that contain the word 'London'.",
        "query": "db.airport.aggregate([ { $match: { Airport_Name: { $regex: /London/, $options: 'i' } } }, { $group: { _id: null, totalDomesticPassengers: { $sum: \"$Domestic_Passengers\" } } }, { $project: { totalDomesticPassengers: 1 } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $match: { Airport_Name: /London/ } }, { $group: { _id: null, totalDomesticPassengers: { $sum: \"$Domestic_Passengers\" } } }, { $project: { totalDomesticPassengers: 1 } } ])",
        "deepseek answer": "db.airport.aggregate([ { $match: { Airport_Name: { $regex: /London/, $options: 'i' } } }, { $group: { _id: null, totalDomesticPassengers: { $sum: \"$Domestic_Passengers\" } } }, { $project: { totalDomesticPassengers: 1 } } ])"
    },
    {
        "question_id": 2836,
        "spider_question_id": 4807,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE '%London%'",
        "question": "What are the total number of domestic passengers at all London airports?",
        "query": "db.airport.aggregate([ { $match: { Airport_Name: { $regex: /London/, $options: 'i' } } }, { $group: { _id: null, totalDomesticPassengers: { $sum: \"$Domestic_Passengers\" } } }, { $project: { totalDomesticPassengers: 1 } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $match: { Airport_Name: /London/ } }, { $group: { _id: null, totalDomesticPassengers: { $sum: \"$Domestic_Passengers\" } } }, { $project: { totalDomesticPassengers: 1 } } ])",
        "deepseek answer": "db.airport.aggregate([ { $match: { Airport_Name: { $regex: /London/, $options: 'i' } } }, { $group: { _id: null, totalDomesticPassengers: { $sum: \"$Domestic_Passengers\" } } }, { $project: { totalDomesticPassengers: 1 } } ])"
    },
    {
        "question_id": 2837,
        "spider_question_id": 4808,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Transit_Passengers) , min(Transit_Passengers) FROM airport",
        "question": "What are the maximum and minimum number of transit passengers of all aiports.",
        "query": "db.airport.aggregate([ { $group: { _id: null, maxTransitPassengers: { $max: \"$Transit_Passengers\" }, minTransitPassengers: { $min: \"$Transit_Passengers\" } } }, { $project: { maxTransitPassengers:1,minTransitPassengers:1 } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $group: { _id: null, maxTransitPassengers: { $max: \"$Transit_Passengers\" }, minTransitPassengers: { $min: \"$Transit_Passengers\" } } }, { $project: { maxTransitPassengers: 1, minTransitPassengers: 1 } } ])",
        "deepseek answer": "db.airport.aggregate([ { $group: { _id: null, maxTransitPassengers: { $max: \"$Transit_Passengers\" }, minTransitPassengers: { $min: \"$Transit_Passengers\" } } }, { $project: { maxTransitPassengers:1,minTransitPassengers:1 } } ])"
    },
    {
        "question_id": 2838,
        "spider_question_id": 4809,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Transit_Passengers) , min(Transit_Passengers) FROM airport",
        "question": "What is the maximum and mininum number of transit passengers for all airports?",
        "query": "db.airport.aggregate([ { $group: { _id: null, maxTransitPassengers: { $max: \"$Transit_Passengers\" }, minTransitPassengers: { $min: \"$Transit_Passengers\" } } }, { $project: { maxTransitPassengers:1,minTransitPassengers:1 } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $group: { _id: null, maxTransitPassengers: { $max: \"$Transit_Passengers\" }, minTransitPassengers: { $min: \"$Transit_Passengers\" } } }, { $project: { maxTransitPassengers: 1, minTransitPassengers: 1 } } ])",
        "deepseek answer": "db.airport.aggregate([ { $group: { _id: null, maxTransitPassengers: { $max: \"$Transit_Passengers\" }, minTransitPassengers: { $min: \"$Transit_Passengers\" } } }, { $project: { maxTransitPassengers:1,minTransitPassengers:1 } } ])"
    },
    {
        "question_id": 2839,
        "spider_question_id": 4810,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM pilot WHERE Age >= 25",
        "question": "What are the name of pilots aged 25 or older?",
        "query": "db.pilot.find({Age: {$gte: 25}}, {Name: 1})",
        "gpt4 answer": "db.pilot.find({ Age: { $gte: 25 } }, { Name: 1 })",
        "deepseek answer": "db.pilot.find({Age: {$gte: 25}}, {Name: 1})"
    },
    {
        "question_id": 2840,
        "spider_question_id": 4811,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM pilot WHERE Age >= 25",
        "question": "what is the name of every pilot who is at least 25 years old?",
        "query": "db.pilot.find({Age: {$gte: 25}}, {Name: 1})",
        "gpt4 answer": "db.pilot.find({ Age: { $gte: 25 } }, { Name: 1 })",
        "deepseek answer": "db.pilot.find({Age: {$gte: 25}}, {Name: 1})"
    },
    {
        "question_id": 2841,
        "spider_question_id": 4812,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM pilot ORDER BY Name ASC",
        "question": "List all pilot names in ascending alphabetical order.",
        "query": "db.pilot.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.pilot.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.pilot.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 2842,
        "spider_question_id": 4813,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM pilot ORDER BY Name ASC",
        "question": "What are the names of the pilots in alphabetical order?",
        "query": "db.pilot.find({}, {Name: 1}).sort({Name: 1})",
        "gpt4 answer": "db.pilot.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "db.pilot.find({}, {Name: 1}).sort({Name: 1})"
    },
    {
        "question_id": 2843,
        "spider_question_id": 4814,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC",
        "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "query": "db.pilot.find({Age: {$lte: 30}}, {Name: 1}).sort({Name: -1})",
        "gpt4 answer": "db.pilot.find({ Age: { $lte: 30 } }, { Name: 1 }).sort({ Name: -1 })",
        "deepseek answer": "db.pilot.find({Age: {$lte: 30}}, {Name: 1}).sort({Name: -1})"
    },
    {
        "question_id": 2844,
        "spider_question_id": 4815,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC",
        "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "query": "db.pilot.find({Age: {$lte: 30}}, {Name: 1}).sort({Name: -1})",
        "gpt4 answer": "db.pilot.find({ Age: { $lte: 30 } }, { Name: 1 }).sort({ Name: -1 })",
        "deepseek answer": "db.pilot.find({Age: {$lte: 30}}, {Name: 1}).sort({Name: -1})"
    },
    {
        "question_id": 2845,
        "spider_question_id": 4816,
        "db_id": "aircraft",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
        "question": "Please show the names of aircrafts associated with airport with name 'London Gatwick'.",
        "query": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Airport_Name\": \"London Gatwick\" } }, { $project: { \"_id\": 0, \"Aircraft\": \"$Aircraft\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Airport_Name\": \"London Gatwick\" } }, { $project: { \"_id\": 0, \"Aircraft\": \"$Aircraft\" } } ])"
    },
    {
        "question_id": 2846,
        "spider_question_id": 4817,
        "db_id": "aircraft",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "query": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Airport_Name\": \"London Gatwick\" } }, { $project: { Aircraft: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Airport_Name\": \"London Gatwick\" } }, { $project: { Aircraft: 1 } } ])"
    },
    {
        "question_id": 2847,
        "spider_question_id": 4818,
        "db_id": "aircraft",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000",
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "query": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Total_Passengers\": { $gt: 10000000 } } }, { $project: { Aircraft: \"$Aircraft\", Description: \"$Description\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Total_Passengers\": { $gt: 10000000 } } }, { $project: { Aircraft: \"$Aircraft\", Description: \"$Description\" } } ])"
    },
    {
        "question_id": 2848,
        "spider_question_id": 4819,
        "db_id": "aircraft",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Aircraft , T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000",
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "query": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Total_Passengers\": { $gt: 10000000 } } }, { $project: { Aircraft: 1, Description: 1 } } ])",
        "gpt4 answer": "db.airport_aircraft.aggregate([ { $lookup: { from: \"aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"aircraft_info\" } }, { $lookup: { from: \"airport\", localField: \"Airport_ID\", foreignField: \"Airport_ID\", as: \"airport_info\" } }, { $match: { \"airport_info.Total_Passengers\": { $gt: 10000000 } } }, { $unwind: \"$aircraft_info\" }, { $project: { \"Aircraft\": \"$aircraft_info.Aircraft\", \"Description\": \"$aircraft_info.Description\" } } ])",
        "deepseek answer": "db.aircraft.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $match: { \"airport.Total_Passengers\": { $gt: 10000000 } } }, { $project: { Aircraft: 1, Description: 1 } } ])"
    },
    {
        "question_id": 2849,
        "spider_question_id": 4820,
        "db_id": "aircraft",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = 'Robinson R-22'",
        "question": "What is the average total number of passengers of airports that are associated with aircraft 'Robinson R-22'?",
        "query": "db.aircraft.aggregate([ { $match: { Aircraft: \"Robinson R-22\" } }, { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $group: { _id: null, avgTotalPassengers: { $avg: \"$airport.Total_Passengers\" } } } , { $project: { avgTotalPassengers: 1 } }])",
        "gpt4 answer": "db.airport.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Airport_ID\", foreignField: \"Airport_ID\", as: \"aircraftMapping\" } }, { $unwind: \"$aircraftMapping\" }, { $lookup: { from: \"aircraft\", localField: \"aircraftMapping.Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"aircraftDetail\" } }, { $unwind: \"$aircraftDetail\" }, { $match: { \"aircraftDetail.Aircraft\": \"Robinson R-22\" } }, { $group: { _id: null, AverageTotalPassengers: { $avg: \"$Total_Passengers\" } } }, { $project: { AverageTotalPassengers: 1 } } ])",
        "deepseek answer": "db.aircraft.aggregate([ { $match: { Aircraft: \"Robinson R-22\" } }, { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $group: { _id: null, avgTotalPassengers: { $avg: \"$airport.Total_Passengers\" } } } , { $project: { avgTotalPassengers: 1 } }])"
    },
    {
        "question_id": 2850,
        "spider_question_id": 4821,
        "db_id": "aircraft",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = 'Robinson R-22'",
        "question": "What is the average total number of passengers for all airports that the aircraft 'Robinson R-22' visits?",
        "query": "db.aircraft.aggregate([ { $match: { Aircraft: \"Robinson R-22\" } }, { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $group: { _id: null, avgTotalPassengers: { $avg: \"$airport.Total_Passengers\" } } } , { $project: { avgTotalPassengers: 1 } }])",
        "gpt4 answer": "db.airport.aggregate([ { $lookup: { from: \"airport_aircraft\", localField: \"Airport_ID\", foreignField: \"Airport_ID\", as: \"airport_aircraft_join\" } }, { $unwind: \"$airport_aircraft_join\" }, { $lookup: { from: \"aircraft\", localField: \"airport_aircraft_join.Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"aircraft_join\" } }, { $unwind: \"$aircraft_join\" }, { $match: { \"aircraft_join.Aircraft\": \"Robinson R-22\" } }, { $group: { _id: null, averageTotalPassengers: { $avg: \"$Total_Passengers\" } } }, { $project: { averageTotalPassengers: 1 } } ])",
        "deepseek answer": "db.aircraft.aggregate([ { $match: { Aircraft: \"Robinson R-22\" } }, { $lookup: { from: \"airport_aircraft\", localField: \"Aircraft_ID\", foreignField: \"Aircraft_ID\", as: \"airport_aircraft\" } }, { $unwind: \"$airport_aircraft\" }, { $lookup: { from: \"airport\", localField: \"airport_aircraft.Airport_ID\", foreignField: \"Airport_ID\", as: \"airport\" } }, { $unwind: \"$airport\" }, { $group: { _id: null, avgTotalPassengers: { $avg: \"$airport.Total_Passengers\" } } } , { $project: { avgTotalPassengers: 1 } }])"
    },
    {
        "question_id": 2851,
        "spider_question_id": 4828,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM pilot ORDER BY Age DESC",
        "question": "List names of all pilot in descending order of age.",
        "query": "db.pilot.find({}, {Name: 1}).sort({Age: -1})",
        "gpt4 answer": "db.pilot.find({}, {Name: 1}).sort({Age: -1})",
        "deepseek answer": "db.pilot.find({}, {Name: 1}).sort({Age: -1})"
    },
    {
        "question_id": 2852,
        "spider_question_id": 4829,
        "db_id": "aircraft",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM pilot ORDER BY Age DESC",
        "question": "What are the names of all pilots listed by descending age?",
        "query": "db.pilot.find({}, {Name: 1}).sort({Age: -1})",
        "gpt4 answer": "db.pilot.find({}, { Name: 1 }).sort({ Age: -1 })",
        "deepseek answer": "db.pilot.find({}, {Name: 1}).sort({Age: -1})"
    },
    {
        "question_id": 2853,
        "spider_question_id": 4836,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "question": "Show all information on the airport that has the largest number of international passengers.",
        "query": "db.airport.find().sort({International_Passengers: -1}).limit(1)",
        "gpt4 answer": "db.airport.find().sort({\"International_Passengers\": -1}).limit(1)",
        "deepseek answer": "db.airport.find().sort({International_Passengers: -1}).limit(1)"
    },
    {
        "question_id": 2854,
        "spider_question_id": 4837,
        "db_id": "aircraft",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
        "question": "What is all the information on the airport with the largest number of international passengers?",
        "query": "db.airport.find().sort({\"International_Passengers\": -1}).limit(1)",
        "gpt4 answer": "db.airport.find().sort({\"International_Passengers\": -1}).limit(1)",
        "deepseek answer": "db.airport.find().sort({\"International_Passengers\": -1}).limit(1)"
    },
    {
        "question_id": 2855,
        "spider_question_id": 4844,
        "db_id": "local_govt_and_lot",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id",
        "question": "How many residents does each property have? List property id and resident count.",
        "query": "db.Residents.aggregate([ { $group: { _id: \"$property_id\", residentCount: { $sum: 1 } }}, { $project: { property_id: \"$_id\", residentCount: 1 }} ])",
        "gpt4 answer": "db.Residents.aggregate([ { $group: { _id: \"$property_id\", residentCount: { $sum: 1 } }}, { $project: { property_id: \"$_id\", residentCount: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2856,
        "spider_question_id": 4845,
        "db_id": "local_govt_and_lot",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "db.Services.aggregate([ { $lookup: { from: \"Organizations\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"organization\" } }, { $match: { \"organization.organization_details\": \"Denesik and Sons Party\" } }, { $group: { _id: \"$service_type_code\" } }, { $project: { service_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Services.aggregate([ { $lookup: { from: \"Organizations\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"organization\" } }, { $match: { \"organization.organization_details\": \"Denesik and Sons Party\" } }, { $group: { _id: \"$service_type_code\" } }, { $project: { service_type_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2857,
        "spider_question_id": 4849,
        "db_id": "local_govt_and_lot",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 3",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Events\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_events\" } }, { $match: { \"customer_events\": { $exists: true } } }, { $addFields: { event_count: { $size: \"$customer_events\" } } }, { $match: { event_count: { $gte: 3 } } }, { $project: { customer_id: 1, customer_details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Events\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"events\" } }, { $project: { customer_id: 1, customer_details: 1, numberOfEvents: { $size: \"$events\" } } }, { $match: { numberOfEvents: { $gte: 3 } } }, { $project: { customer_id: 1, customer_details: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Events\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_events\" } }, { $match: { \"customer_events\": { $exists: true } } }, { $addFields: { event_count: { $size: \"$customer_events\" } } }, { $match: { event_count: { $gte: 3 } } }, { $project: { customer_id: 1, customer_details: 1 } } ])"
    },
    {
        "question_id": 2858,
        "spider_question_id": 4851,
        "db_id": "local_govt_and_lot",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Customer_Event_ID , T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "question": "Which events have the number of notes between one and three? List the event id and the property id.",
        "query": "db.Customer_Events.aggregate([ { $lookup: { from: \"Customer_Event_Notes\", localField: \"Customer_Event_ID\", foreignField: \"Customer_Event_ID\", as: \"notes\" } }, { $project: { Customer_Event_ID: 1, property_id: 1 } }, { $match: { noteCount: { $gte: 1, $lte: 3 } } } ])",
        "gpt4 answer": "db.Customer_Events.aggregate([ { $lookup: { from: \"Customer_Event_Notes\", localField: \"Customer_Event_ID\", foreignField: \"Customer_Event_ID\", as: \"notes\" } }, { $project: { Customer_Event_ID: 1, property_id: 1, numberOfNotes: { $size: \"$notes\" } } }, { $match: { numberOfNotes: { $gte: 1, $lte: 3 } } }, { $project: { Customer_Event_ID: 1, property_id: 1 } } ])",
        "deepseek answer": "db.Customer_Events.aggregate([ { $lookup: { from: \"Customer_Event_Notes\", localField: \"Customer_Event_ID\", foreignField: \"Customer_Event_ID\", as: \"notes\" } }, { $project: { Customer_Event_ID: 1, property_id: 1 } }, { $match: { noteCount: { $gte: 1, $lte: 3 } } } ])"
    },
    {
        "question_id": 2859,
        "spider_question_id": 4853,
        "db_id": "local_govt_and_lot",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "query": "db.Things.aggregate([ { $match: { service_details: \"Unsatisfied\" } }, { $lookup: { from: \"Timed_Locations_of_Things\", localField: \"thing_id\", foreignField: \"thing_id\", as: \"locations\" } }, { $unwind: \"$locations\" }, { $group: { _id: null, distinctLocations: { $addToSet: \"$locations.Location_Code\" } } }, { $project: { count: { $size: \"$distinctLocations\" } } } ])",
        "gpt4 answer": "db.Things.aggregate([ { $match: { service_details: 'Unsatisfied' } }, { $lookup: { from: \"Timed_Locations_of_Things\", localField: \"thing_id\", foreignField: \"thing_id\", as: \"locations\" } }, { $unwind: \"$locations\" }, { $group: { _id: \"$locations.Location_Code\" } }, { $count: \"distinct_locations\" } ])",
        "deepseek answer": "db.Things.aggregate([ { $match: { service_details: \"Unsatisfied\" } }, { $lookup: { from: \"Timed_Locations_of_Things\", localField: \"thing_id\", foreignField: \"thing_id\", as: \"locations\" } }, { $unwind: \"$locations\" }, { $group: { _id: null, distinctLocations: { $addToSet: \"$locations.Location_Code\" } } }, { $project: { count: { $size: \"$distinctLocations\" } } } ])"
    },
    {
        "question_id": 2860,
        "spider_question_id": 4857,
        "db_id": "local_govt_and_lot",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "question": "What are the resident details containing the substring 'Miss'?",
        "query": "db.Residents.find({other_details: {$regex: /Miss/}}, {other_details: 1})",
        "gpt4 answer": "db.Residents.find({ other_details: { $regex: /Miss/ } }, { other_details: 1 })",
        "deepseek answer": "db.Residents.find({other_details: {$regex: /Miss/}}, {other_details: 1})"
    },
    {
        "question_id": 2861,
        "spider_question_id": 4859,
        "db_id": "local_govt_and_lot",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
        "question": "How many customers did not have any event?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Events\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"events\" } }, { $match: { events: { $size: 0 } } }, { $count: \"customers_without_events\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Events\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"events\" } }, { $match: { events: { $size: 0 } } }, { $count: \"customers_without_events\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2862,
        "spider_question_id": 4863,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
        "question": "List the locations of schools in ascending order of enrollment.",
        "query": "db.school.find({}, {Location: 1}).sort({Enrollment: 1})",
        "gpt4 answer": "db.school.find({}, { Location: 1 }).sort({ Enrollment: 1 })",
        "deepseek answer": "db.school.find({}, {Location: 1}).sort({Enrollment: 1})"
    },
    {
        "question_id": 2863,
        "spider_question_id": 4864,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
        "question": "What is the list of school locations sorted in ascending order of school enrollment?",
        "query": "db.school.aggregate([ { $sort: { Enrollment: 1 } }, { $project: { Location: 1 } } ])",
        "gpt4 answer": "db.school.find({}, {Location: 1}).sort({Enrollment: 1})",
        "deepseek answer": "db.school.aggregate([ { $sort: { Enrollment: 1 } }, { $project: { Location: 1 } } ])"
    },
    {
        "question_id": 2864,
        "spider_question_id": 4865,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC",
        "question": "List the locations of schools in descending order of founded year.",
        "query": "db.school.aggregate([ { $project: { Location: 1 } }, { $sort: { Founded: -1 } } ])",
        "gpt4 answer": "db.school.find({}, { Location: 1 }).sort({ Founded: -1 })",
        "deepseek answer": "db.school.aggregate([ { $project: { Location: 1 } }, { $sort: { Founded: -1 } } ])"
    },
    {
        "question_id": 2865,
        "spider_question_id": 4866,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC",
        "question": "What is the list of school locations sorted in descending order of school foundation year?",
        "query": "db.school.aggregate([ { $sort: { Founded: -1 } }, { $project: { Location: 1 } } ])",
        "gpt4 answer": "db.school.find({}, {Location: 1}).sort({Founded: -1})",
        "deepseek answer": "db.school.aggregate([ { $sort: { Founded: -1 } }, { $project: { Location: 1 } } ])"
    },
    {
        "question_id": 2866,
        "spider_question_id": 4867,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Enrollment FROM school WHERE Denomination != 'Catholic'",
        "question": "What are the enrollments of schools whose denomination is not 'Catholic'?",
        "query": "db.school.find({ Denomination: { $ne: 'Catholic' } }, { Enrollment: 1 })",
        "gpt4 answer": "db.school.find({ Denomination: { $ne: 'Catholic' } }, { Enrollment: 1 })",
        "deepseek answer": "db.school.find({ Denomination: { $ne: 'Catholic' } }, { Enrollment: 1 })"
    },
    {
        "question_id": 2867,
        "spider_question_id": 4868,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Enrollment FROM school WHERE Denomination != 'Catholic'",
        "question": "List the enrollment for each school that does not have 'Catholic' as denomination.",
        "query": "db.school.aggregate([ { $match: { Denomination: { $ne: 'Catholic' } } }, { $project: { Enrollment: 1 } } ])",
        "gpt4 answer": "db.school.find({Denomination: {$ne: 'Catholic'}}, {Enrollment: 1})",
        "deepseek answer": "db.school.aggregate([ { $match: { Denomination: { $ne: 'Catholic' } } }, { $project: { Enrollment: 1 } } ])"
    },
    {
        "question_id": 2868,
        "spider_question_id": 4869,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Enrollment) FROM school",
        "question": "What is the average enrollment of schools?",
        "query": "db.school.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])"
    },
    {
        "question_id": 2869,
        "spider_question_id": 4870,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Enrollment) FROM school",
        "question": "Take the average of the school enrollment.",
        "query": "db.school.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: null, avgEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { avgEnrollment: 1 } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$Enrollment\" } } }, { $project: { averageEnrollment: 1 } } ])"
    },
    {
        "question_id": 2870,
        "spider_question_id": 4875,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "question": "Find the team of the player of the highest age.",
        "query": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(1)",
        "deepseek answer": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 2871,
        "spider_question_id": 4876,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "question": "Which team has the oldest player?",
        "query": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(1)",
        "deepseek answer": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 2872,
        "spider_question_id": 4877,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "question": "List the teams of the players with the top 5 largest ages.",
        "query": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(5)",
        "gpt4 answer": "db.player.find({}, { Team: 1 }).sort({ Age: -1 }).limit(5)",
        "deepseek answer": "db.player.find({}, {Team: 1}).sort({Age: -1}).limit(5)"
    },
    {
        "question_id": 2873,
        "spider_question_id": 4878,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "question": "What are the teams that have the 5 oldest players?",
        "query": "db.player.aggregate([ { $sort: { Age: -1 } }, { $limit: 5 }, { $project: { Team: 1 } } ])",
        "gpt4 answer": "db.player.find({}, { Team: 1 }).sort({ Age: -1 }).limit(5)",
        "deepseek answer": "db.player.aggregate([ { $sort: { Age: -1 } }, { $limit: 5 }, { $project: { Team: 1 } } ])"
    },
    {
        "question_id": 2874,
        "spider_question_id": 4884,
        "db_id": "school_player",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the denomination of the school the most players belong to?",
        "query": "db.school.aggregate([ { $lookup: { from: \"player\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"players\" } }, { $project: { Denomination: 1 } }, { $sort: { playerCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.school.aggregate([ { $lookup: { from: \"player\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"players\" } }, { $project: { Denomination: 1 } }, { $sort: { playerCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 2875,
        "spider_question_id": 4886,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
        "question": "What are the location and nickname of each school?",
        "query": "db.school.aggregate([ { $lookup: { from: \"school_details\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"details\" } }, { $unwind: \"$details\" }, { $project: { Location: 1, Nickname: \"$details.Nickname\" } } ])",
        "gpt4 answer": "db.school.aggregate([ { $lookup: { from: \"school_details\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"details\" } }, { $unwind: \"$details\" }, { $project: { Location: 1, Nickname: \"$details.Nickname\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2876,
        "spider_question_id": 4887,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination",
        "question": "Please show different denominations and the corresponding number of schools.",
        "query": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", NumberOfSchools: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", NumberOfSchools: 1 } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2877,
        "spider_question_id": 4888,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination",
        "question": "For each denomination, return the denomination and the count of schools with that denomination.",
        "query": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2878,
        "spider_question_id": 4889,
        "db_id": "school_player",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "query": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", count: 1 } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", numberOfSchools: { $sum: 1 } } }, { $sort: { numberOfSchools: -1 } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $project: { Denomination: \"$_id\", count: 1 } }, { $sort: { count: -1 } } ])"
    },
    {
        "question_id": 2879,
        "spider_question_id": 4890,
        "db_id": "school_player",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.",
        "query": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Denomination: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Denomination: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Denomination: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2880,
        "spider_question_id": 4891,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "question": "List the school color of the school that has the largest enrollment.",
        "query": "db.school.aggregate([ { $sort: { Enrollment: -1 } }, { $limit: 1 }, { $project: { School_Colors: 1 } } ])",
        "gpt4 answer": "db.school.find({}, {School_Colors: 1}).sort({Enrollment: -1}).limit(1)",
        "deepseek answer": "db.school.aggregate([ { $sort: { Enrollment: -1 } }, { $limit: 1 }, { $project: { School_Colors: 1 } } ])"
    },
    {
        "question_id": 2881,
        "spider_question_id": 4892,
        "db_id": "school_player",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "question": "What is the school color of the school with the largest enrollment?",
        "query": "db.school.find({}, {School_Colors: 1}).sort({Enrollment: -1}).limit(1)",
        "gpt4 answer": "db.school.find({}, { School_Colors: 1 }).sort({ Enrollment: -1 }).limit(1)",
        "deepseek answer": "db.school.find({}, {School_Colors: 1}).sort({Enrollment: -1}).limit(1)"
    },
    {
        "question_id": 2882,
        "spider_question_id": 4897,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "db.school_details.find( { Division: { $ne: 'Division 1' } }, { Nickname: 1 } )",
        "gpt4 answer": "db.school_details.find({ Division: { $ne: \"Division 1\" } }, { Nickname: 1 })",
        "deepseek answer": "db.school_details.find( { Division: { $ne: 'Division 1' } }, { Nickname: 1 } )"
    },
    {
        "question_id": 2883,
        "spider_question_id": 4899,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1",
        "question": "Show the denomination shared by more than one school.",
        "query": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Denomination: \"$_id\" } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Denomination: \"$_id\" } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Denomination: \"$_id\" } } ])"
    },
    {
        "question_id": 2884,
        "spider_question_id": 4900,
        "db_id": "school_player",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1",
        "question": "What are the denomination more than one school have?",
        "query": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Denomination: \"$_id\" } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } }}, { $match: { count: { $gt: 1 } }}, { $project: { Denomination: \"$_id\" }} ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Denomination\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Denomination: \"$_id\" } } ])"
    },
    {
        "question_id": 2885,
        "spider_question_id": 4902,
        "db_id": "store_product",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "question": "What are the different district names in order of descending city area?",
        "query": "db.district.aggregate([ { $group: { _id: \"$District_name\" }}, { $sort: { \"City_Area\": -1 }} ])",
        "gpt4 answer": "db.district.aggregate([ { $group: { _id: \"$District_name\" }}, { $sort: { \"City_Area\": -1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2886,
        "spider_question_id": 4903,
        "db_id": "store_product",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
        "question": "Find the list of page size which have more than 3 product listed",
        "query": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { max_page_size: \"$_id\" } } ])",
        "gpt4 answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { max_page_size: \"$_id\" } } ])",
        "deepseek answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { max_page_size: \"$_id\" } } ])"
    },
    {
        "question_id": 2887,
        "spider_question_id": 4904,
        "db_id": "store_product",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3",
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "query": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { max_page_size: \"$_id\" } } ])",
        "gpt4 answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", numProducts: { $sum: 1 } } }, { $match: { numProducts: { $gt: 3 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { max_page_size: \"$_id\" } } ])"
    },
    {
        "question_id": 2888,
        "spider_question_id": 4905,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "query": "db.district.find( { City_Population: { $gte: 200000, $lte: 2000000 } }, { District_name: 1, City_Population: 1 } )",
        "gpt4 answer": "db.district.find({ City_Population: { $gte: 200000, $lte: 2000000 } }, { District_name: 1, City_Population: 1 })",
        "deepseek answer": "db.district.find( { City_Population: { $gte: 200000, $lte: 2000000 } }, { District_name: 1, City_Population: 1 } )"
    },
    {
        "question_id": 2889,
        "spider_question_id": 4906,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "query": "db.district.find( { City_Population: { $gte: 200000, $lte: 2000000 } }, { District_name: 1, City_Population: 1 } )",
        "gpt4 answer": "db.district.find({ City_Population: { $gte: 200000, $lte: 2000000 } }, { District_name: 1, City_Population: 1 })",
        "deepseek answer": "db.district.find( { City_Population: { $gte: 200000, $lte: 2000000 } }, { District_name: 1, City_Population: 1 } )"
    },
    {
        "question_id": 2890,
        "spider_question_id": 4907,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "query": "db.district.find( { $or: [ {\"City_Area\": {$gt: 10}}, {\"City_Population\": {$gt: 100000}} ] }, {\"District_name\": 1, \"_id\": 0} )",
        "gpt4 answer": "db.district.find( { $or: [ { City_Area: { $gt: 10 } }, { City_Population: { $gt: 100000 } } ] }, { District_name: 1 } )",
        "deepseek answer": "db.district.find( { $or: [ {\"City_Area\": {$gt: 10}}, {\"City_Population\": {$gt: 100000}} ] }, {\"District_name\": 1, \"_id\": 0} )"
    },
    {
        "question_id": 2891,
        "spider_question_id": 4908,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "query": "db.district.find({ $or: [ { City_Area: { $gt: 10 } }, { City_Population: { $gt: 100000 } } ] }, { District_name: 1 })",
        "gpt4 answer": "db.district.find({ $or: [ { City_Area: { $gt: 10 } }, { City_Population: { $gt: 100000 } } ] }, { District_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 2892,
        "spider_question_id": 4910,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "question": "What is the name of the district with the most residents?",
        "query": "db.district.find({}, { District_name: 1 }).sort({ City_Population: -1 }).limit(1)",
        "gpt4 answer": "db.district.find({}, { District_name: 1 }).sort({ City_Population: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2893,
        "spider_question_id": 4911,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "question": "Which district has the least area?",
        "query": "db.district.find({}, { District_name: 1 }).sort({ City_Area: 1 }).limit(1)",
        "gpt4 answer": "db.district.find({}, { District_name: 1 }).sort({ City_Area: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2894,
        "spider_question_id": 4912,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "question": "What is the name of the district with the smallest area?",
        "query": "db.district.find({}, { District_name: 1 }).sort({ City_Area: 1 }).limit(1)",
        "gpt4 answer": "db.district.find({}, { District_name: 1 }).sort({ City_Area: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 2895,
        "spider_question_id": 4915,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , count(*) FROM store GROUP BY TYPE",
        "question": "Find all types of store and number of them.",
        "query": "db.store.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $project: { Type: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.store.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $project: { Type: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2896,
        "spider_question_id": 4916,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT TYPE , count(*) FROM store GROUP BY TYPE",
        "question": "For each type of store, how many of them are there?",
        "query": "db.store.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.store.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.store.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 2897,
        "spider_question_id": 4917,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = 'Khanewal District'",
        "question": "Find the names of all stores in Khanewal District.",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { \"district.District_name\": \"Khanewal District\" } }, { $project: { Store_Name: 1 } } ])",
        "gpt4 answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district_join\" } }, { $unwind: \"$store_district_join\" }, { $lookup: { from: \"district\", localField: \"store_district_join.District_ID\", foreignField: \"District_ID\", as: \"district_join\" } }, { $unwind: \"$district_join\" }, { $match: { \"district_join.District_name\": \"Khanewal District\" } }, { $project: { Store_Name: 1 } } ])",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { \"district.District_name\": \"Khanewal District\" } }, { $project: { Store_Name: 1 } } ])"
    },
    {
        "question_id": 2898,
        "spider_question_id": 4918,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = 'Khanewal District'",
        "question": "What are the names of all the stores located in Khanewal District?",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { \"district.District_name\": \"Khanewal District\" } }, { $project: { Store_Name: 1 } } ])",
        "gpt4 answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $match: { \"district_info.District_name\": \"Khanewal District\" } }, { $project: { Store_Name: 1 } } ])",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { \"district.District_name\": \"Khanewal District\" } }, { $project: { Store_Name: 1 } } ])"
    },
    {
        "question_id": 2899,
        "spider_question_id": 4921,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = 'Blackville'",
        "question": "Which city is the headquarter of the store named 'Blackville' in?",
        "query": "db.store.aggregate([ { $match: { Store_Name: \"Blackville\" } }, { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district_info\" } }, { $unwind: \"$store_district_info\" }, { $lookup: { from: \"district\", localField: \"store_district_info.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $project: { headquartered_city: \"$district_info.Headquartered_City\" } } ])",
        "gpt4 answer": "db.store.aggregate([ { $match: { Store_Name: \"Blackville\" } }, { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district_info\" } }, { $unwind: \"$store_district_info\" }, { $lookup: { from: \"district\", localField: \"store_district_info.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $project: { headquartered_city: \"$district_info.Headquartered_City\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2900,
        "spider_question_id": 4922,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = 'Blackville'",
        "question": "What city is the headquarter of the store Blackville?",
        "query": "db.store.aggregate([ { $match: { Store_Name: \"Blackville\" } }, { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district_info\" } }, { $unwind: \"$store_district_info\" }, { $lookup: { from: \"district\", localField: \"store_district_info.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $project: { headquartered_city: \"$district_info.Headquartered_City\" } } ])",
        "gpt4 answer": "db.store.aggregate([ { $match: { Store_Name: \"Blackville\" } }, { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district_info\" } }, { $unwind: \"$store_district_info\" }, { $lookup: { from: \"district\", localField: \"store_district_info.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $project: { headquartered_city: \"$district_info.Headquartered_City\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2901,
        "spider_question_id": 4923,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
        "question": "Find the number of stores in each city.",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $project: { Headquartered_City: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.store_district.aggregate([ { $lookup: { from: \"district\", localField: \"District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $group: { _id: \"$district_info.Headquartered_City\", store_count: { $sum: 1 } } }, { $project: { headquartered_city: \"$_id\", number_of_stores: \"$store_count\" } } ])",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $project: { Headquartered_City: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2902,
        "spider_question_id": 4924,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.headquartered_city , count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city",
        "question": "How many stores are headquarted in each city?",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $project: { Headquartered_City: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $group: { _id: \"$district_info.Headquartered_City\", store_count: { $sum: 1 } } }, { $project: { headquartered_city: \"$_id\", store_count: 1 } } ])",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $project: { Headquartered_City: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 2903,
        "spider_question_id": 4925,
        "db_id": "store_product",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the city with the most number of stores.",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Headquartered_City: \"$_id\" } } ])",
        "gpt4 answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $group: { _id: \"$district_info.Headquartered_City\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { headquartered_city: \"$_id\" } } ])",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Headquartered_City: \"$_id\" } } ])"
    },
    {
        "question_id": 2904,
        "spider_question_id": 4926,
        "db_id": "store_product",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the city with the most number of flagship stores?",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Headquartered_City: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $group: { _id: \"$district.Headquartered_City\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Headquartered_City: \"$_id\" } } ])"
    },
    {
        "question_id": 2905,
        "spider_question_id": 4927,
        "db_id": "store_product",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(pages_per_minute_color) FROM product",
        "question": "What is the average pages per minute color?",
        "query": "db.product.aggregate([ { $group: { _id: null, averagePagesPerMinuteColor: { $avg: \"$pages_per_minute_color\" } } }, { $project: { averagePagesPerMinuteColor: 1} } ])",
        "gpt4 answer": "db.product.aggregate([ { $group: { _id: null, averagePagesPerMinuteColor: { $avg: \"$pages_per_minute_color\" } } }, { $project: { averagePagesPerMinuteColor: 1 } } ])",
        "deepseek answer": "db.product.aggregate([ { $group: { _id: null, averagePagesPerMinuteColor: { $avg: \"$pages_per_minute_color\" } } }, { $project: { averagePagesPerMinuteColor: 1} } ])"
    },
    {
        "question_id": 2906,
        "spider_question_id": 4928,
        "db_id": "store_product",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(pages_per_minute_color) FROM product",
        "question": "What is the average number of pages per minute color?",
        "query": "db.product.aggregate([ { $group: { _id: null, averagePagesPerMinuteColor: { $avg: \"$pages_per_minute_color\" } } }, { $project: { averagePagesPerMinuteColor: 1} } ])",
        "gpt4 answer": "db.product.aggregate([ { $group: { _id: null, avgPagesPerMinuteColor: { $avg: \"$pages_per_minute_color\" } } }, { $project: { avgPagesPerMinuteColor: 1 } } ])",
        "deepseek answer": "db.product.aggregate([ { $group: { _id: null, averagePagesPerMinuteColor: { $avg: \"$pages_per_minute_color\" } } }, { $project: { averagePagesPerMinuteColor: 1} } ])"
    },
    {
        "question_id": 2907,
        "spider_question_id": 4929,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = 'Miramichi'",
        "question": "What products are available at store named 'Miramichi'?",
        "query": "db.store.aggregate([ { $match: { Store_Name: \"Miramichi\" }}, { $lookup: { from: \"store_product\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_products\" }}, { $unwind: \"$store_products\" }, { $lookup: { from: \"product\", localField: \"store_products.Product_ID\", foreignField: \"product_id\", as: \"product_details\" }}, { $unwind: \"$product_details\" }, { $project: { product: \"$product_details.product\" }} ])",
        "gpt4 answer": "db.store.aggregate([ { $match: { Store_Name: \"Miramichi\" }}, { $lookup: { from: \"store_product\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_products\" }}, { $unwind: \"$store_products\" }, { $lookup: { from: \"product\", localField: \"store_products.Product_ID\", foreignField: \"product_id\", as: \"product_details\" }}, { $unwind: \"$product_details\" }, { $project: { product: \"$product_details.product\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2908,
        "spider_question_id": 4931,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5",
        "question": "Find products with max page size as 'A4' and pages per minute color smaller than 5.",
        "query": "db.product.find( { max_page_size: 'A4', pages_per_minute_color: { $lt: 5 } }, { product: 1 } )",
        "gpt4 answer": "db.product.find({ max_page_size: 'A4', pages_per_minute_color: { $lt: 5 } }, { product: 1 })",
        "deepseek answer": "db.product.find( { max_page_size: 'A4', pages_per_minute_color: { $lt: 5 } }, { product: 1 } )"
    },
    {
        "question_id": 2909,
        "spider_question_id": 4932,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5",
        "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
        "query": "db.product.find( { max_page_size: \"A4\", pages_per_minute_color: { $lt: 5 } }, { product: 1 } )",
        "gpt4 answer": "db.product.find({ max_page_size: 'A4', pages_per_minute_color: { $lt: 5 }}, { product: 1 })",
        "deepseek answer": "db.product.find( { max_page_size: \"A4\", pages_per_minute_color: { $lt: 5 } }, { product: 1 } )"
    },
    {
        "question_id": 2910,
        "spider_question_id": 4933,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < 5",
        "question": "Find products with max page size as 'A4' or pages per minute color smaller than 5.",
        "query": "db.product.find( { $or: [ {max_page_size: 'A4'}, {pages_per_minute_color: {$lt: 5}} ] }, {product: 1} )",
        "gpt4 answer": "db.product.find({ $or: [ { max_page_size: 'A4' }, { pages_per_minute_color: { $lt: 5 } } ] }, { product: 1 })",
        "deepseek answer": "db.product.find( { $or: [ {max_page_size: 'A4'}, {pages_per_minute_color: {$lt: 5}} ] }, {product: 1} )"
    },
    {
        "question_id": 2911,
        "spider_question_id": 4934,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < 5",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "query": "db.product.find( { $or: [ { max_page_size: \"A4\" }, { pages_per_minute_color: { $lt: 5 } } ] }, { product: 1 } )",
        "gpt4 answer": "db.product.find({ $or: [{ max_page_size: 'A4' }, { pages_per_minute_color: { $lt: 5 } }] }, { product: 1 })",
        "deepseek answer": "db.product.find( { $or: [ { max_page_size: \"A4\" }, { pages_per_minute_color: { $lt: 5 } } ] }, { product: 1 } )"
    },
    {
        "question_id": 2912,
        "spider_question_id": 4935,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product FROM product WHERE product LIKE '%Scanner%'",
        "question": "Find all the product whose name contains the word 'Scanner'.",
        "query": "db.product.find({product: {$regex: /Scanner/}}, { product: 1})",
        "gpt4 answer": "db.product.find({ product: /Scanner/ }, { product: 1 })",
        "deepseek answer": "db.product.find({product: {$regex: /Scanner/}}, { product: 1})"
    },
    {
        "question_id": 2913,
        "spider_question_id": 4936,
        "db_id": "store_product",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product FROM product WHERE product LIKE '%Scanner%'",
        "question": "What are all of the products whose name includes the substring 'Scanner'?",
        "query": "db.product.find({ product: { $regex: /Scanner/ } }, { product: 1 })",
        "gpt4 answer": "db.product.find({ product: /Scanner/ }, { product: 1 })",
        "deepseek answer": "db.product.find({ product: { $regex: /Scanner/ } }, { product: 1 })"
    },
    {
        "question_id": 2914,
        "spider_question_id": 4937,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the most prominent max page size among all the products.",
        "query": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { max_page_size: \"$_id\" } } ])",
        "gpt4 answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } }}, { $sort: { count: -1 }}, { $limit: 1 }, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { max_page_size: \"$_id\" } } ])"
    },
    {
        "question_id": 2915,
        "spider_question_id": 4938,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common maximum page size?",
        "query": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { max_page_size: \"$_id\" } } ])",
        "gpt4 answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.product.aggregate([ { $group: { _id: \"$max_page_size\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { max_page_size: \"$_id\" } } ])"
    },
    {
        "question_id": 2916,
        "spider_question_id": 4942,
        "db_id": "store_product",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT sum(city_population) FROM district WHERE city_area > (SELECT avg(city_area) FROM district)",
        "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
        "query": "db.district.aggregate([ { $group: { _id: null, averageCityArea: { $avg: \"$City_Area\" } } }, { $lookup: { from: \"district\", let: { averageCityArea: \"$averageCityArea\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$City_Area\", \"$$averageCityArea\" ] } } }, { $group: { _id: null, totalPopulation: { $sum: \"$City_Population\" } } } ], as: \"districtsWithLargeArea\" } }, { $unwind: \"$districtsWithLargeArea\" }, { $project: { totalPopulation: \"$districtsWithLargeArea.totalPopulation\" } } ])",
        "gpt4 answer": "db.district.aggregate([ { $group: { _id: null, averageCityArea: { $avg: \"$City_Area\" } } }, { $lookup: { from: \"district\", let: { averageCityArea: \"$averageCityArea\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$City_Area\", \"$$averageCityArea\" ] } } }, { $group: { _id: null, totalPopulation: { $sum: \"$City_Population\" } } } ], as: \"districtsWithLargeArea\" } }, { $unwind: \"$districtsWithLargeArea\" }, { $project: { totalPopulation: \"$districtsWithLargeArea.totalPopulation\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2917,
        "spider_question_id": 4943,
        "db_id": "store_product",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'City Mall' INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'Village Store'",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { Type: { $in: [\"City Mall\", \"Village Store\"] } } }, { $group: { _id: \"$district.District_name\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { District_name: \"$_id\" } } ])",
        "gpt4 answer": "db.store.aggregate([ { $match: { $or: [ { Type: \"City Mall\" }, { Type: \"Village Store\" } ] } }, { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"district_info\" } }, { $unwind: \"$district_info\" }, { $lookup: { from: \"district\", localField: \"district_info.District_ID\", foreignField: \"District_ID\", as: \"district_details\" } }, { $unwind: \"$district_details\" }, { $group: { _id: \"$district_details.District_name\", storeTypes: { $addToSet: \"$Type\" } } }, { $match: { storeTypes: { $all: [\"City Mall\", \"Village Store\"] } } }, { $project: { District_name: \"$_id\" } } ])",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { Type: { $in: [\"City Mall\", \"Village Store\"] } } }, { $group: { _id: \"$district.District_name\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { District_name: \"$_id\" } } ])"
    },
    {
        "question_id": 2918,
        "spider_question_id": 4944,
        "db_id": "store_product",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'City Mall' INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'Village Store'",
        "question": "What are the names of the districts that have both mall and village store style shops?",
        "query": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { $or: [ { Type: \"City Mall\" }, { Type: \"Village Store\" } ] } }, { $group: { _id: \"$district.District_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { District_name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.store.aggregate([ { $lookup: { from: \"store_district\", localField: \"Store_ID\", foreignField: \"Store_ID\", as: \"store_district\" } }, { $unwind: \"$store_district\" }, { $lookup: { from: \"district\", localField: \"store_district.District_ID\", foreignField: \"District_ID\", as: \"district\" } }, { $unwind: \"$district\" }, { $match: { $or: [ { Type: \"City Mall\" }, { Type: \"Village Store\" } ] } }, { $group: { _id: \"$district.District_name\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { District_name: \"$_id\" } } ])"
    },
    {
        "question_id": 2919,
        "spider_question_id": 4945,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(enr) FROM College",
        "question": "What is the total enrollment number of all colleges?",
        "query": "db.College.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$enr\" } } }, { $project: { totalEnrollment: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$enr\" } } }, { $project: { totalEnrollment: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$enr\" } } }, { $project: { totalEnrollment: 1 } } ])"
    },
    {
        "question_id": 2920,
        "spider_question_id": 4946,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(enr) FROM College",
        "question": "How many students are enrolled in college?",
        "query": "db.College.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$enr\" } } }, { $project: { totalEnrollment: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$enr\" } } }, { $project: { totalEnrollment: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $group: { _id: null, totalEnrollment: { $sum: \"$enr\" } } }, { $project: { totalEnrollment: 1 } } ])"
    },
    {
        "question_id": 2921,
        "spider_question_id": 4947,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(enr) FROM College",
        "question": "What is the average enrollment number?",
        "query": "db.College.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$enr\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$enr\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$enr\" } } }, { $project: { averageEnrollment: 1 } } ])"
    },
    {
        "question_id": 2922,
        "spider_question_id": 4948,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(enr) FROM College",
        "question": "How many students, on average, does each college have enrolled?",
        "query": "db.College.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$enr\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: null, avgEnrollment: { $avg: \"$enr\" } }}, { $project: { avgEnrollment: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $group: { _id: null, averageEnrollment: { $avg: \"$enr\" } } }, { $project: { averageEnrollment: 1 } } ])"
    },
    {
        "question_id": 2923,
        "spider_question_id": 4955,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(HS) FROM Player",
        "question": "What is the average training hours of all players?",
        "query": "db.Player.aggregate([ { $group: { _id: null, averageTrainingHours: { $avg: \"$HS\" } } }, { $project: { averageTrainingHours: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $group: { _id: null, averageTrainingHours: { $avg: \"$HS\" } } }, { $project: { averageTrainingHours: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $group: { _id: null, averageTrainingHours: { $avg: \"$HS\" } } }, { $project: { averageTrainingHours: 1 } } ])"
    },
    {
        "question_id": 2924,
        "spider_question_id": 4956,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(HS) FROM Player",
        "question": "How many hours do the players train on average?",
        "query": "db.Player.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$HS\" } } }, { $project: { averageHours: 1} } ])",
        "gpt4 answer": "db.Player.aggregate([ { $group: { _id: null, averageTrainingHours: { $avg: \"$HS\" } } }, { $project: { averageTrainingHours: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$HS\" } } }, { $project: { averageHours: 1} } ])"
    },
    {
        "question_id": 2925,
        "spider_question_id": 4957,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT pName , HS FROM Player WHERE HS < 1500",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "query": "db.Player.find({ HS: { $lt: 1500 } }, { pName: 1, HS: 1 })",
        "gpt4 answer": "db.Player.find({ HS: { $lt: 1500 }}, { pName: 1, HS: 1 })",
        "deepseek answer": "db.Player.find({ HS: { $lt: 1500 } }, { pName: 1, HS: 1 })"
    },
    {
        "question_id": 2926,
        "spider_question_id": 4958,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT pName , HS FROM Player WHERE HS < 1500",
        "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?",
        "query": "db.Player.find({ HS: { $lt: 1500 } }, { pName: 1, HS: 1 })",
        "gpt4 answer": "db.Player.find({ HS: { $lt: 1500 } }, { pName: 1, HS: 1 })",
        "deepseek answer": "db.Player.find({ HS: { $lt: 1500 } }, { pName: 1, HS: 1 })"
    },
    {
        "question_id": 2927,
        "spider_question_id": 4967,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(HS) , max(HS) , min(HS) FROM Player",
        "question": "Find the max, average and min training hours of all players.",
        "query": "db.Player.aggregate([ { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" }, minHS: { $min: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1, minHS: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" }, minHS: { $min: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1, minHS: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" }, minHS: { $min: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1, minHS: 1 } } ])"
    },
    {
        "question_id": 2928,
        "spider_question_id": 4968,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(HS) , max(HS) , min(HS) FROM Player",
        "question": "What is the average, maximum, and minimum for the number of hours spent training?",
        "query": "db.Player.aggregate([ { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" }, minHS: { $min: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1, minHS: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $group: { _id: null, averageHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" }, minHS: { $min: \"$HS\" } } }, { $project: { averageHS: 1, maxHS: 1, minHS: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" }, minHS: { $min: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1, minHS: 1 } } ])"
    },
    {
        "question_id": 2929,
        "spider_question_id": 4969,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(enr) FROM College WHERE state = 'FL'",
        "question": "What is average enrollment of colleges in the state FL?",
        "query": "db.College.aggregate([ { $match: { state: \"FL\" } }, { $group: { _id: null, avgEnrollment: { $avg: \"$enr\" } } }, { $project: { avgEnrollment: 1} } ])",
        "gpt4 answer": "db.College.aggregate([ { $match: { state: 'FL' } }, { $group: { _id: null, averageEnrollment: { $avg: \"$enr\" } } }, { $project: { averageEnrollment: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $match: { state: \"FL\" } }, { $group: { _id: null, avgEnrollment: { $avg: \"$enr\" } } }, { $project: { avgEnrollment: 1} } ])"
    },
    {
        "question_id": 2930,
        "spider_question_id": 4970,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(enr) FROM College WHERE state = 'FL'",
        "question": "What is average number of students enrolled in Florida colleges?",
        "query": "db.College.aggregate([ { $match: { state: \"FL\" } }, { $group: { _id: null, avgEnrollment: { $avg: \"$enr\" } } }, { $project: { avgEnrollment: 1} } ])",
        "gpt4 answer": "db.College.aggregate([ { $match: { state: 'FL' } }, { $group: { _id: null, avgEnrollment: { $avg: \"$enr\" } } }, { $project: { avgEnrollment: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $match: { state: \"FL\" } }, { $group: { _id: null, avgEnrollment: { $avg: \"$enr\" } } }, { $project: { avgEnrollment: 1} } ])"
    },
    {
        "question_id": 2931,
        "spider_question_id": 4971,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "question": "What are the names of players whose training hours is between 500 and 1500?",
        "query": "db.Player.find({ HS: { $gte: 500, $lte: 1500 } }, { pName: 1 })",
        "gpt4 answer": "db.Player.find({ HS: { $gte: 500, $lte: 1500 } }, { pName: 1 })",
        "deepseek answer": "db.Player.find({ HS: { $gte: 500, $lte: 1500 } }, { pName: 1 })"
    },
    {
        "question_id": 2932,
        "spider_question_id": 4972,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "query": "db.Player.find( { HS: { $gte: 500, $lte: 1500 } }, { pName: 1 } )",
        "gpt4 answer": "db.Player.find({ HS: { $gte: 500, $lte: 1500 } }, { pName: 1 })",
        "deepseek answer": "db.Player.find( { HS: { $gte: 500, $lte: 1500 } }, { pName: 1 } )"
    },
    {
        "question_id": 2933,
        "spider_question_id": 4975,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName , enr FROM College WHERE enr > 10000 AND state = 'LA'",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "query": "db.College.find({ enr: { $gt: 10000 }, state: 'LA' }, { cName: 1, enr: 1 })",
        "gpt4 answer": "db.College.find({ enr: { $gt: 10000 }, state: 'LA' }, { cName: 1, enr: 1 })",
        "deepseek answer": "db.College.find({ enr: { $gt: 10000 }, state: 'LA' }, { cName: 1, enr: 1 })"
    },
    {
        "question_id": 2934,
        "spider_question_id": 4976,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName , enr FROM College WHERE enr > 10000 AND state = 'LA'",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "db.College.find({ enr: { $gt: 10000 }, state: 'LA' }, { cName: 1, enr: 1 })",
        "gpt4 answer": "db.College.find({ enr: { $gt: 10000 }, state: 'LA' }, { cName: 1, enr: 1 })",
        "deepseek answer": "db.College.find({ enr: { $gt: 10000 }, state: 'LA' }, { cName: 1, enr: 1 })"
    },
    {
        "question_id": 2935,
        "spider_question_id": 4977,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM College ORDER BY enr",
        "question": "List all information about college sorted by enrollment number in the ascending order.",
        "query": "db.College.find({}).sort({enr: 1})",
        "gpt4 answer": "db.College.find().sort({ enr: 1 })",
        "deepseek answer": "db.College.find({}).sort({enr: 1})"
    },
    {
        "question_id": 2936,
        "spider_question_id": 4978,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM College ORDER BY enr",
        "question": "What information do you have on colleges sorted by increasing enrollment numbers?",
        "query": "db.College.find({}).sort({enr: 1})",
        "gpt4 answer": "db.College.find({}).sort({ enr: 1 })",
        "deepseek answer": "db.College.find({}).sort({enr: 1})"
    },
    {
        "question_id": 2937,
        "spider_question_id": 4979,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName",
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "query": "db.College.find({ enr: { $gt: 18000 } }, { cName: 1 }).sort({ cName: 1 })",
        "gpt4 answer": "db.College.find({ enr: { $gt: 18000 } }, { cName: 1 }).sort({ cName: 1 })",
        "deepseek answer": "db.College.find({ enr: { $gt: 18000 } }, { cName: 1 }).sort({ cName: 1 })"
    },
    {
        "question_id": 2938,
        "spider_question_id": 4980,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "query": "db.College.find({ enr: { $gt: 18000 } }, { cName: 1 }).sort({ cName: 1 })",
        "gpt4 answer": "db.College.find({ enr: { $gt: 18000 } }, { cName: 1 }).sort({ cName: 1 })",
        "deepseek answer": "db.College.find({ enr: { $gt: 18000 } }, { cName: 1 }).sort({ cName: 1 })"
    },
    {
        "question_id": 2939,
        "spider_question_id": 4981,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "query": "db.Player.aggregate([ { $match: { yCard: 'yes' } }, { $sort: { HS: -1 } }, { $project: { pName: 1 } } ])",
        "gpt4 answer": "db.Player.find({ yCard: 'yes' }, { pName: 1 }).sort({ HS: -1 })",
        "deepseek answer": "db.Player.aggregate([ { $match: { yCard: 'yes' } }, { $sort: { HS: -1 } }, { $project: { pName: 1 } } ])"
    },
    {
        "question_id": 2940,
        "spider_question_id": 4982,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC",
        "question": "What are the name of the players who received a card in descending order of the hours of training?",
        "query": "db.Player.find( { yCard: 'yes' }, { pName: 1 } ).sort({ HS: -1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.find( { yCard: 'yes' }, { pName: 1 } ).sort({ HS: -1 })"
    },
    {
        "question_id": 2941,
        "spider_question_id": 4985,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "question": "Which position is most popular among players in the tryout?",
        "query": "db.Tryout.aggregate([ { $group: { _id: \"$pPos\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { pPos: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.aggregate([ { $group: { _id: \"$pPos\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { pPos: \"$_id\" } } ])"
    },
    {
        "question_id": 2942,
        "spider_question_id": 4986,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "question": "What was the most popular position at tryouts?",
        "query": "db.Tryout.aggregate([ { $group: { _id: \"$pPos\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { pPos: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.aggregate([ { $group: { _id: \"$pPos\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { pPos: \"$_id\" } } ])"
    },
    {
        "question_id": 2943,
        "spider_question_id": 4987,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "query": "db.Tryout.aggregate([ { $group: { _id: \"$cName\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.aggregate([ { $group: { _id: \"$cName\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])"
    },
    {
        "question_id": 2944,
        "spider_question_id": 4988,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "question": "How many students participated in tryouts for each college by descennding count?",
        "query": "db.Tryout.aggregate([ { $group: { _id: \"$cName\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.aggregate([ { $group: { _id: \"$cName\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])"
    },
    {
        "question_id": 2945,
        "spider_question_id": 4989,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(T2.HS) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
        "question": "What is minimum hours of the students playing in different position?",
        "query": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $group: { _id: \"$pPos\", min_hours: { $min: \"$player_info.HS\" } } }, { $project: { pPos: \"$_id\", min_hours: 1 } } ])",
        "gpt4 answer": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $group: { _id: \"$pPos\", minHours: { $min: \"$player_info.HS\" } } }, { $project: { pPos: \"$_id\", minHours: 1 } } ])",
        "deepseek answer": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $group: { _id: \"$pPos\", min_hours: { $min: \"$player_info.HS\" } } }, { $project: { pPos: \"$_id\", min_hours: 1 } } ])"
    },
    {
        "question_id": 2946,
        "spider_question_id": 4991,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "question": "What are the names of schools with the top 3 largest size?",
        "query": "db.College.find({}, { cName: 1 }).sort({ enr: -1 }).limit(3)",
        "gpt4 answer": "db.College.find({}, { cName: 1 }).sort({ enr: -1 }).limit(3)",
        "deepseek answer": "."
    },
    {
        "question_id": 2947,
        "spider_question_id": 4992,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "query": "db.College.find({}, { cName: 1 }).sort({ enr: -1 }).limit(3)",
        "gpt4 answer": "db.College.find({}, { cName: 1 }).sort({ enr: -1 }).limit(3)",
        "deepseek answer": "."
    },
    {
        "question_id": 2948,
        "spider_question_id": 4993,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName , state , min(enr) FROM college GROUP BY state",
        "question": "What is the name of school that has the smallest enrollment in each state?",
        "query": "db.College.aggregate([ { $group: { _id: \"$state\", minEnrollment: { $min: \"$enr\" }, cName: { $first: \"$cName\" } } }, { $project: { cName: 1, state: \"$_id\", enr: \"$minEnrollment\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: \"$state\", minEnrollment: { $min: \"$enr\" }, cName: { $first: \"$cName\" } } }, { $project: { cName: 1, state: \"$_id\", enr: \"$minEnrollment\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2949,
        "spider_question_id": 4994,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName , state , min(enr) FROM college GROUP BY state",
        "question": "What is the name of the school with smallest enrollment size per state?",
        "query": "db.College.aggregate([ { $group: { _id: \"$state\", smallestEnrollment: { $min: \"$enr\" } } }, { $lookup: { from: \"College\", localField: \"smallestEnrollment\", foreignField: \"enr\", as: \"college_info\" } }, { $unwind: \"$college_info\" }, { $project: { cName: \"$college_info.cName\", state: \"$_id\", smallestEnrollment: \"$smallestEnrollment\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: \"$state\", minEnrollment: { $min: \"$enr\" }, cName: { $first: \"$cName\" } } }, { $project: { cName: 1, state: \"$_id\", enr: \"$minEnrollment\" } } ])",
        "deepseek answer": "db.College.aggregate([ { $group: { _id: \"$state\", smallestEnrollment: { $min: \"$enr\" } } }, { $lookup: { from: \"College\", localField: \"smallestEnrollment\", foreignField: \"enr\", as: \"college_info\" } }, { $unwind: \"$college_info\" }, { $project: { cName: \"$college_info.cName\", state: \"$_id\", smallestEnrollment: \"$smallestEnrollment\" } } ])"
    },
    {
        "question_id": 2950,
        "spider_question_id": 4996,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName",
        "question": "What are the different states that have students trying out?",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $match: { \"tryouts\": { $ne: [] } } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $match: { \"tryouts\": { $ne: [] } } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2951,
        "spider_question_id": 4997,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.decision\": \"yes\" } }, { $group: { _id: \"$state\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.decision\": \"yes\" } }, { $group: { _id: \"$state\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2952,
        "spider_question_id": 4998,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
        "question": "What are the different states that had students successfully try out?",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.decision\": \"yes\" } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.decision\": \"yes\" } }, { $group: { _id: \"$state\" } }, { $project: { state: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2953,
        "spider_question_id": 4999,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, cName: \"$tryout_info.cName\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, cName: \"$tryout_info.cName\" } } ])"
    },
    {
        "question_id": 2954,
        "spider_question_id": 5000,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName , T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $lookup: { from: \"College\", localField: \"tryout_info.cName\", foreignField: \"cName\", as: \"college_info\" } }, { $unwind: \"$college_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, cName: \"$college_info.cName\" } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.decision\": \"yes\" } }, { $lookup: { from: \"College\", localField: \"tryouts.cName\", foreignField: \"cName\", as: \"colleges\" } }, { $unwind: \"$colleges\" }, { $project: { pName: 1, cName: \"$colleges.cName\" } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $lookup: { from: \"College\", localField: \"tryout_info.cName\", foreignField: \"cName\", as: \"college_info\" } }, { $unwind: \"$college_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, cName: \"$college_info.cName\" } } ])"
    },
    {
        "question_id": 2955,
        "spider_question_id": 5001,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $sort: { \"pName\": 1 } }, { $project: { \"_id\": 0, \"pName\": 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $sort: { \"pName\": 1 } }, { $project: { \"_id\": 0, \"pName\": 1 } } ])"
    },
    {
        "question_id": 2956,
        "spider_question_id": 5002,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $sort: { \"pName\": 1 } }, { $project: { \"_id\": 0, \"pName\": 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $sort: { \"pName\": 1 } }, { $project: { \"_id\": 0, \"pName\": 1 } } ])"
    },
    {
        "question_id": 2957,
        "spider_question_id": 5003,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, HS: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, HS: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, HS: 1 } } ])"
    },
    {
        "question_id": 2958,
        "spider_question_id": 5004,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName , T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, HS: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, HS: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $project: { pName: 1, HS: 1 } } ])"
    },
    {
        "question_id": 2959,
        "spider_question_id": 5006,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
        "question": "What are the states of the colleges where students who tried out for the striker position attend?",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.pPos\": \"striker\" } }, { $project: { state: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.pPos\": \"striker\" } }, { $project: { state: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2960,
        "spider_question_id": 5007,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\", \"tryout_info.pPos\": \"striker\" } }, { $project: { pName: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $match: { \"tryouts.decision\": \"yes\", \"tryouts.pPos\": \"striker\" } }, { $project: { \"pName\": 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\", \"tryout_info.pPos\": \"striker\" } }, { $project: { pName: 1 } } ])"
    },
    {
        "question_id": 2961,
        "spider_question_id": 5008,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": \"yes\", \"tryout_info.pPos\": \"striker\" } }, { $project: { pName: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": 'yes', \"tryout_info.pPos\": 'striker' } }, { $project: { pName: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": \"yes\", \"tryout_info.pPos\": \"striker\" } }, { $project: { pName: 1 } } ])"
    },
    {
        "question_id": 2962,
        "spider_question_id": 5010,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'",
        "question": "In which state is the college that Charles attends?",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $lookup: { from: \"Player\", localField: \"tryout_info.pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.pName\": \"Charles\" } }, { $project: { state: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $lookup: { from: \"Player\", localField: \"tryout_info.pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.pName\": \"Charles\" } }, { $project: { state: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2963,
        "spider_question_id": 5011,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $group: { _id: null, avg_HS: { $avg: \"$HS\" }, max_HS: { $max: \"$HS\" } } }, { $project: { avg_HS: 1, max_HS: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $group: { _id: null, avg_HS: { $avg: \"$HS\" }, max_HS: { $max: \"$HS\" } } }, { $project: { avg_HS: 1, max_HS: 1 } } ])"
    },
    {
        "question_id": 2964,
        "spider_question_id": 5012,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
        "question": "What is the average and maximum number of hours students who made the team practiced?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $group: { _id: null, averageHours: { $avg: \"$HS\" }, maxHours: { $max: \"$HS\" } } }, { $project: { averageHours: 1, maxHours: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": \"yes\" } }, { $group: { _id: null, avgHS: { $avg: \"$HS\" }, maxHS: { $max: \"$HS\" } } }, { $project: { avgHS: 1, maxHS: 1 } } ])"
    },
    {
        "question_id": 2965,
        "spider_question_id": 5013,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'",
        "question": "Find the average hours for the students whose tryout decision is no.",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"no\" } }, { $group: { _id: null, avgHours: { $avg: \"$HS\" } } } , { $project: { avgHours: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"tryout_info.decision\": \"no\" } }, { $group: { _id: null, avgHours: { $avg: \"$HS\" } } } , { $project: { avgHours: 1 } }])"
    },
    {
        "question_id": 2966,
        "spider_question_id": 5014,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'",
        "question": "What is the average number of hours spent practicing for students who got rejected?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": \"no\" } }, { $group: { _id: null, avgHours: { $avg: \"$HS\" } } }, { $project: { avgHours: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"Tryout_info\" } }, { $unwind: \"$Tryout_info\" }, { $match: { \"Tryout_info.decision\": \"no\" } }, { $group: { _id: null, avgHours: { $avg: \"$HS\" } } }, { $project: { avgHours: 1 } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $match: { \"tryout_info.decision\": \"no\" } }, { $group: { _id: null, avgHours: { $avg: \"$HS\" } } }, { $project: { avgHours: 1 } } ])"
    },
    {
        "question_id": 2967,
        "spider_question_id": 5015,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T1.HS) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos",
        "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"HS\": { $gt: 1000 } } }, { $group: { _id: \"$tryout_info.pPos\", max_HS: { $max: \"$HS\" } } }, { $project: { max_HS: 1, pPos: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout_info\" } }, { $unwind: \"$tryout_info\" }, { $match: { \"HS\": { $gt: 1000 } } }, { $group: { _id: \"$tryout_info.pPos\", max_HS: { $max: \"$HS\" } } }, { $project: { max_HS: 1, pPos: \"$_id\" } } ])"
    },
    {
        "question_id": 2968,
        "spider_question_id": 5016,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT max(T1.HS) , pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos",
        "question": "For each position, what is the maximum number of hours for students who spent more than 1000 hours training?",
        "query": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"player_tryout\" } }, { $unwind: \"$player_tryout\" }, { $match: { \"HS\": { $gt: 1000 } } }, { $group: { _id: \"$player_tryout.pPos\", maxHS: { $max: \"$HS\" } } }, { $project: { maxHS: 1, pPos: \"$_id\" } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $match: { HS: { $gt: 1000 } } }, { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryout\" } }, { $unwind: \"$tryout\" }, { $group: { _id: \"$tryout.pPos\", maxHours: { $max: \"$HS\" } } }, { $project: { pPos: \"$_id\", maxHS: \"$maxHours\" } } ])",
        "deepseek answer": "db.Player.aggregate([ { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"player_tryout\" } }, { $unwind: \"$player_tryout\" }, { $match: { \"HS\": { $gt: 1000 } } }, { $group: { _id: \"$player_tryout.pPos\", maxHS: { $max: \"$HS\" } } }, { $project: { maxHS: 1, pPos: \"$_id\" } } ])"
    },
    {
        "question_id": 2969,
        "spider_question_id": 5017,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'",
        "question": "Which colleges do the tryout players whose name starts with letter D go to?",
        "query": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.pName\": /^D/ } }, { $project: { cName: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $match: { pName: /^D/ } }, { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $group: { _id: \"$tryouts.cName\" } }, { $project: { cName: \"$_id\" } } ])",
        "deepseek answer": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.pName\": /^D/ } }, { $project: { cName: 1 } } ])"
    },
    {
        "question_id": 2970,
        "spider_question_id": 5018,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'",
        "question": "Which colleges does each player with a name that starts with the letter D who tried out go to?",
        "query": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.pName\": /^D/ } }, { $project: { cName: 1 } } ])",
        "gpt4 answer": "db.Player.aggregate([ { $match: { pName: /^D/ } }, { $lookup: { from: \"Tryout\", localField: \"pID\", foreignField: \"pID\", as: \"tryouts\" } }, { $unwind: \"$tryouts\" }, { $project: { cName: \"$tryouts.cName\" } } ])",
        "deepseek answer": "db.Tryout.aggregate([ { $lookup: { from: \"Player\", localField: \"pID\", foreignField: \"pID\", as: \"player_info\" } }, { $unwind: \"$player_info\" }, { $match: { \"player_info.pName\": /^D/ } }, { $project: { cName: 1 } } ])"
    },
    {
        "question_id": 2971,
        "spider_question_id": 5019,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'",
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "query": "db.Tryout.find( { decision: 'yes', pPos: 'goalie' }, { cName: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.find( { decision: 'yes', pPos: 'goalie' }, { cName: 1 } )"
    },
    {
        "question_id": 2972,
        "spider_question_id": 5020,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'",
        "question": "What college has a student who successfully made the team in the role of a goalie?",
        "query": "db.Tryout.find( { decision: 'yes', pPos: 'goalie' }, { cName: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.find( { decision: 'yes', pPos: 'goalie' }, { cName: 1 } )"
    },
    {
        "question_id": 2973,
        "spider_question_id": 5023,
        "db_id": "soccer_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $match: { \"tryouts.decision\": \"yes\" } }, { $project: { state: 1, enr: 1 } }, { $group: { _id: { state: \"$state\", enr: \"$enr\" } } }, { $project: { state: \"$_id.state\", enr: \"$_id.enr\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryouts\" } }, { $match: { \"tryouts.decision\": \"yes\" } }, { $project: { state: 1, enr: 1 } }, { $group: { _id: { state: \"$state\", enr: \"$enr\" } } }, { $project: { state: \"$_id.state\", enr: \"$_id.enr\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2974,
        "spider_question_id": 5025,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT cName FROM College WHERE enr < 13000 AND state = 'AZ' UNION SELECT cName FROM College WHERE enr > 15000 AND state = 'LA'",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "db.College.find( { $or: [ { enr: { $lt: 13000 }, state: 'AZ' }, { enr: { $gt: 15000 }, state: 'LA' } ] }, { cName: 1 } )",
        "gpt4 answer": "db.College.find({ $or: [ { state: 'LA', enr: { $gt: 15000 } }, { state: 'AZ', enr: { $lt: 13000 } } ] }, { cName: 1 })",
        "deepseek answer": "db.College.find( { $or: [ { enr: { $lt: 13000 }, state: 'AZ' }, { enr: { $gt: 15000 }, state: 'LA' } ] }, { cName: 1 } )"
    },
    {
        "question_id": 2975,
        "spider_question_id": 5026,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT cName FROM College WHERE enr < 13000 AND state = 'AZ' UNION SELECT cName FROM College WHERE enr > 15000 AND state = 'LA'",
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "query": "db.College.aggregate([ { $match: { $or: [ { enr: { $lt: 13000 }, state: 'AZ' }, { enr: { $gt: 15000 }, state: 'LA' } ] } }, { $project: { cName: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $match: { $or: [ { state: 'LA', enr: { $gt: 15000 } }, { state: 'AZ', enr: { $lt: 13000 } } ] } }, { $project: { cName: 1 } } ])",
        "deepseek answer": "db.College.aggregate([ { $match: { $or: [ { enr: { $lt: 13000 }, state: 'AZ' }, { enr: { $gt: 15000 }, state: 'LA' } ] } }, { $project: { cName: 1 } } ])"
    },
    {
        "question_id": 2976,
        "spider_question_id": 5033,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "query": "db.Tryout.aggregate([ { $match: { pPos: { $eq: \"mid\" } } }, { $group: { _id: \"$cName\" } }, { $lookup: { from: \"Tryout\", let: { cName: \"$_id\" }, pipeline: [ { $match: { $expr: { $eq: [\"$cName\", \"$$cName\"] }, pPos: { $eq: \"goalie\" } } } ], as: \"goalie\" } }, { $match: { goalie: { $size: 0 } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.aggregate([ { $match: { pPos: { $eq: \"mid\" } } }, { $group: { _id: \"$cName\" } }, { $lookup: { from: \"Tryout\", let: { cName: \"$_id\" }, pipeline: [ { $match: { $expr: { $eq: [\"$cName\", \"$$cName\"] }, pPos: { $eq: \"goalie\" } } } ], as: \"goalie\" } }, { $match: { goalie: { $size: 0 } } }, { $project: { _id: 1 } } ])"
    },
    {
        "question_id": 2977,
        "spider_question_id": 5034,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
        "question": "What are the names of the schools with some players in the mid position but no goalies?",
        "query": "db.Tryout.aggregate([ { $match: { pPos: { $eq: \"mid\" } } }, { $lookup: { from: \"Tryout\", let: { cName: \"$cName\" }, pipeline: [ { $match: { $expr: { $eq: [\"$cName\", \"$$cName\"] }, pPos: { $eq: \"goalie\" } } }, { $project: { cName: 1 } } ], as: \"goalie\" } }, { $match: { goalie: { $size: 0 } } }, { $project: { cName: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tryout.aggregate([ { $match: { pPos: { $eq: \"mid\" } } }, { $lookup: { from: \"Tryout\", let: { cName: \"$cName\" }, pipeline: [ { $match: { $expr: { $eq: [\"$cName\", \"$$cName\"] }, pPos: { $eq: \"goalie\" } } }, { $project: { cName: 1 } } ], as: \"goalie\" } }, { $match: { goalie: { $size: 0 } } }, { $project: { cName: 1 } } ])"
    },
    {
        "question_id": 2978,
        "spider_question_id": 5037,
        "db_id": "soccer_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"Tryouts\" } }, { $unwind: \"$Tryouts\" }, { $group: { _id: \"$state\", midPositionPlayerCount: { $sum: { $cond: [{ $eq: [\"$Tryouts.pPos\", \"mid\"] }, 1, 0] } }, goaliePlayerCount: { $sum: { $cond: [{ $eq: [\"$Tryouts.pPos\", \"goalie\"] }, 1, 0] } } } }, { $match: { midPositionPlayerCount: { $gt: 0 }, goaliePlayerCount: { $eq: 0 } } }, { $count: \"stateCount\" } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"Tryouts\" } }, { $unwind: \"$Tryouts\" }, { $group: { _id: \"$state\", midPositionPlayerCount: { $sum: { $cond: [{ $eq: [\"$Tryouts.pPos\", \"mid\"] }, 1, 0] } }, goaliePlayerCount: { $sum: { $cond: [{ $eq: [\"$Tryouts.pPos\", \"goalie\"] }, 1, 0] } } } }, { $match: { midPositionPlayerCount: { $gt: 0 }, goaliePlayerCount: { $eq: 0 } } }, { $count: \"stateCount\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2979,
        "spider_question_id": 5042,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT min(enr) FROM college WHERE state = 'FL')",
        "question": "What are the names of the colleges that are larger than at least one college in Florida?",
        "query": "db.College.aggregate([ { $match: { state: 'FL' } }, { $group: { _id: null, minEnrollment: { $min: '$enr' } } }, { $lookup: { from: 'College', let: { minEnr: '$minEnrollment' }, pipeline: [ { $match: { $expr: { $gt: ['$enr', '$$minEnr'] } } }, { $project: { cName: 1 } } ], as: 'largerColleges' } }, { $unwind: '$largerColleges' }, { $replaceRoot: { newRoot: '$largerColleges' } }, { $group: { _id: '$cName' } } ])",
        "gpt4 answer": "db.College.aggregate([ { $match: { state: 'FL' } }, { $group: { _id: null, minEnrollment: { $min: '$enr' } } }, { $lookup: { from: 'College', let: { minEnr: '$minEnrollment' }, pipeline: [ { $match: { $expr: { $gt: ['$enr', '$$minEnr'] } } }, { $project: { cName: 1 } } ], as: 'largerColleges' } }, { $unwind: '$largerColleges' }, { $replaceRoot: { newRoot: '$largerColleges' } }, { $group: { _id: '$cName' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2980,
        "spider_question_id": 5043,
        "db_id": "soccer_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT cName FROM college WHERE enr > (SELECT max(enr) FROM college WHERE state = 'FL')",
        "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "query": "db.College.aggregate([ { $group: { _id: \"$state\", maxEnrollment: { $max: \"$enr\" } } }, { $match: { _id: \"FL\" } }, { $lookup: { from: \"College\", let: { maxEnr: \"$maxEnrollment\" }, pipeline: [ { $match: { $expr: { $gt: [\"$enr\", \"$$maxEnr\"] } } }, { $project: { cName: 1 } } ], as: \"collegesGT\" } }, { $unwind: \"$collegesGT\" }, { $replaceRoot: { newRoot: \"$collegesGT\" } } ])",
        "gpt4 answer": "db.College.aggregate([ { $group: { _id: \"$state\", maxEnrollment: { $max: \"$enr\" } } }, { $match: { _id: \"FL\" } }, { $lookup: { from: \"College\", let: { maxEnr: \"$maxEnrollment\" }, pipeline: [ { $match: { $expr: { $gt: [\"$enr\", \"$$maxEnr\"] } } }, { $project: { cName: 1 } } ], as: \"collegesGT\" } }, { $unwind: \"$collegesGT\" }, { $replaceRoot: { newRoot: \"$collegesGT\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2981,
        "spider_question_id": 5045,
        "db_id": "soccer_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos = 'goalie')",
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "query": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryout_info\" } }, { $match: { \"tryout_info\": { $not: { $elemMatch: { \"pPos\": \"goalie\" } } } } }, { $group: { _id: null, total_enrollment: { $sum: \"$enr\" } } }, { $project: { total_enrollment: 1 } } ])",
        "gpt4 answer": "db.College.aggregate([ { $lookup: { from: \"Tryout\", localField: \"cName\", foreignField: \"cName\", as: \"tryout_info\" } }, { $match: { \"tryout_info\": { $not: { $elemMatch: { \"pPos\": \"goalie\" } } } } }, { $group: { _id: null, total_enrollment: { $sum: \"$enr\" } } }, { $project: { total_enrollment: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 2982,
        "spider_question_id": 5053,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "question": "List the carriers of devices in ascending alphabetical order.",
        "query": "db.device.find({}, {Carrier: 1}).sort({Carrier: 1})",
        "gpt4 answer": "db.device.find({}, { Carrier: 1 }).sort({ Carrier: 1 })",
        "deepseek answer": "db.device.find({}, {Carrier: 1}).sort({Carrier: 1})"
    },
    {
        "question_id": 2983,
        "spider_question_id": 5055,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "question": "What are the carriers of devices whose software platforms are not 'Android'?",
        "query": "db.device.aggregate([ { $match: { Software_Platform: { $ne: 'Android' } } }, { $project: { Carrier: 1 } } ])",
        "gpt4 answer": "db.device.find({ Software_Platform: { $ne: 'Android' } }, { Carrier: 1 })",
        "deepseek answer": "db.device.aggregate([ { $match: { Software_Platform: { $ne: 'Android' } } }, { $project: { Carrier: 1 } } ])"
    },
    {
        "question_id": 2984,
        "spider_question_id": 5056,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "query": "db.device.find({ Software_Platform: { $ne: 'Android' } }, { Carrier: 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.device.find({ Software_Platform: { $ne: 'Android' } }, { Carrier: 1 })"
    },
    {
        "question_id": 2985,
        "spider_question_id": 5057,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "question": "What are the names of shops in ascending order of open year?",
        "query": "db.shop.aggregate([ { $sort: { Open_Year: 1 } }, { $project: { Shop_Name: 1 } } ])",
        "gpt4 answer": "db.shop.find({}, { Shop_Name: 1 }).sort({ Open_Year: 1 })",
        "deepseek answer": "db.shop.aggregate([ { $sort: { Open_Year: 1 } }, { $project: { Shop_Name: 1 } } ])"
    },
    {
        "question_id": 2986,
        "spider_question_id": 5058,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "query": "db.shop.find({}, {Shop_Name: 1}).sort({Open_Year: 1})",
        "gpt4 answer": "db.shop.find({}, { Shop_Name: 1 }).sort({ Open_Year: 1 })",
        "deepseek answer": "db.shop.find({}, {Shop_Name: 1}).sort({Open_Year: 1})"
    },
    {
        "question_id": 2987,
        "spider_question_id": 5059,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Quantity) FROM stock",
        "question": "What is the average quantity of stocks?",
        "query": "db.stock.aggregate([ { $group: { _id: null, averageQuantity: { $avg: \"$Quantity\" } } } , { $project: { averageQuantity: 1 } }])",
        "gpt4 answer": "db.stock.aggregate([ { $group: { _id: null, averageQuantity: { $avg: \"$Quantity\" } } }, { $project: { averageQuantity: 1 } } ])",
        "deepseek answer": "db.stock.aggregate([ { $group: { _id: null, averageQuantity: { $avg: \"$Quantity\" } } } , { $project: { averageQuantity: 1 } }])"
    },
    {
        "question_id": 2988,
        "spider_question_id": 5060,
        "db_id": "device",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Quantity) FROM stock",
        "question": "Give the average quantity of stocks.",
        "query": "db.stock.aggregate([ { $group: { _id: null, averageQuantity: { $avg: \"$Quantity\" } } }, { $project: { averageQuantity: 1 } } ])",
        "gpt4 answer": "db.stock.aggregate([ { $group: { _id: null, averageQuantity: { $avg: \"$Quantity\" } } }, { $project: { averageQuantity: 1 } } ])",
        "deepseek answer": "db.stock.aggregate([ { $group: { _id: null, averageQuantity: { $avg: \"$Quantity\" } } }, { $project: { averageQuantity: 1 } } ])"
    },
    {
        "question_id": 2989,
        "spider_question_id": 5061,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC",
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "query": "db.shop.find({}, {Shop_Name: 1, Location: 1}).sort({Shop_Name: 1})",
        "gpt4 answer": "db.shop.find({}, { Shop_Name: 1, Location: 1 }).sort({ Shop_Name: 1 })",
        "deepseek answer": "db.shop.find({}, {Shop_Name: 1, Location: 1}).sort({Shop_Name: 1})"
    },
    {
        "question_id": 2990,
        "spider_question_id": 5062,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Shop_Name , LOCATION FROM shop ORDER BY Shop_Name ASC",
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "query": "db.shop.find({}, {Shop_Name: 1, Location: 1}).sort({Shop_Name: 1})",
        "gpt4 answer": "db.shop.find({}, { Shop_Name: 1, Location: 1 }).sort({ Shop_Name: 1 })",
        "deepseek answer": "db.shop.find({}, {Shop_Name: 1, Location: 1}).sort({Shop_Name: 1})"
    },
    {
        "question_id": 2991,
        "spider_question_id": 5065,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = 'Apple'",
        "question": "List the open date of open year of the shop named 'Apple'.",
        "query": "db.shop.find({Shop_Name: 'Apple'}, {Open_Date: 1, Open_Year: 1})",
        "gpt4 answer": "db.shop.find({ Shop_Name: 'Apple' }, { Open_Date: 1, Open_Year: 1 })",
        "deepseek answer": "db.shop.find({Shop_Name: 'Apple'}, {Open_Date: 1, Open_Year: 1})"
    },
    {
        "question_id": 2992,
        "spider_question_id": 5066,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Open_Date , Open_Year FROM shop WHERE Shop_Name = 'Apple'",
        "question": "What are the open dates and years for the shop named Apple?",
        "query": "db.shop.find({Shop_Name: 'Apple'}, {Open_Date: 1, Open_Year: 1})",
        "gpt4 answer": "db.shop.find({Shop_Name: 'Apple'}, { Open_Date: 1, Open_Year: 1})",
        "deepseek answer": "db.shop.find({Shop_Name: 'Apple'}, {Open_Date: 1, Open_Year: 1})"
    },
    {
        "question_id": 2993,
        "spider_question_id": 5067,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "question": "List the name of the shop with the latest open year.",
        "query": "db.shop.find({}, {Shop_Name: 1}).sort({Open_Year: -1}).limit(1)",
        "gpt4 answer": "db.shop.find({}, { Shop_Name: 1 }).sort({ Open_Year: -1 }).limit(1)",
        "deepseek answer": "db.shop.find({}, {Shop_Name: 1}).sort({Open_Year: -1}).limit(1)"
    },
    {
        "question_id": 2994,
        "spider_question_id": 5068,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "question": "What is the shop name corresponding to the shop that opened in the most recent year?",
        "query": "db.shop.find({}, {Shop_Name: 1}).sort({Open_Year: -1}).limit(1)",
        "gpt4 answer": "db.shop.find({}, { Shop_Name: 1 }).sort({ Open_Year: -1 }).limit(1)",
        "deepseek answer": "db.shop.find({}, {Shop_Name: 1}).sort({Open_Year: -1}).limit(1)"
    },
    {
        "question_id": 2995,
        "spider_question_id": 5069,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "query": "db.stock.aggregate([ { $lookup: { from: \"device\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$device_info\" }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\", Carrier: \"$device_info.Carrier\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"device\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$device_info\" }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\", Carrier: \"$device_info.Carrier\" } } ])"
    },
    {
        "question_id": 2996,
        "spider_question_id": 5070,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "query": "db.stock.aggregate([ { $lookup: { from: \"device\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$device_info\" }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\", Carrier: \"$device_info.Carrier\" } } ])",
        "gpt4 answer": "db.stock.aggregate([ { $lookup: { from: \"device\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $unwind: \"$device_info\" }, { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $project: { \"Shop_Name\": \"$shop_info.Shop_Name\", \"Carrier\": \"$device_info.Carrier\" } } ])",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"device\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$device_info\" }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\", Carrier: \"$device_info.Carrier\" } } ])"
    },
    {
        "question_id": 2997,
        "spider_question_id": 5071,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "query": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", shop_name: { $first: \"$shop_info.Shop_Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Shop_Name: \"$shop_name\" } } ])",
        "gpt4 answer": "db.stock.aggregate([ { $group: { _id: \"$Shop_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"shop\", localField: \"_id\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\" } } ])",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", shop_name: { $first: \"$shop_info.Shop_Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Shop_Name: \"$shop_name\" } } ])"
    },
    {
        "question_id": 2998,
        "spider_question_id": 5072,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "query": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", shop_name: { $first: \"$shop_info.Shop_Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Shop_Name: \"$shop_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", shop_name: { $first: \"$shop_info.Shop_Name\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Shop_Name: \"$shop_name\" } } ])"
    },
    {
        "question_id": 2999,
        "spider_question_id": 5073,
        "db_id": "device",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "query": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$shop_info.Shop_Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } { $project: { Shop_Name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$shop_info.Shop_Name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } { $project: { Shop_Name: \"$_id\" } } ])"
    },
    {
        "question_id": 3000,
        "spider_question_id": 5075,
        "db_id": "device",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "query": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", totalQuantity: { $sum: \"$Quantity\" }, shopName: { $first: \"$shop_info.Shop_Name\" } } }, { $sort: { totalQuantity: -1 } }, { $limit: 1 }, { $project: { shopName: 1 } } ])",
        "gpt4 answer": "db.stock.aggregate([ { $group: { _id: \"$Shop_ID\", totalQuantity: { $sum: \"$Quantity\" } } }, { $sort: { totalQuantity: -1 } }, { $limit: 1 }, { $lookup: { from: \"shop\", localField: \"_id\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\" } } ])",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", totalQuantity: { $sum: \"$Quantity\" }, shopName: { $first: \"$shop_info.Shop_Name\" } } }, { $sort: { totalQuantity: -1 } }, { $limit: 1 }, { $project: { shopName: 1 } } ])"
    },
    {
        "question_id": 3001,
        "spider_question_id": 5076,
        "db_id": "device",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "question": "What is the name of the shop that has the greatest quantity of devices in stock?",
        "query": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", totalQuantity: { $sum: \"$Quantity\" }, shopName: { $first: \"$shop_info.Shop_Name\" } } }, { $sort: { totalQuantity: -1 } }, { $limit: 1 }, { $project: { shopName: 1 } } ])",
        "gpt4 answer": "db.stock.aggregate([ { $group: { _id: \"$Shop_ID\", totalQuantity: { $sum: \"$Quantity\" } } }, { $sort: { totalQuantity: -1 } }, { $limit: 1 }, { $lookup: { from: \"shop\", localField: \"_id\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $project: { Shop_Name: \"$shop_info.Shop_Name\" } } ])",
        "deepseek answer": "db.stock.aggregate([ { $lookup: { from: \"shop\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"shop_info\" } }, { $unwind: \"$shop_info\" }, { $group: { _id: \"$Shop_ID\", totalQuantity: { $sum: \"$Quantity\" }, shopName: { $first: \"$shop_info.Shop_Name\" } } }, { $sort: { totalQuantity: -1 } }, { $limit: 1 }, { $project: { shopName: 1 } } ])"
    },
    {
        "question_id": 3002,
        "spider_question_id": 5077,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform",
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "query": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", NumberOfDevices: { $sum: 1 } }} ])",
        "deepseek answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3003,
        "spider_question_id": 5078,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Software_Platform , COUNT(*) FROM device GROUP BY Software_Platform",
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "query": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $project: { Software_Platform: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $project: { Software_Platform: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3004,
        "spider_question_id": 5079,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "question": "Please show the software platforms of devices in descending order of the count.",
        "query": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Software_Platform: \"$_id\"} } ])",
        "gpt4 answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Software_Platform: \"$_id\"} } ])"
    },
    {
        "question_id": 3005,
        "spider_question_id": 5080,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "query": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Software_Platform: \"$_id\" } } ])",
        "gpt4 answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Software_Platform: \"$_id\" } } ])",
        "deepseek answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $project: { Software_Platform: \"$_id\" } } ])"
    },
    {
        "question_id": 3006,
        "spider_question_id": 5081,
        "db_id": "device",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the software platform shared by the greatest number of devices.",
        "query": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Software_Platform: \"$_id\" } } ])",
        "gpt4 answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Software_Platform: \"$_id\" } } ])"
    },
    {
        "question_id": 3007,
        "spider_question_id": 5082,
        "db_id": "device",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the software platform that is most common amongst all devices?",
        "query": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Software_Platform: \"$_id\" } } ])",
        "gpt4 answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.device.aggregate([ { $group: { _id: \"$Software_Platform\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Software_Platform: \"$_id\" } } ])"
    },
    {
        "question_id": 3008,
        "spider_question_id": 5083,
        "db_id": "device",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "question": "List the names of shops that have no devices in stock.",
        "query": "db.shop.aggregate([ { $lookup: { from: \"stock\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"device_stock\" } }, { $match: { \"device_stock\": { $size: 0 } } }, { $project: { Shop_Name: 1 } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $lookup: { from: \"stock\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"device_stock\" } }, { $match: { \"device_stock\": { $size: 0 } } }, { $project: { Shop_Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3009,
        "spider_question_id": 5084,
        "db_id": "device",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "question": "What are the names of shops that do not have any devices in stock?",
        "query": "db.shop.aggregate([ { $lookup: { from: \"stock\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"stock_info\" } }, { $match: { \"stock_info\": { $size: 0 } } }, { $project: { Shop_Name: 1 } } ])",
        "gpt4 answer": "db.shop.aggregate([ { $lookup: { from: \"stock\", localField: \"Shop_ID\", foreignField: \"Shop_ID\", as: \"stock_info\" } }, { $match: { \"stock_info\": { $size: 0 } } }, { $project: { Shop_Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3010,
        "spider_question_id": 5087,
        "db_id": "device",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "question": "List the carriers of devices that have no devices in stock.",
        "query": "db.device.aggregate([ { $lookup: { from: \"stock\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"stock_data\" } }, { $match: { \"stock_data\": { $size: 0 } } }, { $project: { Carrier: 1 } } ])",
        "gpt4 answer": "db.device.aggregate([ { $lookup: { from: \"stock\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"device_stock\" } }, { $match: { device_stock: [] } }, { $project: { Carrier: 1 } } ])",
        "deepseek answer": "db.device.aggregate([ { $lookup: { from: \"stock\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"stock_data\" } }, { $match: { \"stock_data\": { $size: 0 } } }, { $project: { Carrier: 1 } } ])"
    },
    {
        "question_id": 3011,
        "spider_question_id": 5088,
        "db_id": "device",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "query": "db.device.aggregate([ { $lookup: { from: \"stock\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"stock_info\" } }, { $match: { \"stock_info\": { $size: 0 } } }, { $project: { Carrier: 1 } } ])",
        "gpt4 answer": "db.device.aggregate([ { $lookup: { from: \"stock\", localField: \"Device_ID\", foreignField: \"Device_ID\", as: \"stock_info\" } }, { $match: { \"stock_info\": { $size: 0 } } }, { $project: { Carrier: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3012,
        "spider_question_id": 5090,
        "db_id": "device",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1",
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "query": "db.stock.aggregate([ { $group: { _id: \"$Device_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"device\", localField: \"_id\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $unwind: \"$device_info\" }, { $group: { _id: \"$device_info.Carrier\" } }, { $project: { Carrier: \"$_id\" } } ])",
        "gpt4 answer": "db.stock.aggregate([ { $group: { _id: \"$Device_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"device\", localField: \"_id\", foreignField: \"Device_ID\", as: \"device_info\" } }, { $unwind: \"$device_info\" }, { $group: { _id: \"$device_info.Carrier\" } }, { $project: { Carrier: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3013,
        "spider_question_id": 5099,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = 'Harold'",
        "question": "What are the phone and email for customer Harold?",
        "query": "db.Customers.find( { Customer_Name: 'Harold' }, { Customer_Phone: 1, Customer_Email_Address: 1 } )",
        "gpt4 answer": "db.Customers.find({ Customer_Name: 'Harold' }, { Customer_Phone: 1, Customer_Email_Address: 1 })",
        "deepseek answer": "db.Customers.find( { Customer_Name: 'Harold' }, { Customer_Phone: 1, Customer_Email_Address: 1 } )"
    },
    {
        "question_id": 3014,
        "spider_question_id": 5100,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = 'Harold'",
        "question": "Find the phone number and email address of customer 'Harold'.",
        "query": "db.Customers.find( { Customer_Name: 'Harold' }, { Customer_Phone: 1, Customer_Email_Address: 1 } )",
        "gpt4 answer": "db.Customers.find({ Customer_Name: 'Harold' }, { Customer_Phone: 1, Customer_Email_Address: 1 })",
        "deepseek answer": "db.Customers.find( { Customer_Name: 'Harold' }, { Customer_Phone: 1, Customer_Email_Address: 1 } )"
    },
    {
        "question_id": 3015,
        "spider_question_id": 5101,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "query": "db.Drama_Workshop_Groups.find({}, {Store_Name: 1})",
        "gpt4 answer": "db.Drama_Workshop_Groups.find({}, { Store_Name: 1})",
        "deepseek answer": "db.Drama_Workshop_Groups.find({}, {Store_Name: 1})"
    },
    {
        "question_id": 3016,
        "spider_question_id": 5102,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "question": "What are the store names of drama workshop groups?",
        "query": "db.Drama_Workshop_Groups.find({}, {Store_Name: 1})",
        "gpt4 answer": "db.Drama_Workshop_Groups.find({}, { Store_Name: 1 })",
        "deepseek answer": "db.Drama_Workshop_Groups.find({}, {Store_Name: 1})"
    },
    {
        "question_id": 3017,
        "spider_question_id": 5107,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'",
        "question": "What is the description of the marketing region China?",
        "query": "db.Marketing_Regions.find({ Marketing_Region_Name: 'China' }, { Marketing_Region_Descriptrion: 1 })",
        "gpt4 answer": "db.Marketing_Regions.find({ Marketing_Region_Name: 'China' }, { Marketing_Region_Descriptrion: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3018,
        "spider_question_id": 5108,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'",
        "question": "Find the marketing region description of China?",
        "query": "db.Marketing_Regions.find({Marketing_Region_Name: 'China'}, {Marketing_Region_Descriptrion: 1})",
        "gpt4 answer": "db.Marketing_Regions.find({ Marketing_Region_Name: \"China\" }, { Marketing_Region_Descriptrion: 1 })",
        "deepseek answer": "db.Marketing_Regions.find({Marketing_Region_Name: 'China'}, {Marketing_Region_Descriptrion: 1})"
    },
    {
        "question_id": 3019,
        "spider_question_id": 5110,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT avg(Product_Price) FROM PRODUCTS)",
        "question": "What are the distinct names of the products that cost more than the average?",
        "query": "db.Products.aggregate([ { $group: { _id: null, averagePrice: { $avg: \"$Product_Price\" } } }, { $lookup: { from: \"Products\", let: { averagePrice: \"$averagePrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Product_Price\", \"$$averagePrice\"] } } }, { $project: { Product_Name: 1 } } ], as: \"products_above_average\" } }, { $unwind: \"$products_above_average\" }, { $group: { _id: \"$products_above_average.Product_Name\" } }, { $project: { Product_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: null, averagePrice: { $avg: \"$Product_Price\" } } }, { $lookup: { from: \"Products\", let: { averagePrice: \"$averagePrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Product_Price\", \"$$averagePrice\"] } } }, { $project: { Product_Name: 1 } } ], as: \"products_above_average\" } }, { $unwind: \"$products_above_average\" }, { $group: { _id: \"$products_above_average.Product_Name\" } }, { $project: { Product_Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3020,
        "spider_question_id": 5111,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "question": "What is the name of the most expensive product?",
        "query": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: -1}).limit(1)",
        "gpt4 answer": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3021,
        "spider_question_id": 5112,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "question": "Tell me the name of the most pricy product.",
        "query": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: -1}).limit(1)",
        "gpt4 answer": "db.Products.find().sort({Product_Price: -1}).limit(1).projection({Product_Name: 1})",
        "deepseek answer": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: -1}).limit(1)"
    },
    {
        "question_id": 3022,
        "spider_question_id": 5113,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "question": "List all product names in ascending order of price.",
        "query": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: 1})",
        "gpt4 answer": "db.Products.find({}, { Product_Name: 1 }).sort({ Product_Price: 1 })",
        "deepseek answer": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: 1})"
    },
    {
        "question_id": 3023,
        "spider_question_id": 5114,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "question": "Sort the names of products in ascending order of their price.",
        "query": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: 1})",
        "gpt4 answer": "db.Products.find({}, { Product_Name: 1 }).sort({ Product_Price: 1 })",
        "deepseek answer": "db.Products.find({}, {Product_Name: 1}).sort({Product_Price: 1})"
    },
    {
        "question_id": 3024,
        "spider_question_id": 5115,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = 'Ashley'",
        "question": "What is the phone number of the performer Ashley?",
        "query": "db.Performers.find({Customer_Name: 'Ashley'}, {Customer_Phone: 1})",
        "gpt4 answer": "db.Performers.findOne({ Customer_Name: 'Ashley' }, { Customer_Phone: 1 })",
        "deepseek answer": "db.Performers.find({Customer_Name: 'Ashley'}, {Customer_Phone: 1})"
    },
    {
        "question_id": 3025,
        "spider_question_id": 5116,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = 'Ashley'",
        "question": "Find the phone number of performer 'Ashley'.",
        "query": "db.Performers.find({Customer_Name: 'Ashley'}, {Customer_Phone: 1})",
        "gpt4 answer": "db.Performers.find({ Customer_Name: 'Ashley' }, { Customer_Phone: 1 })",
        "deepseek answer": "db.Performers.find({Customer_Name: 'Ashley'}, {Customer_Phone: 1})"
    },
    {
        "question_id": 3026,
        "spider_question_id": 5117,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
        "question": "Show all payment method codes and the number of orders for each code.",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $project: { payment_method_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $project: { payment_method_code: \"$_id\", count: \"$count\" } } ])",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $project: { payment_method_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3027,
        "spider_question_id": 5118,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , count(*) FROM INVOICES GROUP BY payment_method_code",
        "question": "List the distinct payment method codes with the number of orders made",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3028,
        "spider_question_id": 5119,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the payment method code used by the most orders?",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3029,
        "spider_question_id": 5120,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3030,
        "spider_question_id": 5125,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = 'Rob Dinning'",
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "query": "db.Marketing_Regions.aggregate([ { $lookup: { from: \"Stores\", localField: \"Marketing_Region_Code\", foreignField: \"Marketing_Region_Code\", as: \"stores\" } }, { $match: { \"stores.Store_Name\": \"Rob Dinning\" } }, { $project: { Marketing_Region_Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Marketing_Regions.aggregate([ { $lookup: { from: \"Stores\", localField: \"Marketing_Region_Code\", foreignField: \"Marketing_Region_Code\", as: \"stores\" } }, { $match: { \"stores.Store_Name\": \"Rob Dinning\" } }, { $project: { Marketing_Region_Name: 1 } } ])"
    },
    {
        "question_id": 3031,
        "spider_question_id": 5126,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = 'Rob Dinning'",
        "question": "Return the name of the marketing region the store Rob Dinning is located in.",
        "query": "db.Marketing_Regions.aggregate([ { $lookup: { from: \"Stores\", localField: \"Marketing_Region_Code\", foreignField: \"Marketing_Region_Code\", as: \"store_data\" } }, { $unwind: \"$store_data\" }, { $match: { \"store_data.Store_Name\": \"Rob Dinning\" } }, { $project: { Marketing_Region_Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Marketing_Regions.aggregate([ { $lookup: { from: \"Stores\", localField: \"Marketing_Region_Code\", foreignField: \"Marketing_Region_Code\", as: \"store_data\" } }, { $unwind: \"$store_data\" }, { $match: { \"store_data.Store_Name\": \"Rob Dinning\" } }, { $project: { Marketing_Region_Name: 1 } } ])"
    },
    {
        "question_id": 3032,
        "spider_question_id": 5127,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100",
        "question": "What are the descriptions of the service types with product price above 100?",
        "query": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $unwind: \"$services\" }, { $match: { \"services.Product_Price\": { $gt: 100 } } }, { $project: { Service_Type_Description: 1 } } ])",
        "gpt4 answer": "db.Services.aggregate([ { $match: { Product_Price: { $gt: 100 } } }, { $lookup: { from: \"Ref_Service_Types\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"service_type_info\" } }, { $unwind: \"$service_type_info\" }, { $project: { Service_Type_Description: \"$service_type_info.Service_Type_Description\" } } ])",
        "deepseek answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $unwind: \"$services\" }, { $match: { \"services.Product_Price\": { $gt: 100 } } }, { $project: { Service_Type_Description: 1 } } ])"
    },
    {
        "question_id": 3033,
        "spider_question_id": 5128,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100",
        "question": "Give me the descriptions of the service types that cost more than 100.",
        "query": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $unwind: \"$services\" }, { $match: { \"services.Product_Price\": { $gt: 100 } } }, { $project: { Service_Type_Description: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $unwind: \"$services\" }, { $match: { \"services.Product_Price\": { $gt: 100 } } }, { $project: { Service_Type_Description: 1 } } ])"
    },
    {
        "question_id": 3034,
        "spider_question_id": 5129,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "question": "What is the description, code and the corresponding count of each service type?",
        "query": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $project: { Service_Type_Description: 1, Service_Type_Code: 1, count: { $size: \"$services\" } } } ])",
        "gpt4 answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"service_details\" } }, { $project: { Service_Type_Description: 1, Service_Type_Code: 1, service_count: { $size: \"$service_details\" } } } ])",
        "deepseek answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $project: { Service_Type_Description: 1, Service_Type_Code: 1, count: { $size: \"$services\" } } } ])"
    },
    {
        "question_id": 3035,
        "spider_question_id": 5130,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "question": "List the description, code and the number of services for each service type.",
        "query": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $project: { Service_Type_Description: 1, Service_Type_Code: 1, serviceCount: { $size: \"$services\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $project: { Service_Type_Description: 1, Service_Type_Code: 1, serviceCount: { $size: \"$services\" } } } ])"
    },
    {
        "question_id": 3036,
        "spider_question_id": 5135,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = 'film'",
        "question": "What are the names of workshop groups in which services with product name 'film' are performed?",
        "query": "db.Drama_Workshop_Groups.aggregate([ { $lookup: { from: \"Services\", localField: \"Workshop_Group_ID\", foreignField: \"Workshop_Group_ID\", as: \"services\" } }, { $match: { \"services.Product_Name\": \"film\" } }, { $project: { Store_Phone: 1, Store_Email_Address: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Drama_Workshop_Groups.aggregate([ { $lookup: { from: \"Services\", localField: \"Workshop_Group_ID\", foreignField: \"Workshop_Group_ID\", as: \"services\" } }, { $match: { \"services.Product_Name\": \"film\" } }, { $project: { Store_Phone: 1, Store_Email_Address: 1 } } ])"
    },
    {
        "question_id": 3037,
        "spider_question_id": 5136,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = 'film'",
        "question": "Find the names of the workshop groups where services with product name 'film' are performed.",
        "query": "db.Drama_Workshop_Groups.aggregate([ { $lookup: { from: \"Services\", localField: \"Workshop_Group_ID\", foreignField: \"Workshop_Group_ID\", as: \"services\" } }, { $match: { \"services.Product_Name\": \"film\" } }, { $project: { Store_Phone: 1, Store_Email_Address: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Drama_Workshop_Groups.aggregate([ { $lookup: { from: \"Services\", localField: \"Workshop_Group_ID\", foreignField: \"Workshop_Group_ID\", as: \"services\" } }, { $match: { \"services.Product_Name\": \"film\" } }, { $project: { Store_Phone: 1, Store_Email_Address: 1 } } ])"
    },
    {
        "question_id": 3038,
        "spider_question_id": 5137,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "question": "What are the different product names? What is the average product price for each of them?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", AverageProductPrice: { $avg: \"$Product_Price\" } } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } } ])"
    },
    {
        "question_id": 3039,
        "spider_question_id": 5138,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Product_Name , avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "question": "For each distinct product name, show its average product price.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", AveragePrice: { $avg: \"$Product_Price\" } } }, { $project: { Product_Name: \"$_id\", AveragePrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } } ])"
    },
    {
        "question_id": 3040,
        "spider_question_id": 5139,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price) < 1000000",
        "question": "What are the product names with average product price smaller than 1000000?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } }, { $match: { averagePrice: { $lt: 1000000 } } }, { $project: { Product_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } }, { $match: { averagePrice: { $lt: 1000000 } } }, { $project: { Product_Name: \"$_id\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } }, { $match: { averagePrice: { $lt: 1000000 } } }, { $project: { Product_Name: \"$_id\" } } ])"
    },
    {
        "question_id": 3041,
        "spider_question_id": 5140,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price) < 1000000",
        "question": "Find the product names whose average product price is below 1000000.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } }, { $match: { averagePrice: { $lt: 1000000 } } }, { $project: { Product_Name: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", AvgPrice: { $avg: \"$Product_Price\" } } }, { $match: { AvgPrice: { $lt: 1000000 } } }, { $project: { Product_Name: \"$_id\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Product_Name\", averagePrice: { $avg: \"$Product_Price\" } } }, { $match: { averagePrice: { $lt: 1000000 } } }, { $project: { Product_Name: \"$_id\" } } ])"
    },
    {
        "question_id": 3042,
        "spider_question_id": 5150,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Currency_Code\" } }, { $count: \"distinct_currency_codes\" } ])",
        "gpt4 answer": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Currency_Code\" } }, { $count: \"distinct_currency_codes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3043,
        "spider_question_id": 5157,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "query": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Marketing_Region_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Marketing_Region_Code: \"$_id\" } }])",
        "gpt4 answer": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Marketing_Region_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Marketing_Region_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Marketing_Region_Code: \"$_id\" } }])"
    },
    {
        "question_id": 3044,
        "spider_question_id": 5158,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which marketing region has the most drama workshop groups? Give me the region code.",
        "query": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Marketing_Region_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Drama_Workshop_Groups.aggregate([ { $group: { _id: \"$Marketing_Region_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3045,
        "spider_question_id": 5161,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most frequent status of bookings?",
        "query": "db.Bookings.aggregate([ { $group: { _id: \"$Status_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Bookings.aggregate([ { $group: { _id: \"$Status_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Bookings.aggregate([ { $group: { _id: \"$Status_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 3046,
        "spider_question_id": 5162,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which status code is the most common of all the bookings?",
        "query": "db.Bookings.aggregate([ { $group: { _id: \"$Status_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { status_code: \"$_id\" } }])",
        "gpt4 answer": "db.Bookings.aggregate([ { $group: { _id: \"$Status_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Bookings.aggregate([ { $group: { _id: \"$Status_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { status_code: \"$_id\" } }])"
    },
    {
        "question_id": 3047,
        "spider_question_id": 5165,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
        "question": "Show the names of all the clients with no booking.",
        "query": "db.Clients.aggregate([ { $lookup: { from: \"Bookings\", localField: \"Client_ID\", foreignField: \"Customer_ID\", as: \"bookings\" } }, { $match: { \"bookings\": { $size: 0 } } }, { $project: { Customer_Name: 1 } } ])",
        "gpt4 answer": "db.Clients.aggregate([ { $lookup: { from: \"Bookings\", localField: \"Client_ID\", foreignField: \"Customer_ID\", as: \"BookingInfo\" } }, { $match: { BookingInfo: { $size: 0 } } }, { $project: { Customer_Name: 1 } } ])",
        "deepseek answer": "db.Clients.aggregate([ { $lookup: { from: \"Bookings\", localField: \"Client_ID\", foreignField: \"Customer_ID\", as: \"bookings\" } }, { $match: { \"bookings\": { $size: 0 } } }, { $project: { Customer_Name: 1 } } ])"
    },
    {
        "question_id": 3048,
        "spider_question_id": 5166,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
        "question": "What are the names of the clients who do not have any booking?",
        "query": "db.Clients.aggregate([ { $lookup: { from: \"Bookings\", localField: \"Client_ID\", foreignField: \"Customer_ID\", as: \"bookings\" } }, { $match: { \"bookings\": { $size: 0 } } }, { $project: { Customer_Name: 1 } } ])",
        "gpt4 answer": "db.Clients.aggregate([ { $lookup: { from: \"Bookings\", localField: \"Client_ID\", foreignField: \"Customer_ID\", as: \"ClientBookings\" } }, { $match: { ClientBookings: { $size: 0 } } }, { $project: { Customer_Name: 1 } } ])",
        "deepseek answer": "db.Clients.aggregate([ { $lookup: { from: \"Bookings\", localField: \"Client_ID\", foreignField: \"Customer_ID\", as: \"bookings\" } }, { $match: { \"bookings\": { $size: 0 } } }, { $project: { Customer_Name: 1 } } ])"
    },
    {
        "question_id": 3049,
        "spider_question_id": 5169,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$Product_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Invoices.aggregate([ { $group: { _id: \"$Product_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$Product_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3050,
        "spider_question_id": 5170,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Find the id of the product ordered the most often on invoices.",
        "query": "db.Invoices.aggregate([ { $group: { _id: \"$Product_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Product_ID: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Invoices.aggregate([ { $group: { _id: \"$Product_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Product_ID: \"$_id\" } } ])"
    },
    {
        "question_id": 3051,
        "spider_question_id": 5171,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'",
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "query": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $match: { \"services.Product_Name\": { $all: [\"photo\", \"film\"] } } }, { $project: { Service_Type_Description: 1 } } ])",
        "gpt4 answer": "db.Services.aggregate([ { $match: { $or: [{ Product_Name: 'photo' }, { Product_Name: 'film' }] } }, { $group: { _id: \"$Service_Type_Code\", ProductNames: { $addToSet: \"$Product_Name\" } } }, { $match: { ProductNames: { $all: ['photo', 'film'] } } }, { $lookup: { from: \"Ref_Service_Types\", localField: \"_id\", foreignField: \"Service_Type_Code\", as: \"ServiceType\" } }, { $unwind: \"$ServiceType\" }, { $project: { Service_Type_Description: \"$ServiceType.Service_Type_Description\" } } ])",
        "deepseek answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $match: { \"services.Product_Name\": { $all: [\"photo\", \"film\"] } } }, { $project: { Service_Type_Description: 1 } } ])"
    },
    {
        "question_id": 3052,
        "spider_question_id": 5172,
        "db_id": "cre_Drama_Workshop_Groups",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'",
        "question": "Give me the description of the service type that offers not only the photo product but also the film product.",
        "query": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $match: { \"services.Product_Name\": { $all: [\"photo\", \"film\"] } } }, { $project: { Service_Type_Description: 1 } } ])",
        "gpt4 answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $match: { \"services.Product_Name\": { $all: [\"photo\", \"film\"] } } }, { $project: { Service_Type_Description: 1 } } ])",
        "deepseek answer": "db.Ref_Service_Types.aggregate([ { $lookup: { from: \"Services\", localField: \"Service_Type_Code\", foreignField: \"Service_Type_Code\", as: \"services\" } }, { $match: { \"services.Product_Name\": { $all: [\"photo\", \"film\"] } } }, { $project: { Service_Type_Description: 1 } } ])"
    },
    {
        "question_id": 3053,
        "spider_question_id": 5279,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(revenue) , max(revenue) , sum(revenue) FROM manufacturers",
        "question": "What are the average, maximum and total revenues of all companies?",
        "query": "db.Manufacturers.aggregate([ { $group: { _id: null, averageRevenue: { $avg: \"$Revenue\" }, maximumRevenue: { $max: \"$Revenue\" }, totalRevenue: { $sum: \"$Revenue\" } } }, { $project: { averageRevenue: 1, maximumRevenue: 1, totalRevenue: 1 } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $group: { _id: null, averageRevenue: { $avg: \"$Revenue\" }, maximumRevenue: { $max: \"$Revenue\" }, totalRevenue: { $sum: \"$Revenue\" } } }, { $project: { averageRevenue: 1, maximumRevenue: 1, totalRevenue: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3054,
        "spider_question_id": 5299,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "query": "db.Manufacturers.find({}, { Name: 1, Headquarter: 1, Revenue: 1 }).sort({ Revenue: -1 })",
        "gpt4 answer": "db.Manufacturers.find({}, { Name: 1, Headquarter: 1, Revenue: 1 }).sort({ Revenue: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3055,
        "spider_question_id": 5307,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(revenue) , founder FROM manufacturers GROUP BY founder",
        "question": "Find the total revenue of companies of each founder.",
        "query": "db.Manufacturers.aggregate([ { $group: { _id: \"$Founder\", TotalRevenue: { $sum: \"$Revenue\" } } }, { $project: { Founder: \"$_id\", TotalRevenue: 1 } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $group: { _id: \"$Founder\", TotalRevenue: { $sum: \"$Revenue\" } } }, { $project: { Founder: \"$_id\", TotalRevenue: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3056,
        "spider_question_id": 5308,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(revenue) , founder FROM manufacturers GROUP BY founder",
        "question": "What is the total revenue of companies started by founder?",
        "query": "db.Manufacturers.aggregate([ { $group: { _id: \"$Founder\", totalRevenue: { $sum: \"$Revenue\" } } }, { $project: { founder: \"$_id\", totalRevenue: 1 } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $group: { _id: \"$Founder\", totalRevenue: { $sum: \"$Revenue\" } } }, { $project: { founder: \"$_id\", totalRevenue: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3057,
        "spider_question_id": 5309,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , max(revenue) , Headquarter FROM manufacturers GROUP BY Headquarter",
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "query": "db.Manufacturers.aggregate([ { $group: { _id: \"$Headquarter\", maxRevenue: { $max: \"$Revenue\" }, name: { $first: \"$Name\" } } }, { $project: { name: 1, revenue: \"$maxRevenue\", Headquarter: \"$_id\" } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $group: { _id: \"$Headquarter\", maxRevenue: { $max: \"$Revenue\" }, name: { $first: \"$Name\" } } }, { $project: { name: 1, revenue: \"$maxRevenue\", Headquarter: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3058,
        "spider_question_id": 5311,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(revenue) , name FROM manufacturers GROUP BY name",
        "question": "Find the total revenue for each manufacturer.",
        "query": "db.Manufacturers.aggregate([ { $lookup: { from: \"Products\", localField: \"Code\", foreignField: \"Manufacturer\", as: \"products\" } }, { $project: { Name: 1, TotalRevenue: { $sum: \"$Revenue\" } } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $group: { _id: \"$Name\", TotalRevenue: { $sum: \"$Revenue\" } } }, { $project: { Name: \"$_id\", TotalRevenue: 1 } } ])",
        "deepseek answer": "db.Manufacturers.aggregate([ { $lookup: { from: \"Products\", localField: \"Code\", foreignField: \"Manufacturer\", as: \"products\" } }, { $project: { Name: 1, TotalRevenue: { $sum: \"$Revenue\" } } } ])"
    },
    {
        "question_id": 3059,
        "spider_question_id": 5312,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(revenue) , name FROM manufacturers GROUP BY name",
        "question": "What is the total revenue of each manufacturer?",
        "query": "db.Manufacturers.aggregate([ { $group: { _id: \"$Name\", TotalRevenue: { $sum: \"$Revenue\" } } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $group: { _id: \"$Name\", TotalRevenue: { $sum: \"$Revenue\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3060,
        "spider_question_id": 5313,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.price) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
        "question": "Find the average prices of all products from each manufacture, and list each company's name.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"ManufacturerInfo\" } }, { $unwind: \"$ManufacturerInfo\" }, { $group: { _id: \"$ManufacturerInfo.Name\", AveragePrice: { $avg: \"$Price\" } } }, { $project: { ManufacturerName: \"$_id\", AveragePrice: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"ManufacturerInfo\" } }, { $unwind: \"$ManufacturerInfo\" }, { $group: { _id: \"$ManufacturerInfo.Name\", AveragePrice: { $avg: \"$Price\" } } }, { $project: { ManufacturerName: \"$_id\", AveragePrice: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3061,
        "spider_question_id": 5314,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.price) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
        "question": "What are the average prices of products for each manufacturer?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", AveragePrice: { $avg: \"$Price\" } } }, { $project: { ManufacturerName: \"$_id\", AveragePrice: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", AveragePrice: { $avg: \"$Price\" } } }, { $project: { ManufacturerName: \"$_id\", AveragePrice: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3062,
        "spider_question_id": 5316,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT T1.name) , T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter",
        "question": "How many different products are produced in each headquarter city?",
        "query": "db.Manufacturers.aggregate([ { $lookup: { from: \"Products\", localField: \"Code\", foreignField: \"Manufacturer\", as: \"products\" } }, { $project: { Headquarter: 1, productCount: { $size: { $setUnion: [\"$products.Name\", []] } } } }, { $group: { _id: \"$Headquarter\", totalProducts: { $sum: \"$productCount\" } } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $lookup: { from: \"Products\", localField: \"Code\", foreignField: \"Manufacturer\", as: \"ProductsList\" } }, { $unwind: \"$ProductsList\" }, { $group: { _id: \"$Headquarter\", distinctProducts: { $addToSet: \"$ProductsList.Name\" } } }, { $project: { Headquarter: \"$_id\", NumberOfProducts: { $size: \"$distinctProducts\" } } } ])",
        "deepseek answer": "db.Manufacturers.aggregate([ { $lookup: { from: \"Products\", localField: \"Code\", foreignField: \"Manufacturer\", as: \"products\" } }, { $project: { Headquarter: 1, productCount: { $size: { $setUnion: [\"$products.Name\", []] } } } }, { $group: { _id: \"$Headquarter\", totalProducts: { $sum: \"$productCount\" } } } ])"
    },
    {
        "question_id": 3063,
        "spider_question_id": 5317,
        "db_id": "manufactory_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')",
        "question": "Find number of products which Sony does not make.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"Manufacturer_info\" } }, { $match: { \"Manufacturer_info.Name\": {$ne: \"Sony\"} } }, { $group: { _id: \"$Name\", count: { $sum: 1 } } }, { $group: { _id: null, total: { $sum: 1 } } }, { $project: { total: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"Manufacturer_info\" } }, { $match: { \"Manufacturer_info.Name\": {$ne: \"Sony\"} } }, { $group: { _id: \"$Name\", count: { $sum: 1 } } }, { $group: { _id: null, total: { $sum: 1 } } }, { $project: { total: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3064,
        "spider_question_id": 5323,
        "db_id": "manufactory_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM Products",
        "question": "Select the names of all the products in the store.",
        "query": "db.Products.find({}, { Name: 1})",
        "gpt4 answer": "db.Products.find({}, { Name: 1})",
        "deepseek answer": "db.Products.find({}, { Name: 1})"
    },
    {
        "question_id": 3065,
        "spider_question_id": 5324,
        "db_id": "manufactory_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM Products",
        "question": "What are the names of all products?",
        "query": "db.Products.find({}, { Name: 1})",
        "gpt4 answer": "db.Products.find({}, { Name: 1})",
        "deepseek answer": "db.Products.find({}, { Name: 1})"
    },
    {
        "question_id": 3066,
        "spider_question_id": 5325,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , price FROM products",
        "question": "Select the names and the prices of all the products in the store.",
        "query": "db.Products.find({}, {Name: 1, Price: 1})",
        "gpt4 answer": "db.Products.find({}, {Name: 1, Price: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3067,
        "spider_question_id": 5327,
        "db_id": "manufactory_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM products WHERE price <= 200",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "query": "db.Products.find({ Price: { $lte: 200 } }, { Name: 1 })",
        "gpt4 answer": "db.Products.find({ Price: { $lte: 200 } }, { Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3068,
        "spider_question_id": 5331,
        "db_id": "manufactory_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(price) FROM products",
        "question": "Compute the average price of all the products.",
        "query": "db.Products.aggregate([ { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3069,
        "spider_question_id": 5333,
        "db_id": "manufactory_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(price) FROM products WHERE Manufacturer = 2",
        "question": "Compute the average price of all products with manufacturer code equal to 2.",
        "query": "db.Products.aggregate([ { $match: { Manufacturer: 2 } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $match: { Manufacturer: 2 } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])"
    },
    {
        "question_id": 3070,
        "spider_question_id": 5334,
        "db_id": "manufactory_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(price) FROM products WHERE Manufacturer = 2",
        "question": "What is the average price of products with manufacturer codes equal to 2?",
        "query": "db.Products.aggregate([ { $match: { Manufacturer: 2 } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { Manufacturer: 2 } }, { $group: { _id: null, AveragePrice: { $avg: \"$Price\" } } }, { $project: { AveragePrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { Manufacturer: 2 } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])"
    },
    {
        "question_id": 3071,
        "spider_question_id": 5337,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).",
        "query": "db.Products.find( { Price: { $gte: 180 } }, { Name: 1, Price: 1 } ).sort( { Price: -1, Name: 1 } )",
        "gpt4 answer": "db.Products.find( { Price: { $gte: 180 } }, { Name: 1, Price: 1 } ).sort( { Price: -1, Name: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 3072,
        "spider_question_id": 5338,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
        "question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?",
        "query": "db.Products.find({ Price: { $gte: 180 } }, { Name: 1, Price: 1 }).sort({ Price: -1, Name: 1 })",
        "gpt4 answer": "db.Products.find({ Price: { $gte: 180 } }, { Name: 1, Price: 1 }).sort({ Price: -1, Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3073,
        "spider_question_id": 5341,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer",
        "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Manufacturer\", averagePrice: { $avg: \"$Price\" } } }, { $project: { _id: 1, averagePrice: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$Manufacturer\", AveragePrice: { $avg: \"$Price\" } }}, { $project: { _id: 1, AveragePrice: 1 }} ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Manufacturer\", averagePrice: { $avg: \"$Price\" } } }, { $project: { _id: 1, averagePrice: 1 } } ])"
    },
    {
        "question_id": 3074,
        "spider_question_id": 5342,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT AVG(Price) , Manufacturer FROM Products GROUP BY Manufacturer",
        "question": "What are the average prices of products, grouped by manufacturer code?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$Manufacturer\", averagePrice: { $avg: \"$Price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ {$group: { _id: \"$Manufacturer\", AveragePrice: {$avg: \"$Price\"} }} ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$Manufacturer\", averagePrice: { $avg: \"$Price\" } } } ])"
    },
    {
        "question_id": 3075,
        "spider_question_id": 5343,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
        "question": "Select the average price of each manufacturer's products, showing the manufacturer's name.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", averagePrice: { $avg: \"$Price\" } } }, { $project: { manufacturerName: \"$_id\", averagePrice: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"ManufacturerDetails\" } }, { $unwind: \"$ManufacturerDetails\" }, { $group: { _id: \"$ManufacturerDetails.Name\", AveragePrice: { $avg: \"$Price\" } } }, { $project: { ManufacturerName: \"$_id\", AveragePrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", averagePrice: { $avg: \"$Price\" } } }, { $project: { manufacturerName: \"$_id\", averagePrice: 1 } } ])"
    },
    {
        "question_id": 3076,
        "spider_question_id": 5344,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
        "question": "What are the average prices of products, grouped by manufacturer name?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", averagePrice: { $avg: \"$Price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"ManufacturerDetails\" } }, { $unwind: \"$ManufacturerDetails\" }, { $group: { _id: \"$ManufacturerDetails.Name\", AveragePrice: { $avg: \"$Price\" } } }, { $project: { ManufacturerName: \"$_id\", AveragePrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", averagePrice: { $avg: \"$Price\" } } } ])"
    },
    {
        "question_id": 3077,
        "spider_question_id": 5346,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Price) , T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "question": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", avgPrice: { $avg: \"$Price\" } } }, { $match: { avgPrice: { $gte: 150 } } }, { $project: { name: \"$_id\", avgPrice: 1 } } ])",
        "gpt4 answer": "db.Manufacturers.aggregate([ { $lookup: { from: \"Products\", localField: \"Code\", foreignField: \"Manufacturer\", as: \"Products\" } }, { $unwind: \"$Products\" }, { $group: { _id: \"$Name\", AveragePrice: { $avg: \"$Products.Price\" } } }, { $match: { AveragePrice: { $gte: 150 } } }, { $project: { Name: \"$_id\", AveragePrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Manufacturers\", localField: \"Manufacturer\", foreignField: \"Code\", as: \"manufacturer_info\" } }, { $unwind: \"$manufacturer_info\" }, { $group: { _id: \"$manufacturer_info.Name\", avgPrice: { $avg: \"$Price\" } } }, { $match: { avgPrice: { $gte: 150 } } }, { $project: { name: \"$_id\", avgPrice: 1 } } ])"
    },
    {
        "question_id": 3078,
        "spider_question_id": 5347,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
        "question": "Select the name and price of the cheapest product.",
        "query": "db.Products.find({}, { Name: 1, Price: 1 }).sort({ Price: 1 }).limit(1)",
        "gpt4 answer": "db.Products.find({}, { Name: 1, Price: 1 }).sort({ Price: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3079,
        "spider_question_id": 5348,
        "db_id": "manufactory_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
        "question": "What is the name and price of the cheapest product?",
        "query": "db.Products.find({}, { Name: 1, Price: 1 }).sort({ Price: 1 }).limit(1)",
        "gpt4 answer": "db.Products.find({}, { Name: 1, Price: 1 }).sort({ Price: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3080,
        "spider_question_id": 5353,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "question": "What is the id of the problem log that is created most recently?",
        "query": "db.Problem_Log.find({}, {problem_log_id: 1}).sort({log_entry_date: -1}).limit(1)",
        "gpt4 answer": "db.Problem_Log.find({}, {problem_log_id: 1}).sort({log_entry_date: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3081,
        "spider_question_id": 5354,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
        "question": "Which problem log was created most recently? Give me the log id.",
        "query": "db.Problem_Log.find({}, { problem_log_id: 1 }).sort({ log_entry_date: -1 }).limit(1)",
        "gpt4 answer": "db.Problem_Log.find({}, { problem_log_id: 1 }).sort({ log_entry_date: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3082,
        "spider_question_id": 5355,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "question": "What is the oldest log id and its corresponding problem id?",
        "query": "db.Problem_Log.find({}, {problem_log_id: 1, problem_id: 1}).sort({log_entry_date: 1}).limit(1)",
        "gpt4 answer": "db.Problem_Log.find({}, { problem_log_id: 1, problem_id: 1 }).sort({ log_entry_date: 1 }).limit(1)",
        "deepseek answer": "db.Problem_Log.find({}, {problem_log_id: 1, problem_id: 1}).sort({log_entry_date: 1}).limit(1)"
    },
    {
        "question_id": 3083,
        "spider_question_id": 5356,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "question": "Find the oldest log id and its corresponding problem id.",
        "query": "db.Problem_Log.find({}, {problem_log_id: 1, problem_id: 1}).sort({log_entry_date: 1}).limit(1)",
        "gpt4 answer": "db.Problem_Log.find({}, {problem_log_id: 1, problem_id: 1}).sort({log_entry_date: 1}).limit(1)",
        "deepseek answer": "db.Problem_Log.find({}, {problem_log_id: 1, problem_id: 1}).sort({log_entry_date: 1}).limit(1)"
    },
    {
        "question_id": 3084,
        "spider_question_id": 5359,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT problem_log_id , log_entry_description FROM problem_log",
        "question": "List all the log ids and their descriptions from the problem logs.",
        "query": "db.Problem_Log.find({}, { problem_log_id: 1, log_entry_description: 1 })",
        "gpt4 answer": "db.Problem_Log.find({}, { problem_log_id: 1, log_entry_description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3085,
        "spider_question_id": 5360,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT problem_log_id , log_entry_description FROM problem_log",
        "question": "What are the log id and entry description of each problem?",
        "query": "db.Problem_Log.find({}, {problem_log_id: 1, log_entry_description: 1})",
        "gpt4 answer": "db.Problem_Log.find({}, { problem_log_id: 1, log_entry_description: 1 })",
        "deepseek answer": "db.Problem_Log.find({}, {problem_log_id: 1, log_entry_description: 1})"
    },
    {
        "question_id": 3086,
        "spider_question_id": 5361,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Problem_Log\", localField: \"staff_id\", foreignField: \"assigned_to_staff_id\", as: \"problem_logs\" } }, { $unwind: \"$problem_logs\" }, { $match: { \"problem_logs.problem_id\": 1 } }, { $group: { _id: { staff_first_name: \"$staff_first_name\", staff_last_name: \"$staff_last_name\" } } }, { $project: { staff_first_name: \"$_id.staff_first_name\", staff_last_name: \"$_id.staff_last_name\" } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Problem_Log\", localField: \"staff_id\", foreignField: \"assigned_to_staff_id\", as: \"problem_logs\" } }, { $unwind: \"$problem_logs\" }, { $match: { \"problem_logs.problem_id\": 1 } }, { $group: { _id: { staff_first_name: \"$staff_first_name\", staff_last_name: \"$staff_last_name\" } } }, { $project: { staff_first_name: \"$_id.staff_first_name\", staff_last_name: \"$_id.staff_last_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3087,
        "spider_question_id": 5362,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "question": "Which staff members are assigned to the problem with id 1? Give me their first and last names.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Problem_Log\", localField: \"staff_id\", foreignField: \"assigned_to_staff_id\", as: \"assigned_problems\" } }, { $match: { \"assigned_problems.problem_id\": 1 } }, { $project: { staff_first_name: 1, staff_last_name: 1 } } ])",
        "gpt4 answer": "db.Problem_Log.aggregate([ { $match: { problem_id: 1 } }, { $lookup: { from: \"Staff\", localField: \"assigned_to_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $group: { _id: { staff_first_name: \"$staff_info.staff_first_name\", staff_last_name: \"$staff_info.staff_last_name\" } } }, { $project: { staff_first_name: \"$_id.staff_first_name\", staff_last_name: \"$_id.staff_last_name\" } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Problem_Log\", localField: \"staff_id\", foreignField: \"assigned_to_staff_id\", as: \"assigned_problems\" } }, { $match: { \"assigned_problems.problem_id\": 1 } }, { $project: { staff_first_name: 1, staff_last_name: 1 } } ])"
    },
    {
        "question_id": 3088,
        "spider_question_id": 5363,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = 'Rylan' AND T1.staff_last_name = 'Homenick'",
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "query": "db.Problem_Log.aggregate([ { $lookup: { from: \"Staff\", localField: \"assigned_to_staff_id\", foreignField: \"staff_id\", as: \"assigned_staff\" } }, { $unwind: \"$assigned_staff\" }, { $match: { \"assigned_staff.staff_first_name\": \"Rylan\", \"assigned_staff.staff_last_name\": \"Homenick\" } }, { $project: { problem_id: \"$problem_id\", problem_log_id: \"$problem_log_id\" } } ])",
        "gpt4 answer": "db.Problem_Log.aggregate([ { $lookup: { from: \"Staff\", localField: \"assigned_to_staff_id\", foreignField: \"staff_id\", as: \"assigned_staff\" } }, { $unwind: \"$assigned_staff\" }, { $match: { \"assigned_staff.staff_first_name\": \"Rylan\", \"assigned_staff.staff_last_name\": \"Homenick\" } }, { $project: { problem_id: \"$problem_id\", problem_log_id: \"$problem_log_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3089,
        "spider_question_id": 5367,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3090,
        "spider_question_id": 5368,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3091,
        "spider_question_id": 5369,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop'",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.staff_first_name\": \"Christop\" } }, { $project: { problem_description: 1 } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reported_by\" } }, { $match: { \"reported_by.staff_first_name\": \"Christop\" } }, { $project: { problem_description: 1 } } ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.staff_first_name\": \"Christop\" } }, { $project: { problem_description: 1 } } ])"
    },
    {
        "question_id": 3092,
        "spider_question_id": 5370,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop'",
        "question": "Which problems are reported by the staff with first name 'Christop'? Show the descriptions of the problems.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_first_name\": \"Christop\" } }, { $project: { problem_description: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $match: { staff_first_name: 'Christop' } }, { $lookup: { from: 'Problems', localField: 'staff_id', foreignField: 'reported_by_staff_id', as: 'reported_problems' }}, { $unwind: '$reported_problems' }, { $project: { problem_description: '$reported_problems.problem_description' }} ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_first_name\": \"Christop\" } }, { $project: { problem_description: 1 } } ])"
    },
    {
        "question_id": 3093,
        "spider_question_id": 5371,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = 'Bosco'",
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_last_name\": \"Bosco\" } }, { $project: { problem_id: 1 } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.staff_last_name\": \"Bosco\" } }, { $project: { \"problem_id\": 1 } } ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_last_name\": \"Bosco\" } }, { $project: { problem_id: 1 } } ])"
    },
    {
        "question_id": 3094,
        "spider_question_id": 5372,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = 'Bosco'",
        "question": "Which problems are reported by the staff with last name 'Bosco'? Show the ids of the problems.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_last_name\": \"Bosco\" } }, { $project: { problem_id: 1 } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reporting_staff\" } }, { $unwind: \"$reporting_staff\" }, { $match: { \"reporting_staff.staff_last_name\": \"Bosco\" } }, { $project: { problem_id: 1 } } ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_last_name\": \"Bosco\" } }, { $project: { problem_id: 1 } } ])"
    },
    {
        "question_id": 3095,
        "spider_question_id": 5377,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $group: { _id: \"$product_id\", numberOfProblems: { $sum: 1 } } }, { $project: { product_id: \"$_id\", numberOfProblems: 1 } } ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3096,
        "spider_question_id": 5378,
        "db_id": "tracking_software_problems",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3097,
        "spider_question_id": 5387,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge' INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Ashley' AND T2.staff_last_name = 'Medhurst'",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reporting_staff\" } }, { $unwind: \"$reporting_staff\" }, { $match: { \"reporting_staff.staff_first_name\": \"Christop\", \"reporting_staff.staff_last_name\": \"Berge\" } }, { $lookup: { from: \"Staff\", localField: \"closure_authorised_by_staff_id\", foreignField: \"staff_id\", as: \"authorising_staff\" } }, { $unwind: \"$authorising_staff\" }, { $match: { \"authorising_staff.staff_first_name\": \"Ashley\", \"authorising_staff.staff_last_name\": \"Medhurst\" } }, { $project: { product_id: 1 } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reporting_staff\" } }, { $unwind: \"$reporting_staff\" }, { $match: { \"reporting_staff.staff_first_name\": \"Christop\", \"reporting_staff.staff_last_name\": \"Berge\" } }, { $lookup: { from: \"Staff\", localField: \"closure_authorised_by_staff_id\", foreignField: \"staff_id\", as: \"authorising_staff\" } }, { $unwind: \"$authorising_staff\" }, { $match: { \"authorising_staff.staff_first_name\": \"Ashley\", \"authorising_staff.staff_last_name\": \"Medhurst\" } }, { $project: { product_id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3098,
        "spider_question_id": 5389,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Lysanne' AND T4.staff_last_name = 'Turcotte' )",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_first_name\": \"Lysanne\", \"staff_info.staff_last_name\": \"Turcotte\" } }, { $sort: { \"date_problem_reported\": 1 } }, { $limit: 1 }, { $addFields: { \"earliest_date\": \"$date_problem_reported\" } }, { $lookup: { from: \"Problems\", let: { \"earliest_date\": \"$earliest_date\" }, pipeline: [ { $match: { $expr: { $lt: [ \"$date_problem_reported\", \"$$earliest_date\" ] } } }, { $project: { \"_id\": 0, \"problem_id\": 1 } } ], as: \"earlier_problems\" } }, { $unwind: \"$earlier_problems\" }, { $replaceRoot: { newRoot: \"$earlier_problems\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.staff_first_name\": \"Lysanne\", \"staff_info.staff_last_name\": \"Turcotte\" } }, { $sort: { \"date_problem_reported\": 1 } }, { $limit: 1 }, { $addFields: { \"earliest_date\": \"$date_problem_reported\" } }, { $lookup: { from: \"Problems\", let: { \"earliest_date\": \"$earliest_date\" }, pipeline: [ { $match: { $expr: { $lt: [ \"$date_problem_reported\", \"$$earliest_date\" ] } } }, { $project: { \"_id\": 0, \"problem_id\": 1 } } ], as: \"earlier_problems\" } }, { $unwind: \"$earlier_problems\" }, { $replaceRoot: { newRoot: \"$earlier_problems\" } } ])"
    },
    {
        "question_id": 3099,
        "spider_question_id": 5390,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Lysanne' AND T4.staff_last_name = 'Turcotte' )",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reported_by_staff\" } }, { $match: { \"reported_by_staff.staff_first_name\": \"Lysanne\", \"reported_by_staff.staff_last_name\": \"Turcotte\" } }, { $group: { _id: null, minDate: { $min: \"$date_problem_reported\" } } }, { $lookup: { from: \"Problems\", let: { minDate: \"$minDate\" }, pipeline: [ { $match: { $expr: { $lt: [\"$date_problem_reported\", \"$$minDate\"] } } }, { $project: { problem_id: 1 } } ], as: \"problems_reported_before\" } }, { $unwind: \"$problems_reported_before\" }, { $replaceRoot: { newRoot: \"$problems_reported_before\" } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reporting_staff\" } }, { $match: { \"reporting_staff.staff_first_name\": 'Lysanne', \"reporting_staff.staff_last_name\": 'Turcotte' } }, { $group: { _id: null, minDate: { $min: \"$date_problem_reported\" } } }, { $lookup: { from: \"Problems\", let: { minReportedDate: \"$minDate\" }, pipeline: [ { $match: { $expr: { $lt: [\"$date_problem_reported\", \"$$minReportedDate\"] } } }, { $project: { problem_id: 1 } } ], as: \"earlier_problems\" } }, { $unwind: \"$earlier_problems\" }, { $replaceRoot: { newRoot: \"$earlier_problems\" } } ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reported_by_staff\" } }, { $match: { \"reported_by_staff.staff_first_name\": \"Lysanne\", \"reported_by_staff.staff_last_name\": \"Turcotte\" } }, { $group: { _id: null, minDate: { $min: \"$date_problem_reported\" } } }, { $lookup: { from: \"Problems\", let: { minDate: \"$minDate\" }, pipeline: [ { $match: { $expr: { $lt: [\"$date_problem_reported\", \"$$minDate\"] } } }, { $project: { problem_id: 1 } } ], as: \"problems_reported_before\" } }, { $unwind: \"$problems_reported_before\" }, { $replaceRoot: { newRoot: \"$problems_reported_before\" } } ])"
    },
    {
        "question_id": 3100,
        "spider_question_id": 5391,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick' )",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reporter\" } }, { $match: { \"reporter.staff_first_name\": \"Rylan\", \"reporter.staff_last_name\": \"Homenick\" } }, { $group: { _id: null, maxDate: { $max: \"$date_problem_reported\" } } }, { $lookup: { from: \"Problems\", let: { latestReportedDate: \"$maxDate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$date_problem_reported\", \"$$latestReportedDate\"] } } }, { $project: { problem_id: 1 } } ], as: \"problemsAfter\" } }, { $unwind: \"$problemsAfter\" }, { $replaceRoot: { newRoot: \"$problemsAfter\" } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"reporter\" } }, { $match: { \"reporter.staff_first_name\": \"Rylan\", \"reporter.staff_last_name\": \"Homenick\" } }, { $group: { _id: null, maxDate: { $max: \"$date_problem_reported\" } } }, { $lookup: { from: \"Problems\", let: { latestReportedDate: \"$maxDate\" }, pipeline: [ { $match: { $expr: { $gt: [\"$date_problem_reported\", \"$$latestReportedDate\"] } } }, { $project: { problem_id: 1 } } ], as: \"problemsAfter\" } }, { $unwind: \"$problemsAfter\" }, { $replaceRoot: { newRoot: \"$problemsAfter\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3101,
        "spider_question_id": 5393,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the top 3 products which have the largest number of problems?",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { product_name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { product_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3102,
        "spider_question_id": 5394,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the three products that have the most problems?s",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { product_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Problems.aggregate([ { $group: { _id: \"$product_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $lookup: { from: \"Product\", localField: \"_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $project: { product_name: \"$product_info.product_name\" } } ])",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_info\" } }, { $unwind: \"$product_info\" }, { $group: { _id: \"$product_info.product_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { product_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3103,
        "spider_question_id": 5400,
        "db_id": "tracking_software_problems",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Lacey' AND T3.staff_last_name = 'Bosco' INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Kenton' AND T3.staff_last_name = 'Champlin'",
        "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
        "query": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product\" } }, { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff\" } }, { $unwind: \"$product\" }, { $unwind: \"$staff\" }, { $match: { $or: [ { \"staff.staff_first_name\": \"Lacey\", \"staff.staff_last_name\": \"Bosco\" }, { \"staff.staff_first_name\": \"Kenton\", \"staff.staff_last_name\": \"Champlin\" } ] } }, { $group: { _id: \"$product.product_name\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { product_name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Problems.aggregate([ { $lookup: { from: \"Product\", localField: \"product_id\", foreignField: \"product_id\", as: \"product\" } }, { $lookup: { from: \"Staff\", localField: \"reported_by_staff_id\", foreignField: \"staff_id\", as: \"staff\" } }, { $unwind: \"$product\" }, { $unwind: \"$staff\" }, { $match: { $or: [ { \"staff.staff_first_name\": \"Lacey\", \"staff.staff_last_name\": \"Bosco\" }, { \"staff.staff_first_name\": \"Kenton\", \"staff.staff_last_name\": \"Champlin\" } ] } }, { $group: { _id: \"$product.product_name\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { product_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3104,
        "spider_question_id": 5403,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , address_road , city FROM branch ORDER BY open_year",
        "question": "Show name, address road, and city for all branches sorted by open year.",
        "query": "db.branch.find({}, { Name: 1, Address_road: 1, City: 1 }).sort({ Open_year: 1 })",
        "gpt4 answer": "db.branch.find({}, { Name: 1, Address_road: 1, City: 1 }).sort({ Open_year: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3105,
        "spider_question_id": 5404,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , address_road , city FROM branch ORDER BY open_year",
        "question": "What are the names, address roads, and cities of the branches ordered by opening year?",
        "query": "db.branch.find({}, { Name: 1, Address_road: 1, City: 1 }).sort({ Open_year: 1 })",
        "gpt4 answer": "db.branch.find({}, { Name: 1, Address_road: 1, City: 1 }).sort({ Open_year: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3106,
        "spider_question_id": 5405,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "question": "What are names for top three branches with most number of membership?",
        "query": "db.branch.find({}, { Name: 1 }).sort({ membership_amount: -1 }).limit(3)",
        "gpt4 answer": "db.branch.find({}, { Name: 1 }).sort({ membership_amount: -1 }).limit(3)",
        "deepseek answer": "."
    },
    {
        "question_id": 3107,
        "spider_question_id": 5406,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "query": "db.branch.find({}, { Name: 1 }).sort({ membership_amount: -1 }).limit(3)",
        "gpt4 answer": "db.branch.find({}, { Name: 1 }).sort({ membership_amount: -1 }).limit(3)",
        "deepseek answer": "."
    },
    {
        "question_id": 3108,
        "spider_question_id": 5409,
        "db_id": "shop_membership",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*) >= 2",
        "question": "List all open years when at least two shops are opened.",
        "query": "db.branch.aggregate([ { $group: { _id: \"$Open_year\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { open_year: \"$_id\" } } ])",
        "gpt4 answer": "db.branch.aggregate([ { $group: { _id: \"$Open_year\", shopsOpened: { $sum: 1 } } }, { $match: { shopsOpened: { $gte: 2 } } }, { $project: { Open_year: \"$_id\" } } ])",
        "deepseek answer": "db.branch.aggregate([ { $group: { _id: \"$Open_year\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { open_year: \"$_id\" } } ])"
    },
    {
        "question_id": 3109,
        "spider_question_id": 5410,
        "db_id": "shop_membership",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*) >= 2",
        "question": "What are the opening years in which at least two shops opened?",
        "query": "db.branch.aggregate([ { $group: { _id: \"$Open_year\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Open_year: \"$_id\" } } ])",
        "gpt4 answer": "db.branch.aggregate([ { $group: { _id: \"$Open_year\", count: { $sum: 1 } }}, { $match: { count: { $gte: 2 } }}, { $project: { open_year: \"$_id\" }} ])",
        "deepseek answer": "db.branch.aggregate([ { $group: { _id: \"$Open_year\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Open_year: \"$_id\" } } ])"
    },
    {
        "question_id": 3110,
        "spider_question_id": 5411,
        "db_id": "shop_membership",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT min(membership_amount) , max(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'",
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "query": "db.branch.aggregate([ { $match: { $or: [{ Open_year: 2011 }, { City: \"London\" }] } }, { $group: { _id: null, minMembershipAmount: { $min: \"$membership_amount\" }, maxMembershipAmount: { $max: \"$membership_amount\" } } }, { $project: { minMembershipAmount: 1, maxMembershipAmount: 1 } } ])",
        "gpt4 answer": "db.branch.aggregate([ { $match: { $or: [{ Open_year: 2011 }, { City: \"London\" }] } }, { $group: { _id: null, minMembershipAmount: { $min: \"$membership_amount\" }, maxMembershipAmount: { $max: \"$membership_amount\" } } }, { $project: { minMembershipAmount: 1, maxMembershipAmount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3111,
        "spider_question_id": 5412,
        "db_id": "shop_membership",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT min(membership_amount) , max(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'",
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "query": "db.branch.aggregate([ { $match: { $or: [ { Open_year: 2011 }, { City: \"London\" } ] } }, { $group: { _id: null, minimum_membership_amount: { $min: \"$membership_amount\" }, maximum_membership_amount: { $max: \"$membership_amount\" } } }, { $project: { minimum_membership_amount: 1, maximum_membership_amount: 1 } } ])",
        "gpt4 answer": "db.branch.aggregate([ { $match: { $or: [ { Open_year: 2011 }, { City: \"London\" } ] } }, { $group: { _id: null, minimum_membership_amount: { $min: \"$membership_amount\" }, maximum_membership_amount: { $max: \"$membership_amount\" } } }, { $project: { minimum_membership_amount: 1, maximum_membership_amount: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3112,
        "spider_question_id": 5417,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_number , name , hometown FROM member ORDER BY LEVEL DESC",
        "question": "Show card number, name, and hometown for all members in a descending order of level.",
        "query": "db.member.find({}, { Card_Number: 1, Name: 1, Hometown: 1 }).sort({ Level: -1 })",
        "gpt4 answer": "db.member.find({}, { Card_Number: 1, Name: 1, Hometown: 1 }).sort({ Level: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3113,
        "spider_question_id": 5418,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_number , name , hometown FROM member ORDER BY LEVEL DESC",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "query": "db.member.find({}, { Card_Number: 1, Name: 1, Hometown: 1}).sort({Level: -1})",
        "gpt4 answer": "db.member.find({}, { Card_Number: 1, Name: 1, Hometown: 1 }).sort({ Level: -1 })",
        "deepseek answer": "db.member.find({}, { Card_Number: 1, Name: 1, Hometown: 1}).sort({Level: -1})"
    },
    {
        "question_id": 3114,
        "spider_question_id": 5419,
        "db_id": "shop_membership",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the membership level with most number of members.",
        "query": "db.member.aggregate([ { $group: { _id: \"$Level\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Level: \"$_id\" } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Level\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Level\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Level: \"$_id\" } } ])"
    },
    {
        "question_id": 3115,
        "spider_question_id": 5420,
        "db_id": "shop_membership",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the membership level with the most people?",
        "query": "db.member.aggregate([ { $group: { _id: \"$Level\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Level: \"$_id\" } } ])",
        "gpt4 answer": "db.member.aggregate([ { $group: { _id: \"$Level\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.member.aggregate([ { $group: { _id: \"$Level\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Level: \"$_id\" } } ])"
    },
    {
        "question_id": 3116,
        "spider_question_id": 5425,
        "db_id": "shop_membership",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "question": "Show member names without any registered branch.",
        "query": "db.member.aggregate([ { $lookup: { from: \"membership_register_branch\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"registered_branches\" } }, { $match: { registered_branches: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"membership_register_branch\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"registered_branches\" } }, { $match: { registered_branches: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3117,
        "spider_question_id": 5426,
        "db_id": "shop_membership",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "question": "What are the names of the members that have never registered at any branch?",
        "query": "db.member.aggregate([ { $lookup: { from: \"membership_register_branch\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"registration\" } }, { $match: { registration: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.member.aggregate([ { $lookup: { from: \"membership_register_branch\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"registration\" } }, { $match: { registration: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3118,
        "spider_question_id": 5439,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6",
        "question": "What is the total number of purchases for members with level 6?",
        "query": "db.purchase.aggregate([ { $lookup: { from: \"member\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"member_info\" } }, { $match: { \"member_info.Level\": 6 } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.purchase.aggregate([ { $lookup: { from: \"member\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"member_info\" } }, { $match: { \"member_info.Level\": 6 } }, { $count: \"total_purchases\" } ])",
        "deepseek answer": "db.purchase.aggregate([ { $lookup: { from: \"member\", localField: \"Member_ID\", foreignField: \"Member_ID\", as: \"member_info\" } }, { $match: { \"member_info.Level\": 6 } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 3119,
        "spider_question_id": 5443,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%'",
        "question": "list the card number of all members whose hometown address includes word 'Kentucky'.",
        "query": "db.member.find({ Hometown: { $regex: /Kentucky/ } }, { Card_Number: 1 })",
        "gpt4 answer": "db.member.find({ Hometown: /Kentucky/ }, { Card_Number: 1 })",
        "deepseek answer": "db.member.find({ Hometown: { $regex: /Kentucky/ } }, { Card_Number: 1 })"
    },
    {
        "question_id": 3120,
        "spider_question_id": 5444,
        "db_id": "shop_membership",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%'",
        "question": "What are the card numbers of members from Kentucky?",
        "query": "db.member.find({ Hometown: { $regex: /Kentucky/ } }, { Card_Number: 1 })",
        "gpt4 answer": "db.member.find({ Hometown: /Kentucky/ }, { Card_Number: 1 })",
        "deepseek answer": "db.member.find({ Hometown: { $regex: /Kentucky/ } }, { Card_Number: 1 })"
    },
    {
        "question_id": 3121,
        "spider_question_id": 5451,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Age) FROM STUDENT",
        "question": "Find the maximum age of all the students.",
        "query": "db.Student.aggregate([ { $group: { _id: null, maxAge: { $max: \"$Age\" } } }, { $project: { maxAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, MaxAge: { $max: \"$Age\" } } }, { $project: { MaxAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: null, maxAge: { $max: \"$Age\" } } }, { $project: { maxAge: 1 } } ])"
    },
    {
        "question_id": 3122,
        "spider_question_id": 5452,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(Age) FROM STUDENT",
        "question": "What is the oldest age among the students?",
        "query": "db.Student.aggregate([ { $group: { _id: null, oldestAge: { $max: \"$Age\" } } }, { $project: { oldestAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, oldestAge: { $max: \"$Age\" } } }, { $project: { oldestAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3123,
        "spider_question_id": 5453,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LName FROM STUDENT WHERE Major = 50",
        "question": "Find the last names of students with major 50.",
        "query": "db.Student.find({Major: 50}, {LName: 1})",
        "gpt4 answer": "db.Student.find({ Major: 50 }, { LName: 1 })",
        "deepseek answer": "db.Student.find({Major: 50}, {LName: 1})"
    },
    {
        "question_id": 3124,
        "spider_question_id": 5454,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LName FROM STUDENT WHERE Major = 50",
        "question": "What are the last names of students studying major 50?",
        "query": "db.Student.find({Major: 50}, {LName: 1})",
        "gpt4 answer": "db.Student.find({ Major: 50 }, { LName: 1 })",
        "deepseek answer": "db.Student.find({Major: 50}, {LName: 1})"
    },
    {
        "question_id": 3125,
        "spider_question_id": 5455,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Fname FROM STUDENT WHERE Age > 22",
        "question": "Find the first names of students with age above 22.",
        "query": "db.Student.find({Age: {$gt: 22}}, {Fname: 1})",
        "gpt4 answer": "db.Student.find({ Age: { $gt: 22 } }, { Fname: 1 })",
        "deepseek answer": "db.Student.find({Age: {$gt: 22}}, {Fname: 1})"
    },
    {
        "question_id": 3126,
        "spider_question_id": 5456,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Fname FROM STUDENT WHERE Age > 22",
        "question": "What are the first names of all the students aged above 22?",
        "query": "db.Student.find({Age: {$gt: 22}}, {Fname: 1})",
        "gpt4 answer": "db.Student.find({ Age: { $gt: 22 }}, { Fname: 1 })",
        "deepseek answer": "db.Student.find({Age: {$gt: 22}}, {Fname: 1})"
    },
    {
        "question_id": 3127,
        "spider_question_id": 5459,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Age) FROM STUDENT WHERE Sex = 'F'",
        "question": "What is the average age of female (sex is F) students?",
        "query": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: \"F\" } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 3128,
        "spider_question_id": 5460,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Age) FROM STUDENT WHERE Sex = 'F'",
        "question": "Find the average age of female students.",
        "query": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: null, avgAge: {$avg: \"$Age\"} } }, { $project: { avgAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 3129,
        "spider_question_id": 5461,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Age) , min(Age) FROM STUDENT WHERE Major = 600",
        "question": "What are the maximum and minimum age of students with major 600?",
        "query": "db.Student.aggregate([ { $match: { Major: 600 } }, { $group: { _id: null, maxAge: { $max: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { maxAge:1, minAge:1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Major: 600 } }, { $group: { _id: null, maxAge: { $max: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { maxAge: 1, minAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Major: 600 } }, { $group: { _id: null, maxAge: { $max: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { maxAge:1, minAge:1 } } ])"
    },
    {
        "question_id": 3130,
        "spider_question_id": 5462,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Age) , min(Age) FROM STUDENT WHERE Major = 600",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "query": "db.Student.aggregate([ { $match: { Major: 600 } }, { $group: { _id: null, maxAge: { $max: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { maxAge:1, minAge:1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Major: 600 } }, { $group: { _id: null, maxAge: { $max: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { maxAge: 1, minAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Major: 600 } }, { $group: { _id: null, maxAge: { $max: \"$Age\" }, minAge: { $min: \"$Age\" } } }, { $project: { maxAge:1, minAge:1 } } ])"
    },
    {
        "question_id": 3131,
        "spider_question_id": 5463,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM STUDENT WHERE city_code = 'BAL'",
        "question": "Who are the advisors for students that live in a city with city code 'BAL'?",
        "query": "db.Student.find({city_code: 'BAL'}, {Advisor: 1})",
        "gpt4 answer": "db.Student.find({ city_code: 'BAL' }, { Advisor: 1 })",
        "deepseek answer": "db.Student.find({city_code: 'BAL'}, {Advisor: 1})"
    },
    {
        "question_id": 3132,
        "spider_question_id": 5464,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM STUDENT WHERE city_code = 'BAL'",
        "question": "Show the advisors of the students whose city of residence has city code 'BAL'.",
        "query": "db.Student.find({city_code: 'BAL'}, {Advisor: 1})",
        "gpt4 answer": "db.Student.find({ city_code: 'BAL' }, { Advisor: 1 })",
        "deepseek answer": "db.Student.find({city_code: 'BAL'}, {Advisor: 1})"
    },
    {
        "question_id": 3133,
        "spider_question_id": 5469,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
        "question": "Report the distinct registration date and the election cycle.",
        "query": "db.Voting_record.aggregate([ { $group: { _id: { Registration_Date: \"$Registration_Date\", Election_Cycle: \"$Election_Cycle\" } } }, { $project: { Registration_Date: \"$_id.Registration_Date\", Election_Cycle: \"$_id.Election_Cycle\" } } ])",
        "gpt4 answer": "db.Voting_record.aggregate([ { $group: { _id: { Registration_Date: \"$Registration_Date\", Election_Cycle: \"$Election_Cycle\" } } }, { $project: { Registration_Date: \"$_id.Registration_Date\", Election_Cycle: \"$_id.Election_Cycle\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3134,
        "spider_question_id": 5472,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD",
        "question": "List all the distinct president votes and the vice president votes.",
        "query": "db.Voting_record.aggregate([ { $group: { _id: { President_Vote: \"$President_Vote\", Vice_President_Vote: \"$Vice_President_Vote\" } } }, { $project: { President_Vote: \"$_id.President_Vote\", Vice_President_Vote: \"$_id.Vice_President_Vote\" } } ])",
        "gpt4 answer": "db.Voting_record.aggregate([ { $group: { _id: { President_Vote: \"$President_Vote\", Vice_President_Vote: \"$Vice_President_Vote\" } } }, { $project: { President_Vote: \"$_id.President_Vote\", Vice_President_Vote: \"$_id.Vice_President_Vote\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3135,
        "spider_question_id": 5473,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE",
        "question": "Find the distinct last names of the students who have class president votes.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Class_President_Vote\", as: \"president_votes\" } }, { $match: { \"president_votes\": { $ne: [] } } }, { $group: { _id: \"$LName\" } }, { $project: { \"LName\": \"$_id\", \"_id\": 0 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Class_President_Vote\", as: \"president_votes\" } }, { $match: { \"president_votes\": { $ne: [] } } }, { $group: { _id: \"$LName\" } }, { $project: { \"LName\": \"$_id\", \"_id\": 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3136,
        "spider_question_id": 5474,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE",
        "question": "What are the distinct last names of the students who have class president votes?",
        "query": "db.Voting_record.aggregate([ { $lookup: { from: \"Student\", localField: \"Class_President_Vote\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_info.LName\" } }, { $project: { LName: \"$_id\" } } ])",
        "gpt4 answer": "db.Voting_record.aggregate([ { $lookup: { from: \"Student\", localField: \"Class_President_Vote\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $group: { _id: \"$student_info.LName\" } }, { $project: { LName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3137,
        "spider_question_id": 5475,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE",
        "question": "Find the distinct first names of the students who have class senator votes.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Class_Senator_Vote\", as: \"senator_votes\" } }, { $match: { \"senator_votes\": { $ne: [] } } }, { $group: { _id: \"$Fname\" } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Class_Senator_Vote\", as: \"senator_votes\" } }, { $match: { \"senator_votes\": { $ne: [] } } }, { $group: { _id: \"$Fname\" } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3138,
        "spider_question_id": 5477,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = 'Fall'",
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"secretary_votes\" } }, { $match: { \"secretary_votes.Election_Cycle\": \"Fall\" } }, { $group: { _id: \"$Age\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"secretary_votes\" } }, { $match: { \"secretary_votes.Election_Cycle\": \"Fall\" } }, { $group: { _id: \"$Age\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3139,
        "spider_question_id": 5478,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = 'Fall'",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"secretary_votes\" } }, { $unwind: \"$secretary_votes\" }, { $match: { \"secretary_votes.Election_Cycle\": \"Fall\" } }, { $group: { _id: \"$Age\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"secretary_votes\" } }, { $unwind: \"$secretary_votes\" }, { $match: { \"secretary_votes.Election_Cycle\": \"Fall\" } }, { $group: { _id: \"$Age\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3140,
        "spider_question_id": 5479,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = 'Spring'",
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { \"treasurer_votes.Election_Cycle\": \"Spring\" } }, { $group: { _id: \"$Advisor\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { \"treasurer_votes.Election_Cycle\": \"Spring\" } }, { $group: { _id: \"$Advisor\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3141,
        "spider_question_id": 5480,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = 'Spring'",
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { \"treasurer_votes.Election_Cycle\": \"Spring\" } }, { $group: { _id: \"$Advisor\" } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { \"treasurer_votes.Election_Cycle\": \"Spring\" } }, { $group: { _id: \"$Advisor\" } }, { $project: { Advisor: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3142,
        "spider_question_id": 5481,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote",
        "question": "Find the distinct majors of students who have treasurer votes.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { \"treasurer_votes\": { $ne: [] } } }, { $group: { _id: \"$Major\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { \"treasurer_votes\": { $ne: [] } } }, { $group: { _id: \"$Major\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3143,
        "spider_question_id": 5482,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote",
        "question": "What are the distinct majors that students with treasurer votes are studying?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { treasurer_votes: { $ne: [] } } }, { $group: { _id: \"$Major\" } }, { $project: { Major: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Treasurer_Vote\", as: \"treasurer_votes\" } }, { $match: { treasurer_votes: { $ne: [] } } }, { $group: { _id: \"$Major\" } }, { $project: { Major: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3144,
        "spider_question_id": 5484,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = 'F'",
        "question": "What are the first and last names of all the female students who have president votes?",
        "query": "db.Student.aggregate([ { $match: { Sex: \"F\", StuID: { $in: db.Voting_record.distinct(\"President_Vote\") } } }, { $project: { Fname: 1, LName: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $match: { Sex: \"F\", StuID: { $in: db.Voting_record.distinct(\"President_Vote\") } } }, { $project: { Fname: 1, LName: 1 } } ])"
    },
    {
        "question_id": 3145,
        "spider_question_id": 5485,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "db.Student.aggregate([ { $match: { Age: 18 } }, { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"vice_president_votes\" } }, { $match: { \"vice_president_votes\": { $ne: [] } } }, { $project: { Fname: 1, LName: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Age: 18 } }, { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"vice_president_votes\" } }, { $match: { \"vice_president_votes\": { $ne: [] } } }, { $project: { Fname: 1, LName: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3146,
        "spider_question_id": 5486,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18",
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "query": "db.Student.aggregate([ { $match: { Age: 18 } }, { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"votingRecord\" }}, { $match: { \"votingRecord\": { $ne: [] } } }, { $project: { Fname: 1, LName: 1 } }, { $group: { _id: { Fname: \"$Fname\", LName: \"$LName\" } } }, { $project: { Fname: \"$_id.Fname\", LName: \"$_id.LName\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Age: 18 } }, { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"votingRecord\" }}, { $match: { \"votingRecord\": { $ne: [] } } }, { $project: { Fname: 1, LName: 1 } }, { $group: { _id: { Fname: \"$Fname\", LName: \"$LName\" } } }, { $project: { Fname: \"$_id.Fname\", LName: \"$_id.LName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3147,
        "spider_question_id": 5491,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'",
        "question": "Find the average age of students who live in the city with code 'NYC' and have secretary votes in the spring election cycle.",
        "query": "db.Student.aggregate([ { $match: { city_code: \"NYC\", StuID: { $in: db.Voting_record.distinct(\"Secretary_Vote\", { Election_Cycle: \"Spring\" }) } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } } , { $project: { averageAge: 1} }])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { city_code: 'NYC' } }, { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"SecretaryVotes\" } }, { $unwind: \"$SecretaryVotes\" }, { $match: { \"SecretaryVotes.Election_Cycle\": 'Spring' } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { city_code: \"NYC\", StuID: { $in: db.Voting_record.distinct(\"Secretary_Vote\", { Election_Cycle: \"Spring\" }) } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } } , { $project: { averageAge: 1} }])"
    },
    {
        "question_id": 3148,
        "spider_question_id": 5492,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'",
        "question": "What is the average age of students who have city code 'NYC' and have secretary votes for the spring election cycle?",
        "query": "db.Student.aggregate([ { $match: { city_code: \"NYC\", StuID: { $in: db.Voting_record.distinct(\"Secretary_Vote\", { Election_Cycle: \"Spring\" }) } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"SecretaryVotes\" } }, { $match: { \"city_code\": \"NYC\", \"SecretaryVotes.Election_Cycle\": \"Spring\" } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { city_code: \"NYC\", StuID: { $in: db.Voting_record.distinct(\"Secretary_Vote\", { Election_Cycle: \"Spring\" }) } } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 3149,
        "spider_question_id": 5493,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = 'F' AND T2.Election_Cycle = 'Spring'",
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"secretary_votes\" } }, { $unwind: \"$secretary_votes\" }, { $match: { \"Sex\": \"F\", \"secretary_votes.Election_Cycle\": \"Spring\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" } } }, { $project: { avgAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"secretary_votes\" } }, { $unwind: \"$secretary_votes\" }, { $match: { \"Sex\": \"F\", \"secretary_votes.Election_Cycle\": \"Spring\" } }, { $group: { _id: null, avgAge: { $avg: \"$Age\" } } }, { $project: { avgAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3150,
        "spider_question_id": 5494,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = 'F' AND T2.Election_Cycle = 'Spring'",
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"SecretaryVotes\" } }, { $match: { \"Sex\": \"F\", \"SecretaryVotes.Election_Cycle\": \"Spring\" } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Secretary_Vote\", as: \"SecretaryVotes\" } }, { $match: { \"Sex\": \"F\", \"SecretaryVotes.Election_Cycle\": \"Spring\" } }, { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3151,
        "spider_question_id": 5495,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = 'PIT'",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"VicePresidentVotes\" } }, { $match: { \"VicePresidentVotes\": { $ne: [] }, \"city_code\": { $ne: \"PIT\" } } }, { $group: { _id: \"$Fname\" } }, { $project: { Fname: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"VicePresidentVotes\" } }, { $match: { \"VicePresidentVotes\": { $ne: [] }, \"city_code\": { $ne: \"PIT\" } } }, { $group: { _id: \"$Fname\" } }, { $project: { Fname: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3152,
        "spider_question_id": 5496,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = 'PIT'",
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"VicePresidentVotes\" } }, { $match: { \"VicePresidentVotes\": { $ne: [] }, \"city_code\": { $ne: \"PIT\" } } }, { $group: { _id: \"$Fname\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"Vice_President_Vote\", as: \"VicePresidentVotes\" } }, { $match: { \"VicePresidentVotes\": { $ne: [] }, \"city_code\": { $ne: \"PIT\" } } }, { $group: { _id: \"$Fname\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3153,
        "spider_question_id": 5497,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = '2192'",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"President_Vote\", as: \"votes\" } }, { $match: { \"votes\": { $ne: [] }, \"Advisor\": { $ne: \"2192\" } } }, { $group: { _id: \"$LName\" } }, { $project: { LName: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"President_Vote\", as: \"votes\" } }, { $match: { \"votes\": { $ne: [] }, \"Advisor\": { $ne: \"2192\" } } }, { $group: { _id: \"$LName\" } }, { $project: { LName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3154,
        "spider_question_id": 5498,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = '2192'",
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"President_Vote\", as: \"PresidentVotes\" } }, { $match: { \"PresidentVotes\": {$ne: []}, \"Advisor\": {$ne: '2192'} } }, { $group: { _id: \"$LName\" } }, { $project: { LName: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Voting_record\", localField: \"StuID\", foreignField: \"President_Vote\", as: \"PresidentVotes\" } }, { $match: { \"PresidentVotes\": {$ne: []}, \"Advisor\": {$ne: '2192'} } }, { $group: { _id: \"$LName\" } }, { $project: { LName: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3155,
        "spider_question_id": 5501,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor",
        "question": "For each advisor, report the total number of students advised by him or her.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", totalStudents: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", totalStudents: { $sum: 1 } } }, { $project: { Advisor: \"$_id\", totalStudents: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", totalStudents: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3156,
        "spider_question_id": 5502,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor",
        "question": "How many students does each advisor have?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3157,
        "spider_question_id": 5503,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2",
        "question": "Report all advisors that advise more than 2 students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", studentCount: { $sum: 1 } } }, { $match: { studentCount: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 3158,
        "spider_question_id": 5504,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2",
        "question": "Which advisors have more than two students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 3159,
        "spider_question_id": 5505,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3",
        "question": "Report all majors that have less than 3 students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Major: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Major: \"$_id\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Major: \"$_id\" } } ])"
    },
    {
        "question_id": 3160,
        "spider_question_id": 5506,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3",
        "question": "What are the majors only less than three students are studying?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Major: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Major: \"$_id\" } } ])"
    },
    {
        "question_id": 3161,
        "spider_question_id": 5507,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Election_Cycle , count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "question": "For each election cycle, report the number of voting records.",
        "query": "db.Voting_record.aggregate([ { $group: { _id: \"$Election_Cycle\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Voting_record.aggregate([ { $group: { _id: \"$Election_Cycle\", NumberOfVotingRecords: { $sum: 1 } } } ])",
        "deepseek answer": "db.Voting_record.aggregate([ { $group: { _id: \"$Election_Cycle\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3162,
        "spider_question_id": 5508,
        "db_id": "voter_2",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Election_Cycle , count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "question": "Count the number of voting records for each election cycle.",
        "query": "db.Voting_record.aggregate([ { $group: { _id: \"$Election_Cycle\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Voting_record.aggregate([ { $group: { _id: \"$Election_Cycle\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Voting_record.aggregate([ { $group: { _id: \"$Election_Cycle\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3163,
        "spider_question_id": 5509,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "Which major has the most students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Major: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", numberOfStudents: { $sum: 1 } } }, { $sort: { numberOfStudents: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Major: \"$_id\" } } ])"
    },
    {
        "question_id": 3164,
        "spider_question_id": 5510,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the major that is studied by the largest number of students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Major: \"$_id\" } }])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Major: \"$_id\" } }])"
    },
    {
        "question_id": 3165,
        "spider_question_id": 5511,
        "db_id": "voter_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Major FROM STUDENT WHERE Sex = 'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common major among female (sex is F) students?",
        "query": "db.Student.aggregate([ { $match: { Sex: \"F\" } }, { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Majpr: \"$_id\" } }])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Sex: \"F\" } }, { $group: { _id: \"$Major\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Majpr: \"$_id\" } }])"
    },
    {
        "question_id": 3166,
        "spider_question_id": 5512,
        "db_id": "voter_2",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT Major FROM STUDENT WHERE Sex = 'F' GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the major that is studied by the most female students.",
        "query": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: '$Major', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Major: \"$_id\" } }])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: '$Major', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Sex: 'F' } }, { $group: { _id: '$Major', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { Major: \"$_id\" } }])"
    },
    {
        "question_id": 3167,
        "spider_question_id": 5513,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the city_code of the city that the most students live in?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3168,
        "spider_question_id": 5514,
        "db_id": "voter_2",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the city that has the most students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3169,
        "spider_question_id": 5515,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2",
        "question": "Report the distinct advisors who have more than 2 students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", studentCount: { $sum: 1 } } }, { $match: { studentCount: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 3170,
        "spider_question_id": 5516,
        "db_id": "voter_2",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*) > 2",
        "question": "Which advisors are advising more than 2 students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", studentCount: { $sum: 1 } } }, { $match: { studentCount: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 3171,
        "spider_question_id": 5523,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , typical_buying_price FROM products",
        "question": "What are the names and buying prices of all the products?",
        "query": "db.Products.find({}, {product_name: 1, typical_buying_price: 1})",
        "gpt4 answer": "db.Products.find({}, { product_name: 1, typical_buying_price: 1 })",
        "deepseek answer": "db.Products.find({}, {product_name: 1, typical_buying_price: 1})"
    },
    {
        "question_id": 3172,
        "spider_question_id": 5524,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , typical_buying_price FROM products",
        "question": "Return the names and typical buying prices for all products.",
        "query": "db.Products.aggregate([ { $project: { product_name: 1, typical_buying_price: 1 } } ])",
        "gpt4 answer": "db.Products.find({}, { product_name: 1, typical_buying_price: 1 })",
        "deepseek answer": "db.Products.aggregate([ { $project: { product_name: 1, typical_buying_price: 1 } } ])"
    },
    {
        "question_id": 3173,
        "spider_question_id": 5525,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT color_description FROM ref_colors",
        "question": "List the description of all the colors.",
        "query": "db.Ref_Colors.find({}, { color_description: 1 })",
        "gpt4 answer": "db.Ref_Colors.find({}, { color_description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3174,
        "spider_question_id": 5526,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT color_description FROM ref_colors",
        "question": "What are the descriptions for each color?",
        "query": "db.Ref_Colors.find({}, { color_description: 1 })",
        "gpt4 answer": "db.Ref_Colors.find({}, { color_description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3175,
        "spider_question_id": 5529,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_name FROM products WHERE product_category_code = 'Spices'",
        "question": "What are the names of products with category 'Spices'?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"product_category\" } }, { $match: { \"product_category.product_category_description\": \"Spices\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.find( { \"product_category_code\": \"Spices\" }, { \"product_name\": 1, \"_id\": 0 } )",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"product_category\" } }, { $match: { \"product_category.product_category_description\": \"Spices\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3176,
        "spider_question_id": 5530,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_name FROM products WHERE product_category_code = 'Spices'",
        "question": "Return the names of products in the category 'Spices'.",
        "query": "db.Products.find( { product_category_code: 'Spices' }, { product_name: 1 } )",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { \"category.product_category_description\": \"Spices\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.find( { product_category_code: 'Spices' }, { product_name: 1 } )"
    },
    {
        "question_id": 3177,
        "spider_question_id": 5533,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM products WHERE product_category_code = 'Seeds'",
        "question": "How many products are there under the category 'Seeds'?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { \"category.product_category_description\": \"Seeds\" } }, { $count: \"numberOfProducts\" } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { \"category.product_category_description\": \"Seeds\" } }, { $count: \"numberOfProducts\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3178,
        "spider_question_id": 5534,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM products WHERE product_category_code = 'Seeds'",
        "question": "Count the number of products in the category 'Seeds'.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { \"category.product_category_description\": \"Seeds\" } }, { $count: \"number_of_products\" } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { \"category.product_category_description\": \"Seeds\" } }, { $count: \"number_of_products\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3179,
        "spider_question_id": 5537,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = 'cumin'",
        "question": "What is the category and typical buying price of the product with name 'cumin'?",
        "query": "db.Products.find( { product_name: 'cumin' }, { product_category_code: 1, typical_buying_price: 1 } )",
        "gpt4 answer": "db.Products.find({ product_name: 'cumin' }, { product_category_code: 1, typical_buying_price: 1 })",
        "deepseek answer": "db.Products.find( { product_name: 'cumin' }, { product_category_code: 1, typical_buying_price: 1 } )"
    },
    {
        "question_id": 3180,
        "spider_question_id": 5538,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = 'cumin'",
        "question": "Return the category code and typical price of 'cumin'.",
        "query": "db.Products.find( { product_name: 'cumin' }, { product_category_code: 1, typical_buying_price: 1 } )",
        "gpt4 answer": "db.Products.find( { product_name: 'cumin' }, { product_category_code: 1, typical_buying_price: 1 } )",
        "deepseek answer": "db.Products.find( { product_name: 'cumin' }, { product_category_code: 1, typical_buying_price: 1 } )"
    },
    {
        "question_id": 3181,
        "spider_question_id": 5539,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_category_code FROM products WHERE product_name = 'flax'",
        "question": "Which category does the product named 'flax' belong to?",
        "query": "db.Products.findOne( { product_name: 'flax' }, { product_category_code: 1 } )",
        "gpt4 answer": "db.Products.findOne({ product_name: \"flax\" }, { product_category_code: 1 })",
        "deepseek answer": "db.Products.findOne( { product_name: 'flax' }, { product_category_code: 1 } )"
    },
    {
        "question_id": 3182,
        "spider_question_id": 5540,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_category_code FROM products WHERE product_name = 'flax'",
        "question": "What is the code of the category that the product with the name 'flax' belongs to?",
        "query": "db.Products.findOne({product_name: 'flax'}, {product_category_code: 1})",
        "gpt4 answer": "db.Products.findOne({ product_name: 'flax' }, { product_category_code: 1 })",
        "deepseek answer": "db.Products.findOne({product_name: 'flax'}, {product_category_code: 1})"
    },
    {
        "question_id": 3183,
        "spider_question_id": 5541,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'",
        "question": "What is the name of the product with the color description 'yellow'?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color\" } }, { $match: { \"color.color_description\": \"yellow\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3184,
        "spider_question_id": 5542,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'",
        "question": "Give the name of the products that have a color description 'yellow'.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3185,
        "spider_question_id": 5543,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "question": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "query": "db.Ref_Product_Categories.aggregate([ { $lookup: { from: \"Products\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_description\": { $regex: /t/, $options: \"i\" } } }, { $project: { product_category_description: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Ref_Product_Categories.aggregate([ { $lookup: { from: \"Products\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_description\": { $regex: /t/, $options: \"i\" } } }, { $project: { product_category_description: 1 } } ])"
    },
    {
        "question_id": 3186,
        "spider_question_id": 5544,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "query": "db.Ref_Product_Categories.aggregate([ { $lookup: { from: \"Products\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_description\": { $regex: /t/, $options: \"i\" } } }, { $project: { product_category_description: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Ref_Product_Categories.aggregate([ { $lookup: { from: \"Products\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_description\": { $regex: /t/, $options: \"i\" } } }, { $project: { product_category_description: 1 } } ])"
    },
    {
        "question_id": 3187,
        "spider_question_id": 5545,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'catnip'",
        "question": "What is the color description of the product with name 'catnip'?",
        "query": "db.Products.aggregate([ { $match: { product_name: 'catnip' } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $project: { color_description: \"$color_info.color_description\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'catnip' } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $project: { color_description: \"$color_info.color_description\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3188,
        "spider_question_id": 5546,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'catnip'",
        "question": "Give the color description for the product 'catnip'.",
        "query": "db.Products.aggregate([ { $match: { product_name: 'catnip' } }, { $lookup: { from: 'Ref_Colors', localField: 'color_code', foreignField: 'color_code', as: 'color_info' } }, { $unwind: '$color_info' }, { $project: { color_description: '$color_info.color_description' } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'catnip' } }, { $lookup: { from: 'Ref_Colors', localField: 'color_code', foreignField: 'color_code', as: 'color_info' } }, { $unwind: '$color_info' }, { $project: { color_description: '$color_info.color_description' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3189,
        "spider_question_id": 5547,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'chervil'",
        "question": "What is the color code and description of the product named 'chervil'?",
        "query": "db.Products.aggregate([ { $match: { product_name: 'chervil' } }, { $lookup: { from: 'Ref_Colors', localField: 'color_code', foreignField: 'color_code', as: 'colorDetails' } }, { $unwind: '$colorDetails' }, { $project: { color_code: 1, color_description: '$colorDetails.color_description' } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'chervil' } }, { $lookup: { from: 'Ref_Colors', localField: 'color_code', foreignField: 'color_code', as: 'colorDetails' } }, { $unwind: '$colorDetails' }, { $project: { color_code: 1, color_description: '$colorDetails.color_description' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3190,
        "spider_question_id": 5548,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'chervil'",
        "question": "Return the color code and description for the product with the name 'chervil'.",
        "query": "db.Products.aggregate([ { $match: { product_name: 'chervil' } }, { $lookup: { from: 'Ref_Colors', localField: 'color_code', foreignField: 'color_code', as: 'color_info' } }, { $unwind: '$color_info' }, { $project: { color_code: 1, color_description: '$color_info.color_description' } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'chervil' } }, { $lookup: { from: 'Ref_Colors', localField: 'color_code', foreignField: 'color_code', as: 'color_info' } }, { $unwind: '$color_info' }, { $project: { color_code: 1, color_description: '$color_info.color_description' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3191,
        "spider_question_id": 5549,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.product_id , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING count(*) >= 2",
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"characteristic_info\" } }, { $match: { \"characteristic_info.1\": { $exists: true } } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $project: { product_id: 1, color_description: { $arrayElemAt: [\"$color_info.color_description\", 0] } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"characteristic_info\" } }, { $match: { \"characteristic_info.1\": { $exists: true } } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $project: { product_id: 1, color_description: { $arrayElemAt: [\"$color_info.color_description\", 0] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3192,
        "spider_question_id": 5551,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'white'",
        "question": "List all the product names with the color description 'white'.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"white\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"white\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"white\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3193,
        "spider_question_id": 5552,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'white'",
        "question": "What are the names of products with 'white' as their color description?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"white\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"white\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"white\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3194,
        "spider_question_id": 5553,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'yellow'",
        "question": "What are the name and typical buying and selling prices of the products that have color described as 'yellow'?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1, typical_buying_price: 1, typical_selling_price: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color\" } }, { $match: { \"color.color_description\": \"yellow\" } }, { $project: { product_name: 1, typical_buying_price: 1, typical_selling_price: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1, typical_buying_price: 1, typical_selling_price: 1 } } ])"
    },
    {
        "question_id": 3195,
        "spider_question_id": 5554,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.product_name , t1.typical_buying_price , t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'yellow'",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1, typical_buying_price: 1, typical_selling_price: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color\" } }, { $unwind: \"$color\" }, { $match: { \"color.color_description\": \"yellow\" } }, { $project: { product_name: 1, typical_buying_price: 1, typical_selling_price: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $match: { \"color_info.color_description\": \"yellow\" } }, { $project: { product_name: 1, typical_buying_price: 1, typical_selling_price: 1 } } ])"
    },
    {
        "question_id": 3196,
        "spider_question_id": 5555,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = 'sesame'",
        "question": "How many characteristics does the product named 'sesame' have?",
        "query": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $project: { count: { $size: \"$product_characteristics\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'sesame' } }, { $lookup: { from: 'Product_Characteristics', localField: 'product_id', foreignField: 'product_id', as: 'characteristics' } }, { $unwind: '$characteristics' }, { $count: 'num_characteristics' } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $project: { count: { $size: \"$product_characteristics\" } } } ])"
    },
    {
        "question_id": 3197,
        "spider_question_id": 5556,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = 'sesame'",
        "question": "Count the number of characteristics the product 'sesame' has.",
        "query": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $project: { count: { $size: \"$product_characteristics\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'sesame' } }, { $lookup: { from: 'Product_Characteristics', localField: 'product_id', foreignField: 'product_id', as: 'characteristics' } }, { $project: { numberOfCharacteristics: { $size: \"$characteristics\" } } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $project: { count: { $size: \"$product_characteristics\" } } } ])"
    },
    {
        "question_id": 3198,
        "spider_question_id": 5559,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame'",
        "question": "What are all the characteristic names of product 'sesame'?",
        "query": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'sesame' } }, { $lookup: { from: 'Product_Characteristics', localField: 'product_id', foreignField: 'product_id', as: 'product_characteristics' } }, { $unwind: '$product_characteristics' }, { $lookup: { from: 'Characteristics', localField: 'product_characteristics.characteristic_id', foreignField: 'characteristic_id', as: 'characteristic_details' } }, { $unwind: '$characteristic_details' }, { $project: { characteristic_name: '$characteristic_details.characteristic_name' } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])"
    },
    {
        "question_id": 3199,
        "spider_question_id": 5560,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame'",
        "question": "Return the characteristic names of the 'sesame' product.",
        "query": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])"
    },
    {
        "question_id": 3200,
        "spider_question_id": 5561,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'cumin'",
        "question": "List all the characteristic names and data types of product 'cumin'.",
        "query": "db.Products.aggregate([ { $match: { product_name: \"cumin\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\", characteristic_data_type: \"$characteristics.characteristic_data_type\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"cumin\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\", characteristic_data_type: \"$characteristics.characteristic_data_type\" } } ])"
    },
    {
        "question_id": 3201,
        "spider_question_id": 5562,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name , t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'cumin'",
        "question": "What are the names and data types of the characteristics of the 'cumin' product?",
        "query": "db.Products.aggregate([ { $match: { product_name: \"cumin\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\", characteristic_data_type: \"$characteristics.characteristic_data_type\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: \"cumin\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\", characteristic_data_type: \"$characteristics.characteristic_data_type\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"cumin\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $project: { characteristic_name: \"$characteristics.characteristic_name\", characteristic_data_type: \"$characteristics.characteristic_data_type\" } } ])"
    },
    {
        "question_id": 3202,
        "spider_question_id": 5563,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame' AND t3.characteristic_type_code = 'Grade'",
        "question": "List all characteristics of product named 'sesame' with type code 'Grade'.",
        "query": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_type_code\": \"Grade\" } }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_type_code\": \"Grade\" } }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])"
    },
    {
        "question_id": 3203,
        "spider_question_id": 5564,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame' AND t3.characteristic_type_code = 'Grade'",
        "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
        "query": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_type_code\": \"Grade\" } }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"sesame\" } }, { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_type_code\": \"Grade\" } }, { $project: { characteristic_name: \"$characteristics.characteristic_name\" } } ])"
    },
    {
        "question_id": 3204,
        "spider_question_id": 5565,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'laurel'",
        "question": "How many characteristics does the product named 'laurel' have?",
        "query": "db.Products.aggregate([ { $match: { product_name: 'laurel' } }, { $lookup: { from: 'Product_Characteristics', localField: 'product_id', foreignField: 'product_id', as: 'characteristics' }}, { $project: { numberOfCharacteristics: { $size: \"$characteristics\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'laurel' } }, { $lookup: { from: 'Product_Characteristics', localField: 'product_id', foreignField: 'product_id', as: 'characteristics' }}, { $project: { numberOfCharacteristics: { $size: \"$characteristics\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3205,
        "spider_question_id": 5569,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'red' AND t3.characteristic_name = 'fast'",
        "question": "Find the name of the products that have the color description 'red' and have the characteristic name 'fast'.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"ref_colors\" } }, { $match: { \"ref_colors.color_description\": \"red\", \"characteristics.characteristic_name\": \"fast\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"colors\" } }, { $unwind: \"$colors\" }, { $match: { \"colors.color_description\": \"red\", \"characteristics.characteristic_name\": \"fast\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"ref_colors\" } }, { $match: { \"ref_colors.color_description\": \"red\", \"characteristics.characteristic_name\": \"fast\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3206,
        "spider_question_id": 5570,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'red' AND t3.characteristic_name = 'fast'",
        "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"ref_colors\" } }, { $match: { \"ref_colors.color_description\": \"red\", \"characteristics.characteristic_name\": \"fast\" } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"ref_colors\" } }, { $unwind: \"$ref_colors\" }, { $match: { \"ref_colors.color_description\": \"red\", \"characteristics.characteristic_name\": \"fast\" } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"ref_colors\" } }, { $match: { \"ref_colors.color_description\": \"red\", \"characteristics.characteristic_name\": \"fast\" } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3207,
        "spider_question_id": 5571,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'hot'",
        "question": "How many products have the characteristic named 'hot'?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"hot\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"hot\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3208,
        "spider_question_id": 5572,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'hot'",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"hot\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1} }])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"hot\" } }, { $count: \"numberOfHotProducts\" } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"hot\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1} }])"
    },
    {
        "question_id": 3209,
        "spider_question_id": 5573,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'warm'",
        "question": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"warm\" } }, { $group: { _id: \"$product_name\" } }, { $project: { product_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"pc\" } }, { $unwind: \"$pc\" }, { $lookup: { from: \"Characteristics\", localField: \"pc.characteristic_id\", foreignField: \"characteristic_id\", as: \"c\" } }, { $unwind: \"$c\" }, { $match: { \"c.characteristic_name\": \"warm\" } }, { $group: { _id: \"$product_name\" } }, { $project: { product_name: \"$_id\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $match: { \"characteristics.characteristic_name\": \"warm\" } }, { $group: { _id: \"$product_name\" } }, { $project: { product_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3210,
        "spider_question_id": 5574,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'warm'",
        "question": "What are the different product names for products that have the 'warm' characteristic:?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"product_characteristics_details\" } }, { $unwind: \"$product_characteristics_details\" }, { $match: { \"product_characteristics_details.characteristic_name\": \"warm\" } }, { $group: { _id: \"$product_name\" } }, { $project: { product_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"product_characteristics_details\" } }, { $unwind: \"$product_characteristics_details\" }, { $match: { \"product_characteristics_details.characteristic_name\": \"warm\" } }, { $group: { _id: \"$product_name\" } }, { $project: { product_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3211,
        "spider_question_id": 5579,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'",
        "question": "What is the unit of measuerment of the product category code 'Herbs'?",
        "query": "db.Ref_Product_Categories.findOne({product_category_code: 'Herbs'}, {unit_of_measure: 1})",
        "gpt4 answer": "db.Ref_Product_Categories.findOne({ product_category_code: 'Herbs' }, { unit_of_measure: 1 })",
        "deepseek answer": "db.Ref_Product_Categories.findOne({product_category_code: 'Herbs'}, {unit_of_measure: 1})"
    },
    {
        "question_id": 3212,
        "spider_question_id": 5580,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'",
        "question": "Return the unit of measure for 'Herb' products.",
        "query": "db.Ref_Product_Categories.findOne({product_category_code: 'Herbs'}, {unit_of_measure: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Ref_Product_Categories.findOne({product_category_code: 'Herbs'}, {unit_of_measure: 1})"
    },
    {
        "question_id": 3213,
        "spider_question_id": 5581,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = 'Spices'",
        "question": "Find the product category description of the product category with code 'Spices'.",
        "query": "db.Ref_Product_Categories.find({ product_category_code: 'Spices' }, { product_category_description: 1 })",
        "gpt4 answer": "db.Ref_Product_Categories.find({ product_category_code: 'Spices' }, { product_category_description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3214,
        "spider_question_id": 5582,
        "db_id": "products_gen_characteristics",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = 'Spices'",
        "question": "What is the description of the product category with the code 'Spices'?",
        "query": "db.Ref_Product_Categories.findOne({ product_category_code: 'Spices' }, { product_category_description: 1 })",
        "gpt4 answer": "db.Ref_Product_Categories.findOne({ product_category_code: 'Spices' }, { product_category_description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3215,
        "spider_question_id": 5583,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'",
        "question": "What is the product category description and unit of measurement of category 'Herbs'?",
        "query": "db.Ref_Product_Categories.find( { product_category_code: 'Herbs' }, { product_category_description: 1, unit_of_measure: 1 } )",
        "gpt4 answer": "db.Ref_Product_Categories.findOne( { product_category_code: 'Herbs' }, { product_category_description: 1, unit_of_measure: 1 } )",
        "deepseek answer": "db.Ref_Product_Categories.find( { product_category_code: 'Herbs' }, { product_category_description: 1, unit_of_measure: 1 } )"
    },
    {
        "question_id": 3216,
        "spider_question_id": 5584,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'",
        "question": "Return the description and unit of measurement for products in the 'Herbs' category.",
        "query": "db.Ref_Product_Categories.find( { product_category_code: 'Herbs' }, { product_category_description: 1, unit_of_measure: 1 } )",
        "gpt4 answer": "db.Ref_Product_Categories.find({ product_category_code: 'Herbs' }, { product_category_description: 1, unit_of_measure: 1 })",
        "deepseek answer": "db.Ref_Product_Categories.find( { product_category_code: 'Herbs' }, { product_category_description: 1, unit_of_measure: 1 } )"
    },
    {
        "question_id": 3217,
        "spider_question_id": 5585,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'cumin'",
        "question": "What is the unit of measurement of product named 'cumin'?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { product_name: \"cumin\" } }, { $unwind: \"$category\" }, { $project: { unit_of_measure: \"$category.unit_of_measure\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category\" } }, { $match: { product_name: \"cumin\" } }, { $unwind: \"$category\" }, { $project: { unit_of_measure: \"$category.unit_of_measure\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3218,
        "spider_question_id": 5586,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'cumin'",
        "question": "Give the unit of measure for the product with the name 'cumin'.",
        "query": "db.Products.aggregate([ { $match: { product_name: 'cumin' } }, { $lookup: { from: 'Ref_Product_Categories', localField: 'product_category_code', foreignField: 'product_category_code', as: 'category' } }, { $unwind: '$category' }, { $project: { unit_of_measure: '$category.unit_of_measure' } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'cumin' } }, { $lookup: { from: 'Ref_Product_Categories', localField: 'product_category_code', foreignField: 'product_category_code', as: 'category' } }, { $unwind: '$category' }, { $project: { unit_of_measure: '$category.unit_of_measure' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3219,
        "spider_question_id": 5587,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'chervil'",
        "question": "Find the unit of measurement and product category code of product named 'chervil'.",
        "query": "db.Products.aggregate([ { $match: { product_name: \"chervil\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"product_category\" } }, { $unwind: \"$product_category\" }, { $project: { unit_of_measure: \"$product_category.unit_of_measure\", product_category_code: \"$product_category.product_category_code\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'chervil' } }, { $lookup: { from: 'Ref_Product_Categories', localField: 'product_category_code', foreignField: 'product_category_code', as: 'category' } }, { $unwind: '$category' }, { $project: { unit_of_measure: '$category.unit_of_measure', product_category_code: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"chervil\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"product_category\" } }, { $unwind: \"$product_category\" }, { $project: { unit_of_measure: \"$product_category.unit_of_measure\", product_category_code: \"$product_category.product_category_code\" } } ])"
    },
    {
        "question_id": 3220,
        "spider_question_id": 5588,
        "db_id": "products_gen_characteristics",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t2.unit_of_measure , t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'chervil'",
        "question": "What are the unit of measure and category code for the 'chervil' product?",
        "query": "db.Products.aggregate([ { $match: { product_name: \"chervil\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"product_category\" } }, { $unwind: \"$product_category\" }, { $project: { unit_of_measure: \"$product_category.unit_of_measure\", product_category_code: \"$product_category.product_category_code\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $match: { product_name: 'chervil' } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category_info\" } }, { $unwind: \"$category_info\" }, { $project: { unit_of_measure: \"$category_info.unit_of_measure\", product_category_code: \"$category_info.product_category_code\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $match: { product_name: \"chervil\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"product_category\" } }, { $unwind: \"$product_category\" }, { $project: { unit_of_measure: \"$product_category.unit_of_measure\", product_category_code: \"$product_category.product_category_code\" } } ])"
    },
    {
        "question_id": 3221,
        "spider_question_id": 5589,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = 'white' AND t2.unit_of_measure != 'Handful'",
        "question": "Find the product names that are colored 'white' but do not have unit of measurement 'Handful'.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category_info\" } }, { $match: { \"color_info.color_description\": \"white\", \"category_info.unit_of_measure\": { $ne: \"Handful\" } } }, { $project: { product_name: 1 } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category_info\" } }, { $match: { \"color_info.color_description\": \"white\", \"category_info.unit_of_measure\": { $ne: \"Handful\" } } }, { $project: { product_name: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $lookup: { from: \"Ref_Product_Categories\", localField: \"product_category_code\", foreignField: \"product_category_code\", as: \"category_info\" } }, { $match: { \"color_info.color_description\": \"white\", \"category_info.unit_of_measure\": { $ne: \"Handful\" } } }, { $project: { product_name: 1 } } ])"
    },
    {
        "question_id": 3222,
        "spider_question_id": 5591,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the description of the color for most products?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $group: { _id: \"$color_info.color_description\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { color_description: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$color_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Colors\", localField: \"_id\", foreignField: \"color_code\", as: \"color_info\" }}, { $unwind: \"$color_info\" }, { $project: { color_description: \"$color_info.color_description\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $group: { _id: \"$color_info.color_description\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { color_description: \"$_id\" } } ])"
    },
    {
        "question_id": 3223,
        "spider_question_id": 5592,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the color description that is most common across all products.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $group: { _id: \"$color_info.color_description\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { color_description: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$color_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Colors\", localField: \"_id\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $project: { color_description: \"$color_info.color_description\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $group: { _id: \"$color_info.color_description\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { color_description: \"$_id\" } } ])"
    },
    {
        "question_id": 3224,
        "spider_question_id": 5593,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the description of the color used by least products?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $group: { _id: \"$color_info.color_description\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { color_description: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Ref_Colors\", localField: \"color_code\", foreignField: \"color_code\", as: \"color_info\" } }, { $unwind: \"$color_info\" }, { $group: { _id: \"$color_info.color_description\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { color_description: \"$_id\" } } ])"
    },
    {
        "question_id": 3225,
        "spider_question_id": 5595,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the characteristic name used by most number of the products?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { characteristic_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Product_Characteristics.aggregate([ { $group: { _id: \"$characteristic_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Characteristics\", localField: \"_id\", foreignField: \"characteristic_id\", as: \"characteristic_info\" } }, { $unwind: \"$characteristic_info\" }, { $project: { characteristic_name: \"$characteristic_info.characteristic_name\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { characteristic_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3226,
        "spider_question_id": 5596,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the characteristic that is most common across all products.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { characteristic_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { characteristic_name: \"$_id\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { characteristic_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3227,
        "spider_question_id": 5599,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
        "question": "What are characteristic names used at least twice across all products?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { characteristic_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Product_Characteristics.aggregate([ { $lookup: { from: \"Characteristics\", localField: \"characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristic_info\" } }, { $unwind: \"$characteristic_info\" }, { $group: { _id: \"$characteristic_info.characteristic_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { characteristic_name: \"$_id\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { characteristic_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3228,
        "spider_question_id": 5600,
        "db_id": "products_gen_characteristics",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*) >= 2",
        "question": "Give the names of characteristics that are in two or more products?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { characteristic_name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Product_Characteristics\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_characteristics\" } }, { $unwind: \"$product_characteristics\" }, { $lookup: { from: \"Characteristics\", localField: \"product_characteristics.characteristic_id\", foreignField: \"characteristic_id\", as: \"characteristics\" } }, { $unwind: \"$characteristics\" }, { $group: { _id: \"$characteristics.characteristic_name\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { characteristic_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3229,
        "spider_question_id": 5601,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "question": "How many colors are never used by any product?",
        "query": "db.Ref_Colors.aggregate([ { $lookup: { from: \"Products\", localField: \"color_code\", foreignField: \"color_code\", as: \"product_info\" }}, { $match: { \"product_info\": { $size: 0 } } }, { $count: \"unused_colors_count\" } ])",
        "gpt4 answer": "db.Ref_Colors.aggregate([ { $lookup: { from: \"Products\", localField: \"color_code\", foreignField: \"color_code\", as: \"product_info\" }}, { $match: { \"product_info\": { $size: 0 } } }, { $count: \"unused_colors_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3230,
        "spider_question_id": 5602,
        "db_id": "products_gen_characteristics",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "question": "Count the number of colors that are not used in any products.",
        "query": "db.Ref_Colors.aggregate([ { $lookup: { from: \"Products\", localField: \"color_code\", foreignField: \"color_code\", as: \"Products\" } }, { $match: { \"Products\": { $size: 0 } } }, { $count: \"colors_not_used\" } ])",
        "gpt4 answer": "db.Ref_Colors.aggregate([ { $lookup: { from: \"Products\", localField: \"color_code\", foreignField: \"color_code\", as: \"Products\" } }, { $match: { \"Products\": { $size: 0 } } }, { $count: \"colors_not_used\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3231,
        "spider_question_id": 5604,
        "db_id": "swimming",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM event ORDER BY YEAR DESC",
        "question": "List all the event names by year from the most recent to the oldest.",
        "query": "db.event.find({}, { Name: 1 }).sort({ Year: -1 })",
        "gpt4 answer": "db.event.find({}, { Name: 1 }).sort({ Year: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3232,
        "spider_question_id": 5605,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "question": "What is the name of the event that happened in the most recent year?",
        "query": "db.event.find({}, { Name: 1 }).sort({ Year: -1 }).limit(1)",
        "gpt4 answer": "db.event.find({}, { Name: 1 }).sort({ Year: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3233,
        "spider_question_id": 5607,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "question": "Find the name of the stadium that has the maximum capacity.",
        "query": "db.stadium.find({}, {name: 1}).sort({capacity: -1}).limit(1)",
        "gpt4 answer": "db.stadium.find({}, { name: 1 }).sort({ Capacity: -1 }).limit(1)",
        "deepseek answer": "db.stadium.find({}, {name: 1}).sort({capacity: -1}).limit(1)"
    },
    {
        "question_id": 3234,
        "spider_question_id": 5608,
        "db_id": "swimming",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM stadium WHERE capacity < (SELECT avg(capacity) FROM stadium)",
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "query": "db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" } } }, { $lookup: { from: \"stadium\", let: { averageCapacity: \"$averageCapacity\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Capacity\", \"$$averageCapacity\"] } } }, { $project: { name: 1 } } ], as: \"stadiumsBelowAverage\" } }, { $unwind: \"$stadiumsBelowAverage\" }, { $replaceRoot: { newRoot: \"$stadiumsBelowAverage\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" } } }, { $lookup: { from: \"stadium\", let: { averageCapacity: \"$averageCapacity\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Capacity\", \"$$averageCapacity\"] } } }, { $project: { name: 1 } } ], as: \"stadiumsBelowAverage\" } }, { $unwind: \"$stadiumsBelowAverage\" }, { $replaceRoot: { newRoot: \"$stadiumsBelowAverage\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3235,
        "spider_question_id": 5609,
        "db_id": "swimming",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the country that has the most stadiums.",
        "query": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3236,
        "spider_question_id": 5610,
        "db_id": "swimming",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT country FROM stadium GROUP BY country HAVING count(*) <= 3",
        "question": "Which country has at most 3 stadiums listed?",
        "query": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $lte: 3 } } }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $lte: 3 } } }, { $project: { country: \"$_id\" } } ])",
        "deepseek answer": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $lte: 3 } } }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3237,
        "spider_question_id": 5611,
        "db_id": "swimming",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
        "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "query": "db.stadium.aggregate([ { $match: { $or: [ { Capacity: { $gt: 60000 } }, { Capacity: { $lt: 50000 } } ] } }, { $group: { _id: \"$Country\", maxCapacity: { $max: \"$Capacity\" }, minCapacity: { $min: \"$Capacity\" } } }, { $match: { maxCapacity: { $gt: 60000 }, minCapacity: { $lt: 50000 } } }, { $project: { Country: \"$_id\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $match: { $or: [ { Capacity: { $gt: 60000 } }, { Capacity: { $lt: 50000 } } ] } }, { $group: { _id: \"$Country\", maxCapacity: { $max: \"$Capacity\" }, minCapacity: { $min: \"$Capacity\" } } }, { $match: { maxCapacity: { $gt: 60000 }, minCapacity: { $lt: 50000 } } }, { $project: { Country: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3238,
        "spider_question_id": 5612,
        "db_id": "swimming",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year < 2006",
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "query": "db.stadium.aggregate([ { $match: { Opening_year: { $lt: 2006 } } }, { $group: { _id: \"$City\" } }, { $count: \"unique_cities\" } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $match: { Opening_year: { $lt: 2006 } } }, { $group: { _id: \"$City\" } }, { $count: \"unique_cities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3239,
        "spider_question_id": 5613,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country , count(*) FROM stadium GROUP BY country",
        "question": "How many stadiums does each country have?",
        "query": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.stadium.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3240,
        "spider_question_id": 5614,
        "db_id": "swimming",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "query": "db.stadium.aggregate([ { $group: { _id: null, allCountries: { $addToSet: \"$Country\" }, after2006Countries: { $addToSet: { $cond: [{ $gt: [\"$Opening_year\", 2006] }, \"$Country\", null] } } } }, { $project: { countries: { $setDifference: [\"$allCountries\", \"$after2006Countries\"] } } }, { $unwind: \"$countries\" }, { $project: { country: \"$countries\" } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $group: { _id: null, allCountries: { $addToSet: \"$Country\" }, after2006Countries: { $addToSet: { $cond: [{ $gt: [\"$Opening_year\", 2006] }, \"$Country\", null] } } } }, { $project: { countries: { $setDifference: [\"$allCountries\", \"$after2006Countries\"] } } }, { $unwind: \"$countries\" }, { $project: { country: \"$countries\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3241,
        "spider_question_id": 5616,
        "db_id": "swimming",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM swimmer ORDER BY meter_100",
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "query": "db.swimmer.find({}, {name: 1}).sort({meter_100: 1})",
        "gpt4 answer": "db.swimmer.find({}, { name: 1 }).sort({ meter_100: 1 })",
        "deepseek answer": "db.swimmer.find({}, {name: 1}).sort({meter_100: 1})"
    },
    {
        "question_id": 3242,
        "spider_question_id": 5618,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT nationality , count(*) FROM swimmer GROUP BY nationality HAVING count(*) > 1",
        "question": "List countries that have more than one swimmer.",
        "query": "db.swimmer.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.swimmer.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } } ])",
        "deepseek answer": "db.swimmer.aggregate([ { $group: { _id: \"$Nationality\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Nationality: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3243,
        "spider_question_id": 5619,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT meter_200 , meter_300 FROM swimmer WHERE nationality = 'Australia'",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality 'Australia'.",
        "query": "db.swimmer.find({ Nationality: 'Australia' }, { meter_200: 1, meter_300: 1 })",
        "gpt4 answer": "db.swimmer.find({ Nationality: 'Australia' }, { meter_200: 1, meter_300: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3244,
        "spider_question_id": 5620,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'",
        "question": "Find the names of swimmers who has a result of 'win'.",
        "query": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"record_info\" } }, { $unwind: \"$record_info\" }, { $match: { \"record_info.Result\": \"Win\" } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"record_info\" } }, { $unwind: \"$record_info\" }, { $match: { \"record_info.Result\": \"Win\" } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3245,
        "spider_question_id": 5622,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name , t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'",
        "question": "Find the name and capacity of the stadium where the event named 'World Junior' happened.",
        "query": "db.stadium.aggregate([ { $lookup: { from: \"event\", localField: \"ID\", foreignField: \"Stadium_ID\", as: \"eventDetails\" } }, { $unwind: \"$eventDetails\" }, { $match: { \"eventDetails.Name\": \"World Junior\" } }, { $project: { name: 1, Capacity: 1 } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $lookup: { from: \"event\", localField: \"ID\", foreignField: \"Stadium_ID\", as: \"eventDetails\" } }, { $unwind: \"$eventDetails\" }, { $match: { \"eventDetails.Name\": \"World Junior\" } }, { $project: { name: 1, Capacity: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3246,
        "spider_question_id": 5623,
        "db_id": "swimming",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "question": "Find the names of stadiums which have never had any event.",
        "query": "db.stadium.aggregate([ { $lookup: { from: \"event\", localField: \"ID\", foreignField: \"Stadium_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $lookup: { from: \"event\", localField: \"ID\", foreignField: \"Stadium_ID\", as: \"events\" } }, { $match: { \"events\": { $size: 0 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3247,
        "spider_question_id": 5624,
        "db_id": "swimming",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the swimmer who has the most records.",
        "query": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"records\" } }, { $project: { name: 1 } }, { $sort: { recordCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"records\" } }, { $project: { name: 1, recordsCount: { $size: \"$records\" } } }, { $sort: { recordsCount: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"records\" } }, { $project: { name: 1 } }, { $sort: { recordCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3248,
        "spider_question_id": 5625,
        "db_id": "swimming",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*) >= 2",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "query": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"record\" } }, { $project: { \"name\": 1, \"recordCount\": { $size: \"$record\" } } }, { $match: { \"recordCount\": { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"record\" } }, { $project: { \"name\": 1, \"recordCount\": { $size: \"$record\" } } }, { $match: { \"recordCount\": { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3249,
        "spider_question_id": 5627,
        "db_id": "swimming",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "question": "Find the names of the swimmers who have no record.",
        "query": "db.swimmer.find({\"ID\": {\"$nin\": db.record.distinct(\"Swimmer_ID\")}}, {\"name\": 1, \"_id\": 0})",
        "gpt4 answer": "db.swimmer.find({\"ID\": {\"$nin\": db.record.distinct(\"Swimmer_ID\")}}, {\"name\": 1, \"_id\": 0})",
        "deepseek answer": "."
    },
    {
        "question_id": 3250,
        "spider_question_id": 5628,
        "db_id": "swimming",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
        "question": "Find the names of the swimmers who have both 'win' and 'loss' results in the record.",
        "query": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"records\" } }, { $unwind: \"$records\" }, { $group: { _id: \"$name\", results: { $addToSet: \"$records.Result\" } } }, { $match: { results: { $all: [\"Win\", \"Loss\"] } } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.swimmer.aggregate([ { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"records\" } }, { $unwind: \"$records\" }, { $group: { _id: \"$name\", results: { $addToSet: \"$records.Result\" } } }, { $match: { results: { $all: [\"Win\", \"Loss\"] } } }, { $project: { name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3251,
        "spider_question_id": 5629,
        "db_id": "swimming",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "query": "db.swimmer.aggregate([ { $match: { Nationality: \"Australia\" } }, { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"swimmer_records\" } }, { $unwind: \"$swimmer_records\" }, { $lookup: { from: \"event\", localField: \"swimmer_records.Event_ID\", foreignField: \"ID\", as: \"event_info\" } }, { $unwind: \"$event_info\" }, { $lookup: { from: \"stadium\", localField: \"event_info.Stadium_ID\", foreignField: \"ID\", as: \"stadium_info\" } }, { $unwind: \"$stadium_info\" }, { $project: { name: \"$stadium_info.name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.swimmer.aggregate([ { $match: { Nationality: \"Australia\" } }, { $lookup: { from: \"record\", localField: \"ID\", foreignField: \"Swimmer_ID\", as: \"swimmer_records\" } }, { $unwind: \"$swimmer_records\" }, { $lookup: { from: \"event\", localField: \"swimmer_records.Event_ID\", foreignField: \"ID\", as: \"event_info\" } }, { $unwind: \"$event_info\" }, { $lookup: { from: \"stadium\", localField: \"event_info.Stadium_ID\", foreignField: \"ID\", as: \"stadium_info\" } }, { $unwind: \"$stadium_info\" }, { $project: { name: \"$stadium_info.name\" } } ])"
    },
    {
        "question_id": 3252,
        "spider_question_id": 5630,
        "db_id": "swimming",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "query": "db.record.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"ID\", as: \"event_info\" } }, { $unwind: \"$event_info\" }, { $lookup: { from: \"stadium\", localField: \"event_info.Stadium_ID\", foreignField: \"ID\", as: \"stadium_info\" } }, { $unwind: \"$stadium_info\" }, { $group: { _id: \"$stadium_info.ID\", name: { $first: \"$stadium_info.name\" }, swimmerCount: { $sum: 1 } } }, { $sort: { swimmerCount: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.record.aggregate([ { $lookup: { from: \"event\", localField: \"Event_ID\", foreignField: \"ID\", as: \"event_info\" } }, { $unwind: \"$event_info\" }, { $lookup: { from: \"stadium\", localField: \"event_info.Stadium_ID\", foreignField: \"ID\", as: \"stadium_info\" } }, { $unwind: \"$stadium_info\" }, { $group: { _id: \"$stadium_info.ID\", name: { $first: \"$stadium_info.name\" }, swimmerCount: { $sum: 1 } } }, { $sort: { swimmerCount: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3253,
        "spider_question_id": 5631,
        "db_id": "swimming",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT * FROM swimmer",
        "question": "Find all details for each swimmer.",
        "query": "db.swimmer.find({})",
        "gpt4 answer": "db.swimmer.find({})",
        "deepseek answer": "db.swimmer.find({})"
    },
    {
        "question_id": 3254,
        "spider_question_id": 5632,
        "db_id": "swimming",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(capacity) FROM stadium WHERE opening_year = 2005",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "query": "db.stadium.aggregate([ { $match: { Opening_year: 2005 } }, { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" } } }, { $project: { averageCapacity: 1 } } ])",
        "gpt4 answer": "db.stadium.aggregate([ { $match: { Opening_year: 2005 } }, { $group: { _id: null, averageCapacity: { $avg: \"$Capacity\" } } }, { $project: { averageCapacity: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3255,
        "spider_question_id": 5634,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Builder FROM railway ORDER BY Builder ASC",
        "question": "List the builders of railways in ascending alphabetical order.",
        "query": "db.railway.find({}, {Builder: 1}).sort({Builder: 1})",
        "gpt4 answer": "db.railway.find({}, {Builder: 1}).sort({Builder: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3256,
        "spider_question_id": 5635,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Wheels , LOCATION FROM railway",
        "question": "List the wheels and locations of the railways.",
        "query": "db.railway.find({}, {Wheels: 1, Location: 1})",
        "gpt4 answer": "db.railway.find({}, {Wheels: 1, Location: 1})",
        "deepseek answer": "db.railway.find({}, {Wheels: 1, Location: 1})"
    },
    {
        "question_id": 3257,
        "spider_question_id": 5636,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(LEVEL) FROM manager WHERE Country != 'Australia'",
        "question": "What is the maximum level of managers in countries that are not 'Australia'?",
        "query": "db.manager.aggregate([ { $match: { Country: { $ne: 'Australia' } } }, { $group: { _id: null, maxLevel: { $max: \"$Level\" } } } , { $project: { maxLevel: 1 } }])",
        "gpt4 answer": "db.manager.aggregate([ { $match: { Country: { $ne: 'Australia' } } }, { $group: { _id: null, maxLevel: { $max: \"$Level\" } } }, { $project: { maxLevel: 1 } } ])",
        "deepseek answer": "db.manager.aggregate([ { $match: { Country: { $ne: 'Australia' } } }, { $group: { _id: null, maxLevel: { $max: \"$Level\" } } } , { $project: { maxLevel: 1 } }])"
    },
    {
        "question_id": 3258,
        "spider_question_id": 5637,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Age) FROM manager",
        "question": "What is the average age for all managers?",
        "query": "db.manager.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1} } ])",
        "gpt4 answer": "db.manager.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.manager.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1} } ])"
    },
    {
        "question_id": 3259,
        "spider_question_id": 5638,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM manager ORDER BY LEVEL ASC",
        "question": "What are the names of managers in ascending order of level?",
        "query": "db.manager.find({}, {Name: 1}).sort({Level: 1})",
        "gpt4 answer": "db.manager.find({}, { Name: 1 }).sort({ Level: 1 })",
        "deepseek answer": "db.manager.find({}, {Name: 1}).sort({Level: 1})"
    },
    {
        "question_id": 3260,
        "spider_question_id": 5639,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name , Arrival FROM train",
        "question": "What are the names and arrival times of trains?",
        "query": "db.train.find({}, {Name: 1, Arrival: 1})",
        "gpt4 answer": "db.train.find({}, { Name: 1, Arrival: 1 })",
        "deepseek answer": "db.train.find({}, {Name: 1, Arrival: 1})"
    },
    {
        "question_id": 3261,
        "spider_question_id": 5640,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1",
        "question": "What is the name of the oldest manager?",
        "query": "db.manager.find({}, {Name: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.manager.find({}, { Name: 1 }).sort({ Age: -1 }).limit(1)",
        "deepseek answer": "db.manager.find({}, {Name: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 3262,
        "spider_question_id": 5641,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID",
        "question": "Show the names of trains and locations of railways they are in.",
        "query": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $project: { Name: \"$train_info.Name\", Location: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $project: { Name: \"$train_info.Name\", Location: 1 } } ])"
    },
    {
        "question_id": 3263,
        "spider_question_id": 5642,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = 'Andaman Exp'",
        "question": "Show the builder of railways associated with the trains named 'Andaman Exp'.",
        "query": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"train_data\" } }, { $unwind: \"$train_data\" }, { $match: { \"train_data.Name\": \"Andaman Exp\" } }, { $project: { Builder: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"train_data\" } }, { $unwind: \"$train_data\" }, { $match: { \"train_data.Name\": \"Andaman Exp\" } }, { $project: { Builder: 1 } } ])"
    },
    {
        "question_id": 3264,
        "spider_question_id": 5643,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1",
        "question": "Show id and location of railways that are associated with more than one train.",
        "query": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"trains\" } }, { $match: { \"trains.1\": { $exists: true } } }, { $project: { Railway_ID: 1, Location: 1 } } ])",
        "gpt4 answer": "db.train.aggregate([ { $group: { _id: \"$Railway_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"railway\", localField: \"_id\", foreignField: \"Railway_ID\", as: \"railway_info\" } }, { $unwind: \"$railway_info\" }, { $project: { _id: \"$_id\", Location: \"$railway_info.Location\" } } ])",
        "deepseek answer": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"trains\" } }, { $match: { \"trains.1\": { $exists: true } } }, { $project: { Railway_ID: 1, Location: 1 } } ])"
    },
    {
        "question_id": 3265,
        "spider_question_id": 5645,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Builder , COUNT(*) FROM railway GROUP BY Builder",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "query": "db.railway.aggregate([ { $group: { _id: \"$Builder\", count: { $sum: 1 } } }, { $project: { Builder: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.railway.aggregate([ { $group: {_id: \"$Builder\", NumberOfRailways: {$sum: 1}} } ])",
        "deepseek answer": "db.railway.aggregate([ { $group: { _id: \"$Builder\", count: { $sum: 1 } } }, { $project: { Builder: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3266,
        "spider_question_id": 5646,
        "db_id": "railway",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common builder of railways.",
        "query": "db.railway.aggregate([ { $group: { _id: \"$Builder\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Builder: \"$_id\" } } ])",
        "gpt4 answer": "db.railway.aggregate([ { $group: { _id: \"$Builder\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.railway.aggregate([ { $group: { _id: \"$Builder\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Builder: \"$_id\" } } ])"
    },
    {
        "question_id": 3267,
        "spider_question_id": 5647,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION , COUNT(*) FROM railway GROUP BY LOCATION",
        "question": "Show different locations of railways along with the corresponding number of railways at each location.",
        "query": "db.railway.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $project: { Location: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.railway.aggregate([ { $group: { _id: \"$Location\", NumberOfRailways: { $sum: 1 } } }, { $project: { Location: \"$_id\", NumberOfRailways: 1 } } ])",
        "deepseek answer": "db.railway.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $project: { Location: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3268,
        "spider_question_id": 5648,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1",
        "question": "Show the locations that have more than one railways.",
        "query": "db.railway.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.railway.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } }}, { $match: { count: { $gt: 1 } }}, { $project: { Location: \"$_id\" }} ])",
        "deepseek answer": "db.railway.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 3269,
        "spider_question_id": 5649,
        "db_id": "railway",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "question": "List the object number of railways that do not have any trains.",
        "query": "db.railway.find( { Railway_ID: { $nin: db.train.distinct(\"Railway_ID\") } }, { ObjectNumber: 1 } )",
        "gpt4 answer": "db.railway.aggregate([ { $lookup: { from: \"train\", localField: \"Railway_ID\", foreignField: \"Railway_ID\", as: \"train_info\" } }, { $match: { train_info: { $size: 0 } } }, { $project: { ObjectNumber: 1 } } ])",
        "deepseek answer": "db.railway.find( { Railway_ID: { $nin: db.train.distinct(\"Railway_ID\") } }, { ObjectNumber: 1 } )"
    },
    {
        "question_id": 3270,
        "spider_question_id": 5650,
        "db_id": "railway",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
        "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "query": "db.manager.aggregate([ { $match: { $or: [ { Age: { $gt: 50 } }, { Age: { $lt: 46 } } ] } }, { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])",
        "gpt4 answer": "db.manager.aggregate([ { $facet: { \"Above50\": [ { $match: { Age: { $gt: 50 } } }, { $group: { _id: \"$Country\" } } ], \"Below46\": [ { $match: { Age: { $lt: 46 } } }, { $group: { _id: \"$Country\" } } ] } }, { $project: { commonCountries: { $setIntersection: [\"$Above50._id\", \"$Below46._id\"] } } }, { $unwind: \"$commonCountries\" }, { $replaceRoot: { newRoot: { Country: \"$commonCountries\" } } } ])",
        "deepseek answer": "db.manager.aggregate([ { $match: { $or: [ { Age: { $gt: 50 } }, { Age: { $lt: 46 } } ] } }, { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Country: \"$_id\" } } ])"
    },
    {
        "question_id": 3271,
        "spider_question_id": 5651,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT Country FROM manager",
        "question": "Show the distinct countries of managers.",
        "query": "db.manager.aggregate([ { $group: { _id: \"$Country\" }} ])",
        "gpt4 answer": "db.manager.aggregate([ { $group: { _id: \"$Country\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3272,
        "spider_question_id": 5652,
        "db_id": "railway",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
        "question": "Show the working years of managers in descending order of their level.",
        "query": "db.manager.aggregate([ { $project: { Working_year_starts: 1} }, { $sort: { Level: -1 } }])",
        "gpt4 answer": "db.manager.find({}, { Working_year_starts: 1 }).sort({ Level: -1 })",
        "deepseek answer": "db.manager.aggregate([ { $project: { Working_year_starts: 1} }, { $sort: { Level: -1 } }])"
    },
    {
        "question_id": 3273,
        "spider_question_id": 5653,
        "db_id": "railway",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "db.manager.find( {$or: [{Age: {$gt: 50}}, {Age: {$lt: 46}}]}, { Country: 1} )",
        "gpt4 answer": "db.manager.find( {$or: [{Age: {$gt: 50}}, {Age: {$lt: 46}}]}, { Country: 1} )",
        "deepseek answer": "."
    },
    {
        "question_id": 3274,
        "spider_question_id": 5656,
        "db_id": "customers_and_products_contacts",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "question": "Show each state and the number of addresses in each state.",
        "query": "db.Addresses.aggregate([ { $group: { _id: \"$state_province_county\", count: { $sum: 1 } } }, { $project: { state_province_county: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $group: { _id: \"$state_province_county\", num_addresses: { $sum: 1 } }} ])",
        "deepseek answer": "db.Addresses.aggregate([ { $group: { _id: \"$state_province_county\", count: { $sum: 1 } } }, { $project: { state_province_county: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3275,
        "spider_question_id": 5657,
        "db_id": "customers_and_products_contacts",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_name , customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "question": "Show names and phones of customers who do not have address information.",
        "query": "db.Customers.find( { customer_id: { $nin: db.Customer_Address_History.distinct(\"customer_id\") } }, { customer_name: 1, customer_phone: 1 } )",
        "gpt4 answer": "db.Customers.find( { customer_id: { $nin: db.Customer_Address_History.distinct(\"customer_id\") } }, { customer_name: 1, customer_phone: 1 } )",
        "deepseek answer": "db.Customers.find( { customer_id: { $nin: db.Customer_Address_History.distinct(\"customer_id\") } }, { customer_name: 1, customer_phone: 1 } )"
    },
    {
        "question_id": 3276,
        "spider_question_id": 5659,
        "db_id": "customers_and_products_contacts",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2",
        "question": "Show the product type codes which have at least two products.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { product_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { product_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_type_code\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { product_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3277,
        "spider_question_id": 5660,
        "db_id": "customers_and_products_contacts",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'",
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status_code\": { $all: [\"Completed\", \"Part\"] } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status_code\": { $all: [\"Completed\", \"Part\"] } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3278,
        "spider_question_id": 5661,
        "db_id": "customers_and_products_contacts",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC",
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "query": "db.Customers.find({}, {customer_name: 1, customer_phone: 1, payment_method_code: 1}).sort({customer_number: -1})",
        "gpt4 answer": "db.Customers.find({}, { customer_name: 1, customer_phone: 1, payment_method_code: 1 }).sort({customer_number: -1})",
        "deepseek answer": "db.Customers.find({}, {customer_name: 1, customer_phone: 1, payment_method_code: 1}).sort({customer_number: -1})"
    },
    {
        "question_id": 3279,
        "spider_question_id": 5663,
        "db_id": "customers_and_products_contacts",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT min(product_price) , max(product_price) , avg(product_price) FROM products",
        "question": "Show the minimum, maximum, average price for all products.",
        "query": "db.Products.aggregate([ { $group: { _id: null, minPrice: { $min: \"$product_price\" }, maxPrice: { $max: \"$product_price\" }, avgPrice: { $avg: \"$product_price\" } } } , { $project: { minPrice: 1, maxPrice:1, avgPrice:1 } }])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: null, minPrice: { $min: \"$product_price\" }, maxPrice: { $max: \"$product_price\" }, avgPrice: { $avg: \"$product_price\" } } }, { $project: { minPrice: 1, maxPrice: 1, avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: null, minPrice: { $min: \"$product_price\" }, maxPrice: { $max: \"$product_price\" }, avgPrice: { $avg: \"$product_price\" } } } , { $project: { minPrice: 1, maxPrice:1, avgPrice:1 } }])"
    },
    {
        "question_id": 3280,
        "spider_question_id": 5666,
        "db_id": "customers_and_products_contacts",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count(*) > 2",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "query": "db.Customers.aggregate([ { $match: { payment_method_code: \"Credit Card\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.2\": { $exists: true } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { payment_method_code: 'Credit Card' } }, { $lookup: { from: 'Customer_Orders', localField: 'customer_id', foreignField: 'customer_id', as: 'orders' } }, { $unwind: '$orders' }, { $group: { _id: '$customer_id', customer_name: { $first: '$customer_name' }, orderCount: { $sum: 1 } } }, { $match: { orderCount: { $gt: 2 } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { payment_method_code: \"Credit Card\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.2\": { $exists: true } } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3281,
        "spider_question_id": 5668,
        "db_id": "customers_and_products_contacts",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_type_code , product_name FROM products WHERE product_price > 1000 OR product_price < 500",
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "query": "db.Products.find( { $or: [ { product_price: { $gt: 1000 } }, { product_price: { $lt: 500 } } ] }, { product_type_code: 1, product_name: 1 } )",
        "gpt4 answer": "db.Products.find( { $or: [ { product_price: { $gt: 1000 } }, { product_price: { $lt: 500 } } ] }, { product_type_code: 1, product_name: 1 } )",
        "deepseek answer": "db.Products.find( { $or: [ { product_price: { $gt: 1000 } }, { product_price: { $lt: 500 } } ] }, { product_type_code: 1, product_name: 1 } )"
    },
    {
        "question_id": 3282,
        "spider_question_id": 5669,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
        "question": "Find the name of dorms only for female (F gender).",
        "query": "db.Dorm.find({ gender: 'F' }, { dorm_name: 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({ gender: 'F' }, { dorm_name: 1 })"
    },
    {
        "question_id": 3283,
        "spider_question_id": 5670,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
        "question": "What are the names of the all-female dorms?",
        "query": "db.Dorm.find({ gender: 'F' }, { dorm_name: 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({ gender: 'F' }, { dorm_name: 1 })"
    },
    {
        "question_id": 3284,
        "spider_question_id": 5672,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT dorm_name FROM dorm WHERE student_capacity > 300",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "query": "db.Dorm.find({student_capacity: {$gt: 300}}, {dorm_name: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({student_capacity: {$gt: 300}}, {dorm_name: 1})"
    },
    {
        "question_id": 3285,
        "spider_question_id": 5675,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT fname FROM student WHERE age > 20",
        "question": "Find the first name of students who is older than 20.",
        "query": "db.Student.find({Age: {$gt: 20}}, {Fname: 1})",
        "gpt4 answer": "db.Student.find({ Age: { $gt: 20 } }, { Fname: 1 })",
        "deepseek answer": "db.Student.find({Age: {$gt: 20}}, {Fname: 1})"
    },
    {
        "question_id": 3286,
        "spider_question_id": 5676,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT fname FROM student WHERE age > 20",
        "question": "What are the first names of all students who are older than 20?",
        "query": "db.Student.find({Age: {$gt: 20}}, {Fname: 1})",
        "gpt4 answer": "db.Student.find({ Age: { $gt: 20 } }, { Fname: 1 })",
        "deepseek answer": "db.Student.find({Age: {$gt: 20}}, {Fname: 1})"
    },
    {
        "question_id": 3287,
        "spider_question_id": 5687,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , city_code FROM student GROUP BY city_code",
        "question": "Find the average age of all students living in the each city.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", averageAge: { $avg: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", averageAge: { $avg: \"$Age\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3288,
        "spider_question_id": 5688,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , city_code FROM student GROUP BY city_code",
        "question": "What is the average age for each city and what are those cities?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", averageAge: { $avg: \"$Age\" } }}, { $project: { city: \"$_id\", averageAge: 1 }} ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", averageAge: { $avg: \"$Age\" } }}, { $project: { city: \"$_id\", averageAge: 1 }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3289,
        "spider_question_id": 5689,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(student_capacity) , sum(student_capacity) FROM dorm WHERE gender = 'X'",
        "question": "Find the average and total capacity of dorms for the students with gender X.",
        "query": "db.Dorm.aggregate([ { $match: { gender: 'X' } }, { $group: { _id: null, averageCapacity: { $avg: \"$student_capacity\" }, totalCapacity: { $sum: \"$student_capacity\" } } } , { $project: { averageCapacity:1, totalCapacity:1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $match: { gender: 'X' } }, { $group: { _id: null, averageCapacity: { $avg: \"$student_capacity\" }, totalCapacity: { $sum: \"$student_capacity\" } } } , { $project: { averageCapacity:1, totalCapacity:1 } }])"
    },
    {
        "question_id": 3290,
        "spider_question_id": 5690,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(student_capacity) , sum(student_capacity) FROM dorm WHERE gender = 'X'",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "query": "db.Dorm.aggregate([ { $match: { gender: 'X' } }, { $group: { _id: null, averageCapacity: { $avg: \"$student_capacity\" }, totalCapacity: { $sum: \"$student_capacity\" } } }, { $project: { averageCapacity:1, totalCapacity:1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $match: { gender: 'X' } }, { $group: { _id: null, averageCapacity: { $avg: \"$student_capacity\" }, totalCapacity: { $sum: \"$student_capacity\" } } }, { $project: { averageCapacity:1, totalCapacity:1 } } ])"
    },
    {
        "question_id": 3291,
        "spider_question_id": 5697,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "query": "db.Dorm.find( { dorm_name: { $regex: /Donor/ } }, { student_capacity: 1, gender: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find( { dorm_name: { $regex: /Donor/ } }, { student_capacity: 1, gender: 1 } )"
    },
    {
        "question_id": 3292,
        "spider_question_id": 5698,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "query": "db.Dorm.find( {dorm_name: {$regex: /Donor/}}, {student_capacity: 1, gender: 1} )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find( {dorm_name: {$regex: /Donor/}}, {student_capacity: 1, gender: 1} )"
    },
    {
        "question_id": 3293,
        "spider_question_id": 5699,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT dorm_name , gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "query": "db.Dorm.find({ $or: [ { student_capacity: { $gt: 300 } }, { student_capacity: { $lt: 100 } } ] }, { dorm_name: 1, gender: 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({ $or: [ { student_capacity: { $gt: 300 } }, { student_capacity: { $lt: 100 } } ] }, { dorm_name: 1, gender: 1 })"
    },
    {
        "question_id": 3294,
        "spider_question_id": 5700,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT dorm_name , gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "query": "db.Dorm.find({ $or: [ { student_capacity: { $gt: 300 } }, { student_capacity: { $lt: 100 } } ] }, { dorm_name: 1, gender: 1 })",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({ $or: [ { student_capacity: { $gt: 300 } }, { student_capacity: { $lt: 100 } } ] }, { dorm_name: 1, gender: 1 })"
    },
    {
        "question_id": 3295,
        "spider_question_id": 5701,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT major) , count(DISTINCT city_code) FROM student",
        "question": "Find the numbers of different majors and cities.",
        "query": "db.Student.aggregate([ { $group: { _id: null, uniqueMajors: { $addToSet: \"$Major\" }, uniqueCities: { $addToSet: \"$city_code\" } } }, { $project: { numberOfDifferentMajors: { $size: \"$uniqueMajors\" }, numberOfDifferentCities: { $size: \"$uniqueCities\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, uniqueMajors: { $addToSet: \"$Major\" }, uniqueCities: { $addToSet: \"$city_code\" } } }, { $project: { numberOfDifferentMajors: { $size: \"$uniqueMajors\" }, numberOfDifferentCities: { $size: \"$uniqueCities\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3296,
        "spider_question_id": 5702,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT major) , count(DISTINCT city_code) FROM student",
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "query": "db.Student.aggregate([ { $group: { _id: null, distinctMajors: { $addToSet: \"$Major\" }, distinctCityCodes: { $addToSet: \"$city_code\" } } }, { $project: { distinctMajorsCount: { $size: \"$distinctMajors\" }, distinctCityCodesCount: { $size: \"$distinctCityCodes\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: null, distinctMajors: { $addToSet: \"$Major\" }, distinctCityCodes: { $addToSet: \"$city_code\" } } }, { $project: { distinctMajorsCount: { $size: \"$distinctMajors\" }, distinctCityCodesCount: { $size: \"$distinctCityCodes\" } } } ])"
    },
    {
        "question_id": 3297,
        "spider_question_id": 5704,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
        "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.details\" } }, { $match: { \"amenities.details.amenity_name\": { $all: [\"TV Lounge\", \"Study Room\"] } } }, { $project: { dorm_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.details\" } }, { $match: { \"amenities.details.amenity_name\": { $all: [\"TV Lounge\", \"Study Room\"] } } }, { $project: { dorm_name: 1 } } ])"
    },
    {
        "question_id": 3298,
        "spider_question_id": 5706,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
        "question": "What is the name of each dorm that has a TV Lounge but no study rooms?",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.details\" } }, { $match: { \"amenities.details.amenity_name\": \"TV Lounge\" } }, { $addFields: { hasStudyRoom: { $in: [\"Study Room\", \"$amenities.details.amenity_name\"] } } }, { $match: { hasStudyRoom: false } }, { $project: { dorm_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.details\" } }, { $match: { \"amenities.details.amenity_name\": \"TV Lounge\" } }, { $addFields: { hasStudyRoom: { $in: [\"Study Room\", \"$amenities.details.amenity_name\"] } } }, { $match: { hasStudyRoom: false } }, { $project: { dorm_name: 1 } } ])"
    },
    {
        "question_id": 3299,
        "spider_question_id": 5709,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "question": "Find the name of the dorm with the largest capacity.",
        "query": "db.Dorm.find({}, {dorm_name: 1}).sort({student_capacity: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({}, {dorm_name: 1}).sort({student_capacity: -1}).limit(1)"
    },
    {
        "question_id": 3300,
        "spider_question_id": 5710,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
        "question": "What are the names of the dorm with the largest capacity?",
        "query": "db.Dorm.find({}, {dorm_name: 1}).sort({student_capacity: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.find({}, {dorm_name: 1}).sort({student_capacity: -1}).limit(1)"
    },
    {
        "question_id": 3301,
        "spider_question_id": 5711,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "question": "List in alphabetic order all different amenities.",
        "query": "db.Dorm_amenity.find({}, {amenity_name: 1}).sort({amenity_name: 1})",
        "gpt4 answer": "db.Dorm_amenity.find({}, {amenity_name: 1}).sort({amenity_name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3302,
        "spider_question_id": 5712,
        "db_id": "dorm_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
        "question": "What are the different dorm amenity names in alphabetical order?",
        "query": "db.Dorm_amenity.find({}, { amenity_name: 1 }).sort({ amenity_name: 1 })",
        "gpt4 answer": "db.Dorm_amenity.find({}, { amenity_name: 1 }).sort({ amenity_name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3303,
        "spider_question_id": 5714,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the city with the most students?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city_code: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3304,
        "spider_question_id": 5715,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT fname , lname FROM student WHERE age < (SELECT avg(age) FROM student)",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "query": "db.Student.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"Student\", let: { averageAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Age\", \"$$averageAge\"] } } }, { $project: { Fname: 1, LName: 1 } } ], as: \"studentsBelowAverageAge\" } }, { $unwind: \"$studentsBelowAverageAge\" }, { $replaceRoot: { newRoot: \"$studentsBelowAverageAge\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"Student\", let: { averageAge: \"$averageAge\" }, pipeline: [ { $match: { $expr: { $lt: [\"$Age\", \"$$averageAge\"] } } }, { $project: { Fname: 1, LName: 1 } } ], as: \"studentsBelowAverageAge\" } }, { $unwind: \"$studentsBelowAverageAge\" }, { $replaceRoot: { newRoot: \"$studentsBelowAverageAge\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3305,
        "spider_question_id": 5721,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , sum(student_capacity) , gender FROM dorm GROUP BY gender",
        "question": "Find the number of dorms and total capacity for each gender.",
        "query": "db.Dorm.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 }, total_capacity: { $sum: \"$student_capacity\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 }, total_capacity: { $sum: \"$student_capacity\" } } } ])"
    },
    {
        "question_id": 3306,
        "spider_question_id": 5722,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , sum(student_capacity) , gender FROM dorm GROUP BY gender",
        "question": "How many dorms are there and what is the total capacity for each gender?",
        "query": "db.Dorm.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 }, total_capacity: { $sum: \"$student_capacity\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $group: { _id: \"$gender\", count: { $sum: 1 }, total_capacity: { $sum: \"$student_capacity\" } } } ])"
    },
    {
        "question_id": 3307,
        "spider_question_id": 5723,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , max(age) , sex FROM student GROUP BY sex",
        "question": "Find the average and oldest age for students with different sex.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" }, oldestAge: { $max: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" }, oldestAge: { $max: \"$Age\" } } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" }, oldestAge: { $max: \"$Age\" } } } ])"
    },
    {
        "question_id": 3308,
        "spider_question_id": 5724,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(age) , max(age) , sex FROM student GROUP BY sex",
        "question": "What is the average and oldest age for each gender of student?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" }, oldestAge: { $max: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" }, oldestAge: { $max: \"$Age\" } } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" }, oldestAge: { $max: \"$Age\" } } } ])"
    },
    {
        "question_id": 3309,
        "spider_question_id": 5725,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , major FROM student GROUP BY major",
        "question": "Find the number of students in each major.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3310,
        "spider_question_id": 5726,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , major FROM student GROUP BY major",
        "question": "How many students are there in each major?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } }} ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", count: { $sum: 1 } }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3311,
        "spider_question_id": 5727,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , avg(age) , city_code FROM student GROUP BY city_code",
        "question": "Find the number and average age of students living in each city.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", NumberOfStudents: { $sum: 1 }, AverageAge: { $avg: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", NumberOfStudents: { $sum: 1 }, AverageAge: { $avg: \"$Age\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3312,
        "spider_question_id": 5728,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , avg(age) , city_code FROM student GROUP BY city_code",
        "question": "How many students live in each city and what are their average ages?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", numberOfStudents: { $sum: 1 }, averageAge: { $avg: \"$Age\" } } }, { $project: { city_code: \"$_id\", numberOfStudents: 1, averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", numberOfStudents: { $sum: 1 }, averageAge: { $avg: \"$Age\" } } }, { $project: { city_code: \"$_id\", numberOfStudents: 1, averageAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3313,
        "spider_question_id": 5729,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , avg(age) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "query": "db.Student.aggregate([ { $match: { Sex: 'M' } }, { $group: { _id: \"$city_code\", averageAge: { $avg: \"$Age\" }, numberOfMales: { $count: {} } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: 'M' } }, { $group: { _id: \"$city_code\", averageAge: { $avg: \"$Age\" }, numberOfMales: { $count: {} } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3314,
        "spider_question_id": 5730,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , avg(age) , city_code FROM student WHERE sex = 'M' GROUP BY city_code",
        "question": "What is the average age and how many male students are there in each city?",
        "query": "db.Student.aggregate([ { $match: { Sex: \"M\" } }, { $group: { _id: \"$city_code\", AverageAge: { $avg: \"$Age\" }, MaleStudentsCount: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Sex: \"M\" } }, { $group: { _id: \"$city_code\", AverageAge: { $avg: \"$Age\" }, MaleStudentsCount: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3315,
        "spider_question_id": 5731,
        "db_id": "dorm_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , city_code FROM student GROUP BY city_code HAVING count(*) > 1",
        "question": "Find the number of students for the cities where have more than one student.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { city_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$city_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { city_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3316,
        "spider_question_id": 5735,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"Student\", localField: \"_id\", foreignField: \"Sex\", as: \"students\" } }, { $unwind: \"$students\" }, { $match: { $expr: { $gt: [\"$students.Age\", \"$averageAge\"] } } }, { $group: { _id: \"$students.Sex\", numberOfStudents: { $sum: 1 } } }, { $project: { Sex: \"$_id\", count: \"$numberOfStudents\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", averageAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"Student\", localField: \"_id\", foreignField: \"Sex\", as: \"students\" } }, { $unwind: \"$students\" }, { $match: { $expr: { $gt: [\"$students.Age\", \"$averageAge\"] } } }, { $group: { _id: \"$students.Sex\", numberOfStudents: { $sum: 1 } } }, { $project: { Sex: \"$_id\", count: \"$numberOfStudents\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3317,
        "spider_question_id": 5736,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , sex FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
        "question": "How many students are older than average for each gender?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Sex\", avgAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"Student\", localField: \"_id\", foreignField: \"Sex\", as: \"students\" } }, { $unwind: \"$students\" }, { $group: { _id: \"$_id\", avgAge: { $first: \"$avgAge\" }, count: { $sum: { $cond: [{ $gt: [\"$students.Age\", \"$avgAge\"] }, 1, 0] } } } }, { $project: { Sex: \"$_id\", Count: \"$count\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Sex\", avgAge: { $avg: \"$Age\" } } }, { $lookup: { from: \"Student\", localField: \"_id\", foreignField: \"Sex\", as: \"students\" } }, { $unwind: \"$students\" }, { $group: { _id: \"$_id\", avgAge: { $first: \"$avgAge\" }, count: { $sum: { $cond: [{ $gt: [\"$students.Age\", \"$avgAge\"] }, 1, 0] } } } }, { $project: { Sex: \"$_id\", Count: \"$count\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3318,
        "spider_question_id": 5737,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T1.age) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $group: { _id: \"$dorm.dorm_name\", averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1, dorm_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Lives_in.aggregate([ { $lookup: { from: \"Student\", localField: \"stuid\", foreignField: \"StuID\", as: \"student_info\" } }, { $unwind: \"$student_info\" }, { $lookup: { from: \"Dorm\", localField: \"dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $group: { _id: \"$dorm_info.dorm_name\", average_age: { $avg: \"$student_info.Age\" } } }, { $project: { dorm_name: \"$_id\", average_age: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $group: { _id: \"$dorm.dorm_name\", averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1, dorm_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3319,
        "spider_question_id": 5738,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT avg(T1.age) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
        "question": "What is the average age for each dorm and what are the names of each dorm?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $group: { _id: \"$dorm.dorm_name\", averageAge: { $avg: \"$Age\" } } }, { $project: { dorm_name: \"$_id\", averageAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_info\" } }, { $unwind: \"$lives_info\" }, { $lookup: { from: \"Dorm\", localField: \"lives_info.dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $group: { _id: \"$dorm_info.dorm_name\", averageAge: { $avg: \"$Age\" } } }, { $project: { dorm_name: \"$_id\", averageAge: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $group: { _id: \"$dorm.dorm_name\", averageAge: { $avg: \"$Age\" } } }, { $project: { dorm_name: \"$_id\", averageAge: 1 } } ])"
    },
    {
        "question_id": 3320,
        "spider_question_id": 5739,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid",
        "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "query": "db.Dorm.aggregate([ { $match: { student_capacity: { $gt: 100 } } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $project: { dormid: 1, amenityCount: { $size: \"$amenities\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $match: { student_capacity: { $gt: 100 } } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $project: { dormid: 1, amenityCount: { $size: \"$amenities\" } } } ])"
    },
    {
        "question_id": 3321,
        "spider_question_id": 5740,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid",
        "question": "For each dorm, how many amenities does it have?",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $match: { \"student_capacity\": { $gt: 100 } } }, { $project: { \"_id\": 0, \"dormid\": 1, \"amenity_count\": { $size: \"$amenities\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $match: { \"student_capacity\": { $gt: 100 } } }, { $project: { \"_id\": 0, \"dormid\": 1, \"amenity_count\": { $size: \"$amenities\" } } } ])"
    },
    {
        "question_id": 3322,
        "spider_question_id": 5742,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) , T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name",
        "question": "How many students are older than 20 in each dorm?",
        "query": "db.Student.aggregate([ { $match: { Age: { $gt: 20 } } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $group: { _id: \"$dorm.dorm_name\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Age: { $gt: 20 } } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"LivesData\" } }, { $unwind: \"$LivesData\" }, { $lookup: { from: \"Dorm\", localField: \"LivesData.dormid\", foreignField: \"dormid\", as: \"DormData\" } }, { $unwind: \"$DormData\" }, { $group: { _id: \"$DormData.dorm_name\", studentCount: { $sum: 1 } } }, { $project: { dorm_name: \"$_id\", count: \"$studentCount\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Age: { $gt: 20 } } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $group: { _id: \"$dorm.dorm_name\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3323,
        "spider_question_id": 5743,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $match: { \"dorm.dorm_name\": \"Smith Hall\" } }, { $project: { Fname: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"living_info\" } }, { $unwind: \"$living_info\" }, { $lookup: { from: \"Dorm\", localField: \"living_info.dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $match: { \"dorm_info.dorm_name\": \"Smith Hall\" } }, { $project: { Fname: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $match: { \"dorm.dorm_name\": \"Smith Hall\" } }, { $project: { Fname: 1 } } ])"
    },
    {
        "question_id": 3324,
        "spider_question_id": 5744,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'",
        "question": "What are the first names of all students in Smith Hall?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $match: { \"dorm.dorm_name\": \"Smith Hall\" } }, { $project: { Fname: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"LivesInfo\" } }, { $unwind: \"$LivesInfo\" }, { $lookup: { from: \"Dorm\", localField: \"LivesInfo.dormid\", foreignField: \"dormid\", as: \"DormInfo\" } }, { $unwind: \"$DormInfo\" }, { $match: { \"DormInfo.dorm_name\": \"Smith Hall\" } }, { $project: { Fname: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $match: { \"dorm.dorm_name\": \"Smith Hall\" } }, { $project: { Fname: 1 } } ])"
    },
    {
        "question_id": 3325,
        "spider_question_id": 5745,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT max(student_capacity) FROM dorm)",
        "question": "Find the average age of students who are living in the dorm with the largest capacity.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_info\" } }, { $unwind: \"$lives_info\" }, { $lookup: { from: \"Dorm\", localField: \"lives_info.dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $group: { _id: null, maxCapacity: { $max: \"$dorm_info.student_capacity\" } } }, { $lookup: { from: \"Dorm\", let: { maxCapacity: \"$maxCapacity\" }, pipeline: [ { $match: { $expr: { $eq: [\"$student_capacity\", \"$$maxCapacity\"] } } }, { $project: { dormid: 1 } } ], as: \"largestDorms\" } }, { $unwind: \"$largestDorms\" }, { $lookup: { from: \"Lives_in\", localField: \"largestDorms.dormid\", foreignField: \"dormid\", as: \"studentsInMaxDorm\" } }, { $unwind: \"$studentsInMaxDorm\" }, { $lookup: { from: \"Student\", localField: \"studentsInMaxDorm.stuid\", foreignField: \"StuID\", as: \"studentDetails\" } }, { $unwind: \"$studentDetails\" }, { $group: { _id: null, avgAge: { $avg: \"$studentDetails.Age\" } } }, { $project: { avgAge: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_info\" } }, { $unwind: \"$lives_info\" }, { $lookup: { from: \"Dorm\", localField: \"lives_info.dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $group: { _id: null, maxCapacity: { $max: \"$dorm_info.student_capacity\" } } }, { $lookup: { from: \"Dorm\", let: { maxCapacity: \"$maxCapacity\" }, pipeline: [ { $match: { $expr: { $eq: [\"$student_capacity\", \"$$maxCapacity\"] } } }, { $project: { dormid: 1 } } ], as: \"largestDorms\" } }, { $unwind: \"$largestDorms\" }, { $lookup: { from: \"Lives_in\", localField: \"largestDorms.dormid\", foreignField: \"dormid\", as: \"studentsInMaxDorm\" } }, { $unwind: \"$studentsInMaxDorm\" }, { $lookup: { from: \"Student\", localField: \"studentsInMaxDorm.stuid\", foreignField: \"StuID\", as: \"studentDetails\" } }, { $unwind: \"$studentDetails\" }, { $group: { _id: null, avgAge: { $avg: \"$studentDetails.Age\" } } }, { $project: { avgAge: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3326,
        "spider_question_id": 5748,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'",
        "question": "What are the total number of students who are living in a male dorm?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_info\" } }, { $unwind: \"$lives_info\" }, { $lookup: { from: \"Dorm\", localField: \"lives_info.dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $match: { \"dorm_info.gender\": \"M\" } }, { $count: \"total_students\" } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_info\" } }, { $unwind: \"$lives_info\" }, { $lookup: { from: \"Dorm\", localField: \"lives_info.dormid\", foreignField: \"dormid\", as: \"dorm_info\" } }, { $unwind: \"$dorm_info\" }, { $match: { \"dorm_info.gender\": \"M\" } }, { $count: \"total_students\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3327,
        "spider_question_id": 5752,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'",
        "question": "What are the names of the amenities that Smith Hall has?",
        "query": "db.Dorm.aggregate([ { $match: { dorm_name: \"Smith Hall\" } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $unwind: \"$amenities\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.amenity_info\" } }, { $unwind: \"$amenities.amenity_info\" }, { $project: { amenity_name: \"$amenities.amenity_info.amenity_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $match: { dorm_name: \"Smith Hall\" } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $unwind: \"$amenities\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.amenity_info\" } }, { $unwind: \"$amenities.amenity_info\" }, { $project: { amenity_name: \"$amenities.amenity_info.amenity_name\" } } ])"
    },
    {
        "question_id": 3328,
        "spider_question_id": 5753,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "query": "db.Dorm.aggregate([ { $match: { dorm_name: \"Smith Hall\" } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $unwind: \"$amenities\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.amenity_info\" } }, { $unwind: \"$amenities.amenity_info\" }, { $replaceRoot: { newRoot: \"$amenities.amenity_info\" } }, { $sort: { amenity_name: 1 } }, { $project: { amenity_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $match: { dorm_name: \"Smith Hall\" } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $unwind: \"$amenities\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.amenity_info\" } }, { $unwind: \"$amenities.amenity_info\" }, { $replaceRoot: { newRoot: \"$amenities.amenity_info\" } }, { $sort: { amenity_name: 1 } }, { $project: { amenity_name: 1 } } ])"
    },
    {
        "question_id": 3329,
        "spider_question_id": 5754,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name",
        "question": "What amenities does Smith Hall have in alphabetical order?",
        "query": "db.Dorm.aggregate([ { $match: { dorm_name: \"Smith Hall\" } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $unwind: \"$amenities\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.amenity_info\" } }, { $unwind: \"$amenities.amenity_info\" }, { $project: { amenity_name: \"$amenities.amenity_info.amenity_name\" } }, { $sort: { amenity_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $match: { dorm_name: \"Smith Hall\" } }, { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $unwind: \"$amenities\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenities.amenid\", foreignField: \"amenid\", as: \"amenities.amenity_info\" } }, { $unwind: \"$amenities.amenity_info\" }, { $project: { amenity_name: \"$amenities.amenity_info.amenity_name\" } }, { $sort: { amenity_name: 1 } } ])"
    },
    {
        "question_id": 3330,
        "spider_question_id": 5759,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $project: { dorm_name: 1, student_capacity: 1} }, { $sort: { amenityCount: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $project: { dorm_name: 1, student_capacity: 1} }, { $sort: { amenityCount: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3331,
        "spider_question_id": 5760,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $project: { dorm_name: 1, student_capacity: 1 } }, { $sort: { amenityCount: 1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"amenities\" } }, { $project: { dorm_name: 1, student_capacity: 1 } }, { $sort: { amenityCount: 1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3332,
        "spider_question_id": 5761,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"dorm_amenities\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"dorm_amenities.amenid\", foreignField: \"amenid\", as: \"amenities\" } }, { $match: { \"amenities.amenity_name\": { $ne: \"TV Lounge\" } } }, { $project: { dorm_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"dorm_amenities\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"dorm_amenities.amenid\", foreignField: \"amenid\", as: \"amenities\" } }, { $match: { \"amenities.amenity_name\": { $ne: \"TV Lounge\" } } }, { $project: { dorm_name: 1 } } ])"
    },
    {
        "question_id": 3333,
        "spider_question_id": 5762,
        "db_id": "dorm_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "query": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"has_amenity\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"has_amenity.amenid\", foreignField: \"amenid\", as: \"dorm_amenity\" } }, { $match: { \"dorm_amenity.amenity_name\": { $ne: \"TV Lounge\" } } }, { $project: { dorm_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Dorm.aggregate([ { $lookup: { from: \"Has_amenity\", localField: \"dormid\", foreignField: \"dormid\", as: \"has_amenity\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"has_amenity.amenid\", foreignField: \"amenid\", as: \"dorm_amenity\" } }, { $match: { \"dorm_amenity.amenity_name\": { $ne: \"TV Lounge\" } } }, { $project: { dorm_name: 1 } } ])"
    },
    {
        "question_id": 3334,
        "spider_question_id": 5765,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.fname , T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
        "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"living_info\" } }, { $unwind: \"$living_info\" }, { $lookup: { from: \"Has_amenity\", localField: \"living_info.dormid\", foreignField: \"dormid\", as: \"amenity_info\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenity_info.amenid\", foreignField: \"amenid\", as: \"dorm_amenity_info\" } }, { $match: { \"dorm_amenity_info.amenity_name\": { $ne: \"TV Lounge\" } } }, { $group: { _id: \"$StuID\", fname: { $first: \"$Fname\" }, age: { $first: \"$Age\" }, dorm_amenity: { $addToSet: \"$dorm_amenity_info.amenity_name\" } } }, { $project: { fname: 1, age: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"living_info\" } }, { $unwind: \"$living_info\" }, { $lookup: { from: \"Has_amenity\", localField: \"living_info.dormid\", foreignField: \"dormid\", as: \"amenity_info\" } }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenity_info.amenid\", foreignField: \"amenid\", as: \"dorm_amenity_info\" } }, { $match: { \"dorm_amenity_info.amenity_name\": { $ne: \"TV Lounge\" } } }, { $group: { _id: \"$StuID\", fname: { $first: \"$Fname\" }, age: { $first: \"$Age\" }, dorm_amenity: { $addToSet: \"$dorm_amenity_info.amenity_name\" } } }, { $project: { fname: 1, age: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3335,
        "spider_question_id": 5767,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "query": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $lookup: { from: \"Has_amenity\", localField: \"dorm.dormid\", foreignField: \"dormid\", as: \"has_amenity\" } }, { $unwind: \"$has_amenity\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"has_amenity.amenid\", foreignField: \"amenid\", as: \"amenity\" } }, { $unwind: \"$amenity\" }, { $project: { amenity_name: \"$amenity.amenity_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"lives_in\" } }, { $unwind: \"$lives_in\" }, { $lookup: { from: \"Dorm\", localField: \"lives_in.dormid\", foreignField: \"dormid\", as: \"dorm\" } }, { $unwind: \"$dorm\" }, { $lookup: { from: \"Has_amenity\", localField: \"dorm.dormid\", foreignField: \"dormid\", as: \"has_amenity\" } }, { $unwind: \"$has_amenity\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"has_amenity.amenid\", foreignField: \"amenid\", as: \"amenity\" } }, { $unwind: \"$amenity\" }, { $project: { amenity_name: \"$amenity.amenity_name\" } } ])"
    },
    {
        "question_id": 3336,
        "spider_question_id": 5768,
        "db_id": "dorm_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'",
        "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?",
        "query": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"livesInDetails\" } }, { $unwind: \"$livesInDetails\" }, { $lookup: { from: \"Has_amenity\", localField: \"livesInDetails.dormid\", foreignField: \"dormid\", as: \"amenitiesDetails\" } }, { $unwind: \"$amenitiesDetails\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenitiesDetails.amenid\", foreignField: \"amenid\", as: \"amenityNames\" } }, { $unwind: \"$amenityNames\" }, { $project: { amenity_name: \"$amenityNames.amenity_name\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { LName: \"Smith\" } }, { $lookup: { from: \"Lives_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"livesInDetails\" } }, { $unwind: \"$livesInDetails\" }, { $lookup: { from: \"Has_amenity\", localField: \"livesInDetails.dormid\", foreignField: \"dormid\", as: \"amenitiesDetails\" } }, { $unwind: \"$amenitiesDetails\" }, { $lookup: { from: \"Dorm_amenity\", localField: \"amenitiesDetails.amenid\", foreignField: \"amenid\", as: \"amenityNames\" } }, { $unwind: \"$amenityNames\" }, { $project: { amenity_name: \"$amenityNames.amenity_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3337,
        "spider_question_id": 5771,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "query": "db.Customers.find({}, {email_address: 1, phone_number: 1}).sort({email_address: 1, phone_number: 1})",
        "gpt4 answer": "db.Customers.find({}, { email_address: 1, phone_number: 1 }).sort({ email_address: 1, phone_number: 1 })",
        "deepseek answer": "db.Customers.find({}, {email_address: 1, phone_number: 1}).sort({email_address: 1, phone_number: 1})"
    },
    {
        "question_id": 3338,
        "spider_question_id": 5772,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT email_address , phone_number FROM customers ORDER BY email_address , phone_number",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "query": "db.Customers.find({}, {email_address: 1, phone_number: 1}).sort({email_address: 1, phone_number: 1})",
        "gpt4 answer": "db.Customers.find({}, { email_address: 1, phone_number: 1 }).sort({ email_address: 1, phone_number: 1 })",
        "deepseek answer": "db.Customers.find({}, {email_address: 1, phone_number: 1}).sort({email_address: 1, phone_number: 1})"
    },
    {
        "question_id": 3339,
        "spider_question_id": 5773,
        "db_id": "customer_complaints",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT town_city FROM customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "question": "Which city has the least number of customers whose type code is 'Good Credit Rating'?",
        "query": "db.Customers.aggregate([ { $match: { customer_type_code: 'Good Credit Rating' } }, { $group: { _id: '$town_city', count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_type_code: 'Good Credit Rating' } }, { $group: { _id: '$town_city', count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3340,
        "spider_question_id": 5775,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Complaints\", localField: \"product_id\", foreignField: \"product_id\", as: \"complaints\" } }, { $project: { product_name: 1, complaintCount: { $size: \"$complaints\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $lookup: { from: \"Complaints\", localField: \"product_id\", foreignField: \"product_id\", as: \"complaints\" } }, { $project: { product_name: 1, numberOfComplaints: { $size: \"$complaints\" } } } ])",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Complaints\", localField: \"product_id\", foreignField: \"product_id\", as: \"complaints\" } }, { $project: { product_name: 1, complaintCount: { $size: \"$complaints\" } } } ])"
    },
    {
        "question_id": 3341,
        "spider_question_id": 5776,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.product_name , count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name",
        "question": "What are all the different product names, and how many complains has each received?",
        "query": "db.Products.aggregate([ { $lookup: { from: \"Complaints\", localField: \"product_id\", foreignField: \"product_id\", as: \"complaints\" } }, { $project: { product_name: 1, complaint_count: { $size: \"$complaints\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.aggregate([ { $lookup: { from: \"Complaints\", localField: \"product_id\", foreignField: \"product_id\", as: \"complaints\" } }, { $project: { product_name: 1, complaint_count: { $size: \"$complaints\" } } } ])"
    },
    {
        "question_id": 3342,
        "spider_question_id": 5779,
        "db_id": "customer_complaints",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "query": "db.Complaints.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Complaints\", localField: \"_id\", foreignField: \"customer_id\", as: \"complaints\" } }, { $unwind: \"$complaints\" }, { $lookup: { from: \"Products\", localField: \"complaints.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $project: { \"products.product_name\": 1 } }, { $group: { _id: \"$products.product_name\" } } ])",
        "gpt4 answer": "db.Complaints.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $lookup: { from: \"Complaints\", localField: \"_id\", foreignField: \"customer_id\", as: \"complaints\" } }, { $unwind: \"$complaints\" }, { $lookup: { from: \"Products\", localField: \"complaints.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $project: { \"products.product_name\": 1 } }, { $group: { _id: \"$products.product_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3343,
        "spider_question_id": 5783,
        "db_id": "customer_complaints",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "query": "db.Customers.find( { customer_id: { $nin: db.Complaints.distinct(\"customer_id\") } }, { email_address: 1, phone_number: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.find( { customer_id: { $nin: db.Complaints.distinct(\"customer_id\") } }, { email_address: 1, phone_number: 1 } )"
    },
    {
        "question_id": 3344,
        "spider_question_id": 5784,
        "db_id": "customer_complaints",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT email_address , phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "query": "db.Customers.find( { customer_id: { $nin: db.Complaints.distinct(\"customer_id\") } }, { email_address: 1, phone_number: 1 } )",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Complaints\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"complaints\" } }, { $match: { \"complaints\": { $size: 0 } } }, { $project: { email_address: 1, phone_number: 1 } } ])",
        "deepseek answer": "db.Customers.find( { customer_id: { $nin: db.Complaints.distinct(\"customer_id\") } }, { email_address: 1, phone_number: 1 } )"
    },
    {
        "question_id": 3345,
        "spider_question_id": 5787,
        "db_id": "customer_complaints",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_description FROM products WHERE product_name = 'Chocolate'",
        "question": "What is the description of the product named 'Chocolate'?",
        "query": "db.Products.findOne({product_name: 'Chocolate'}, {product_description: 1})",
        "gpt4 answer": "db.Products.findOne({ product_name: 'Chocolate' }, { product_description: 1 })",
        "deepseek answer": "db.Products.findOne({product_name: 'Chocolate'}, {product_description: 1})"
    },
    {
        "question_id": 3346,
        "spider_question_id": 5788,
        "db_id": "customer_complaints",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT product_description FROM products WHERE product_name = 'Chocolate'",
        "question": "Return the description of the product called 'Chocolate'.",
        "query": "db.Products.findOne({product_name: 'Chocolate'}, {product_description: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Products.findOne({product_name: 'Chocolate'}, {product_description: 1})"
    },
    {
        "question_id": 3347,
        "spider_question_id": 5789,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "question": "Find the name and category of the most expensive product.",
        "query": "db.Products.find({}, {product_name: 1, product_category_code: 1}).sort({product_price: -1}).limit(1)",
        "gpt4 answer": "db.Products.find({}, { product_name: 1, product_category_code: 1 }).sort({ product_price: -1 }).limit(1)",
        "deepseek answer": "db.Products.find({}, {product_name: 1, product_category_code: 1}).sort({product_price: -1}).limit(1)"
    },
    {
        "question_id": 3348,
        "spider_question_id": 5790,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "question": "What is the name and category code of the product with the highest price?",
        "query": "db.Products.find({}, {product_name: 1, product_category_code: 1}).sort({product_price: -1}).limit(1)",
        "gpt4 answer": "db.Products.find({}, { product_name: 1, product_category_code: 1 }).sort({ product_price: -1 }).limit(1)",
        "deepseek answer": "db.Products.find({}, {product_name: 1, product_category_code: 1}).sort({product_price: -1}).limit(1)"
    },
    {
        "question_id": 3349,
        "spider_question_id": 5793,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code",
        "question": "What is the average price of the products for each category?",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_category_code\", averagePrice: { $avg: \"$product_price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_category_code\", averagePrice: { $avg: \"$product_price\" } } }, { $project: { product_category_code: \"$_id\", averagePrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_category_code\", averagePrice: { $avg: \"$product_price\" } } } ])"
    },
    {
        "question_id": 3350,
        "spider_question_id": 5794,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(product_price) , product_category_code FROM products GROUP BY product_category_code",
        "question": "Return the average price of products that have each category code.",
        "query": "db.Products.aggregate([ { $group: { _id: \"$product_category_code\", averagePrice: { $avg: \"$product_price\" } } } ])",
        "gpt4 answer": "db.Products.aggregate([ { $group: { _id: \"$product_category_code\", avgPrice: { $avg: \"$product_price\" } } }, { $project: { product_category_code: \"$_id\", avgPrice: 1 } } ])",
        "deepseek answer": "db.Products.aggregate([ { $group: { _id: \"$product_category_code\", averagePrice: { $avg: \"$product_price\" } } } ])"
    },
    {
        "question_id": 3351,
        "spider_question_id": 5797,
        "db_id": "customer_complaints",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*) > 3",
        "question": "Which complaint status has more than 3 records on file?",
        "query": "db.Complaints.aggregate([ { $group: { _id: \"$complaint_status_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } , { $project: { complaint_status_code: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Complaints.aggregate([ { $group: { _id: \"$complaint_status_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } , { $project: { complaint_status_code: \"$_id\" } }])"
    },
    {
        "question_id": 3352,
        "spider_question_id": 5799,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE '%wrau%'",
        "question": "Find the last name of the staff whose email address contains 'wrau'.",
        "query": "db.Staff.find({email_address: {$regex: /wrau/}}, {last_name: 1})",
        "gpt4 answer": "db.Staff.find({email_address: /wrau/}, {last_name: 1})",
        "deepseek answer": "db.Staff.find({email_address: {$regex: /wrau/}}, {last_name: 1})"
    },
    {
        "question_id": 3353,
        "spider_question_id": 5800,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE '%wrau%'",
        "question": "What are the last names of staff with email addressed containing the substring 'wrau'?",
        "query": "db.Staff.find({email_address: {$regex: /wrau/}}, {last_name: 1})",
        "gpt4 answer": "db.Staff.find({email_address: /wrau/}, {last_name: 1})",
        "deepseek answer": "db.Staff.find({email_address: {$regex: /wrau/}}, {last_name: 1})"
    },
    {
        "question_id": 3354,
        "spider_question_id": 5801,
        "db_id": "customer_complaints",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "How many customers are there in the customer type with the most customers?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$customer_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { count: 1 } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { count: 1 } }])"
    },
    {
        "question_id": 3355,
        "spider_question_id": 5802,
        "db_id": "customer_complaints",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Count the number of customers that have the customer type that is most common.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$customer_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { count: 1} } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 3356,
        "spider_question_id": 5807,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = 'vbogisich@example.org'",
        "question": "Find the address line 1 and 2 of the customer with email 'vbogisich@example.org'.",
        "query": "db.Customers.find( { \"email_address\": \"vbogisich@example.org\" }, { \"address_line_1\": 1, \"address_line_2\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.Customers.find({ email_address: 'vbogisich@example.org' }, { address_line_1: 1, address_line_2: 1 })",
        "deepseek answer": "db.Customers.find( { \"email_address\": \"vbogisich@example.org\" }, { \"address_line_1\": 1, \"address_line_2\": 1, \"_id\": 0 } )"
    },
    {
        "question_id": 3357,
        "spider_question_id": 5808,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT address_line_1 , address_line_2 FROM customers WHERE email_address = 'vbogisich@example.org'",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email 'vbogisich@example.org'?",
        "query": "db.Customers.find( { \"email_address\": \"vbogisich@example.org\" }, { \"address_line_1\": 1, \"address_line_2\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.Customers.find( { email_address: 'vbogisich@example.org' }, { address_line_1: 1, address_line_2: 1 } )",
        "deepseek answer": "db.Customers.find( { \"email_address\": \"vbogisich@example.org\" }, { \"address_line_1\": 1, \"address_line_2\": 1, \"_id\": 0 } )"
    },
    {
        "question_id": 3358,
        "spider_question_id": 5809,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code",
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "query": "db.Complaints.aggregate([ { $match: { complaint_type_code: \"Product Failure\" } }, { $group: { _id: \"$complaint_status_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Complaints.aggregate([ { $match: { complaint_type_code: \"Product Failure\" } }, { $group: { _id: \"$complaint_status_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3359,
        "spider_question_id": 5810,
        "db_id": "customer_complaints",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT complaint_status_code , count(*) FROM complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code",
        "question": "Of complaints with the type code 'Product Failure', how many had each different status code?",
        "query": "db.Complaints.aggregate([ { $match: { complaint_type_code: \"Product Failure\" } }, { $group: { _id: \"$complaint_status_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Complaints.aggregate([ { $match: { complaint_type_code: \"Product Failure\" } }, { $group: { _id: \"$complaint_status_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3360,
        "spider_question_id": 5817,
        "db_id": "workshop_paper",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Author FROM submission ORDER BY Scores ASC",
        "question": "List the authors of submissions in ascending order of scores.",
        "query": "db.submission.find({}, {Author: 1}).sort({Scores: 1})",
        "gpt4 answer": "db.submission.find({}, { Author: 1 }).sort({ Scores: 1 })",
        "deepseek answer": "db.submission.find({}, {Author: 1}).sort({Scores: 1})"
    },
    {
        "question_id": 3361,
        "spider_question_id": 5818,
        "db_id": "workshop_paper",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Author FROM submission ORDER BY Scores ASC",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "db.submission.find({}, {Author: 1}).sort({Scores: 1})",
        "gpt4 answer": "db.submission.find({}, { Author: 1 }).sort({ Scores: 1 })",
        "deepseek answer": "db.submission.find({}, {Author: 1}).sort({Scores: 1})"
    },
    {
        "question_id": 3362,
        "spider_question_id": 5819,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Author , College FROM submission",
        "question": "What are the authors of submissions and their colleges?",
        "query": "db.submission.find({}, {Author: 1, College: 1})",
        "gpt4 answer": "db.submission.find({}, { Author: 1, College: 1 })",
        "deepseek answer": "db.submission.find({}, {Author: 1, College: 1})"
    },
    {
        "question_id": 3363,
        "spider_question_id": 5820,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Author , College FROM submission",
        "question": "For each submission, show the author and their affiliated college.",
        "query": "db.submission.aggregate([ { $project: { Author: 1, College: 1 } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $project: { Author: 1, College: 1 } } ])",
        "deepseek answer": "db.submission.aggregate([ { $project: { Author: 1, College: 1 } } ])"
    },
    {
        "question_id": 3364,
        "spider_question_id": 5821,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'",
        "question": "Show the names of authors from college 'Florida' or 'Temple'",
        "query": "db.submission.find({College: {$in: ['Florida', 'Temple']}}, {Author: 1})",
        "gpt4 answer": "db.submission.find({ College: { $in: ['Florida', 'Temple'] } }, { Author: 1 })",
        "deepseek answer": "db.submission.find({College: {$in: ['Florida', 'Temple']}}, {Author: 1})"
    },
    {
        "question_id": 3365,
        "spider_question_id": 5822,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'",
        "question": "Which authors with submissions are from college 'Florida' or 'Temple'?",
        "query": "db.submission.find({College: {$in: ['Florida', 'Temple']}}, {Author: 1})",
        "gpt4 answer": "db.submission.find( { College: { $in: ['Florida', 'Temple'] } }, { Author: 1 } )",
        "deepseek answer": "db.submission.find({College: {$in: ['Florida', 'Temple']}}, {Author: 1})"
    },
    {
        "question_id": 3366,
        "spider_question_id": 5823,
        "db_id": "workshop_paper",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Scores) FROM submission",
        "question": "What is the average score of submissions?",
        "query": "db.submission.aggregate([ { $group: { _id: null, averageScore: { $avg: \"$Scores\" } } }, { $project: { averageScore: 1 } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $group: { _id: null, averageScore: { $avg: \"$Scores\" } } }, { $project: { averageScore: 1 } } ])",
        "deepseek answer": "db.submission.aggregate([ { $group: { _id: null, averageScore: { $avg: \"$Scores\" } } }, { $project: { averageScore: 1 } } ])"
    },
    {
        "question_id": 3367,
        "spider_question_id": 5824,
        "db_id": "workshop_paper",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Scores) FROM submission",
        "question": "Compute the average score of submissions.",
        "query": "db.submission.aggregate([ { $group: { _id: null, averageScore: { $avg: \"$Scores\" } } }, { $project: { averageScore: 1 } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $group: { _id: null, averageScore: { $avg: \"$Scores\" } } }, { $project: { averageScore: 1 } } ])",
        "deepseek answer": "db.submission.aggregate([ { $group: { _id: null, averageScore: { $avg: \"$Scores\" } } }, { $project: { averageScore: 1 } } ])"
    },
    {
        "question_id": 3368,
        "spider_question_id": 5825,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "question": "What is the author of the submission with the highest score?",
        "query": "db.submission.find({}, {Author: 1}).sort({Scores: -1}).limit(1)",
        "gpt4 answer": "db.submission.find({}, { Author: 1 }).sort({ Scores: -1 }).limit(1)",
        "deepseek answer": "db.submission.find({}, {Author: 1}).sort({Scores: -1}).limit(1)"
    },
    {
        "question_id": 3369,
        "spider_question_id": 5826,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "question": "Find the author who achieved the highest score in a submission.",
        "query": "db.submission.find({}, {Author: 1}).sort({Scores: -1}).limit(1)",
        "gpt4 answer": "db.submission.find({}, {Author: 1}).sort({Scores: -1}).limit(1)",
        "deepseek answer": "db.submission.find({}, {Author: 1}).sort({Scores: -1}).limit(1)"
    },
    {
        "question_id": 3370,
        "spider_question_id": 5827,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT College , COUNT(*) FROM submission GROUP BY College",
        "question": "Show different colleges along with the number of authors of submission from each college.",
        "query": "db.submission.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $project: { College: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $group: { _id: \"$College\", NumberOfAuthors: { $sum: 1 } }} ])",
        "deepseek answer": "db.submission.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $project: { College: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3371,
        "spider_question_id": 5828,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT College , COUNT(*) FROM submission GROUP BY College",
        "question": "For each college, return the college name and the count of authors with submissions from that college.",
        "query": "db.submission.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $project: { College: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $group: { _id: \"$College\", AuthorCount: { $sum: 1 } }}, { $project: { College: \"$_id\", AuthorCount: 1 }} ])",
        "deepseek answer": "db.submission.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $project: { College: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3372,
        "spider_question_id": 5829,
        "db_id": "workshop_paper",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common college of authors of submissions.",
        "query": "db.submission.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { College: \"$_id\" } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $group: { _id: \"$College\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { College: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3373,
        "spider_question_id": 5830,
        "db_id": "workshop_paper",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which college has the most authors with submissions?",
        "query": "db.submission.aggregate([ { $group: { _id: \"$College\", numOfAuthors: { $sum: 1 } }}, { $sort: { numOfAuthors: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.submission.aggregate([ { $group: { _id: \"$College\", numOfAuthors: { $sum: 1 } }}, { $sort: { numOfAuthors: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3374,
        "spider_question_id": 5841,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date , Venue FROM workshop ORDER BY Venue",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "query": "db.workshop.find({}, {Date: 1, Venue: 1}).sort({Venue: 1})",
        "gpt4 answer": "db.workshop.find({}, { Date: 1, Venue: 1 }).sort({ Venue: 1 })",
        "deepseek answer": "db.workshop.find({}, {Date: 1, Venue: 1}).sort({Venue: 1})"
    },
    {
        "question_id": 3375,
        "spider_question_id": 5842,
        "db_id": "workshop_paper",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date , Venue FROM workshop ORDER BY Venue",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "query": "db.workshop.find({}, {Date: 1, Venue: 1}).sort({Venue: 1})",
        "gpt4 answer": "db.workshop.find({}, { Date: 1, Venue: 1 }).sort({ Venue: 1 })",
        "deepseek answer": "db.workshop.find({}, {Date: 1, Venue: 1}).sort({Venue: 1})"
    },
    {
        "question_id": 3376,
        "spider_question_id": 5846,
        "db_id": "tracking_share_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Investor_details FROM INVESTORS",
        "question": "Show all investor details.",
        "query": "db.Investors.find({}, {Investor_details: 1})",
        "gpt4 answer": "db.Investors.find({}, {Investor_details: 1})",
        "deepseek answer": "db.Investors.find({}, {Investor_details: 1})"
    },
    {
        "question_id": 3377,
        "spider_question_id": 5848,
        "db_id": "tracking_share_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
        "question": "Show the maximum amount of transaction.",
        "query": "db.Transactions.aggregate([ { $group: { _id: null, maxAmount: { $max: \"$amount_of_transaction\" } } } , { $project: { maxAmount: 1 } }])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: null, maxAmountOfTransaction: { $max: \"$amount_of_transaction\" } } }, { $project: { maxAmountOfTransaction: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: null, maxAmount: { $max: \"$amount_of_transaction\" } } } , { $project: { maxAmount: 1 } }])"
    },
    {
        "question_id": 3378,
        "spider_question_id": 5851,
        "db_id": "tracking_share_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'",
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "query": "db.Transactions.find({transaction_type_code: 'PUR'}, {transaction_id: 1})",
        "gpt4 answer": "db.Transactions.find({ \"transaction_type_code\": \"PUR\" }, { \"transaction_id\": 1, \"_id\": 0 })",
        "deepseek answer": "db.Transactions.find({transaction_type_code: 'PUR'}, {transaction_id: 1})"
    },
    {
        "question_id": 3379,
        "spider_question_id": 5853,
        "db_id": "tracking_share_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = 'SALE'",
        "question": "Show the average amount of transactions with type code 'SALE'.",
        "query": "db.Transactions.aggregate([ { $match: { transaction_type_code: 'SALE' } }, { $group: { _id: null, averageAmount: { $avg: \"$amount_of_transaction\" } } } , { $project: { averageAmount: 1 } }])",
        "gpt4 answer": "db.Transactions.aggregate([ { $match: { transaction_type_code: 'SALE' } }, { $group: { _id: null, averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $project: { averageAmount: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $match: { transaction_type_code: 'SALE' } }, { $group: { _id: null, averageAmount: { $avg: \"$amount_of_transaction\" } } } , { $project: { averageAmount: 1 } }])"
    },
    {
        "question_id": 3380,
        "spider_question_id": 5854,
        "db_id": "tracking_share_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = 'PUR'",
        "question": "Show the description of transaction type with code 'PUR'.",
        "query": "db.Ref_Transaction_Types.find({transaction_type_code: 'PUR'}, {transaction_type_description: 1})",
        "gpt4 answer": "db.Ref_Transaction_Types.find({ transaction_type_code: 'PUR' }, { transaction_type_description: 1 })",
        "deepseek answer": "db.Ref_Transaction_Types.find({transaction_type_code: 'PUR'}, {transaction_type_description: 1})"
    },
    {
        "question_id": 3381,
        "spider_question_id": 5856,
        "db_id": "tracking_share_transactions",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000",
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "query": "db.Transactions.aggregate([ { $match: { amount_of_transaction: { $lt: 10000 } } }, { $group: { _id: null, maxShareCount: { $max: \"$share_count\" } } }, { $project: { maxShareCount: 1 } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $match: { amount_of_transaction: { $lt: 10000 } } }, { $group: { _id: null, maxShareCount: { $max: \"$share_count\" } } }, { $project: { maxShareCount: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $match: { amount_of_transaction: { $lt: 10000 } } }, { $group: { _id: null, maxShareCount: { $max: \"$share_count\" } } }, { $project: { maxShareCount: 1 } } ])"
    },
    {
        "question_id": 3382,
        "spider_question_id": 5861,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT lot_details , investor_id FROM LOTS",
        "question": "Return the lot details and investor ids.",
        "query": "db.Lots.aggregate([ { $project: { lot_details: 1, investor_id: 1 } } ])",
        "gpt4 answer": "db.Lots.find({}, { lot_details: 1, investor_id: 1})",
        "deepseek answer": "db.Lots.aggregate([ { $project: { lot_details: 1, investor_id: 1 } } ])"
    },
    {
        "question_id": 3383,
        "spider_question_id": 5862,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = 'l'",
        "question": "Return the lot details of lots that belong to investors with details 'l'?",
        "query": "db.Investors.aggregate([ { $match: { Investor_details: 'l' } }, { $lookup: { from: \"Lots\", localField: \"investor_id\", foreignField: \"investor_id\", as: \"lots\" } }, { $unwind: \"$lots\" }, { $project: { lot_details: \"$lots.lot_details\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Investors.aggregate([ { $match: { Investor_details: 'l' } }, { $lookup: { from: \"Lots\", localField: \"investor_id\", foreignField: \"investor_id\", as: \"lots\" } }, { $unwind: \"$lots\" }, { $project: { lot_details: \"$lots.lot_details\" } } ])"
    },
    {
        "question_id": 3384,
        "spider_question_id": 5863,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "query": "db.Purchases.aggregate([ { $lookup: { from: \"Transactions\", localField: \"purchase_transaction_id\", foreignField: \"transaction_id\", as: \"transaction_data\" } }, { $match: { \"transaction_data.amount_of_transaction\": { $gt: 10000 } } }, { $project: { purchase_details: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Purchases.aggregate([ { $lookup: { from: \"Transactions\", localField: \"purchase_transaction_id\", foreignField: \"transaction_id\", as: \"transaction_data\" } }, { $match: { \"transaction_data.amount_of_transaction\": { $gt: 10000 } } }, { $project: { purchase_details: 1 } } ])"
    },
    {
        "question_id": 3385,
        "spider_question_id": 5867,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "question": "Show the average transaction amount for different transaction types.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", averageTransactionAmount: { $avg: \"$amount_of_transaction\" } } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $project: { transaction_type_code: \"$_id\", avgAmount: \"$averageAmount\" } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", averageTransactionAmount: { $avg: \"$amount_of_transaction\" } } } ])"
    },
    {
        "question_id": 3386,
        "spider_question_id": 5868,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT transaction_type_code , max(share_count) , min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "question": "Show the maximum and minimum share count of different transaction types.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", maxShareCount: { $max: \"$share_count\" }, minShareCount: { $min: \"$share_count\" } } }, { $project: { transaction_type_code: \"$_id\", maxShareCount: 1, minShareCount: 1 } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", maxShareCount: { $max: \"$share_count\" }, minShareCount: { $min: \"$share_count\" } } }, { $project: { transaction_type_code: \"$_id\", maxShareCount: 1, minShareCount: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", maxShareCount: { $max: \"$share_count\" }, minShareCount: { $min: \"$share_count\" } } }, { $project: { transaction_type_code: \"$_id\", maxShareCount: 1, minShareCount: 1 } } ])"
    },
    {
        "question_id": 3387,
        "spider_question_id": 5871,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
        "question": "Show the average amount of transactions for different investors.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $project: { investor_id: \"$_id\", avgAmount: \"$averageAmount\" } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } } ])"
    },
    {
        "question_id": 3388,
        "spider_question_id": 5872,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
        "question": "Show the average amount of transactions for different lots.",
        "query": "db.Transactions.aggregate([ { $lookup: { from: \"Transactions_Lots\", localField: \"transaction_id\", foreignField: \"transaction_id\", as: \"transaction_lots\" } }, { $unwind: \"$transaction_lots\" }, { $group: { _id: \"$transaction_lots.lot_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $lookup: { from: \"Transactions_Lots\", localField: \"transaction_id\", foreignField: \"transaction_id\", as: \"transaction_lots\" } }, { $unwind: \"$transaction_lots\" }, { $group: { _id: \"$transaction_lots.lot_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $project: { lot_id: \"$_id\", averageAmount: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $lookup: { from: \"Transactions_Lots\", localField: \"transaction_id\", foreignField: \"transaction_id\", as: \"transaction_lots\" } }, { $unwind: \"$transaction_lots\" }, { $group: { _id: \"$transaction_lots.lot_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } } ])"
    },
    {
        "question_id": 3389,
        "spider_question_id": 5873,
        "db_id": "tracking_share_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
        "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "query": "db.Transactions.aggregate([ { $lookup: { from: \"Transactions_Lots\", localField: \"transaction_id\", foreignField: \"transaction_id\", as: \"transaction_lots\" } }, { $unwind: \"$transaction_lots\" }, { $group: { _id: \"$transaction_lots.lot_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $sort: { averageAmount: 1 } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $lookup: { from: \"Transactions_Lots\", localField: \"transaction_id\", foreignField: \"transaction_id\", as: \"transaction_lot\" } }, { $unwind: \"$transaction_lot\" }, { $group: { _id: \"$transaction_lot.lot_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $sort: { averageAmount: 1 } }, { $project: { lot_id: \"$_id\", averageAmountOfTransaction: \"$averageAmount\" } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $lookup: { from: \"Transactions_Lots\", localField: \"transaction_id\", foreignField: \"transaction_id\", as: \"transaction_lots\" } }, { $unwind: \"$transaction_lots\" }, { $group: { _id: \"$transaction_lots.lot_id\", averageAmount: { $avg: \"$amount_of_transaction\" } } }, { $sort: { averageAmount: 1 } } ])"
    },
    {
        "question_id": 3390,
        "spider_question_id": 5874,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = 'SALE' GROUP BY investor_id",
        "question": "Show the number of transactions with transaction type code 'SALE' for different investors if it is larger than 0.",
        "query": "db.Transactions.aggregate([ { $match: { transaction_type_code: \"SALE\" } }, { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 0 } } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $match: { transaction_type_code: 'SALE' } }, { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 0 } } }, { $project: { investor_id: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $match: { transaction_type_code: \"SALE\" } }, { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 0 } } } ])"
    },
    {
        "question_id": 3391,
        "spider_question_id": 5875,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
        "question": "Show the number of transactions for different investors.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", number_of_transactions: { $sum: 1 } } }, { $project: { investor_id: \"$_id\", number_of_transactions: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3392,
        "spider_question_id": 5876,
        "db_id": "tracking_share_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Show the transaction type code that occurs the fewest times.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { transaction_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { transaction_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { transaction_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3393,
        "spider_question_id": 5877,
        "db_id": "tracking_share_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the transaction type code that occurs the most frequently.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { transaction_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { transaction_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3394,
        "spider_question_id": 5878,
        "db_id": "tracking_share_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the description of the transaction type that occurs most frequently.",
        "query": "db.Transactions.aggregate([ { $lookup: { from: \"Ref_Transaction_Types\", localField: \"transaction_type_code\", foreignField: \"transaction_type_code\", as: \"transaction_type\" } }, { $unwind: \"$transaction_type\" }, { $group: { _id: \"$transaction_type.transaction_type_description\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { transaction_type_description: \"$_id\" } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$transaction_type_code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Transaction_Types\", localField: \"_id\", foreignField: \"transaction_type_code\", as: \"transaction_type\" } }, { $unwind: \"$transaction_type\" }, { $project: { description: \"$transaction_type.transaction_type_description\" } } ])",
        "deepseek answer": "db.Transactions.aggregate([ { $lookup: { from: \"Ref_Transaction_Types\", localField: \"transaction_type_code\", foreignField: \"transaction_type_code\", as: \"transaction_type\" } }, { $unwind: \"$transaction_type\" }, { $group: { _id: \"$transaction_type.transaction_type_description\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { transaction_type_description: \"$_id\" } } ])"
    },
    {
        "question_id": 3395,
        "spider_question_id": 5879,
        "db_id": "tracking_share_transactions",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "query": "db.Investors.aggregate([ { $lookup: { from: \"Transactions\", localField: \"investor_id\", foreignField: \"investor_id\", as: \"transactions\" } }, { $project: { investor_id: 1, Investor_details: 1, transactionCount: { $size: \"$transactions\" } } }, { $sort: { transactionCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Investors\", localField: \"_id\", foreignField: \"investor_id\", as: \"investor_details\" } }, { $project: { investor_id: \"$_id\", Investor_details: { $arrayElemAt: [\"$investor_details.Investor_details\", 0] } } } ])",
        "deepseek answer": "db.Investors.aggregate([ { $lookup: { from: \"Transactions\", localField: \"investor_id\", foreignField: \"investor_id\", as: \"transactions\" } }, { $project: { investor_id: 1, Investor_details: 1, transactionCount: { $size: \"$transactions\" } } }, { $sort: { transactionCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3396,
        "spider_question_id": 5881,
        "db_id": "tracking_share_transactions",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
        "question": "Show the ids of the investors who have at least two transactions.",
        "query": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { investor_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { investor_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3397,
        "spider_question_id": 5882,
        "db_id": "tracking_share_transactions",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = 'SALE' GROUP BY T2.investor_id HAVING COUNT(*) >= 2",
        "question": "Show the ids and details of the investors who have at least two transactions with type code 'SALE'.",
        "query": "db.Transactions.aggregate([ { $match: { transaction_type_code: 'SALE' } }, { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Investors\", localField: \"_id\", foreignField: \"investor_id\", as: \"investorDetails\" } }, { $unwind: \"$investorDetails\" }, { $project: { investor_id: \"$_id\", Investor_details: \"$investorDetails.Investor_details\" } } ])",
        "gpt4 answer": "db.Transactions.aggregate([ { $match: { transaction_type_code: 'SALE' } }, { $group: { _id: \"$investor_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Investors\", localField: \"_id\", foreignField: \"investor_id\", as: \"investorDetails\" } }, { $unwind: \"$investorDetails\" }, { $project: { investor_id: \"$_id\", Investor_details: \"$investorDetails.Investor_details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3398,
        "spider_question_id": 5888,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT price_range FROM HOTELS",
        "question": "What are the price ranges of hotels?",
        "query": "db.Hotels.find({}, {price_range: 1})",
        "gpt4 answer": "db.Hotels.find({}, {price_range: 1})",
        "deepseek answer": "db.Hotels.find({}, {price_range: 1})"
    },
    {
        "question_id": 3399,
        "spider_question_id": 5889,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT price_range FROM HOTELS",
        "question": "Tell me the price ranges for all the hotels.",
        "query": "db.Hotels.find({}, {price_range: 1})",
        "gpt4 answer": "db.Hotels.find({}, { price_range: 1 })",
        "deepseek answer": "db.Hotels.find({}, {price_range: 1})"
    },
    {
        "question_id": 3400,
        "spider_question_id": 5894,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Tourist_Details FROM VISITORS",
        "question": "Show details of all visitors.",
        "query": "db.Visitors.find({}, {Tourist_Details: 1})",
        "gpt4 answer": "db.Visitors.find({}, {Tourist_Details: 1})",
        "deepseek answer": "db.Visitors.find({}, {Tourist_Details: 1})"
    },
    {
        "question_id": 3401,
        "spider_question_id": 5895,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Tourist_Details FROM VISITORS",
        "question": "What is the detail of each visitor?",
        "query": "db.Visitors.find({}, {Tourist_Details: 1})",
        "gpt4 answer": "db.Visitors.find({}, {Tourist_Details: 1})",
        "deepseek answer": "db.Visitors.find({}, {Tourist_Details: 1})"
    },
    {
        "question_id": 3402,
        "spider_question_id": 5896,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code = '5'",
        "question": "Show the price ranges of hotels with 5 star ratings.",
        "query": "db.Hotels.find({star_rating_code: '5'}, {price_range: 1})",
        "gpt4 answer": "db.Hotels.find({ star_rating_code: '5' }, { price_range: 1 })",
        "deepseek answer": "db.Hotels.find({star_rating_code: '5'}, {price_range: 1})"
    },
    {
        "question_id": 3403,
        "spider_question_id": 5897,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code = '5'",
        "question": "What are the price ranges of five star hotels?",
        "query": "db.Hotels.find({ star_rating_code: '5' }, { price_range: 1 })",
        "gpt4 answer": "db.Hotels.find({ star_rating_code: '5' }, { price_range: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3404,
        "spider_question_id": 5900,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name = 'UK Gallery'",
        "question": "What is the address of the location 'UK Gallery'?",
        "query": "db.Locations.findOne({Location_Name: 'UK Gallery'}, {Address: 1})",
        "gpt4 answer": "db.Locations.find({ Location_Name: 'UK Gallery' }, { Address: 1 })",
        "deepseek answer": "db.Locations.findOne({Location_Name: 'UK Gallery'}, {Address: 1})"
    },
    {
        "question_id": 3405,
        "spider_question_id": 5901,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name = 'UK Gallery'",
        "question": "Find the address of the location named 'UK Gallery'.",
        "query": "db.Locations.find({Location_Name: 'UK Gallery'}, {Address: 1})",
        "gpt4 answer": "db.Locations.find({ Location_Name: 'UK Gallery' }, { Address: 1 })",
        "deepseek answer": "db.Locations.find({Location_Name: 'UK Gallery'}, {Address: 1})"
    },
    {
        "question_id": 3406,
        "spider_question_id": 5904,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'",
        "question": "Which location names contain the word 'film'?",
        "query": "db.Locations.find({Location_Name: {$regex: /film/i}}, {Location_Name: 1})",
        "gpt4 answer": "db.Locations.find({ Location_Name: /film/i }, { Location_Name: 1 })",
        "deepseek answer": "db.Locations.find({Location_Name: {$regex: /film/i}}, {Location_Name: 1})"
    },
    {
        "question_id": 3407,
        "spider_question_id": 5905,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'",
        "question": "Find all the locations whose names contain the word 'film'.",
        "query": "db.Locations.find({Location_Name: {$regex: /film/i}}, {Location_Name: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Locations.find({Location_Name: {$regex: /film/i}}, {Location_Name: 1})"
    },
    {
        "question_id": 3408,
        "spider_question_id": 5910,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = 'bus'",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "query": "db.Tourist_Attractions.find({How_to_Get_There: 'bus'}, {Name: 1})",
        "gpt4 answer": "db.Tourist_Attractions.find({ How_to_Get_There: 'bus' }, { Name: 1 })",
        "deepseek answer": "db.Tourist_Attractions.find({How_to_Get_There: 'bus'}, {Name: 1})"
    },
    {
        "question_id": 3409,
        "spider_question_id": 5911,
        "db_id": "cre_Theme_park",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = 'bus'",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "query": "db.Tourist_Attractions.find({How_to_Get_There: 'bus'}, {Name: 1})",
        "gpt4 answer": "db.Tourist_Attractions.find({ How_to_Get_There: 'bus' }, { Name: 1 })",
        "deepseek answer": "db.Tourist_Attractions.find({How_to_Get_There: 'bus'}, {Name: 1})"
    },
    {
        "question_id": 3410,
        "spider_question_id": 5924,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk'",
        "question": "What are the details of the shops that can be accessed by walk?",
        "query": "db.Shops.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Shop_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction_details\" } }, { $unwind: \"$attraction_details\" }, { $match: { \"attraction_details.How_to_Get_There\": \"walk\" } }, { $project: { Shop_Details: 1 } } ])",
        "gpt4 answer": "db.Shops.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Shop_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction_details\" } }, { $unwind: \"$attraction_details\" }, { $match: { \"attraction_details.How_to_Get_There\": \"walk\" } }, { $project: { Shop_Details: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3411,
        "spider_question_id": 5925,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk'",
        "question": "Find the details of the shops that can be reached by walk.",
        "query": "db.Shops.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Shop_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.How_to_Get_There\": \"walk\" } }, { $project: { Shop_Details: 1 } } ])",
        "gpt4 answer": "db.Shops.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Shop_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attractions\" } }, { $match: { \"attractions.How_to_Get_There\": \"walk\" } }, { $project: { Shop_Details: 1 } } ])",
        "deepseek answer": "db.Shops.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Shop_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.How_to_Get_There\": \"walk\" } }, { $project: { Shop_Details: 1 } } ])"
    },
    {
        "question_id": 3412,
        "spider_question_id": 5926,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = 'US museum'",
        "question": "What is the name of the staff that is in charge of the attraction named 'US museum'?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.Name\": \"US museum\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $unwind: \"$attraction\" }, { $match: {\"attraction.Name\": \"US museum\"} }, { $project: { \"Name\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.Name\": \"US museum\" } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 3413,
        "spider_question_id": 5927,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = 'US museum'",
        "question": "Tell me the name of the staff in charge of the attraction called 'US museum'.",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.Name\": \"US museum\" } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.getCollection('Staff').aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.Name\": \"US museum\" } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.Name\": \"US museum\" } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 3414,
        "spider_question_id": 5928,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "db.Street_Markets.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Market_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.How_to_Get_There\": { $in: [\"walk\", \"bus\"] } } }, { $project: { Market_Details: 1 } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $match: { How_to_Get_There: { $in: ['walk', 'bus'] } } }, { $lookup: { from: \"Street_Markets\", localField: \"Tourist_Attraction_ID\", foreignField: \"Market_ID\", as: \"market_details\" } }, { $unwind: \"$market_details\" }, { $project: { Market_Details: \"$market_details.Market_Details\" } } ])",
        "deepseek answer": "db.Street_Markets.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Market_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.How_to_Get_There\": { $in: [\"walk\", \"bus\"] } } }, { $project: { Market_Details: 1 } } ])"
    },
    {
        "question_id": 3415,
        "spider_question_id": 5929,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "db.Street_Markets.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Market_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.How_to_Get_There\": { $in: [\"walk\", \"bus\"] } } }, { $project: { Market_Details: 1 } } ])",
        "gpt4 answer": "db.Street_Markets.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Market_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction_details\" } }, { $match: { $or: [ { \"attraction_details.How_to_Get_There\": \"walk\" }, { \"attraction_details.How_to_Get_There\": \"bus\" } ] } }, { $project: { Market_Details: 1 } } ])",
        "deepseek answer": "db.Street_Markets.aggregate([ { $lookup: { from: \"Tourist_Attractions\", localField: \"Market_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $match: { \"attraction.How_to_Get_There\": { $in: [\"walk\", \"bus\"] } } }, { $project: { Market_Details: 1 } } ])"
    },
    {
        "question_id": 3416,
        "spider_question_id": 5932,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'",
        "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
        "query": "db.Visitors.aggregate([ { $match: { Tourist_Details: \"Vincent\" } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"visits\" } }, { $unwind: \"$visits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"visits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attractions\" } }, { $unwind: \"$attractions\" }, { $project: { Name: \"$attractions.Name\" } } ])",
        "gpt4 answer": "db.Visitors.aggregate([ { $match: { Tourist_Details: 'Vincent' } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"visitor_visits\" } }, { $unwind: \"$visitor_visits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"visitor_visits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction_info\" } }, { $unwind: \"$attraction_info\" }, { $project: { Name: \"$attraction_info.Name\" } } ])",
        "deepseek answer": "db.Visitors.aggregate([ { $match: { Tourist_Details: \"Vincent\" } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"visits\" } }, { $unwind: \"$visits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"visits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attractions\" } }, { $unwind: \"$attractions\" }, { $project: { Name: \"$attractions.Name\" } } ])"
    },
    {
        "question_id": 3417,
        "spider_question_id": 5933,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "query": "db.Visitors.aggregate([ { $match: { Tourist_Details: \"Vincent\" } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"visits\" } }, { $unwind: \"$visits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"visits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attractions\" } }, { $unwind: \"$attractions\" }, { $project: { Name: \"$attractions.Name\" } } ])",
        "gpt4 answer": "db.Visitors.aggregate([ { $match: { Tourist_Details: 'Vincent' } }, { $lookup: { from: 'Visits', localField: 'Tourist_ID', foreignField: 'Tourist_ID', as: 'visits' } }, { $unwind: '$visits' }, { $lookup: { from: 'Tourist_Attractions', localField: 'visits.Tourist_Attraction_ID', foreignField: 'Tourist_Attraction_ID', as: 'attractions' } }, { $unwind: '$attractions' }, { $project: { Name: '$attractions.Name' } } ])",
        "deepseek answer": "db.Visitors.aggregate([ { $match: { Tourist_Details: \"Vincent\" } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"visits\" } }, { $unwind: \"$visits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"visits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attractions\" } }, { $unwind: \"$attractions\" }, { $project: { Name: \"$attractions.Name\" } } ])"
    },
    {
        "question_id": 3418,
        "spider_question_id": 5940,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "query": "db.Hotels.find({}, {hotel_id: 1, star_rating_code: 1}).sort({price_range: 1})",
        "gpt4 answer": "db.Hotels.find({}, { hotel_id: 1, star_rating_code: 1 }).sort({ price_range: 1 })",
        "deepseek answer": "db.Hotels.find({}, {hotel_id: 1, star_rating_code: 1}).sort({price_range: 1})"
    },
    {
        "question_id": 3419,
        "spider_question_id": 5941,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT hotel_id , star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "query": "db.Hotels.aggregate([ { $project: { hotel_id: 1, star_rating_code: 1 } }, { $sort: { price_range: 1 } } ])",
        "gpt4 answer": "db.Hotels.find({}, { hotel_id: 1, star_rating_code: 1 }).sort({ price_range: 1 })",
        "deepseek answer": "db.Hotels.aggregate([ { $project: { hotel_id: 1, star_rating_code: 1 } }, { $sort: { price_range: 1 } } ])"
    },
    {
        "question_id": 3420,
        "spider_question_id": 5946,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "query": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { How_to_Get_There: \"$_id\" } }])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { How_to_Get_There: \"$_id\" } } ])",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { How_to_Get_There: \"$_id\" } }])"
    },
    {
        "question_id": 3421,
        "spider_question_id": 5947,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "query": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { How_to_Get_There: \"$_id\" } }])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { How_to_Get_There: \"$_id\" } }])"
    },
    {
        "question_id": 3422,
        "spider_question_id": 5948,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "query": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$Attraction_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Attraction_Types\", localField: \"_id\", foreignField: \"Attraction_Type_Code\", as: \"attraction_type_info\" } }, { $unwind: \"$attraction_type_info\" }, { $project: { Attraction_Type_Description: \"$attraction_type_info.Attraction_Type_Description\", Attraction_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$Attraction_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Ref_Attraction_Types\", localField: \"_id\", foreignField: \"Attraction_Type_Code\", as: \"attraction_type_info\" } }, { $unwind: \"$attraction_type_info\" }, { $project: { Attraction_Type_Description: \"$attraction_type_info.Attraction_Type_Description\", Attraction_Type_Code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3423,
        "spider_question_id": 5949,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its attraction type description and code.",
        "query": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$Attraction_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $lookup: { from: \"Ref_Attraction_Types\", localField: \"_id\", foreignField: \"Attraction_Type_Code\", as: \"type_info\" } }, { $unwind: \"$type_info\" }, { $project: { \"Attraction_Type_Description\": \"$type_info.Attraction_Type_Description\", \"Attraction_Type_Code\": \"$_id\" } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$Attraction_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $lookup: { from: \"Ref_Attraction_Types\", localField: \"_id\", foreignField: \"Attraction_Type_Code\", as: \"type_info\" } }, { $unwind: \"$type_info\" }, { $project: { \"Attraction_Type_Description\": \"$type_info.Attraction_Type_Description\", \"Attraction_Type_Code\": \"$_id\" } }, { $limit: 1 } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3424,
        "spider_question_id": 5950,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "query": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3425,
        "spider_question_id": 5951,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "query": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", NumberOfAttractions: { $sum: 1 } } }, { $project: { How_to_Get_There: \"$_id\", NumberOfAttractions: 1 } } ])",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $group: { _id: \"$How_to_Get_There\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3426,
        "spider_question_id": 5954,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "query": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"visits\" } }, { $match: { \"visits.1\": { $exists: true } } }, { $project: { Name: 1, Tourist_Attraction_ID: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"visits\" } }, { $match: { \"visits.1\": { $exists: true } } }, { $project: { Name: 1, Tourist_Attraction_ID: 1 } } ])"
    },
    {
        "question_id": 3427,
        "spider_question_id": 5955,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) >= 2",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "query": "db.Visits.aggregate([ { $group: { _id: \"$Tourist_Attraction_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"_id\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $project: { Name: { $arrayElemAt: [\"$attraction.Name\", 0] }, Tourist_Attraction_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.Visits.aggregate([ { $group: { _id: \"$Tourist_Attraction_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"_id\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $project: { Tourist_Attraction_ID: \"$_id\", Name: { $arrayElemAt: [ \"$attraction.Name\", 0 ] } } } ])",
        "deepseek answer": "db.Visits.aggregate([ { $group: { _id: \"$Tourist_Attraction_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"_id\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $project: { Name: { $arrayElemAt: [\"$attraction.Name\", 0] }, Tourist_Attraction_ID: \"$_id\" } } ])"
    },
    {
        "question_id": 3428,
        "spider_question_id": 5956,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "query": "db.Visits.aggregate([ { $group: { _id: \"$Tourist_Attraction_ID\", count: { $sum: 1 } } }, { $match: { count: { $lte: 1 } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"_id\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $project: { Name: { $arrayElemAt: [\"$attraction.Name\", 0] }, Tourist_Attraction_ID: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Visits.aggregate([ { $group: { _id: \"$Tourist_Attraction_ID\", count: { $sum: 1 } } }, { $match: { count: { $lte: 1 } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"_id\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction\" } }, { $project: { Name: { $arrayElemAt: [\"$attraction.Name\", 0] }, Tourist_Attraction_ID: \"$_id\" } } ])"
    },
    {
        "question_id": 3429,
        "spider_question_id": 5957,
        "db_id": "cre_Theme_park",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*) <= 1",
        "question": "What are the names and ids of the tourist attractions that are visited at most once?",
        "query": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"visits\" } }, { $match: { \"visits\": { $size: 1 } } }, { $project: { Name: 1, Tourist_Attraction_ID: 1 } } ])",
        "gpt4 answer": "db.Visits.aggregate([ { $group: { _id: \"$Tourist_Attraction_ID\", visitCount: { $sum: 1 } } }, { $match: { visitCount: { $lte: 1 } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"_id\", foreignField: \"Tourist_Attraction_ID\", as: \"attractions\" } }, { $unwind: \"$attractions\" }, { $project: { _id: \"$attractions.Tourist_Attraction_ID\", Name: \"$attractions.Name\" } } ])",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"visits\" } }, { $match: { \"visits\": { $size: 1 } } }, { $project: { Name: 1, Tourist_Attraction_ID: 1 } } ])"
    },
    {
        "question_id": 3430,
        "spider_question_id": 5960,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "query": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Tourist_Attraction_Features\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"Attraction_Features\" } }, { $unwind: \"$Attraction_Features\" }, { $lookup: { from: \"Features\", localField: \"Attraction_Features.Feature_ID\", foreignField: \"Feature_ID\", as: \"Feature_Details\" } }, { $unwind: \"$Feature_Details\" }, { $match: { $or: [ { \"Feature_Details.Feature_Details\": \"park\" }, { \"Feature_Details.Feature_Details\": \"shopping\" } ] } }, { $group: { _id: \"$Tourist_Attraction_ID\", Name: { $first: \"$Name\" } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Tourist_Attraction_Features\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"Attraction_Features\" } }, { $unwind: \"$Attraction_Features\" }, { $lookup: { from: \"Features\", localField: \"Attraction_Features.Feature_ID\", foreignField: \"Feature_ID\", as: \"Feature_Details\" } }, { $unwind: \"$Feature_Details\" }, { $match: { $or: [ { \"Feature_Details.Feature_Details\": \"park\" }, { \"Feature_Details.Feature_Details\": \"shopping\" } ] } }, { $group: { _id: \"$Tourist_Attraction_ID\", Name: { $first: \"$Name\" } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3431,
        "spider_question_id": 5961,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "query": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Tourist_Attraction_Features\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction_features\" } }, { $unwind: \"$attraction_features\" }, { $lookup: { from: \"Features\", localField: \"attraction_features.Feature_ID\", foreignField: \"Feature_ID\", as: \"feature_details\" } }, { $unwind: \"$feature_details\" }, { $match: { $or: [ { \"feature_details.Feature_Details\": \"park\" }, { \"feature_details.Feature_Details\": \"shopping\" } ] } }, { $group: { _id: \"$Tourist_Attraction_ID\", Name: { $first: \"$Name\" } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Tourist_Attraction_Features\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"attraction_features\" } }, { $unwind: \"$attraction_features\" }, { $lookup: { from: \"Features\", localField: \"attraction_features.Feature_ID\", foreignField: \"Feature_ID\", as: \"feature_details\" } }, { $unwind: \"$feature_details\" }, { $match: { $or: [ { \"feature_details.Feature_Details\": \"park\" }, { \"feature_details.Feature_Details\": \"shopping\" } ] } }, { $group: { _id: \"$Tourist_Attraction_ID\", Name: { $first: \"$Name\" } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3432,
        "spider_question_id": 5963,
        "db_id": "cre_Theme_park",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '254 Ottilie Junction' OR T2.How_to_Get_There = 'bus'",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "query": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Locations\", localField: \"Location_ID\", foreignField: \"Location_ID\", as: \"location_info\" } }, { $match: { $or: [ {\"location_info.Address\": \"254 Ottilie Junction\"}, {\"How_to_Get_There\": \"bus\"} ] } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Locations\", localField: \"Location_ID\", foreignField: \"Location_ID\", as: \"location_info\" } }, { $match: { $or: [ {\"location_info.Address\": \"254 Ottilie Junction\"}, {\"How_to_Get_There\": \"bus\"} ] } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 3433,
        "spider_question_id": 5966,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Rosalind'",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "query": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"VisitsInfo\" } }, { $lookup: { from: \"Visitors\", localField: \"VisitsInfo.Tourist_ID\", foreignField: \"Tourist_ID\", as: \"VisitorInfo\" } }, { $match: { \"VisitorInfo.Tourist_Details\": \"Alison\" } }, { $project: { Name: 1, \"VisitorInfo.Tourist_Details\": 1 } }, { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"VisitsInfoRosalind\" } }, { $lookup: { from: \"Visitors\", localField: \"VisitsInfoRosalind.Tourist_ID\", foreignField: \"Tourist_ID\", as: \"VisitorInfoRosalind\" } }, { $match: { \"VisitorInfoRosalind.Tourist_Details\": { $ne: \"Rosalind\" } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Tourist_Attractions.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"VisitsInfo\" } }, { $lookup: { from: \"Visitors\", localField: \"VisitsInfo.Tourist_ID\", foreignField: \"Tourist_ID\", as: \"VisitorInfo\" } }, { $match: { \"VisitorInfo.Tourist_Details\": \"Alison\" } }, { $project: { Name: 1, \"VisitorInfo.Tourist_Details\": 1 } }, { $lookup: { from: \"Visits\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"VisitsInfoRosalind\" } }, { $lookup: { from: \"Visitors\", localField: \"VisitsInfoRosalind.Tourist_ID\", foreignField: \"Tourist_ID\", as: \"VisitorInfoRosalind\" } }, { $match: { \"VisitorInfoRosalind.Tourist_Details\": { $ne: \"Rosalind\" } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3434,
        "spider_question_id": 5967,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Rosalind'",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "query": "db.Visitors.aggregate([ { $match: { Tourist_Details: \"Alison\" } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"AlisonVisits\" } }, { $unwind: \"$AlisonVisits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"AlisonVisits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"Attractions\" } }, { $unwind: \"$Attractions\" }, { $group: { _id: \"$Attractions.Name\" } }, { $lookup: { from: \"Visits\", let: { attractionName: \"$_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$Tourist_ID\", \"Rosalind\"] } ] } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"RosalindAttractions\" } }, { $match: { $expr: { $eq: [\"$RosalindAttractions.Name\", \"$$attractionName\"] } } } ], as: \"RosalindVisits\" } }, { $match: { RosalindVisits: [] } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Visitors.aggregate([ { $match: { Tourist_Details: \"Alison\" } }, { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"AlisonVisits\" } }, { $unwind: \"$AlisonVisits\" }, { $lookup: { from: \"Tourist_Attractions\", localField: \"AlisonVisits.Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"Attractions\" } }, { $unwind: \"$Attractions\" }, { $group: { _id: \"$Attractions.Name\" } }, { $lookup: { from: \"Visits\", let: { attractionName: \"$_id\" }, pipeline: [ { $match: { $expr: { $and: [ { $eq: [\"$Tourist_ID\", \"Rosalind\"] } ] } } }, { $lookup: { from: \"Tourist_Attractions\", localField: \"Tourist_Attraction_ID\", foreignField: \"Tourist_Attraction_ID\", as: \"RosalindAttractions\" } }, { $match: { $expr: { $eq: [\"$RosalindAttractions.Name\", \"$$attractionName\"] } } } ], as: \"RosalindVisits\" } }, { $match: { RosalindVisits: [] } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3435,
        "spider_question_id": 5968,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "question": "How many tourists did not make any visit?",
        "query": "db.Visitors.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"Visits\" } }, { $match: { Visits: { $size: 0 } } }, { $count: \"NoVisits\" } ])",
        "gpt4 answer": "db.Visitors.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"Visits\" } }, { $match: { Visits: { $size: 0 } } }, { $count: \"NoVisits\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3436,
        "spider_question_id": 5969,
        "db_id": "cre_Theme_park",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "question": "Count the number of tourists who did not visit any place.",
        "query": "db.Visitors.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"VisitData\" } }, { $match: { \"VisitData\": { $size: 0 } } }, { $count: \"NoVisitsCount\" } ])",
        "gpt4 answer": "db.Visitors.aggregate([ { $lookup: { from: \"Visits\", localField: \"Tourist_ID\", foreignField: \"Tourist_ID\", as: \"VisitData\" } }, { $match: { \"VisitData\": { $size: 0 } } }, { $count: \"NoVisitsCount\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3437,
        "spider_question_id": 5973,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT gtype) FROM Video_games",
        "question": "What is the count of different game types?",
        "query": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\" }}, { $count: \"distinct_game_types\" } ])",
        "gpt4 answer": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\" }}, { $count: \"distinct_game_types\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3438,
        "spider_question_id": 5976,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gname , gtype FROM Video_games ORDER BY gname",
        "question": "Show all video games and their types in the order of their names.",
        "query": "db.Video_Games.find({}, { GName: 1, GType: 1 }).sort({ GName: 1 })",
        "gpt4 answer": "db.Video_Games.find({}, { GName: 1, GType: 1 }).sort({ GName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3439,
        "spider_question_id": 5977,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gname , gtype FROM Video_games ORDER BY gname",
        "question": "What are the names of all the video games and their types in alphabetical order?",
        "query": "db.Video_Games.find({}, {GName: 1, GType: 1}).sort({GName: 1})",
        "gpt4 answer": "db.Video_Games.find({}, {GName: 1, GType: 1}).sort({GName: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3440,
        "spider_question_id": 5978,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT gname FROM Video_games WHERE gtype = 'Collectible card game'",
        "question": "Show all video games with type Collectible card game.",
        "query": "db.Video_Games.find({ GType: \"Collectible card game\" }, { GName: 1 })",
        "gpt4 answer": "db.Video_Games.find({ GType: \"Collectible card game\" }, { GName: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3441,
        "spider_question_id": 5979,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT gname FROM Video_games WHERE gtype = 'Collectible card game'",
        "question": "What are the names of all video games that are collectible cards?",
        "query": "db.Video_Games.find({ GType: 'Collectible card game' }, { GName: 1 })",
        "gpt4 answer": "db.Video_Games.find({ GType: 'Collectible card game' }, { GName: 1 })",
        "deepseek answer": "db.Video_Games.find({ GType: 'Collectible card game' }, { GName: 1 })"
    },
    {
        "question_id": 3442,
        "spider_question_id": 5980,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT gtype FROM Video_games WHERE gname = 'Call of Destiny'",
        "question": "What is the type of video game Call of Destiny.",
        "query": "db.Video_Games.findOne({GName: \"Call of Destiny\"}, {GType: 1})",
        "gpt4 answer": "db.Video_Games.find({ GName: 'Call of Destiny' }, { GType: 1 })",
        "deepseek answer": "db.Video_Games.findOne({GName: \"Call of Destiny\"}, {GType: 1})"
    },
    {
        "question_id": 3443,
        "spider_question_id": 5981,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT gtype FROM Video_games WHERE gname = 'Call of Destiny'",
        "question": "What type of game is Call of Destiny?",
        "query": "db.Video_Games.find( { GName: \"Call of Destiny\" }, { GType: 1 } )",
        "gpt4 answer": "db.Video_Games.findOne({ GName: \"Call of Destiny\" }, { GType: 1 })",
        "deepseek answer": "db.Video_Games.find( { GName: \"Call of Destiny\" }, { GType: 1 } )"
    },
    {
        "question_id": 3444,
        "spider_question_id": 5984,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gtype , count(*) FROM Video_games GROUP BY gtype",
        "question": "Show all video game types and the number of video games in each type.",
        "query": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\", count: { $sum: 1 } } }, { $project: { GType: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3445,
        "spider_question_id": 5985,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gtype , count(*) FROM Video_games GROUP BY gtype",
        "question": "What are the types of video games and how many are in each type?",
        "query": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\", count: { $sum: 1 } } }, { $project: { GType: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Video_Games.aggregate([ { $group: { _id: \"$GType\", count: { $sum: 1 } } }, { $project: { GType: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3446,
        "spider_question_id": 5990,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI'",
        "question": "Show ids for all students who live in CHI.",
        "query": "db.Student.find({city_code: 'CHI'}, {StuID: 1})",
        "gpt4 answer": "db.Student.find({ city_code: 'CHI' }, { StuID: 1 })",
        "deepseek answer": "db.Student.find({city_code: 'CHI'}, {StuID: 1})"
    },
    {
        "question_id": 3447,
        "spider_question_id": 5991,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI'",
        "question": "What are the ids of all students who live in CHI?",
        "query": "db.Student.find({city_code: 'CHI'}, {StuID: 1})",
        "gpt4 answer": "db.Student.find({ city_code: 'CHI' }, { StuID: 1 })",
        "deepseek answer": "db.Student.find({city_code: 'CHI'}, {StuID: 1})"
    },
    {
        "question_id": 3448,
        "spider_question_id": 5992,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE Advisor = 1121",
        "question": "Show ids for all students who have advisor 1121.",
        "query": "db.Student.find({Advisor: 1121}, {StuID: 1})",
        "gpt4 answer": "db.Student.find({ Advisor: 1121 }, { StuID: 1 })",
        "deepseek answer": "db.Student.find({Advisor: 1121}, {StuID: 1})"
    },
    {
        "question_id": 3449,
        "spider_question_id": 5993,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE Advisor = 1121",
        "question": "What are the ids of all students who have advisor number 1121?",
        "query": "db.Student.find({Advisor: 1121}, {StuID: 1})",
        "gpt4 answer": "db.Student.find({Advisor: 1121}, { StuID: 1})",
        "deepseek answer": "db.Student.find({Advisor: 1121}, {StuID: 1})"
    },
    {
        "question_id": 3450,
        "spider_question_id": 5994,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Fname FROM Student WHERE Major = 600",
        "question": "Show first name for all students with major 600.",
        "query": "db.Student.find({Major: 600}, {Fname: 1})",
        "gpt4 answer": "db.Student.find({Major: 600}, {Fname: 1})",
        "deepseek answer": "db.Student.find({Major: 600}, {Fname: 1})"
    },
    {
        "question_id": 3451,
        "spider_question_id": 5995,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Fname FROM Student WHERE Major = 600",
        "question": "What are the first names for all students who are from the major numbered 600?",
        "query": "db.Student.find({Major: 600}, {Fname: 1})",
        "gpt4 answer": "db.Student.find({ Major: 600 }, { Fname: 1 })",
        "deepseek answer": "db.Student.find({Major: 600}, {Fname: 1})"
    },
    {
        "question_id": 3452,
        "spider_question_id": 5996,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT major , avg(age) , min(age) , max(age) FROM Student GROUP BY major",
        "question": "Show the average, minimum, and maximum age for different majors.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", averageAge: { $avg: \"$Age\" }, minimumAge: { $min: \"$Age\" }, maximumAge: { $max: \"$Age\" } } }, { $project: { Major: \"$_id\", AverageAge: \"$averageAge\", MinimumAge: \"$minimumAge\", MaximumAge: \"$maximumAge\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } } } ])"
    },
    {
        "question_id": 3453,
        "spider_question_id": 5997,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT major , avg(age) , min(age) , max(age) FROM Student GROUP BY major",
        "question": "What are the average, minimum, and max ages for each of the different majors?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Major\", avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", average_age: { $avg: \"$Age\" }, minimum_age: { $min: \"$Age\" }, maximum_age: { $max: \"$Age\" } } }, { $project: { Major: \"$_id\", average_age: 1, minimum_age: 1, maximum_age: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Major\", avgAge: { $avg: \"$Age\" }, minAge: { $min: \"$Age\" }, maxAge: { $max: \"$Age\" } } } ])"
    },
    {
        "question_id": 3454,
        "spider_question_id": 5998,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2",
        "question": "Show all advisors who have at least two students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", studentCount: { $sum: 1 } } }, { $match: { studentCount: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 3455,
        "spider_question_id": 5999,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) >= 2",
        "question": "What are the advisors",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Advisor: \"$_id\" } } ])",
        "deepseek answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Advisor: \"$_id\" } } ])"
    },
    {
        "question_id": 3456,
        "spider_question_id": 6004,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
        "question": "List ids for all student who are on scholarship.",
        "query": "db.SportsInfo.find({ OnScholarship: 'Y' }, { StuID: 1 })",
        "gpt4 answer": "db.SportsInfo.find({ OnScholarship: 'Y' }, { StuID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3457,
        "spider_question_id": 6005,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
        "question": "What are the ids for all sporty students who are on scholarship?",
        "query": "db.SportsInfo.find({ OnScholarship: 'Y' }, { StuID: 1 })",
        "gpt4 answer": "db.SportsInfo.find({ OnScholarship: 'Y' }, { StuID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3458,
        "spider_question_id": 6008,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "question": "How many games are played for all students?",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])"
    },
    {
        "question_id": 3459,
        "spider_question_id": 6009,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo",
        "question": "What is the total number of games played?",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])"
    },
    {
        "question_id": 3460,
        "spider_question_id": 6010,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = 'Football' AND onscholarship = 'Y'",
        "question": "How many games are played for all football games by students on scholarship?",
        "query": "db.SportsInfo.aggregate([ { $match: { SportName: \"Football\", OnScholarship: \"Y\" } }, { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $match: { SportName: 'Football', OnScholarship: 'Y' } }, { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $match: { SportName: \"Football\", OnScholarship: \"Y\" } }, { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])"
    },
    {
        "question_id": 3461,
        "spider_question_id": 6011,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname = 'Football' AND onscholarship = 'Y'",
        "question": "What is the total number of all football games played by scholarship students?",
        "query": "db.SportsInfo.aggregate([ { $match: { SportName: \"Football\", OnScholarship: \"Y\" } }, { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $match: { SportName: 'Football', OnScholarship: 'Y' } }, { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $match: { SportName: \"Football\", OnScholarship: \"Y\" } }, { $group: { _id: null, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { totalGamesPlayed: 1 } } ])"
    },
    {
        "question_id": 3462,
        "spider_question_id": 6012,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sportname , count(*) FROM Sportsinfo GROUP BY sportname",
        "question": "Show all sport name and the number of students.",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: \"$SportName\", count: { $sum: 1 } } }, { $project: { sportname: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$SportName\", NumberOfStudents: { $sum: 1 } } }, { $project: { SportName: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$SportName\", count: { $sum: 1 } } }, { $project: { sportname: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3463,
        "spider_question_id": 6013,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sportname , count(*) FROM Sportsinfo GROUP BY sportname",
        "question": "How many students play each sport?",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: \"$SportName\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$SportName\", numberOfStudents: { $sum: 1 } } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$SportName\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3464,
        "spider_question_id": 6014,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT StuID , count(*) , sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "question": "Show all student IDs with the number of sports and total number of games played",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 }, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", numOfSports: { $sum: 1 }, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } }, { $project: { StuID: \"$_id\", numOfSports: 1, totalGamesPlayed: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 }, totalGamesPlayed: { $sum: \"$GamesPlayed\" } } } ])"
    },
    {
        "question_id": 3465,
        "spider_question_id": 6015,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT StuID , count(*) , sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
        "question": "What are the ids of all students along with how many sports and games did they play?",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 }, gamesPlayed: { $sum: \"$GamesPlayed\" } } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", count: { $sum: 1 }, gamesPlayed: { $sum: \"$GamesPlayed\" } } } ])"
    },
    {
        "question_id": 3466,
        "spider_question_id": 6016,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10",
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", totalHours: { $sum: \"$HoursPerWeek\" } } }, { $match: { totalHours: { $gt: 10 } } }, { $project: { StuID: \"$_id\" } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", totalHours: { $sum: \"$HoursPerWeek\" } } }, { $match: { totalHours: { $gt: 10 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", totalHours: { $sum: \"$HoursPerWeek\" } } }, { $match: { totalHours: { $gt: 10 } } }, { $project: { StuID: \"$_id\" } } ])"
    },
    {
        "question_id": 3467,
        "spider_question_id": 6017,
        "db_id": "game_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek) > 10",
        "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
        "query": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", totalHours: { $sum: \"$HoursPerWeek\" } } }, { $match: { totalHours: { $gt: 10 } } }, { $project: { StuID: \"$_id\" } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", totalHoursPerWeek: { $sum: \"$HoursPerWeek\" } } }, { $match: { totalHoursPerWeek: { $gt: 10 } } }, { $project: { StuID: \"$_id\" } } ])",
        "deepseek answer": "db.SportsInfo.aggregate([ { $group: { _id: \"$StuID\", totalHours: { $sum: \"$HoursPerWeek\" } } }, { $match: { totalHours: { $gt: 10 } } }, { $project: { StuID: \"$_id\" } } ])"
    },
    {
        "question_id": 3468,
        "spider_question_id": 6020,
        "db_id": "game_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "question": "Which sport has most number of students on scholarship?",
        "query": "db.SportsInfo.aggregate([ { $match: { OnScholarship: 'Y' }}, { $group: { _id: \"$SportName\", numberOfStudents: { $sum: 1 } }}, { $sort: { numberOfStudents: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $match: { OnScholarship: 'Y' }}, { $group: { _id: \"$SportName\", numberOfStudents: { $sum: 1 } }}, { $sort: { numberOfStudents: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3469,
        "spider_question_id": 6021,
        "db_id": "game_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the sport with the most scholarship students?",
        "query": "db.SportsInfo.aggregate([ { $match: { OnScholarship: 'Y' } }, { $group: { _id: \"$SportName\", scholarshipCount: { $sum: 1 } } }, { $sort: { scholarshipCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $match: { OnScholarship: 'Y' } }, { $group: { _id: \"$SportName\", scholarshipCount: { $sum: 1 } } }, { $sort: { scholarshipCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3470,
        "spider_question_id": 6024,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
        "question": "Show student ids who are on scholarship and have major 600.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsData\" } }, { $match: { Major: 600, \"SportsData.OnScholarship\": \"Y\" } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsData\" } }, { $match: { Major: 600, \"SportsData.OnScholarship\": \"Y\" } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3471,
        "spider_question_id": 6025,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
        "question": "What are the student ids for those on scholarship in major number 600?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsInfo\" } }, { $unwind: \"$SportsInfo\" }, { $match: { \"Major\": 600, \"SportsInfo.OnScholarship\": \"Y\" } }, { $project: { \"StuID\": 1, \"_id\": 0 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsInfo\" } }, { $unwind: \"$SportsInfo\" }, { $match: { \"Major\": 600, \"SportsInfo.OnScholarship\": \"Y\" } }, { $project: { \"StuID\": 1, \"_id\": 0 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3472,
        "spider_question_id": 6026,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = 'Football'",
        "question": "Show student ids who are female and play football.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"Sports\" } }, { $match: { \"Sex\": \"F\", \"Sports.SportName\": \"Football\" } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"Sports\" } }, { $match: { \"Sex\": \"F\", \"Sports.SportName\": \"Football\" } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3473,
        "spider_question_id": 6030,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = 'David' AND T2.Lname = 'Shieber'",
        "question": "Show total hours per week and number of games played for student David Shieber.",
        "query": "db.Student.aggregate([ { $match: { Fname: 'David', LName: 'Shieber' } }, { $lookup: { from: 'SportsInfo', localField: 'StuID', foreignField: 'StuID', as: 'SportsDetails' } }, { $unwind: '$SportsDetails' }, { $group: { _id: '$StuID', TotalHoursPerWeek: { $sum: '$SportsDetails.HoursPerWeek' }, TotalGamesPlayed: { $sum: '$SportsDetails.GamesPlayed' } } }, { $project: { TotalHoursPerWeek: 1, TotalGamesPlayed: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Fname: 'David', LName: 'Shieber' } }, { $lookup: { from: 'SportsInfo', localField: 'StuID', foreignField: 'StuID', as: 'SportsDetails' } }, { $unwind: '$SportsDetails' }, { $group: { _id: '$StuID', TotalHoursPerWeek: { $sum: '$SportsDetails.HoursPerWeek' }, TotalGamesPlayed: { $sum: '$SportsDetails.GamesPlayed' } } }, { $project: { TotalHoursPerWeek: 1, TotalGamesPlayed: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3474,
        "spider_question_id": 6032,
        "db_id": "game_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20",
        "question": "Show total hours per week and number of games played for students under 20.",
        "query": "db.Student.aggregate([ { $match: { Age: { $lt: 20 } } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsData\" } }, { $unwind: \"$SportsData\" }, { $group: { _id: null, totalHoursPerWeek: { $sum: \"$SportsData.HoursPerWeek\" }, totalGamesPlayed: { $sum: \"$SportsData.GamesPlayed\" } } }, { $project: { totalHoursPerWeek: 1, totalGamesPlayed: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Age: { $lt: 20 } } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsData\" } }, { $unwind: \"$SportsData\" }, { $group: { _id: null, totalHoursPerWeek: { $sum: \"$SportsData.HoursPerWeek\" }, totalGamesPlayed: { $sum: \"$SportsData.GamesPlayed\" } } }, { $project: { totalHoursPerWeek: 1, totalGamesPlayed: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3475,
        "spider_question_id": 6033,
        "db_id": "game_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(hoursperweek) , sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20",
        "question": "What is the total number of hours per week and number of games played by students under 20?",
        "query": "db.Student.aggregate([ { $match: { Age: { $lt: 20 } } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports_info\" } }, { $unwind: \"$sports_info\" }, { $group: { _id: null, totalHoursPerWeek: { $sum: \"$sports_info.HoursPerWeek\" }, totalGamesPlayed: { $sum: \"$sports_info.GamesPlayed\" } } }, { $project: { totalHoursPerWeek: 1 , totalGamesPlayed:1} } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Age: { $lt: 20 } } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportsInfo\" } }, { $unwind: \"$SportsInfo\" }, { $group: { _id: null, totalHoursPerWeek: { $sum: \"$SportsInfo.HoursPerWeek\" }, totalGamesPlayed: { $sum: \"$SportsInfo.GamesPlayed\" } } }, { $project: { totalHoursPerWeek: 1, totalGamesPlayed: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $match: { Age: { $lt: 20 } } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports_info\" } }, { $unwind: \"$sports_info\" }, { $group: { _id: null, totalHoursPerWeek: { $sum: \"$sports_info.HoursPerWeek\" }, totalGamesPlayed: { $sum: \"$sports_info.GamesPlayed\" } } }, { $project: { totalHoursPerWeek: 1 , totalGamesPlayed:1} } ])"
    },
    {
        "question_id": 3476,
        "spider_question_id": 6038,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "question": "Show ids of students who play video game and play sports.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"plays_games\" } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports_info\" } }, { $match: { \"plays_games\": { $ne: [] }, \"sports_info\": { $ne: [] } } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"games\" } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports\" } }, { $match: { \"games.0\": { $exists: true }, \"sports.0\": { $exists: true } } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"plays_games\" } }, { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports_info\" } }, { $match: { \"plays_games\": { $ne: [] }, \"sports_info\": { $ne: [] } } }, { $project: { StuID: 1 } } ])"
    },
    {
        "question_id": 3477,
        "spider_question_id": 6039,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
        "question": "What are the ids of all students who played video games and sports?",
        "query": "db.SportsInfo.aggregate([ { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"games_played\" } }, { $match: { \"games_played\": { $ne: [] } } }, { $group: { _id: \"$StuID\" } }, { $project: { StuID: \"$_id\" } } ])",
        "gpt4 answer": "db.SportsInfo.aggregate([ { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"games_played\" } }, { $match: { \"games_played\": { $ne: [] } } }, { $group: { _id: \"$StuID\" } }, { $project: { StuID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3478,
        "spider_question_id": 6040,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gameid , sum(hours_played) FROM Plays_games GROUP BY gameid",
        "question": "Show all game ids and the number of hours played.",
        "query": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } } ])",
        "gpt4 answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $project: { GameID: \"$_id\", totalHoursPlayed: 1 } } ])",
        "deepseek answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } } ])"
    },
    {
        "question_id": 3479,
        "spider_question_id": 6041,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gameid , sum(hours_played) FROM Plays_games GROUP BY gameid",
        "question": "What are ids and total number of hours played for each game?",
        "query": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } } ])",
        "gpt4 answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", total_hours_played: { $sum: \"$Hours_Played\" } }} ])",
        "deepseek answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } } ])"
    },
    {
        "question_id": 3480,
        "spider_question_id": 6042,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Stuid , sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "question": "Show all student ids and the number of hours played.",
        "query": "db.Plays_Games.aggregate([ { $group: { _id: \"$StuID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $project: { _id: 1, totalHoursPlayed: 1 } } ])",
        "gpt4 answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$StuID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $project: { StuID: \"$_id\", totalHoursPlayed: 1 } } ])",
        "deepseek answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$StuID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $project: { _id: 1, totalHoursPlayed: 1 } } ])"
    },
    {
        "question_id": 3481,
        "spider_question_id": 6043,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Stuid , sum(hours_played) FROM Plays_games GROUP BY Stuid",
        "question": "What are the ids of all students and number of hours played?",
        "query": "db.Plays_Games.aggregate([ { $group: { _id: \"$StuID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } } ])",
        "gpt4 answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$StuID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $project: { StuID: \"$_id\", totalHoursPlayed: 1 } } ])",
        "deepseek answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$StuID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } } ])"
    },
    {
        "question_id": 3482,
        "spider_question_id": 6044,
        "db_id": "game_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "question": "Show the game name that has most number of hours played.",
        "query": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$game_info.GName\", totalHours: { $sum: \"$Hours_Played\" } } }, { $sort: { totalHours: -1 } }, { $limit: 1 }, { $project: { gname: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$game_info.GName\", totalHours: { $sum: \"$Hours_Played\" } } }, { $sort: { totalHours: -1 } }, { $limit: 1 }, { $project: { gname: \"$_id\" } } ])"
    },
    {
        "question_id": 3483,
        "spider_question_id": 6045,
        "db_id": "game_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
        "question": "What is the name of the game that has been played the most?",
        "query": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$game_info.GName\", totalHours: { $sum: \"$Hours_Played\" } } }, { $sort: { totalHours: -1 } }, { $limit: 1 } , { $project: { gname: \"$_id\" } }])",
        "gpt4 answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $sort: { totalHoursPlayed: -1 } }, { $limit: 1 }, { $lookup: { from: \"Video_Games\", localField: \"_id\", foreignField: \"GameID\", as: \"gameInfo\" } }, { $project: { \"gameInfo.GName\": 1 } }, { $unwind: \"$gameInfo\" }, { $replaceRoot: { newRoot: \"$gameInfo\" } } ])",
        "deepseek answer": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$game_info.GName\", totalHours: { $sum: \"$Hours_Played\" } } }, { $sort: { totalHours: -1 } }, { $limit: 1 } , { $project: { gname: \"$_id\" } }])"
    },
    {
        "question_id": 3484,
        "spider_question_id": 6046,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000",
        "question": "Show all game names played by at least 1000 hours.",
        "query": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$game_info.GameID\", totalHours: { $sum: \"$Hours_Played\" }, gameName: { $first: \"$game_info.GName\" } } }, { $match: { totalHours: { $gte: 1000 } } }, { $project: { gameName: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$game_info.GameID\", totalHours: { $sum: \"$Hours_Played\" }, gameName: { $first: \"$game_info.GName\" } } }, { $match: { totalHours: { $gte: 1000 } } }, { $project: { gameName: 1 } } ])"
    },
    {
        "question_id": 3485,
        "spider_question_id": 6047,
        "db_id": "game_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000",
        "question": "What are the names of all the games that have been played for at least 1000 hours?",
        "query": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$GameID\", totalHours: { $sum: \"$Hours_Played\" }, gameName: { $first: \"$game_info.GName\" } } }, { $match: { totalHours: { $gte: 1000 } } }, { $project: { gameName: 1 } } ])",
        "gpt4 answer": "db.Plays_Games.aggregate([ { $group: { _id: \"$GameID\", totalHoursPlayed: { $sum: \"$Hours_Played\" } } }, { $match: { totalHoursPlayed: { $gte: 1000 } } }, { $lookup: { from: \"Video_Games\", localField: \"_id\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $project: { GName: \"$game_info.GName\" } } ])",
        "deepseek answer": "db.Plays_Games.aggregate([ { $lookup: { from: \"Video_Games\", localField: \"GameID\", foreignField: \"GameID\", as: \"game_info\" } }, { $unwind: \"$game_info\" }, { $group: { _id: \"$GameID\", totalHours: { $sum: \"$Hours_Played\" }, gameName: { $first: \"$game_info.GName\" } } }, { $match: { totalHours: { $gte: 1000 } } }, { $project: { gameName: 1 } } ])"
    },
    {
        "question_id": 3486,
        "spider_question_id": 6048,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
        "question": "Show all game names played by Linda Smith",
        "query": "db.Student.aggregate([ { $match: { LName: \"Smith\", Fname: \"Linda\" } }, { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"PlayedGames\" } }, { $unwind: \"$PlayedGames\" }, { $lookup: { from: \"Video_Games\", localField: \"PlayedGames.GameID\", foreignField: \"GameID\", as: \"GameNames\" } }, { $unwind: \"$GameNames\" }, { $project: { GName: \"$GameNames.GName\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { LName: \"Smith\", Fname: \"Linda\" } }, { $lookup: { from: \"Plays_Games\", localField: \"StuID\", foreignField: \"StuID\", as: \"PlayedGames\" } }, { $unwind: \"$PlayedGames\" }, { $lookup: { from: \"Video_Games\", localField: \"PlayedGames.GameID\", foreignField: \"GameID\", as: \"GameNames\" } }, { $unwind: \"$GameNames\" }, { $project: { GName: \"$GameNames.GName\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3487,
        "spider_question_id": 6050,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = 'Football' OR T1.SportName = 'Lacrosse'",
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportDetails\" } }, { $match: { \"SportDetails.SportName\": { $in: [\"Football\", \"Lacrosse\"] } } }, { $project: { LName: 1, Fname: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"SportDetails\" } }, { $match: { \"SportDetails.SportName\": { $in: [\"Football\", \"Lacrosse\"] } } }, { $project: { LName: 1, Fname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3488,
        "spider_question_id": 6051,
        "db_id": "game_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T2.lname , T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = 'Football' OR T1.SportName = 'Lacrosse'",
        "question": "What is the first and last name of all students who play Football or Lacrosse?",
        "query": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports_info\" } }, { $match: { \"sports_info.SportName\": { $in: [\"Football\", \"Lacrosse\"] } } }, { $project: { LName: 1, Fname: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"Sports\" } }, { $match: { \"Sports.SportName\": { $in: [\"Football\", \"Lacrosse\"] } } }, { $project: { LName: 1, Fname: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"SportsInfo\", localField: \"StuID\", foreignField: \"StuID\", as: \"sports_info\" } }, { $match: { \"sports_info.SportName\": { $in: [\"Football\", \"Lacrosse\"] } } }, { $project: { LName: 1, Fname: 1 } } ])"
    },
    {
        "question_id": 3489,
        "spider_question_id": 6056,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_name FROM customers",
        "question": "Find the name of all customers.",
        "query": "db.Customers.find({}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({}, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find({}, {customer_name: 1})"
    },
    {
        "question_id": 3490,
        "spider_question_id": 6057,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_name FROM customers",
        "question": "What are the names of all the customers?",
        "query": "db.Customers.find({}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({}, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find({}, {customer_name: 1})"
    },
    {
        "question_id": 3491,
        "spider_question_id": 6062,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE payment_method = 'Cash'",
        "question": "What are the names of customers who use payment method 'Cash'?",
        "query": "db.Customers.find({payment_method: 'Cash'}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({ payment_method: \"Cash\" }, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find({payment_method: 'Cash'}, {customer_name: 1})"
    },
    {
        "question_id": 3492,
        "spider_question_id": 6063,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE payment_method = 'Cash'",
        "question": "Which customers use 'Cash' for payment method? Return the customer names.",
        "query": "db.Customers.find({payment_method: 'Cash'}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({payment_method: 'Cash'}, {customer_name: 1})",
        "deepseek answer": "db.Customers.find({payment_method: 'Cash'}, {customer_name: 1})"
    },
    {
        "question_id": 3493,
        "spider_question_id": 6066,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "question": "Which payment method is used by most customers?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ {$group: {_id: \"$payment_method\", count: {$sum: 1}}}, {$sort: {count: -1}}, {$limit: 1}, {$project: { payment_method: \"$_id\"}} ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])"
    },
    {
        "question_id": 3494,
        "spider_question_id": 6067,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the payment method that is used most frequently.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { payment_method: \"$_id\" } } ])"
    },
    {
        "question_id": 3495,
        "spider_question_id": 6068,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "question": "What are the names of customers using the most popular payment method?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 }, customer_names: { $push: \"$customer_name\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $unwind: \"$customer_names\" }, { $project: { customer_name: \"$customer_names\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 }, customer_names: { $push: \"$customer_name\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $unwind: \"$customer_names\" }, { $project: { customer_name: \"$customer_names\" } } ])"
    },
    {
        "question_id": 3496,
        "spider_question_id": 6069,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "question": "Find the name of the customers who use the most frequently used payment method.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"payment_method\", as: \"customers\" } }, { $unwind: \"$customers\" }, { $project: { customer_name: \"$customers.customer_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$payment_method\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"payment_method\", as: \"customers\" } }, { $unwind: \"$customers\" }, { $project: { customer_name: \"$customers.customer_name\" } } ])"
    },
    {
        "question_id": 3497,
        "spider_question_id": 6072,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT product_details FROM products",
        "question": "What are the details of all products?",
        "query": "db.Products.find({}, {product_details: 1})",
        "gpt4 answer": "db.Products.find({}, {product_details: 1})",
        "deepseek answer": "db.Products.find({}, {product_details: 1})"
    },
    {
        "question_id": 3498,
        "spider_question_id": 6073,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT product_details FROM products",
        "question": "Return the the details of all products.",
        "query": "db.Products.find({}, {product_details: 1})",
        "gpt4 answer": "db.Products.find({}, {product_details: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3499,
        "spider_question_id": 6074,
        "db_id": "customers_and_addresses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%'",
        "question": "Find the name of all customers whose name contains 'Alex'.",
        "query": "db.Customers.find({customer_name: /Alex/}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({ customer_name: /Alex/ }, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find({customer_name: /Alex/}, {customer_name: 1})"
    },
    {
        "question_id": 3500,
        "spider_question_id": 6075,
        "db_id": "customers_and_addresses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%'",
        "question": "Which customer's name contains 'Alex'? Find the full name.",
        "query": "db.Customers.find({customer_name: /Alex/}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({ customer_name: /Alex/ }, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find({customer_name: /Alex/}, {customer_name: 1})"
    },
    {
        "question_id": 3501,
        "spider_question_id": 6076,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'",
        "question": "Find the detail of products whose detail contains the word 'Latte' or the word 'Americano'",
        "query": "db.Products.find( { product_details: { $regex: /Latte|Americano/, $options: 'i' } }, { product_details: 1 } )",
        "gpt4 answer": "db.Products.find( { product_details: { $regex: 'Latte|Americano', $options: 'i' } }, { product_details: 1 } )",
        "deepseek answer": "db.Products.find( { product_details: { $regex: /Latte|Americano/, $options: 'i' } }, { product_details: 1 } )"
    },
    {
        "question_id": 3502,
        "spider_question_id": 6077,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'",
        "question": "Which product's detail contains the word 'Latte' or 'Americano'? Return the full detail.",
        "query": "db.Products.find( { product_details: { $in: [/Latte/, /Americano/] } }, { product_details: 1 } )",
        "gpt4 answer": "db.Products.find({ product_details: { $regex: 'Latte|Americano', $options: 'i' } }, { product_details: 1 })",
        "deepseek answer": "db.Products.find( { product_details: { $in: [/Latte/, /Americano/] } }, { product_details: 1 } )"
    },
    {
        "question_id": 3503,
        "spider_question_id": 6078,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = 'Maudie Kertzmann'",
        "question": "What is the address content of the customer named 'Maudie Kertzmann'?",
        "query": "db.Customers.aggregate([ { $match: { customer_name: \"Maudie Kertzmann\" } }, { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $project: { address_content: \"$addresses.address_content\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: 'Maudie Kertzmann' } }, { $lookup: { from: 'Customer_Addresses', localField: 'customer_id', foreignField: 'customer_id', as: 'customer_addresses' } }, { $unwind: '$customer_addresses' }, { $lookup: { from: 'Addresses', localField: 'customer_addresses.address_id', foreignField: 'address_id', as: 'customer_addresses_details' } }, { $unwind: '$customer_addresses_details' }, { $project: { address_content: '$customer_addresses_details.address_content' } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_name: \"Maudie Kertzmann\" } }, { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $project: { address_content: \"$addresses.address_content\" } } ])"
    },
    {
        "question_id": 3504,
        "spider_question_id": 6079,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = 'Maudie Kertzmann'",
        "question": "Return the address content for the customer whose name is 'Maudie Kertzmann'.",
        "query": "db.Customers.aggregate([ { $match: { customer_name: 'Maudie Kertzmann' } }, { $lookup: { from: 'Customer_Addresses', localField: 'customer_id', foreignField: 'customer_id', as: 'customer_addresses' } }, { $unwind: '$customer_addresses' }, { $lookup: { from: 'Addresses', localField: 'customer_addresses.address_id', foreignField: 'address_id', as: 'customer_address_content' } }, { $unwind: '$customer_address_content' }, { $project: { address_content: '$customer_address_content.address_content' } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: 'Maudie Kertzmann' } }, { $lookup: { from: 'Customer_Addresses', localField: 'customer_id', foreignField: 'customer_id', as: 'customer_addresses' } }, { $unwind: '$customer_addresses' }, { $lookup: { from: 'Addresses', localField: 'customer_addresses.address_id', foreignField: 'address_id', as: 'customer_address_content' } }, { $unwind: '$customer_address_content' }, { $project: { address_content: '$customer_address_content.address_content' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3505,
        "spider_question_id": 6080,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = 'Lake Geovannyton'",
        "question": "How many customers are living in city 'Lake Geovannyton'?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.city\": \"Lake Geovannyton\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.city\": \"Lake Geovannyton\" } }, { $count: \"num_customers\" } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.city\": \"Lake Geovannyton\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 3506,
        "spider_question_id": 6081,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = 'Lake Geovannyton'",
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $match: { \"addresses.city\": \"Lake Geovannyton\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"address_details\" } }, { $unwind: \"$address_details\" }, { $match: { \"address_details.city\": \"Lake Geovannyton\" } }, { $group: { _id: null, numberOfCustomers: { $sum: 1 } } }, { $project: { numberOfCustomers: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $match: { \"addresses.city\": \"Lake Geovannyton\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3507,
        "spider_question_id": 6082,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'Colorado'",
        "question": "Find the name of customers who are living in Colorado?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"Colorado\" } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"customer_addresses_details\" } }, { $unwind: \"$customer_addresses_details\" }, { $match: { \"customer_addresses_details.state_province_county\": \"Colorado\" } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"Colorado\" } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3508,
        "spider_question_id": 6083,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'Colorado'",
        "question": "What are the names of customers who live in Colorado state?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"Colorado\" } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"customer_address_details\" } }, { $unwind: \"$customer_address_details\" }, { $match: { \"customer_address_details.state_province_county\": \"Colorado\" } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $match: { \"addresses.state_province_county\": \"Colorado\" } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3509,
        "spider_question_id": 6084,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
        "question": "Find the list of cities that no customer is living in.",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $match: { \"customer_addresses\": { $size: 0 } } }, { $project: { city: 1 } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $match: { \"customer_addresses\": { $size: 0 } } }, { $project: { city: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3510,
        "spider_question_id": 6085,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
        "question": "What are the cities no customers live in?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $match: { \"customer_addresses\": { $size: 0 } } }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"address_id\", foreignField: \"address_id\", as: \"customer_addresses\" } }, { $match: { \"customer_addresses\": { $size: 0 } } }, { $group: { _id: \"$city\" } }, { $project: { city: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3511,
        "spider_question_id": 6086,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most customers living in?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $group: { _id: \"$addresses.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 },{ $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"address_details\" } }, { $unwind: \"$address_details\" }, { $group: { _id: \"$address_details.city\", customerCount: { $sum: 1 } } }, { $sort: { customerCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $group: { _id: \"$addresses.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 },{ $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 3512,
        "spider_question_id": 6087,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the city where the most customers live.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $group: { _id: \"$addresses.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { city: \"$_id\" } }])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_address\" } }, { $unwind: \"$customer_address\" }, { $lookup: { from: \"Addresses\", localField: \"customer_address.address_id\", foreignField: \"address_id\", as: \"address\" } }, { $unwind: \"$address\" }, { $group: { _id: \"$address.city\", customerCount: { $sum: 1 } } }, { $sort: { customerCount: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Addresses\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_addresses\" } }, { $unwind: \"$customer_addresses\" }, { $lookup: { from: \"Addresses\", localField: \"customer_addresses.address_id\", foreignField: \"address_id\", as: \"addresses\" } }, { $unwind: \"$addresses\" }, { $group: { _id: \"$addresses.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { city: \"$_id\" } }])"
    },
    {
        "question_id": 3513,
        "spider_question_id": 6092,
        "db_id": "customers_and_addresses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE '4%'",
        "question": "Find the state and country of all cities with post code starting with 4.",
        "query": "db.Addresses.find({zip_postcode: /^4/}, {state_province_county: 1, country: 1})",
        "gpt4 answer": "db.Addresses.find({ zip_postcode: /^4/ }, { state_province_county: 1, country: 1 })",
        "deepseek answer": "db.Addresses.find({zip_postcode: /^4/}, {state_province_county: 1, country: 1})"
    },
    {
        "question_id": 3514,
        "spider_question_id": 6093,
        "db_id": "customers_and_addresses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE '4%'",
        "question": "What are the state and country of all the cities that have post codes starting with 4.\\",
        "query": "db.Addresses.find({zip_postcode: /^4/}, { state_province_county: 1, country: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.find({zip_postcode: /^4/}, { state_province_county: 1, country: 1})"
    },
    {
        "question_id": 3515,
        "spider_question_id": 6094,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4",
        "question": "List the countries having more than 4 addresses listed.",
        "query": "db.Addresses.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 4 } } }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $group: { _id: \"$country\", addressCount: { $sum: 1 } } }, { $match: { addressCount: { $gt: 4 } } }, { $project: { country: \"$_id\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 4 } } }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3516,
        "spider_question_id": 6095,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id) > 4",
        "question": "For which countries are there more than four distinct addresses listed?",
        "query": "db.Addresses.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 4 } } }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 4 } } }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3517,
        "spider_question_id": 6096,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5",
        "question": "List all the contact channel codes that were used less than 5 times.",
        "query": "db.Customer_Contact_Channels.aggregate([ { $group: { _id: \"$channel_code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 5 } } }, { $project: { channel_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customer_Contact_Channels.aggregate([ { $group: { _id: \"$channel_code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 5 } } }, { $project: { channel_code: \"$_id\" } } ])",
        "deepseek answer": "db.Customer_Contact_Channels.aggregate([ { $group: { _id: \"$channel_code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 5 } } }, { $project: { channel_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3518,
        "spider_question_id": 6097,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id) < 5",
        "question": "Which contact channel codes were used less than 5 times?",
        "query": "db.Customer_Contact_Channels.aggregate([ { $group: { _id: \"$channel_code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 5 } } }, { $project: { channel_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customer_Contact_Channels.aggregate([ { $group: { _id: \"$channel_code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 5 } } }, { $project: { channel_code: \"$_id\" } } ])",
        "deepseek answer": "db.Customer_Contact_Channels.aggregate([ { $group: { _id: \"$channel_code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 5 } } }, { $project: { channel_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3519,
        "spider_question_id": 6098,
        "db_id": "customers_and_addresses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Tillman Ernser'",
        "question": "Which contact channel has been used by the customer with name 'Tillman Ernser'?",
        "query": "db.Customers.aggregate([ { $match: { customer_name: \"Tillman Ernser\" } }, { $lookup: { from: \"Customer_Contact_Channels\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"contact_channels\" } }, { $unwind: \"$contact_channels\" }, { $group: { _id: \"$contact_channels.channel_code\" } }, { $project: { channel_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: \"Tillman Ernser\" } }, { $lookup: { from: \"Customer_Contact_Channels\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"contact_channels\" } }, { $unwind: \"$contact_channels\" }, { $group: { _id: \"$contact_channels.channel_code\" } }, { $project: { channel_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3520,
        "spider_question_id": 6099,
        "db_id": "customers_and_addresses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Tillman Ernser'",
        "question": "Find the contact channel code that was used by the customer named 'Tillman Ernser'.",
        "query": "db.Customers.aggregate([ { $match: { customer_name: 'Tillman Ernser' } }, { $lookup: { from: \"Customer_Contact_Channels\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"contact_channels\" }}, { $unwind: \"$contact_channels\" }, { $group: { _id: \"$contact_channels.channel_code\" } }, { $project: { channel_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: 'Tillman Ernser' } }, { $lookup: { from: \"Customer_Contact_Channels\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"contact_channels\" }}, { $unwind: \"$contact_channels\" }, { $group: { _id: \"$contact_channels.channel_code\" } }, { $project: { channel_code: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3521,
        "spider_question_id": 6112,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: \"$customer_id\", payment_method: { $first: \"$payment_method\" }, total_quantity: { $sum: \"$order_items.order_quantity\" } } }, { $sort: { total_quantity: 1 } }, { $limit: 1 }, { $project: { payment_method: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $group: { _id: \"$customer_id\", totalQuantity: { $sum: \"$orderItems.order_quantity\" }, paymentMethod: { $first: \"$payment_method\" } } }, { $sort: { totalQuantity: 1 } }, { $limit: 1 }, { $project: { paymentMethod: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: \"$customer_id\", payment_method: { $first: \"$payment_method\" }, total_quantity: { $sum: \"$order_items.order_quantity\" } } }, { $sort: { total_quantity: 1 } }, { $limit: 1 }, { $project: { payment_method: 1 } } ])"
    },
    {
        "question_id": 3522,
        "spider_question_id": 6113,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: \"$customer_id\", payment_method: { $first: \"$payment_method\" }, total_quantity: { $sum: \"$order_items.order_quantity\" } } }, { $sort: { total_quantity: 1 } }, { $limit: 1 }, { $project: { payment_method: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: \"$customer_id\", payment_method: { $first: \"$payment_method\" }, total_quantity: { $sum: \"$order_items.order_quantity\" } } }, { $sort: { total_quantity: 1 } }, { $limit: 1 }, { $project: { payment_method: 1 } } ])"
    },
    {
        "question_id": 3523,
        "spider_question_id": 6114,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = 'Rodrick Heaney'",
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "query": "db.Customers.aggregate([ { $match: { customer_name: \"Rodrick Heaney\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: null, uniqueProducts: { $addToSet: \"$order_items.product_id\" } } }, { $project: { count: { $size: \"$uniqueProducts\" } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: 'Rodrick Heaney' } }, { $lookup: { from: 'Customer_Orders', localField: 'customer_id', foreignField: 'customer_id', as: 'orders' } }, { $unwind: '$orders' }, { $lookup: { from: 'Order_Items', localField: 'orders.order_id', foreignField: 'order_id', as: 'orderItems' } }, { $unwind: '$orderItems' }, { $group: { _id: '$orderItems.product_id' } }, { $count: 'distinctProductCount' } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_name: \"Rodrick Heaney\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: null, uniqueProducts: { $addToSet: \"$order_items.product_id\" } } }, { $project: { count: { $size: \"$uniqueProducts\" } } } ])"
    },
    {
        "question_id": 3524,
        "spider_question_id": 6115,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = 'Rodrick Heaney'",
        "question": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "query": "db.Customers.aggregate([ { $match: { customer_name: \"Rodrick Heaney\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: null, distinct_products: { $addToSet: \"$order_items.product_id\" } } }, { $project: { number_of_distinct_products: { $size: \"$distinct_products\" } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: \"Rodrick Heaney\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"items\" } }, { $unwind: \"$items\" }, { $group: { _id: \"$items.product_id\" } }, { $count: \"distinct_products\" } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_name: \"Rodrick Heaney\" } }, { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: null, distinct_products: { $addToSet: \"$order_items.product_id\" } } }, { $project: { number_of_distinct_products: { $size: \"$distinct_products\" } } } ])"
    },
    {
        "question_id": 3525,
        "spider_question_id": 6118,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = 'Cancelled'",
        "question": "How many customers have at least one order with status 'Cancelled'?",
        "query": "db.Customer_Orders.aggregate([ { $match: { order_status: 'Cancelled' } }, { $group: { _id: \"$customer_id\" } }, { $count: \"distinct_customer_count\" } ])",
        "gpt4 answer": "db.Customer_Orders.aggregate([ { $match: { order_status: 'Cancelled' } }, { $group: { _id: \"$customer_id\" } }, { $count: \"distinct_customer_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3526,
        "spider_question_id": 6119,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status = 'Cancelled'",
        "question": "Return the number of customers who have at least one order with 'Cancelled' status.",
        "query": "db.Customer_Orders.aggregate([ { $match: { order_status: 'Cancelled' } }, { $group: { _id: \"$customer_id\" } }, { $count: \"distinct_customer_count\" } ])",
        "gpt4 answer": "db.Customer_Orders.aggregate([ { $match: { order_status: 'Cancelled' } }, { $group: { _id: \"$customer_id\" } }, { $count: \"distinct_customer_count\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3527,
        "spider_question_id": 6128,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "question": "Who made the latest order?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $sort: { \"orders.order_date\": -1 } }, { $limit: 1 }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $sort: { \"orders.order_date\": -1 } }, { $limit: 1 }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3528,
        "spider_question_id": 6129,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "question": "Find the name of the customer who made an order most recently.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $sort: { \"orders.order_date\": -1 } }, { $limit: 1 }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"recent_order\" } }, { $unwind: \"$recent_order\" }, { $sort: { \"recent_order.order_date\": -1 } }, { $limit: 1 }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $sort: { \"orders.order_date\": -1 } }, { $limit: 1 }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3529,
        "spider_question_id": 6130,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which product has been ordered most number of times?",
        "query": "db.Order_Items.aggregate([ { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_details\" } }, { $unwind: \"$product_details\" }, { $group: { _id: \"$product_id\", product_details: { $first: \"$product_details.product_details\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { product_details: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Order_Items.aggregate([ { $lookup: { from: \"Products\", localField: \"product_id\", foreignField: \"product_id\", as: \"product_details\" } }, { $unwind: \"$product_details\" }, { $group: { _id: \"$product_id\", product_details: { $first: \"$product_details.product_details\" }, count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { product_details: 1 } } ])"
    },
    {
        "question_id": 3530,
        "spider_question_id": 6131,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", total_ordered: { $sum: \"$order_quantity\" } } }, { $sort: { total_ordered: -1 } }, { $limit: 1 }, { $lookup: { from: \"Products\", localField: \"_id\", foreignField: \"product_id\", as: \"product_details\" } }, { $unwind: \"$product_details\" }, { $project: { product_details: \"$product_details.product_details\" } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", total_ordered: { $sum: \"$order_quantity\" } } }, { $sort: { total_ordered: -1 } }, { $limit: 1 }, { $lookup: { from: \"Products\", localField: \"_id\", foreignField: \"product_id\", as: \"product_details\" } }, { $unwind: \"$product_details\" }, { $project: { product_details: \"$product_details.product_details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3531,
        "spider_question_id": 6134,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT address_content FROM addresses WHERE city = 'East Julianaside' AND state_province_county = 'Texas' UNION SELECT address_content FROM addresses WHERE city = 'Gleasonmouth' AND state_province_county = 'Arizona'",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "db.Addresses.find( { $or: [ { city: \"East Julianaside\", state_province_county: \"Texas\" }, { city: \"Gleasonmouth\", state_province_county: \"Arizona\" } ] }, { address_content: 1 } )",
        "gpt4 answer": "db.Addresses.find( { $or: [ { city: 'East Julianaside', state_province_county: 'Texas' }, { city: 'Gleasonmouth', state_province_county: 'Arizona' } ] }, { address_content: 1 } )",
        "deepseek answer": "db.Addresses.find( { $or: [ { city: \"East Julianaside\", state_province_county: \"Texas\" }, { city: \"Gleasonmouth\", state_province_county: \"Arizona\" } ] }, { address_content: 1 } )"
    },
    {
        "question_id": 3532,
        "spider_question_id": 6135,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT address_content FROM addresses WHERE city = 'East Julianaside' AND state_province_county = 'Texas' UNION SELECT address_content FROM addresses WHERE city = 'Gleasonmouth' AND state_province_county = 'Arizona'",
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "db.Addresses.find( { $or: [ { city: \"East Julianaside\", state_province_county: \"Texas\" }, { city: \"Gleasonmouth\", state_province_county: \"Arizona\" } ] }, { address_content: 1 } )",
        "gpt4 answer": "db.Addresses.find({ $or: [ {city: 'East Julianaside', state_province_county: 'Texas'}, {city: 'Gleasonmouth', state_province_county: 'Arizona'} ] }, { address_content: 1 })",
        "deepseek answer": "db.Addresses.find( { $or: [ { city: \"East Julianaside\", state_province_county: \"Texas\" }, { city: \"Gleasonmouth\", state_province_county: \"Arizona\" } ] }, { address_content: 1 } )"
    },
    {
        "question_id": 3533,
        "spider_question_id": 6136,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "question": "Find the name of customers who did not pay with Cash.",
        "query": "db.Customers.find( { payment_method: { $ne: 'Cash' } }, { customer_name: 1 } )",
        "gpt4 answer": "db.Customers.find({ payment_method: { $ne: 'Cash' } }, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find( { payment_method: { $ne: 'Cash' } }, { customer_name: 1 } )"
    },
    {
        "question_id": 3534,
        "spider_question_id": 6137,
        "db_id": "customers_and_addresses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "question": "What is the name of customers who do not use Cash as payment method.",
        "query": "db.Customers.find({payment_method: {$ne: 'Cash'}}, {customer_name: 1})",
        "gpt4 answer": "db.Customers.find({ payment_method: { $ne: \"Cash\" } }, { customer_name: 1 })",
        "deepseek answer": "db.Customers.find({payment_method: {$ne: 'Cash'}}, {customer_name: 1})"
    },
    {
        "question_id": 3535,
        "spider_question_id": 6138,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'",
        "question": "Find the names of customers who never ordered product Latte.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"items\" } }, { $lookup: { from: \"Products\", localField: \"items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $match: { \"products.product_details\": { $ne: \"Latte\" } } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"items\" } }, { $lookup: { from: \"Products\", localField: \"items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $match: { \"products.product_details\": { $ne: \"Latte\" } } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3536,
        "spider_question_id": 6140,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
        "question": "Find the names of customers who never placed an order.",
        "query": "db.Customers.find( { customer_id: { $nin: db.Customer_Orders.distinct(\"customer_id\") } }, { customer_name: 1 } )",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { orders: { $size: 0 } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.find( { customer_id: { $nin: db.Customer_Orders.distinct(\"customer_id\") } }, { customer_name: 1 } )"
    },
    {
        "question_id": 3537,
        "spider_question_id": 6141,
        "db_id": "customers_and_addresses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id",
        "question": "What are the names of customers who never made an order.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders\": { $size: 0 } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { orders: { $size: 0 } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders\": { $size: 0 } } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3538,
        "spider_question_id": 6142,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { $or: [ { \"products.product_details\": \"Latte\" }, { \"products.product_details\": \"Americano\" } ] } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" }, products: { $addToSet: \"$products.product_details\" } } }, { $match: { products: { $all: [\"Latte\", \"Americano\"] } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $unwind: \"$customer_orders\" }, { $lookup: { from: \"Order_Items\", localField: \"customer_orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { $or: [ { \"products.product_details\": \"Latte\" }, { \"products.product_details\": \"Americano\" } ] } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" }, products: { $addToSet: \"$products.product_details\" } } }, { $match: { products: { $all: [\"Latte\", \"Americano\"] } } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3539,
        "spider_question_id": 6143,
        "db_id": "customers_and_addresses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $lookup: { from: \"Products\", localField: \"orderItems.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_details\": { $in: [\"Latte\", \"Americano\"] } } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" }, products: { $addToSet: \"$products.product_details\" } } }, { $match: { products: { $all: [\"Latte\", \"Americano\"] } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"orderItems\" } }, { $unwind: \"$orderItems\" }, { $lookup: { from: \"Products\", localField: \"orderItems.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_details\": { $in: [\"Latte\", \"Americano\"] } } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" }, products: { $addToSet: \"$products.product_details\" } } }, { $match: { products: { $all: [\"Latte\", \"Americano\"] } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3540,
        "spider_question_id": 6146,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Age FROM artist",
        "question": "List the age of all music artists.",
        "query": "db.artist.find({}, {Age: 1})",
        "gpt4 answer": "db.artist.find({}, { Age: 1 })",
        "deepseek answer": "db.artist.find({}, {Age: 1})"
    },
    {
        "question_id": 3541,
        "spider_question_id": 6147,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Age FROM artist",
        "question": "What are the ages of all music artists?",
        "query": "db.artist.find({}, {Age: 1})",
        "gpt4 answer": "db.artist.find({}, { Age: 1 })",
        "deepseek answer": "db.artist.find({}, {Age: 1})"
    },
    {
        "question_id": 3542,
        "spider_question_id": 6148,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Age) FROM artist",
        "question": "What is the average age of all artists?",
        "query": "db.artist.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $group: { _id: null, avgAge: { $avg: \"$Age\" } } }, { $project: { avgAge: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 3543,
        "spider_question_id": 6149,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(Age) FROM artist",
        "question": "Return the average age across all artists.",
        "query": "db.artist.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $group: { _id: null, averageAge: { $avg: \"$Age\" } } }, { $project: { averageAge: 1 } } ])"
    },
    {
        "question_id": 3544,
        "spider_question_id": 6150,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall'",
        "question": "What are the famous titles of the artist 'Triumfall'?",
        "query": "db.artist.find({Artist: 'Triumfall'}, {Famous_Title: 1})",
        "gpt4 answer": "db.artist.find({ Artist: 'Triumfall' }, { Famous_Title: 1 })",
        "deepseek answer": "db.artist.find({Artist: 'Triumfall'}, {Famous_Title: 1})"
    },
    {
        "question_id": 3545,
        "spider_question_id": 6151,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall'",
        "question": "Return the famous titles of the artist called 'Triumfall'.",
        "query": "db.artist.find({Artist: 'Triumfall'}, {Famous_Title: 1})",
        "gpt4 answer": "db.artist.find({ Artist: 'Triumfall' }, { Famous_Title: 1 })",
        "deepseek answer": "db.artist.find({Artist: 'Triumfall'}, {Famous_Title: 1})"
    },
    {
        "question_id": 3546,
        "spider_question_id": 6154,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_of_ceremony , RESULT FROM music_festival",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "query": "db.music_festival.find({}, { Date_of_ceremony: 1, Result: 1 })",
        "gpt4 answer": "db.music_festival.find({}, { Date_of_ceremony: 1, Result: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3547,
        "spider_question_id": 6155,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_of_ceremony , RESULT FROM music_festival",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "db.music_festival.find({}, { Date_of_ceremony: 1, Result: 1 })",
        "gpt4 answer": "db.music_festival.find({}, { Date_of_ceremony: 1, Result: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3548,
        "spider_question_id": 6156,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Category FROM music_festival WHERE RESULT = 'Awarded'",
        "question": "What are the category of music festivals with result 'Awarded'?",
        "query": "db.music_festival.find({Result: 'Awarded'}, {Category: 1})",
        "gpt4 answer": "db.music_festival.find({ Result: 'Awarded' }, { Category: 1 })",
        "deepseek answer": "db.music_festival.find({Result: 'Awarded'}, {Category: 1})"
    },
    {
        "question_id": 3549,
        "spider_question_id": 6157,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Category FROM music_festival WHERE RESULT = 'Awarded'",
        "question": "Return the categories of music festivals that have the result 'Awarded'.",
        "query": "db.music_festival.find({ Result: 'Awarded' }, { Category: 1 })",
        "gpt4 answer": "db.music_festival.find({ Result: 'Awarded' }, { Category: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3550,
        "spider_question_id": 6158,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Weeks_on_Top) , min(Weeks_on_Top) FROM volume",
        "question": "What are the maximum and minimum week on top of all volumes?",
        "query": "db.volume.aggregate([ { $group: { _id: null, max_weeks_on_top: { $max: \"$Weeks_on_Top\" }, min_weeks_on_top: { $min: \"$Weeks_on_Top\" } } }, { $project: { max_weeks_on_top: 1, min_weeks_on_top:1} } ])",
        "gpt4 answer": "db.volume.aggregate([ { $group: { _id: null, maxWeeksOnTop: { $max: \"$Weeks_on_Top\" }, minWeeksOnTop: { $min: \"$Weeks_on_Top\" } } }, { $project: { maxWeeksOnTop: 1, minWeeksOnTop: 1 } } ])",
        "deepseek answer": "db.volume.aggregate([ { $group: { _id: null, max_weeks_on_top: { $max: \"$Weeks_on_Top\" }, min_weeks_on_top: { $min: \"$Weeks_on_Top\" } } }, { $project: { max_weeks_on_top: 1, min_weeks_on_top:1} } ])"
    },
    {
        "question_id": 3551,
        "spider_question_id": 6159,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Weeks_on_Top) , min(Weeks_on_Top) FROM volume",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "query": "db.volume.aggregate([ { $group: { _id: null, max_weeks_on_top: { $max: \"$Weeks_on_Top\" }, min_weeks_on_top: { $min: \"$Weeks_on_Top\" } } }, { $project: { max_weeks_on_top: 1, min_weeks_on_top:1} } ])",
        "gpt4 answer": "db.volume.aggregate([ { $group: { _id: null, maxWeeksOnTop: { $max: \"$Weeks_on_Top\" }, minWeeksOnTop: { $min: \"$Weeks_on_Top\" } } }, { $project: { maxWeeksOnTop: 1, minWeeksOnTop: 1 } } ])",
        "deepseek answer": "db.volume.aggregate([ { $group: { _id: null, max_weeks_on_top: { $max: \"$Weeks_on_Top\" }, min_weeks_on_top: { $min: \"$Weeks_on_Top\" } } }, { $project: { max_weeks_on_top: 1, min_weeks_on_top:1} } ])"
    },
    {
        "question_id": 3552,
        "spider_question_id": 6160,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Song FROM volume WHERE Weeks_on_Top > 1",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "query": "db.volume.find({ Weeks_on_Top: { $gt: 1 } }, { Song: 1 })",
        "gpt4 answer": "db.volume.find({ Weeks_on_Top: { $gt: 1 } }, { Song: 1 })",
        "deepseek answer": "db.volume.find({ Weeks_on_Top: { $gt: 1 } }, { Song: 1 })"
    },
    {
        "question_id": 3553,
        "spider_question_id": 6161,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Song FROM volume WHERE Weeks_on_Top > 1",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "query": "db.volume.find({Weeks_on_Top: {$gt: 1}}, { Song: 1})",
        "gpt4 answer": "db.volume.find({ Weeks_on_Top: { $gt: 1 } }, { Song: 1 })",
        "deepseek answer": "db.volume.find({Weeks_on_Top: {$gt: 1}}, { Song: 1})"
    },
    {
        "question_id": 3554,
        "spider_question_id": 6162,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Song FROM volume ORDER BY Song",
        "question": "Please list all songs in volumes in ascending alphabetical order.",
        "query": "db.volume.find({}, { Song: 1}).sort({Song: 1})",
        "gpt4 answer": "db.volume.find({}, {Song: 1}).sort({Song: 1})",
        "deepseek answer": "db.volume.find({}, { Song: 1}).sort({Song: 1})"
    },
    {
        "question_id": 3555,
        "spider_question_id": 6163,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Song FROM volume ORDER BY Song",
        "question": "What are the the songs in volumes, listed in ascending order?",
        "query": "db.volume.find({}, { Song: 1}).sort({Song: 1})",
        "gpt4 answer": "db.volume.find({}, { Song: 1 }).sort({ Song: 1 })",
        "deepseek answer": "db.volume.find({}, { Song: 1}).sort({Song: 1})"
    },
    {
        "question_id": 3556,
        "spider_question_id": 6166,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "query": "db.music_festival.aggregate([ { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Date_of_ceremony: 1 } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $match: { \"volume_info.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Date_of_ceremony: 1 } } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Date_of_ceremony: 1 } } ])"
    },
    {
        "question_id": 3557,
        "spider_question_id": 6167,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "query": "db.music_festival.aggregate([ { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Date_of_ceremony: 1 } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_info\" } }, { $match: { \"volume_info.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Date_of_ceremony: 1 } } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Date_of_ceremony: 1 } } ])"
    },
    {
        "question_id": 3558,
        "spider_question_id": 6168,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = 'Nominated'",
        "question": "Please show the songs that have result 'nominated' at music festivals.",
        "query": "db.music_festival.aggregate([ { $match: { Result: \"Nominated\" } }, { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $project: { Song: \"$volume_data.Song\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.music_festival.aggregate([ { $match: { Result: \"Nominated\" } }, { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $project: { Song: \"$volume_data.Song\" } } ])"
    },
    {
        "question_id": 3559,
        "spider_question_id": 6169,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = 'Nominated'",
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "query": "db.music_festival.aggregate([ { $match: { Result: \"Nominated\" } }, { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $project: { Song: \"$volume_data.Song\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.music_festival.aggregate([ { $match: { Result: \"Nominated\" } }, { $lookup: { from: \"volume\", localField: \"Volume\", foreignField: \"Volume_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $project: { Song: \"$volume_data.Song\" } } ])"
    },
    {
        "question_id": 3560,
        "spider_question_id": 6170,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = 'Gorgoroth'",
        "question": "What are the issue dates of volumes associated with the artist 'Gorgoroth'?",
        "query": "db.artist.aggregate([ { $match: { Artist: \"Gorgoroth\" } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $project: { Issue_Date: \"$volumes.Issue_Date\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { Artist: \"Gorgoroth\" } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $project: { Issue_Date: \"$volumes.Issue_Date\" } } ])"
    },
    {
        "question_id": 3561,
        "spider_question_id": 6171,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = 'Gorgoroth'",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "query": "db.artist.aggregate([ { $match: { Artist: \"Gorgoroth\" } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $project: { Issue_Date: \"$volume_info.Issue_Date\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { Artist: \"Gorgoroth\" } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $project: { Issue_Date: \"$volume_info.Issue_Date\" } } ])"
    },
    {
        "question_id": 3562,
        "spider_question_id": 6172,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "query": "db.artist.aggregate([ { $match: { Age: { $gte: 32 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $project: { Song: \"$volumes.Song\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { Age: { $gte: 32 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $project: { Song: \"$volumes.Song\" } } ])"
    },
    {
        "question_id": 3563,
        "spider_question_id": 6173,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "query": "db.artist.aggregate([ { $match: { Age: { $gte: 32 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_docs\" } }, { $unwind: \"$volume_docs\" }, { $project: { Song: \"$volume_docs.Song\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { Age: { $gte: 32 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_docs\" } }, { $unwind: \"$volume_docs\" }, { $project: { Song: \"$volume_docs.Song\" } } ])"
    },
    {
        "question_id": 3564,
        "spider_question_id": 6174,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "db.artist.aggregate([ { $match: { Age: { $lte: 25 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $group: { _id: null, averageWeeksOnTop: { $avg: \"$volumes.Weeks_on_Top\" } } }, { $project: { averageWeeksOnTop: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { Age: { $lte: 25 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $group: { _id: null, averageWeeksOnTop: { $avg: \"$volume_info.Weeks_on_Top\" } } }, { $project: { averageWeeksOnTop: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { Age: { $lte: 25 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $group: { _id: null, averageWeeksOnTop: { $avg: \"$volumes.Weeks_on_Top\" } } }, { $project: { averageWeeksOnTop: 1 } } ])"
    },
    {
        "question_id": 3565,
        "spider_question_id": 6175,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25",
        "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
        "query": "db.artist.aggregate([ { $match: { Age: { $lte: 25 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $group: { _id: null, avgWeeksOnTop: { $avg: \"$volumes.Weeks_on_Top\" } } }, { $project: { avgWeeksOnTop: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { Age: { $lte: 25 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $group: { _id: null, averageWeeksOnTop: { $avg: \"$volumes.Weeks_on_Top\" } } }, { $project: { averageWeeksOnTop: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $match: { Age: { $lte: 25 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $group: { _id: null, avgWeeksOnTop: { $avg: \"$volumes.Weeks_on_Top\" } } }, { $project: { avgWeeksOnTop: 1 } } ])"
    },
    {
        "question_id": 3566,
        "spider_question_id": 6176,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Famous_Title: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $match: { \"volume_info.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Famous_Title: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Famous_Title: 1 } } ])"
    },
    {
        "question_id": 3567,
        "spider_question_id": 6177,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Famous_Title: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $unwind: \"$volume_data\" }, { $match: { \"volume_data.Weeks_on_Top\": { $gt: 2 } } }, { $project: { Famous_Title: 1 } } ])"
    },
    {
        "question_id": 3568,
        "spider_question_id": 6178,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
        "question": "Please list the age and famous title of artists in descending order of age.",
        "query": "db.artist.aggregate([ { $sort: { Age: -1 } }, { $project: { Famous_Title: 1, Age: 1 } } ])",
        "gpt4 answer": "db.artist.find({}, {Age: 1, Famous_Title: 1}).sort({Age: -1})",
        "deepseek answer": "db.artist.aggregate([ { $sort: { Age: -1 } }, { $project: { Famous_Title: 1, Age: 1 } } ])"
    },
    {
        "question_id": 3569,
        "spider_question_id": 6179,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Famous_Title , Age FROM artist ORDER BY Age DESC",
        "question": "What are the famous titles and ages of each artist, listed in descending order by age?",
        "query": "db.artist.find({}, {Famous_Title: 1, Age: 1}).sort({Age: -1})",
        "gpt4 answer": "db.artist.find({}, {Famous_Title: 1, Age: 1}).sort({Age: -1})",
        "deepseek answer": "db.artist.find({}, {Famous_Title: 1, Age: 1}).sort({Age: -1})"
    },
    {
        "question_id": 3570,
        "spider_question_id": 6180,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
        "question": "What is the famous release date of the artist with the oldest age?",
        "query": "db.artist.find({}, {Famous_Release_date: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.artist.find({}, {Famous_Release_date: 1}).sort({Age: -1}).limit(1)",
        "deepseek answer": "db.artist.find({}, {Famous_Release_date: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 3571,
        "spider_question_id": 6181,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
        "question": "Return the famous release date for the oldest artist.",
        "query": "db.artist.find({}, {Famous_Release_date: 1}).sort({Age: -1}).limit(1)",
        "gpt4 answer": "db.artist.find({}, { Famous_Release_date: 1 }).sort({ Age: -1 }).limit(1)",
        "deepseek answer": "db.artist.find({}, {Famous_Release_date: 1}).sort({Age: -1}).limit(1)"
    },
    {
        "question_id": 3572,
        "spider_question_id": 6182,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
        "question": "Please show the categories of the music festivals and the count.",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $project: { Category: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $project: { Category: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $project: { Category: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3573,
        "spider_question_id": 6183,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
        "question": "Return the number of music festivals of each category.",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3574,
        "spider_question_id": 6184,
        "db_id": "music_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common result of the music festival?",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3575,
        "spider_question_id": 6185,
        "db_id": "music_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the result that is most frequent at music festivals.",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: {_id: \"$Result\", count: {$sum: 1}} }, { $sort: {count: -1} }, { $limit: 1 }, { $project: { Result: \"$_id\"} } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Result: \"$_id\" } } ])"
    },
    {
        "question_id": 3576,
        "spider_question_id": 6186,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1",
        "question": "Please show the categories of the music festivals with count more than 1.",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Category: \"$_id\" } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Category: \"$_id\" } } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Category: \"$_id\" } } ])"
    },
    {
        "question_id": 3577,
        "spider_question_id": 6187,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1",
        "question": "What are the categories of music festivals for which there have been more than 1 music festival?",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Category: \"$_id\" } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Category: \"$_id\" } } ])",
        "deepseek answer": "db.music_festival.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Category: \"$_id\" } } ])"
    },
    {
        "question_id": 3578,
        "spider_question_id": 6188,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "query": "db.volume.find({}, {Song: 1}).sort({Weeks_on_Top: -1}).limit(1)",
        "gpt4 answer": "db.volume.find({}, { Song: 1 }).sort({ Weeks_on_Top: -1 }).limit(1)",
        "deepseek answer": "db.volume.find({}, {Song: 1}).sort({Weeks_on_Top: -1}).limit(1)"
    },
    {
        "question_id": 3579,
        "spider_question_id": 6189,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "query": "db.volume.find({}, { Song: 1}).sort({Weeks_on_Top: -1}).limit(1)",
        "gpt4 answer": "db.volume.find({}, { Song: 1 }).sort({ Weeks_on_Top: -1 }).limit(1)",
        "deepseek answer": "db.volume.find({}, { Song: 1}).sort({Weeks_on_Top: -1}).limit(1)"
    },
    {
        "question_id": 3580,
        "spider_question_id": 6190,
        "db_id": "music_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "question": "Find the famous titles of artists that do not have any volume.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_docs\" } }, { $match: { \"volume_docs\": { $size: 0 } } }, { $project: { Famous_Title: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"artist_volumes\" } }, { $match: { artist_volumes: { $size: 0 } } }, { $project: { Famous_Title: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_docs\" } }, { $match: { \"volume_docs\": { $size: 0 } } }, { $project: { Famous_Title: 1 } } ])"
    },
    {
        "question_id": 3581,
        "spider_question_id": 6191,
        "db_id": "music_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "query": "db.artist.find( { Artist_ID: { $nin: db.volume.distinct(\"Artist_ID\") } }, { Famous_Title: 1 } )",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $match: { volumes: { $size: 0 } } }, { $project: { Famous_Title: 1 } } ])",
        "deepseek answer": "db.artist.find( { Artist_ID: { $nin: db.volume.distinct(\"Artist_ID\") } }, { Famous_Title: 1 } )"
    },
    {
        "question_id": 3582,
        "spider_question_id": 6192,
        "db_id": "music_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2",
        "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
        "query": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $match: { $and: [ {\"volume_data.Weeks_on_Top\": {$gt: 2}}, {\"volume_data.Weeks_on_Top\": {$lt: 2}} ] } }, { $project: { Famous_Title: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $project: { Famous_Title: 1, weeks_above_two: { $filter: { input: \"$volumes\", as: \"volume\", cond: { $gt: [\"$$volume.Weeks_on_Top\", 2] } } }, weeks_below_two: { $filter: { input: \"$volumes\", as: \"volume\", cond: { $lt: [\"$$volume.Weeks_on_Top\", 2] } } } } }, { $match: { $and: [ { weeks_above_two: { $ne: [] } }, { weeks_below_two: { $ne: [] } } ] } }, { $project: { Famous_Title: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $match: { $and: [ {\"volume_data.Weeks_on_Top\": {$gt: 2}}, {\"volume_data.Weeks_on_Top\": {$lt: 2}} ] } }, { $project: { Famous_Title: 1 } } ])"
    },
    {
        "question_id": 3583,
        "spider_question_id": 6193,
        "db_id": "music_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "query": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $match: { $and: [ { \"volume_data.Weeks_on_Top\": { $gt: 2 } }, { \"volume_data.Weeks_on_Top\": { $lt: 2 } } ] } }, { $project: { Famous_Title: 1 } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $project: { Famous_Title: 1, moreThanTwoWeeks: { $filter: { input: \"$volumes\", as: \"volume\", cond: { $gt: [\"$$volume.Weeks_on_Top\", 2] } } }, lessThanTwoWeeks: { $filter: { input: \"$volumes\", as: \"volume\", cond: { $lt: [\"$$volume.Weeks_on_Top\", 2] } } } } }, { $match: { $and: [ { moreThanTwoWeeks: { $ne: [] } }, { lessThanTwoWeeks: { $ne: [] } } ] } }, { $project: { Famous_Title: 1 } } ])",
        "deepseek answer": "db.artist.aggregate([ { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_data\" } }, { $match: { $and: [ { \"volume_data.Weeks_on_Top\": { $gt: 2 } }, { \"volume_data.Weeks_on_Top\": { $lt: 2 } } ] } }, { $project: { Famous_Title: 1 } } ])"
    },
    {
        "question_id": 3584,
        "spider_question_id": 6194,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND RESULT = 'Awarded'",
        "question": "What are the date of ceremony of music festivals with category 'Best Song' and result 'Awarded'?",
        "query": "db.music_festival.find( { Category: 'Best Song', Result: 'Awarded' }, { Date_of_ceremony: 1 } )",
        "gpt4 answer": "db.music_festival.find({ Category: 'Best Song', Result: 'Awarded' }, { Date_of_ceremony: 1 })",
        "deepseek answer": "db.music_festival.find( { Category: 'Best Song', Result: 'Awarded' }, { Date_of_ceremony: 1 } )"
    },
    {
        "question_id": 3585,
        "spider_question_id": 6195,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND RESULT = 'Awarded'",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category 'Best Song' and result 'Awarded'.",
        "query": "db.music_festival.find( { Category: 'Best Song', Result: 'Awarded' }, { Date_of_ceremony: 1 } )",
        "gpt4 answer": "db.music_festival.find({ Category: 'Best Song', Result: 'Awarded' }, { Date_of_ceremony: 1 })",
        "deepseek answer": "db.music_festival.find( { Category: 'Best Song', Result: 'Awarded' }, { Date_of_ceremony: 1 } )"
    },
    {
        "question_id": 3586,
        "spider_question_id": 6196,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "query": "db.volume.find({}, {Issue_Date: 1}).sort({Weeks_on_Top: 1}).limit(1)",
        "gpt4 answer": "db.volume.find({}, { Issue_Date: 1 }).sort({ Weeks_on_Top: 1 }).limit(1)",
        "deepseek answer": "db.volume.find({}, {Issue_Date: 1}).sort({Weeks_on_Top: 1}).limit(1)"
    },
    {
        "question_id": 3587,
        "spider_question_id": 6197,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "query": "db.volume.find({}, {Issue_Date: 1}).sort({Weeks_on_Top: 1}).limit(1)",
        "gpt4 answer": "db.volume.find({}, {Issue_Date: 1}).sort({Weeks_on_Top: 1}).limit(1)",
        "deepseek answer": "db.volume.find({}, {Issue_Date: 1}).sort({Weeks_on_Top: 1}).limit(1)"
    },
    {
        "question_id": 3588,
        "spider_question_id": 6199,
        "db_id": "music_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "question": "Count the number of artists who have had volumes.",
        "query": "db.volume.aggregate([ { $group: { _id: \"$Artist_ID\" } }, { $count: \"distinct_artists\" } ])",
        "gpt4 answer": "db.volume.aggregate([ { $group: { _id: \"$Artist_ID\" } }, { $count: \"distinct_artists\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3589,
        "spider_question_id": 6200,
        "db_id": "music_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT RESULT , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3590,
        "spider_question_id": 6201,
        "db_id": "music_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT RESULT , COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
        "question": "How many music festivals have had each kind of result, ordered descending by count?",
        "query": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "gpt4 answer": "db.music_festival.aggregate([ { $group: { _id: \"$Result\", count: { $sum: 1 } } }, { $sort: { count: -1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3591,
        "spider_question_id": 6202,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "query": "db.artist.aggregate([ { $match: { Age: { $lte: 23 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $project: { \"Issue_Date\": \"$volume_info.Issue_Date\" } } ])",
        "gpt4 answer": "db.artist.aggregate([ { $match: { Age: { $lte: 23 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volume_info\" } }, { $unwind: \"$volume_info\" }, { $project: { \"Issue_Date\": \"$volume_info.Issue_Date\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3592,
        "spider_question_id": 6203,
        "db_id": "music_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23",
        "question": "Return the issue dates of volumes by artists who are at most 23 years old?",
        "query": "db.artist.aggregate([ { $match: { Age: { $lte: 23 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $project: { Issue_Date: \"$volumes.Issue_Date\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.artist.aggregate([ { $match: { Age: { $lte: 23 } } }, { $lookup: { from: \"volume\", localField: \"Artist_ID\", foreignField: \"Artist_ID\", as: \"volumes\" } }, { $unwind: \"$volumes\" }, { $project: { Issue_Date: \"$volumes.Issue_Date\" } } ])"
    },
    {
        "question_id": 3593,
        "spider_question_id": 6205,
        "db_id": "roller_coaster",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "question": "List the names of roller coasters by ascending order of length.",
        "query": "db.roller_coaster.find({}, {Name: 1}).sort({Length: 1})",
        "gpt4 answer": "db.roller_coaster.find({}, { Name: 1 }).sort({ Length: 1 })",
        "deepseek answer": "db.roller_coaster.find({}, {Name: 1}).sort({Length: 1})"
    },
    {
        "question_id": 3594,
        "spider_question_id": 6206,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LENGTH , Height FROM roller_coaster",
        "question": "What are the lengths and heights of roller coasters?",
        "query": "db.roller_coaster.find({}, { Length: 1, Height: 1})",
        "gpt4 answer": "db.roller_coaster.find({}, { Length: 1, Height: 1 })",
        "deepseek answer": "db.roller_coaster.find({}, { Length: 1, Height: 1})"
    },
    {
        "question_id": 3595,
        "spider_question_id": 6207,
        "db_id": "roller_coaster",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Name FROM country WHERE Languages != 'German'",
        "question": "List the names of countries whose language is not 'German'.",
        "query": "db.country.find({ Languages: { $ne: 'German' } }, { Name: 1 })",
        "gpt4 answer": "db.country.find({ Languages: { $ne: 'German' } }, { Name: 1 })",
        "deepseek answer": "db.country.find({ Languages: { $ne: 'German' } }, { Name: 1 })"
    },
    {
        "question_id": 3596,
        "spider_question_id": 6208,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "query": "db.roller_coaster.find( { $or: [ { Length: { $gt: 3300 } }, { Height: { $gt: 100 } } ] }, { Status: 1 } )",
        "gpt4 answer": "db.roller_coaster.find({ $or: [{ Length: { $gt: 3300 } }, { Height: { $gt: 100 } }] }, { Status: 1 })",
        "deepseek answer": "db.roller_coaster.find( { $or: [ { Length: { $gt: 3300 } }, { Height: { $gt: 100 } } ] }, { Status: 1 } )"
    },
    {
        "question_id": 3597,
        "spider_question_id": 6209,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "question": "What are the speeds of the longest roller coaster?",
        "query": "db.roller_coaster.find({}, { Speed: 1 }).sort({ Length: -1 }).limit(1)",
        "gpt4 answer": "db.roller_coaster.find({}, { Speed: 1 }).sort({ Length: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3598,
        "spider_question_id": 6211,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Status , COUNT(*) FROM roller_coaster GROUP BY Status",
        "question": "Show the different statuses and the numbers of roller coasters for each status.",
        "query": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", NumberOfRollerCoasters: { $count: {} } }} ])",
        "deepseek answer": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3599,
        "spider_question_id": 6212,
        "db_id": "roller_coaster",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common status of roller coasters.",
        "query": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])",
        "gpt4 answer": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])",
        "deepseek answer": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Status: \"$_id\" } } ])"
    },
    {
        "question_id": 3600,
        "spider_question_id": 6213,
        "db_id": "roller_coaster",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2",
        "question": "List the status shared by more than two roller coaster.",
        "query": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Status: \"$_id\" } } ])",
        "gpt4 answer": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.roller_coaster.aggregate([ { $group: { _id: \"$Status\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Status: \"$_id\" } } ])"
    },
    {
        "question_id": 3601,
        "spider_question_id": 6214,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "question": "Show the park of the roller coaster with the highest speed.",
        "query": "db.roller_coaster.find({}, {Park: 1}).sort({Speed: -1}).limit(1)",
        "gpt4 answer": "db.roller_coaster.find({}, { Park: 1 }).sort({ Speed: -1 }).limit(1)",
        "deepseek answer": "db.roller_coaster.find({}, {Park: 1}).sort({Speed: -1}).limit(1)"
    },
    {
        "question_id": 3602,
        "spider_question_id": 6215,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name , T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID",
        "question": "Show the names of roller coasters and names of country they are in.",
        "query": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $unwind: \"$coasters\" }, { $project: { \"Country Name\": \"$Name\", \"Coaster Name\": \"$coasters.Name\" } } ])",
        "gpt4 answer": "db.roller_coaster.aggregate([ { $lookup: { from: \"country\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coaster_country\" } }, { $unwind: \"$coaster_country\" }, { $project: { roller_coaster_name: \"$Name\", country_name: \"$coaster_country.Name\" } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $unwind: \"$coasters\" }, { $project: { \"Country Name\": \"$Name\", \"Coaster Name\": \"$coasters.Name\" } } ])"
    },
    {
        "question_id": 3603,
        "spider_question_id": 6216,
        "db_id": "roller_coaster",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "question": "Show the names of countries that have more than one roller coaster.",
        "query": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $match: { \"coasters.1\": { $exists: true } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $project: { Name: 1, NumberOfCoasters: { $size: \"$coasters\" } } }, { $match: { NumberOfCoasters: { $gt: 1 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $match: { \"coasters.1\": { $exists: true } } }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 3604,
        "spider_question_id": 6217,
        "db_id": "roller_coaster",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Name , T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "query": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $unwind: \"$coasters\" }, { $sort: { \"coasters.Height\": -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"roller_coasters\" } }, { $unwind: \"$roller_coasters\" }, { $sort: {\"roller_coasters.Height\": -1} }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])",
        "deepseek answer": "db.country.aggregate([ { $lookup: { from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $unwind: \"$coasters\" }, { $sort: { \"coasters.Height\": -1 } }, { $limit: 1 }, { $project: { Name: 1, Population: 1 } } ])"
    },
    {
        "question_id": 3605,
        "spider_question_id": 6219,
        "db_id": "roller_coaster",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH > 3000 )",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "query": "db.country.aggregate([ { $lookup:{ from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $match: { \"coasters\": { $not: { $elemMatch: { \"Length\": { $gt: 3000 } } } } } }, { $count: \"countries_without_long_coasters\" } ])",
        "gpt4 answer": "db.country.aggregate([ { $lookup:{ from: \"roller_coaster\", localField: \"Country_ID\", foreignField: \"Country_ID\", as: \"coasters\" } }, { $match: { \"coasters\": { $not: { $elemMatch: { \"Length\": { $gt: 3000 } } } } } }, { $count: \"countries_without_long_coasters\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3606,
        "spider_question_id": 6223,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "question": "How many captains are in each rank?",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3607,
        "spider_question_id": 6224,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , rank FROM captain GROUP BY rank",
        "question": "Count the number of captains that have each rank.",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3608,
        "spider_question_id": 6227,
        "db_id": "ship_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM captain ORDER BY age DESC",
        "question": "Sort all captain names by their ages from old to young.",
        "query": "db.captain.find({}, { Name: 1}).sort({age: -1})",
        "gpt4 answer": "db.captain.find({}, { Name: 1 }).sort({ age: -1 })",
        "deepseek answer": "db.captain.find({}, { Name: 1}).sort({age: -1})"
    },
    {
        "question_id": 3609,
        "spider_question_id": 6228,
        "db_id": "ship_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM captain ORDER BY age DESC",
        "question": "What are the names of captains, sorted by age descending?",
        "query": "db.captain.find({}, { Name: 1}).sort({age: -1})",
        "gpt4 answer": "db.captain.find({}, { Name: 1 }).sort({ age: -1 })",
        "deepseek answer": "db.captain.find({}, { Name: 1}).sort({age: -1})"
    },
    {
        "question_id": 3610,
        "spider_question_id": 6229,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , CLASS , rank FROM captain",
        "question": "Find the name, class and rank of all captains.",
        "query": "db.captain.find({}, { Name: 1, Class: 1, Rank: 1 })",
        "gpt4 answer": "db.captain.find({}, { Name: 1, Class: 1, Rank: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3611,
        "spider_question_id": 6230,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , CLASS , rank FROM captain",
        "question": "What are the names, classes, and ranks of all captains?",
        "query": "db.captain.find({}, { Name: 1, Class: 1, Rank: 1})",
        "gpt4 answer": "db.captain.find({}, { Name: 1, Class: 1, Rank: 1 })",
        "deepseek answer": "db.captain.find({}, { Name: 1, Class: 1, Rank: 1})"
    },
    {
        "question_id": 3612,
        "spider_question_id": 6231,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
        "question": "Which rank is the most common among captains?",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { rank: \"$_id\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.captain.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { rank: \"$_id\" } } ])"
    },
    {
        "question_id": 3613,
        "spider_question_id": 6233,
        "db_id": "ship_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
        "question": "Which classes have more than two captains?",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Class: \"$_id\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.captain.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Class: \"$_id\" } } ])"
    },
    {
        "question_id": 3614,
        "spider_question_id": 6234,
        "db_id": "ship_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*) > 2",
        "question": "Give the classes that have more than two captains.",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Class: \"$_id\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Class\", captainCount: { $sum: 1 } } }, { $match: { captainCount: { $gt: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.captain.aggregate([ { $group: { _id: \"$Class\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { Class: \"$_id\" } } ])"
    },
    {
        "question_id": 3615,
        "spider_question_id": 6239,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "query": "db.captain.aggregate([ { $match: { $or: [ { Class: \"Cutter\" }, { Class: \"Armed schooner\" } ] } }, { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Rank: \"$_id\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $match: { Class: { $in: [\"Cutter\", \"Armed schooner\"] } } }, { $group: { _id: \"$Rank\", classes: { $addToSet: \"$Class\" }, count: { $sum: 1 } } }, { $match: { count: { $gt: 1 }, classes: { $all: [\"Cutter\", \"Armed schooner\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.captain.aggregate([ { $match: { $or: [ { Class: \"Cutter\" }, { Class: \"Armed schooner\" } ] } }, { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $project: { Rank: \"$_id\" } } ])"
    },
    {
        "question_id": 3616,
        "spider_question_id": 6240,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
        "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?",
        "query": "db.captain.aggregate([ { $match: { $or: [ { Class: 'Cutter' }, { Class: 'Armed schooner' } ] } }, { $group: { _id: \"$Rank\", classes: { $addToSet: \"$Class\" } } }, { $match: { classes: { $all: ['Cutter', 'Armed schooner'] } } }, { $project: { rank: \"$_id\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $match: { $or: [ { Class: 'Cutter' }, { Class: 'Armed schooner' } ] } }, { $group: { _id: \"$Rank\", classes: { $addToSet: \"$Class\" } } }, { $match: { classes: { $all: ['Cutter', 'Armed schooner'] } } }, { $project: { rank: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3617,
        "spider_question_id": 6243,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "question": "What is the name of the youngest captain?",
        "query": "db.captain.find({}, { Name: 1 }).sort({ age: 1 }).limit(1)",
        "gpt4 answer": "db.captain.find({}, { Name: 1 }).sort({ age: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3618,
        "spider_question_id": 6244,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1",
        "question": "Return the name of the youngest captain.",
        "query": "db.captain.find({}, { Name: 1}).sort({age: 1}).limit(1)",
        "gpt4 answer": "db.captain.find({}, { Name: 1 }).sort({ age: 1 }).limit(1)",
        "deepseek answer": "db.captain.find({}, { Name: 1}).sort({age: 1}).limit(1)"
    },
    {
        "question_id": 3619,
        "spider_question_id": 6247,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
        "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "query": "db.Ship.find({}, { Name: 1, Type: 1, Flag: 1 }).sort({ Built_Year: -1 }).limit(1)",
        "gpt4 answer": "db.Ship.find({}, { Name: 1, Type: 1, Flag: 1 }).sort({ Built_Year: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3620,
        "spider_question_id": 6248,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
        "question": "What is the name, type, and flag of the ship that was built in the most recent year?",
        "query": "db.Ship.find({}, { Name: 1, Type: 1, Flag: 1 }).sort({ Built_Year: -1 }).limit(1)",
        "gpt4 answer": "db.Ship.find({}, { Name: 1, Type: 1, Flag: 1 }).sort({ Built_Year: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3621,
        "spider_question_id": 6249,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , flag FROM ship GROUP BY flag",
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "query": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", NumberOfShips: { $sum: 1 } } }, { $project: { Flag: \"$_id\", NumberOfShips: 1 } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", NumberOfShips: { $sum: 1 } } }, { $project: { Flag: \"$_id\", NumberOfShips: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3622,
        "spider_question_id": 6250,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , flag FROM ship GROUP BY flag",
        "question": "What are the different ship flags, and how many ships have each?",
        "query": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3623,
        "spider_question_id": 6251,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
        "question": "Which flag is most widely used among all ships?",
        "query": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Flag: \"$_id\" } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Flag: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3624,
        "spider_question_id": 6252,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the flag that is most common among all ships.",
        "query": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $group: { _id: \"$Flag\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3625,
        "spider_question_id": 6253,
        "db_id": "ship_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM ship ORDER BY built_year , CLASS",
        "question": "List all ship names in the order of built year and class.",
        "query": "db.Ship.find({}, { Name: 1 }).sort({ Built_Year: 1, Class: 1 })",
        "gpt4 answer": "db.Ship.find({}, { Name: 1 }).sort({ Built_Year: 1, Class: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3626,
        "spider_question_id": 6254,
        "db_id": "ship_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM ship ORDER BY built_year , CLASS",
        "question": "What are the names of ships, ordered by year they were built and their class?",
        "query": "db.Ship.find({}, {Name: 1}).sort({Built_Year: 1, Class: 1})",
        "gpt4 answer": "db.Ship.find({}, {Name: 1}).sort({Built_Year: 1, Class: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3627,
        "spider_question_id": 6256,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
        "question": "What types of ships have both ships that have Panama Flags and Malta flags?",
        "query": "db.Ship.aggregate([ { $match: { $or: [{ Flag: 'Panama' }, { Flag: 'Malta' }] } }, { $group: { _id: \"$Type\", flags: { $addToSet: \"$Flag\" } } }, { $match: { flags: { $all: [\"Panama\", \"Malta\"] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $match: { $or: [{ Flag: 'Panama' }, { Flag: 'Malta' }] } }, { $group: { _id: \"$Type\", flags: { $addToSet: \"$Flag\" } } }, { $match: { flags: { $all: [\"Panama\", \"Malta\"] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3628,
        "spider_question_id": 6257,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
        "question": "In which year were most of ships built?",
        "query": "db.Ship.aggregate([ { $group: { _id: \"$Built_Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $group: { _id: \"$Built_Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3629,
        "spider_question_id": 6258,
        "db_id": "ship_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year in which most ships were built?",
        "query": "db.Ship.aggregate([ { $group: { _id: \"$Built_Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Built_Year: \"$_id\" } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $group: { _id: \"$Built_Year\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Built_Year: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3630,
        "spider_question_id": 6259,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
        "question": "Find the name of the ships that have more than one captain.",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Ship_ID\", captainsCount: {$sum: 1} } }, { $match: { captainsCount: {$gt: 1} } }, { $lookup: { from: \"Ship\", localField: \"_id\", foreignField: \"Ship_ID\", as: \"shipDetails\" } }, { $unwind: \"$shipDetails\" }, { $project: { \"_id\": 0, \"name\": \"$shipDetails.Name\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Ship_ID\", captainsCount: {$sum: 1} } }, { $match: { captainsCount: {$gt: 1} } }, { $lookup: { from: \"Ship\", localField: \"_id\", foreignField: \"Ship_ID\", as: \"shipDetails\" } }, { $unwind: \"$shipDetails\" }, { $project: { \"_id\": 0, \"name\": \"$shipDetails.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3631,
        "spider_question_id": 6260,
        "db_id": "ship_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING count(*) > 1",
        "question": "What are the names of ships that have more than one captain?",
        "query": "db.captain.aggregate([ { $group: { _id: \"$Ship_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"Ship\", localField: \"_id\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $project: { name: \"$ship_info.Name\" } } ])",
        "gpt4 answer": "db.captain.aggregate([ { $group: { _id: \"$Ship_ID\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }, { $lookup: { from: \"Ship\", localField: \"_id\", foreignField: \"Ship_ID\", as: \"ship_info\" } }, { $unwind: \"$ship_info\" }, { $project: { name: \"$ship_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3632,
        "spider_question_id": 6262,
        "db_id": "ship_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT name , CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
        "question": "Return the names and classes of ships that do not have a captain?",
        "query": "db.Ship.aggregate([ { $lookup: { from: \"captain\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"captain_info\" } }, { $match: { \"captain_info\": { $size: 0 } } }, { $project: { Name: 1, Class: 1 } } ])",
        "gpt4 answer": "db.Ship.aggregate([ { $lookup: { from: \"captain\", localField: \"Ship_ID\", foreignField: \"Ship_ID\", as: \"captain_info\" } }, { $match: { \"captain_info\": { $size: 0 } } }, { $project: { Name: 1, Class: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3633,
        "spider_question_id": 6269,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "question": "What is id of the city that hosted events in the most recent year?",
        "query": "db.hosting_city.find({}, { Host_City: 1}).sort({Year: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.hosting_city.find({}, { Host_City: 1}).sort({Year: -1}).limit(1)"
    },
    {
        "question_id": 3634,
        "spider_question_id": 6270,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?",
        "query": "db.hosting_city.find({}, { Host_City: 1}).sort({Year: -1}).limit(1)",
        "gpt4 answer": "db.hosting_city.aggregate([ { $sort: { Year: -1 } }, { $limit: 1 }, { $project: { Host_City: 1 } } ])",
        "deepseek answer": "db.hosting_city.find({}, { Host_City: 1}).sort({Year: -1}).limit(1)"
    },
    {
        "question_id": 3635,
        "spider_question_id": 6271,
        "db_id": "city_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification'",
        "question": "Find the match ids of the cities that hosted competition '1994 FIFA World Cup qualification'?",
        "query": "db.match.find({ Competition: \"1994 FIFA World Cup qualification\" }, { Match_ID: 1 })",
        "gpt4 answer": "db.match.find({ Competition: \"1994 FIFA World Cup qualification\" }, { Match_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3636,
        "spider_question_id": 6272,
        "db_id": "city_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification'",
        "question": "What is the match id of the competition called '1994 FIFA World Cup qualification'?",
        "query": "db.match.find({ Competition: '1994 FIFA World Cup qualification' }, { Match_ID: 1 })",
        "gpt4 answer": "db.match.find({ Competition: '1994 FIFA World Cup qualification' }, { Match_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3637,
        "spider_question_id": 6279,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai'",
        "question": "Give me the temperature of Shanghai in January.",
        "query": "db.city.aggregate([ { $match: { City: \"Shanghai\" } }, { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp\" } }, { $unwind: \"$temp\" }, { $project: { Jan: \"$temp.Jan\" } } ])",
        "gpt4 answer": "db.temperature.aggregate([ { $lookup: { from: \"city\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"city_info\" } }, { $match: { \"city_info.City\": \"Shanghai\" } }, { $project: { Jan: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $match: { City: \"Shanghai\" } }, { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp\" } }, { $unwind: \"$temp\" }, { $project: { Jan: \"$temp.Jan\" } } ])"
    },
    {
        "question_id": 3638,
        "spider_question_id": 6280,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai'",
        "question": "What is the temperature of 'Shanghai' city in January?",
        "query": "db.city.aggregate([ { $match: { City: \"Shanghai\" } }, { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp\" } }, { $unwind: \"$temp\" }, { $project: { Jan: \"$temp.Jan\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $match: { City: \"Shanghai\" } }, { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp\" } }, { $unwind: \"$temp\" }, { $project: { Jan: \"$temp.Jan\" } } ])"
    },
    {
        "question_id": 3639,
        "spider_question_id": 6283,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "question": "Which three cities have the largest regional population?",
        "query": "db.city.find({}, {City: 1}).sort({Regional_Population: -1}).limit(3)",
        "gpt4 answer": "db.city.find({}, { City: 1 }).sort({ Regional_Population: -1 }).limit(3)",
        "deepseek answer": "db.city.find({}, {City: 1}).sort({Regional_Population: -1}).limit(3)"
    },
    {
        "question_id": 3640,
        "spider_question_id": 6284,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "question": "What are the three largest cities in terms of regional population?",
        "query": "db.city.find({}, { City: 1}).sort({Regional_Population: -1}).limit(3)",
        "gpt4 answer": "db.city.find({}, { City: 1 }).sort({ Regional_Population: -1 }).limit(3)",
        "deepseek answer": "db.city.find({}, { City: 1}).sort({Regional_Population: -1}).limit(3)"
    },
    {
        "question_id": 3641,
        "spider_question_id": 6285,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "query": "db.city.find({}, { City: 1, GDP: 1}).sort({GDP: 1}).limit(1)",
        "gpt4 answer": "db.city.find({}, { City: 1, GDP: 1 }).sort({ GDP: 1 }).limit(1)",
        "deepseek answer": "db.city.find({}, { City: 1, GDP: 1}).sort({GDP: 1}).limit(1)"
    },
    {
        "question_id": 3642,
        "spider_question_id": 6286,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "db.city.find({}, { City: 1, GDP: 1 }).sort({ GDP: 1 }).limit(1)",
        "gpt4 answer": "db.city.find({}, { City: 1, GDP: 1 }).sort({ GDP: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3643,
        "spider_question_id": 6287,
        "db_id": "city_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "question": "Which city has the highest temperature in February?",
        "query": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp_data\" } }, { $unwind: \"$temp_data\" }, { $sort: { \"temp_data.Feb\": -1 } }, { $limit: 1 }, { $project: { City: 1 } } ])",
        "gpt4 answer": "db.temperature.aggregate([ { $sort: { Feb: -1 } }, { $limit: 1 }, { $lookup: { from: \"city\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"city_info\" } }, { $unwind: \"$city_info\" }, { $project: { City: \"$city_info.City\" } } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp_data\" } }, { $unwind: \"$temp_data\" }, { $sort: { \"temp_data.Feb\": -1 } }, { $limit: 1 }, { $project: { City: 1 } } ])"
    },
    {
        "question_id": 3644,
        "spider_question_id": 6288,
        "db_id": "city_record",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "question": "In February, which city marks the highest temperature?",
        "query": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temperature_data\" } }, { $unwind: \"$temperature_data\" }, { $sort: { \"temperature_data.Feb\": -1 } }, { $limit: 1 }, { $project: { City: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temperature_data\" } }, { $unwind: \"$temperature_data\" }, { $sort: { \"temperature_data.Feb\": -1 } }, { $limit: 1 }, { $project: { City: 1 } } ])"
    },
    {
        "question_id": 3645,
        "spider_question_id": 6289,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "query": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp\" } }, { $match: { $expr: { $or: [ { $lt: [\"$temp.Mar\", \"$temp.Jul\"] }, { $gt: [\"$temp.Mar\", \"$temp.Oct\"] } ] } } }, { $project: { City: 1 } } ])",
        "gpt4 answer": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp_data\" } }, { $match: { $expr: { $or: [ { $lt: [\"$temp_data.Mar\", \"$temp_data.Jul\"] }, { $gt: [\"$temp_data.Mar\", \"$temp_data.Oct\"] } ] } } }, { $project: { City: 1 } } ])",
        "deepseek answer": "db.city.aggregate([ { $lookup: { from: \"temperature\", localField: \"City_ID\", foreignField: \"City_ID\", as: \"temp\" } }, { $match: { $expr: { $or: [ { $lt: [\"$temp.Mar\", \"$temp.Jul\"] }, { $gt: [\"$temp.Mar\", \"$temp.Oct\"] } ] } } }, { $project: { City: 1 } } ])"
    },
    {
        "question_id": 3646,
        "spider_question_id": 6297,
        "db_id": "city_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT city FROM city WHERE regional_population > 10000000",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "query": "db.city.find({ Regional_Population: { $gt: 10000000 } }, { City: 1 })",
        "gpt4 answer": "db.city.find({ Regional_Population: { $gt: 10000000 } }, { City: 1 })",
        "deepseek answer": "db.city.find({ Regional_Population: { $gt: 10000000 } }, { City: 1 })"
    },
    {
        "question_id": 3647,
        "spider_question_id": 6298,
        "db_id": "city_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT city FROM city WHERE regional_population > 10000000",
        "question": "Which cities have regional population above 10000000?",
        "query": "db.city.find({ Regional_Population: { $gt: 10000000 } }, { City: 1 })",
        "gpt4 answer": "db.city.find({ Regional_Population: { $gt: 10000000 }}, { City: 1 })",
        "deepseek answer": "db.city.find({ Regional_Population: { $gt: 10000000 } }, { City: 1 })"
    },
    {
        "question_id": 3648,
        "spider_question_id": 6301,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , Competition FROM MATCH GROUP BY Competition",
        "question": "Find the number of matches in different competitions.",
        "query": "db.match.aggregate([ { $group: { _id: \"$Competition\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.match.aggregate([ { $group: { _id: \"$Competition\", numberOfMatches: { $sum: 1 } } }, { $project: { Competition: \"$_id\", numberOfMatches: 1 } } ])",
        "deepseek answer": "db.match.aggregate([ { $group: { _id: \"$Competition\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3649,
        "spider_question_id": 6302,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , Competition FROM MATCH GROUP BY Competition",
        "question": "For each competition, count the number of matches.",
        "query": "db.match.aggregate([ { $group: { _id: \"$Competition\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.match.aggregate([ { $group: { _id: \"$Competition\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.match.aggregate([ { $group: { _id: \"$Competition\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3650,
        "spider_question_id": 6303,
        "db_id": "city_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "query": "db.match.aggregate([ { $sort: { Date: -1 } }, { $project: { Venue: 1 } } ])",
        "gpt4 answer": "db.match.find({}, { Venue: 1 }).sort({ Date: -1 })",
        "deepseek answer": "db.match.aggregate([ { $sort: { Date: -1 } }, { $project: { Venue: 1 } } ])"
    },
    {
        "question_id": 3651,
        "spider_question_id": 6304,
        "db_id": "city_record",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "query": "db.match.find({}, { Venue: 1 }).sort({ Date: -1 })",
        "gpt4 answer": "db.match.find({}, { Venue: 1 }).sort({ Date: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3652,
        "spider_question_id": 6305,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "question": "what is the GDP of the city with the largest population.",
        "query": "db.city.find({}, {GDP: 1}).sort({Regional_Population: -1}).limit(1)",
        "gpt4 answer": "db.city.find({}, { GDP: 1 }).sort({ Regional_Population: -1 }).limit(1)",
        "deepseek answer": "db.city.find({}, {GDP: 1}).sort({Regional_Population: -1}).limit(1)"
    },
    {
        "question_id": 3653,
        "spider_question_id": 6306,
        "db_id": "city_record",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "question": "Find the GDP of the city with the largest regional population.",
        "query": "db.city.find({}, {GDP: 1}).sort({Regional_Population: -1}).limit(1)",
        "gpt4 answer": "db.city.find({}, { GDP: 1 }).sort({ Regional_Population: -1 }).limit(1)",
        "deepseek answer": "db.city.find({}, {GDP: 1}).sort({Regional_Population: -1}).limit(1)"
    },
    {
        "question_id": 3654,
        "spider_question_id": 6309,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "query": "db.Individuals.find({}, {individual_first_name: 1, individual_middle_name: 1, individual_last_name: 1}).sort({individual_last_name: 1})",
        "gpt4 answer": "db.Individuals.find({}, { individual_first_name: 1, individual_middle_name: 1, individual_last_name: 1 }).sort({ individual_last_name: 1 })",
        "deepseek answer": "db.Individuals.find({}, {individual_first_name: 1, individual_middle_name: 1, individual_last_name: 1}).sort({individual_last_name: 1})"
    },
    {
        "question_id": 3655,
        "spider_question_id": 6310,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "query": "db.Individuals.find({}, {individual_first_name: 1, individual_middle_name: 1, individual_last_name: 1}).sort({individual_last_name: 1})",
        "gpt4 answer": "db.Individuals.find({}, { individual_first_name: 1, individual_middle_name: 1, individual_last_name: 1 }).sort({ individual_last_name: 1 })",
        "deepseek answer": "db.Individuals.find({}, {individual_first_name: 1, individual_middle_name: 1, individual_last_name: 1}).sort({individual_last_name: 1})"
    },
    {
        "question_id": 3656,
        "spider_question_id": 6314,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the party form that is most common?",
        "query": "db.Forms.aggregate([ { $lookup: { from: \"Party_Forms\", localField: \"form_id\", foreignField: \"form_id\", as: \"party_forms\" } }, { $unwind: \"$party_forms\" }, { $group: { _id: \"$form_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { form_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Party_Forms.aggregate([ { $group: { _id: \"$form_id\", total: { $sum: 1 } } }, { $sort: { total: -1 } }, { $limit: 1 }, { $lookup: { from: \"Forms\", localField: \"_id\", foreignField: \"form_id\", as: \"formDetails\" } }, { $unwind: \"$formDetails\" }, { $project: { form_name: \"$formDetails.form_name\" } } ])",
        "deepseek answer": "db.Forms.aggregate([ { $lookup: { from: \"Party_Forms\", localField: \"form_id\", foreignField: \"form_id\", as: \"party_forms\" } }, { $unwind: \"$party_forms\" }, { $group: { _id: \"$form_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { form_name: \"$_id\" } } ])"
    },
    {
        "question_id": 3657,
        "spider_question_id": 6315,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , party_phone FROM parties WHERE party_email = 'enrico09@example.com'",
        "question": "Find the payment method and phone of the party with email 'enrico09@example.com'.",
        "query": "db.Parties.find( { party_email: 'enrico09@example.com' }, { payment_method_code: 1, party_phone: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Parties.find( { party_email: 'enrico09@example.com' }, { payment_method_code: 1, party_phone: 1 } )"
    },
    {
        "question_id": 3658,
        "spider_question_id": 6316,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , party_phone FROM parties WHERE party_email = 'enrico09@example.com'",
        "question": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
        "query": "db.Parties.find( { party_email: 'enrico09@example.com' }, { payment_method_code: 1, party_phone: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Parties.find( { party_email: 'enrico09@example.com' }, { payment_method_code: 1, party_phone: 1 } )"
    },
    {
        "question_id": 3659,
        "spider_question_id": 6319,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "question": "List all the name of organizations in order of the date formed.",
        "query": "db.Organizations.find({}, { organization_name: 1 }).sort({ date_formed: 1 })",
        "gpt4 answer": "db.Organizations.find({}, { organization_name: 1 }).sort({ date_formed: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3660,
        "spider_question_id": 6320,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "query": "db.Organizations.find({}, {organization_name: 1}).sort({date_formed: 1})",
        "gpt4 answer": "db.Organizations.find({}, {organization_name: 1}).sort({date_formed: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3661,
        "spider_question_id": 6322,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "question": "What is the name of the organization that was formed most recently?",
        "query": "db.Organizations.find({}, { organization_name: 1 }).sort({ date_formed: -1 }).limit(1)",
        "gpt4 answer": "db.Organizations.find({}, { organization_name: 1 }).sort({ date_formed: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3662,
        "spider_question_id": 6323,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = 'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1",
        "question": "Find the last name of the latest contact individual of the organization 'Labour Party'.",
        "query": "db.Organizations.aggregate([ { $match: { organization_name: \"Labour Party\" } }, { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $unwind: \"$contact_individuals\" }, { $lookup: { from: \"Individuals\", localField: \"contact_individuals.individual_id\", foreignField: \"individual_id\", as: \"individual\" } }, { $unwind: \"$individual\" }, { $sort: { \"contact_individuals.date_contact_to\": -1 } }, { $limit: 1 }, { $project: { individual_last_name: \"$individual.individual_last_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Organizations.aggregate([ { $match: { organization_name: \"Labour Party\" } }, { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $unwind: \"$contact_individuals\" }, { $lookup: { from: \"Individuals\", localField: \"contact_individuals.individual_id\", foreignField: \"individual_id\", as: \"individual\" } }, { $unwind: \"$individual\" }, { $sort: { \"contact_individuals.date_contact_to\": -1 } }, { $limit: 1 }, { $project: { individual_last_name: \"$individual.individual_last_name\" } } ])"
    },
    {
        "question_id": 3663,
        "spider_question_id": 6324,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = 'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "query": "db.Organizations.aggregate([ { $match: { organization_name: \"Labour Party\" } }, { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $unwind: \"$contact_individuals\" }, { $lookup: { from: \"Individuals\", localField: \"contact_individuals.individual_id\", foreignField: \"individual_id\", as: \"individual\" } }, { $unwind: \"$individual\" }, { $sort: { \"contact_individuals.date_contact_to\": -1 } }, { $limit: 1 }, { $project: { individual_last_name: \"$individual.individual_last_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Organizations.aggregate([ { $match: { organization_name: \"Labour Party\" } }, { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $unwind: \"$contact_individuals\" }, { $lookup: { from: \"Individuals\", localField: \"contact_individuals.individual_id\", foreignField: \"individual_id\", as: \"individual\" } }, { $unwind: \"$individual\" }, { $sort: { \"contact_individuals.date_contact_to\": -1 } }, { $limit: 1 }, { $project: { individual_last_name: \"$individual.individual_last_name\" } } ])"
    },
    {
        "question_id": 3664,
        "spider_question_id": 6334,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM addresses WHERE state_province_county = 'Colorado'",
        "question": "Count the number of cities in the state of Colorado.",
        "query": "db.Addresses.aggregate([ { $match: { state_province_county: 'Colorado' }}, { $group: { _id: \"$town_city\" } }, { $count: \"number_of_cities\" } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $match: { state_province_county: 'Colorado' }}, { $group: { _id: \"$town_city\" } }, { $count: \"number_of_cities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3665,
        "spider_question_id": 6335,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3",
        "question": "Find the payment method code used by more than 3 parties.",
        "query": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { payment_method_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { payment_method_code: \"$_id\" } } ])",
        "deepseek answer": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { payment_method_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3666,
        "spider_question_id": 6336,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "query": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { payment_method_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $project: { payment_method_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3667,
        "spider_question_id": 6337,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'",
        "question": "Find the name of organizations whose names contain 'Party'.",
        "query": "db.Organizations.find( { organization_name: { $regex: /Party/ } }, { organization_name: 1 } )",
        "gpt4 answer": "db.Organizations.find({ organization_name: /Party/ }, { organization_name: 1 })",
        "deepseek answer": "db.Organizations.find( { organization_name: { $regex: /Party/ } }, { organization_name: 1 } )"
    },
    {
        "question_id": 3668,
        "spider_question_id": 6340,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "question": "Count the number of different payment method codes used by parties.",
        "query": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\" } }, { $count: \"distinct_payment_method_codes\" } ])",
        "gpt4 answer": "db.Parties.aggregate([ { $group: { _id: \"$payment_method_code\" } }, { $count: \"distinct_payment_method_codes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3669,
        "spider_question_id": 6341,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "query": "db.Parties.aggregate([ { $lookup: { from: \"Party_Services\", localField: \"party_id\", foreignField: \"customer_id\", as: \"services\" } }, { $project: { party_email: 1 } }, { $sort: { serviceCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Parties.aggregate([ { $lookup: { from: \"Party_Services\", localField: \"party_id\", foreignField: \"customer_id\", as: \"services\" } }, { $project: { party_email: 1 } }, { $sort: { serviceCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3670,
        "spider_question_id": 6342,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the party email that has used party services the greatest number of times.",
        "query": "db.Parties.aggregate([ { $lookup: { from: \"Party_Services\", localField: \"party_id\", foreignField: \"customer_id\", as: \"party_services\" } }, { $project: { party_email: 1 } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Parties.aggregate([ { $lookup: { from: \"Party_Services\", localField: \"party_id\", foreignField: \"customer_id\", as: \"party_services\" } }, { $project: { party_email: 1 } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3671,
        "spider_question_id": 6343,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'",
        "question": "Which state can address '6862 Kaitlyn Knolls' possibly be in?",
        "query": "db.Addresses.find({ line_1_number_building: /6862 Kaitlyn Knolls/ }, { state_province_county: 1 })",
        "gpt4 answer": "db.Addresses.find({ line_1_number_building: /6862 Kaitlyn Knolls/ }, { state_province_county: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3672,
        "spider_question_id": 6344,
        "db_id": "e_government",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'",
        "question": "Give the state corresponding to the line number building '6862 Kaitlyn Knolls'.",
        "query": "db.Addresses.findOne({ line_1_number_building: /6862 Kaitlyn Knolls/ }, { state_province_county: 1 })",
        "gpt4 answer": "db.Addresses.find( {line_1_number_building: /6862 Kaitlyn Knolls/}, {state_province_county: 1} )",
        "deepseek answer": "db.Addresses.findOne({ line_1_number_building: /6862 Kaitlyn Knolls/ }, { state_province_county: 1 })"
    },
    {
        "question_id": 3673,
        "spider_question_id": 6345,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "query": "db.Organizations.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $project: { organization_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Organizations.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $project: { organization_name: 1, numberOfContacts: { $size: \"$contact_individuals\" } } }, { $sort: { numberOfContacts: -1 } }, { $limit: 1 }, { $project: { organization_name: 1 } } ])",
        "deepseek answer": "db.Organizations.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $project: { organization_name: 1 } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3674,
        "spider_question_id": 6346,
        "db_id": "e_government",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the organization which has the most contact individuals.",
        "query": "db.Organizations.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $project: { organization_name: 1} }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Organizations.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $group: { _id: \"$organization_name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Organizations.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"organization_id\", foreignField: \"organization_id\", as: \"contact_individuals\" } }, { $project: { organization_name: 1} }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3675,
        "spider_question_id": 6347,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "query": "db.Individuals.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"individual_id\", foreignField: \"individual_id\", as: \"contact_individuals\" } }, { $match: { \"contact_individuals\": { $ne: [] } } }, { $project: { individual_last_name: 1 } } ])",
        "gpt4 answer": "db.Individuals.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"individual_id\", foreignField: \"individual_id\", as: \"contact_individuals\" } }, { $match: {\"contact_individuals\": {$ne: []}} }, { $group: { _id: \"$individual_last_name\" } }, { $project: { individual_last_name: \"$_id\" } } ])",
        "deepseek answer": "db.Individuals.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"individual_id\", foreignField: \"individual_id\", as: \"contact_individuals\" } }, { $match: { \"contact_individuals\": { $ne: [] } } }, { $project: { individual_last_name: 1 } } ])"
    },
    {
        "question_id": 3676,
        "spider_question_id": 6348,
        "db_id": "e_government",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "query": "db.Individuals.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"individual_id\", foreignField: \"individual_id\", as: \"contact_individuals\" } }, { $match: { \"contact_individuals.individual_id\": { $exists: true } } }, { $project: { individual_last_name: 1 } } ])",
        "gpt4 answer": "db.Individuals.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"individual_id\", foreignField: \"individual_id\", as: \"contact_relationships\" } }, { $match: { contact_relationships: { $ne: [] } } }, { $group: { _id: \"$individual_last_name\" } }, { $project: { individual_last_name: \"$_id\" } } ])",
        "deepseek answer": "db.Individuals.aggregate([ { $lookup: { from: \"Organization_Contact_Individuals\", localField: \"individual_id\", foreignField: \"individual_id\", as: \"contact_individuals\" } }, { $match: { \"contact_individuals.individual_id\": { $exists: true } } }, { $project: { individual_last_name: 1 } } ])"
    },
    {
        "question_id": 3677,
        "spider_question_id": 6350,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , home_city , age FROM driver",
        "question": "Show the name, home city, and age for all drivers.",
        "query": "db.driver.find({}, { Name: 1, Home_city: 1, Age: 1 })",
        "gpt4 answer": "db.driver.find({}, { Name: 1, Home_city: 1, Age: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3678,
        "spider_question_id": 6351,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT party , count(*) FROM driver GROUP BY party",
        "question": "Show the party and the number of drivers in each party.",
        "query": "db.driver.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $project: { party: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.driver.aggregate([ { $group: { _id: \"$Party\", NumberOfDrivers: { $sum: 1 } }} ])",
        "deepseek answer": "db.driver.aggregate([ { $group: { _id: \"$Party\", count: { $sum: 1 } } }, { $project: { party: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3679,
        "spider_question_id": 6352,
        "db_id": "school_bus",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM driver ORDER BY age DESC",
        "question": "Show the name of drivers in descending order of age.",
        "query": "db.driver.find({}, { Name: 1}).sort({Age: -1})",
        "gpt4 answer": "db.driver.find({}, { Name: 1 }).sort({ Age: -1 })",
        "deepseek answer": "db.driver.find({}, { Name: 1}).sort({Age: -1})"
    },
    {
        "question_id": 3680,
        "spider_question_id": 6354,
        "db_id": "school_bus",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the home city with the most number of drivers.",
        "query": "db.driver.aggregate([ { $group: { _id: \"$Home_city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { home_city: \"$_id\" } } ])",
        "gpt4 answer": "db.driver.aggregate([ { $group: { _id: \"$Home_city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.driver.aggregate([ { $group: { _id: \"$Home_city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { home_city: \"$_id\" } } ])"
    },
    {
        "question_id": 3681,
        "spider_question_id": 6355,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "query": "db.driver.find( { Home_city: \"Hartford\", Age: { $gt: 40 } }, { Party: 1 } )",
        "gpt4 answer": "db.driver.find({ Home_city: \"Hartford\", Age: { $gt: 40 } }, { Party: 1 })",
        "deepseek answer": "db.driver.find( { Home_city: \"Hartford\", Age: { $gt: 40 } }, { Party: 1 } )"
    },
    {
        "question_id": 3682,
        "spider_question_id": 6357,
        "db_id": "school_bus",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40",
        "question": "Show all home cities except for those having a driver older than 40.",
        "query": "db.driver.aggregate([ { $group: { _id: \"$Home_city\", maxAge: { $max: \"$Age\" } } }, { $match: { maxAge: { $lte: 40 } } }, { $project: { Home_city: \"$_id\" } } ])",
        "gpt4 answer": "db.driver.aggregate([ { $group: { _id: \"$Home_city\", maxAge: { $max: \"$Age\" } } }, { $match: { maxAge: { $lte: 40 } } }, { $project: { Home_city: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3683,
        "spider_question_id": 6358,
        "db_id": "school_bus",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "question": "Show the names of the drivers without a school bus.",
        "query": "db.driver.aggregate([ { $lookup: { from: \"school_bus\", localField: \"Driver_ID\", foreignField: \"Driver_ID\", as: \"bus_info\" } }, { $match: { \"bus_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.driver.aggregate([ { $lookup: { from: \"school_bus\", localField: \"Driver_ID\", foreignField: \"Driver_ID\", as: \"bus_info\" } }, { $match: { \"bus_info\": { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3684,
        "spider_question_id": 6359,
        "db_id": "school_bus",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*) = 2",
        "question": "Show the types of schools that have two schools.",
        "query": "db.school.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Type: \"$_id\" } } ])",
        "gpt4 answer": "db.school.aggregate([ { $group: { _id: \"$Type\", count: {$sum: 1} } }, { $match: { count: 2 } }, { $project: { Type: \"$_id\" } } ])",
        "deepseek answer": "db.school.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Type: \"$_id\" } } ])"
    },
    {
        "question_id": 3685,
        "spider_question_id": 6360,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
        "question": "Show the school name and driver name for all school buses.",
        "query": "db.school_bus.aggregate([ { $lookup: { from: \"school\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"school_info\" } }, { $lookup: { from: \"driver\", localField: \"Driver_ID\", foreignField: \"Driver_ID\", as: \"driver_info\" } }, { $unwind: \"$school_info\" }, { $unwind: \"$driver_info\" }, { $project: { school: \"$school_info.School\", name: \"$driver_info.Name\" } } ])",
        "gpt4 answer": "db.school_bus.aggregate([ { $lookup: { from: \"school\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"school_info\" } }, { $lookup: { from: \"driver\", localField: \"Driver_ID\", foreignField: \"Driver_ID\", as: \"driver_info\" } }, { $unwind: \"$school_info\" }, { $unwind: \"$driver_info\" }, { $project: { school: \"$school_info.School\", name: \"$driver_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3686,
        "spider_question_id": 6361,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(years_working) , min(years_working) , avg(years_working) FROM school_bus",
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "query": "db.school_bus.aggregate([ { $group: { _id: null, maxYearsWorking: { $max: \"$Years_Working\" }, minYearsWorking: { $min: \"$Years_Working\" }, avgYearsWorking: { $avg: \"$Years_Working\" } } } , { $project: { maxYearsWorking: 1, minYearsWorking:1, avgYearsWorking:1} }])",
        "gpt4 answer": "db.school_bus.aggregate([ { $group: { _id: null, maxYearsWorking: { $max: \"$Years_Working\" }, minYearsWorking: { $min: \"$Years_Working\" }, avgYearsWorking: { $avg: \"$Years_Working\" } } }, { $project: { maxYearsWorking: 1, minYearsWorking: 1, avgYearsWorking: { $round: [\"$avgYearsWorking\", 2] } } } ])",
        "deepseek answer": "db.school_bus.aggregate([ { $group: { _id: null, maxYearsWorking: { $max: \"$Years_Working\" }, minYearsWorking: { $min: \"$Years_Working\" }, avgYearsWorking: { $avg: \"$Years_Working\" } } } , { $project: { maxYearsWorking: 1, minYearsWorking:1, avgYearsWorking:1} }])"
    },
    {
        "question_id": 3687,
        "spider_question_id": 6362,
        "db_id": "school_bus",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT school , TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
        "question": "Show the school name and type for schools without a school bus.",
        "query": "db.school.aggregate([ { $lookup: { from: \"school_bus\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"bus_info\" } }, { $match: { \"bus_info\": { $eq: [] } } }, { $project: { School: 1, Type: 1 } } ])",
        "gpt4 answer": "db.school.aggregate([ { $lookup: { from: \"school_bus\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"bus_info\" } }, { $match: { \"bus_info\": { $eq: [] } } }, { $project: { School: 1, Type: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3688,
        "spider_question_id": 6363,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
        "question": "Show the type of school and the number of buses for each type.",
        "query": "db.school_bus.aggregate([ { $lookup: { from: \"school\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"school_info\" } }, { $unwind: \"$school_info\" }, { $group: { _id: \"$school_info.Type\", count: { $sum: 1 } } }, { $project: { type: \"$_id\", count: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.school_bus.aggregate([ { $lookup: { from: \"school\", localField: \"School_ID\", foreignField: \"School_ID\", as: \"school_info\" } }, { $unwind: \"$school_info\" }, { $group: { _id: \"$school_info.Type\", count: { $sum: 1 } } }, { $project: { type: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3689,
        "spider_question_id": 6364,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM driver WHERE home_city = 'Hartford' OR age < 40",
        "question": "How many drivers are from Hartford city or younger than 40?",
        "query": "db.driver.aggregate([ { $match: { $or: [ { Home_city: \"Hartford\" }, { Age: { $lt: 40 } } ] } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.driver.aggregate([ { $match: { $or: [ { Home_city: \"Hartford\" }, { Age: { $lt: 40 } } ] } }, { $count: \"total\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3690,
        "spider_question_id": 6365,
        "db_id": "school_bus",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "query": "db.driver.find( { Home_city: \"Hartford\", Age: { $lt: 40 } }, { Name: 1 } )",
        "gpt4 answer": "db.driver.find( { Home_city: \"Hartford\", Age: { $lt: 40 } }, { Name: 1 } )",
        "deepseek answer": "db.driver.find( { Home_city: \"Hartford\", Age: { $lt: 40 } }, { Name: 1 } )"
    },
    {
        "question_id": 3691,
        "spider_question_id": 6366,
        "db_id": "school_bus",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1",
        "question": "find the name of driver who is driving the school bus with the longest working history.",
        "query": "db.driver.aggregate([ { $lookup: { from: \"school_bus\", localField: \"Driver_ID\", foreignField: \"Driver_ID\", as: \"school_bus_info\" } }, { $unwind: \"$school_bus_info\" }, { $sort: { \"school_bus_info.Years_Working\": -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.driver.aggregate([ { $lookup: { from: \"school_bus\", localField: \"Driver_ID\", foreignField: \"Driver_ID\", as: \"school_bus_info\" } }, { $unwind: \"$school_bus_info\" }, { $sort: { \"school_bus_info.Years_Working\": -1 } }, { $limit: 1 }, { $project: { Name: 1 } } ])"
    },
    {
        "question_id": 3692,
        "spider_question_id": 6368,
        "db_id": "flight_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT vehicle_flight_number , date , pilot FROM flight ORDER BY altitude ASC",
        "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
        "query": "db.flight.find({}, { Vehicle_Flight_number: 1, Date: 1, Pilot: 1 }).sort({ Altitude: 1 })",
        "gpt4 answer": "db.flight.find({}, { Vehicle_Flight_number: 1, Date: 1, Pilot: 1 }).sort({ Altitude: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3693,
        "spider_question_id": 6370,
        "db_id": "flight_company",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(group_equity_shareholding) FROM operate_company",
        "question": "What is maximum group equity shareholding of the companies?",
        "query": "db.operate_company.aggregate([ { $group: { _id: null, maxGroupEquityShareholding: { $max: \"$Group_Equity_Shareholding\" } } }, { $project: { maxGroupEquityShareholding: 1 } } ])",
        "gpt4 answer": "db.operate_company.aggregate([ { $group: { _id: null, maxGroupEquityShareholding: { $max: \"$Group_Equity_Shareholding\" } } }, { $project: { maxGroupEquityShareholding: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3694,
        "spider_question_id": 6371,
        "db_id": "flight_company",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(velocity) FROM flight WHERE pilot = 'Thompson'",
        "question": "What is the velocity of the pilot named 'Thompson'?",
        "query": "db.flight.aggregate([ { $match: { Pilot: 'Thompson' }}, { $group: { _id: null, avgVelocity: { $avg: \"$Velocity\" } } }, { $project: { avgVelocity: 1 } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $match: { Pilot: 'Thompson' }}, { $group: { _id: null, avgVelocity: { $avg: \"$Velocity\" } } }, { $project: { avgVelocity: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3695,
        "spider_question_id": 6373,
        "db_id": "flight_company",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM airport WHERE country != 'Iceland'",
        "question": "What are the names of the airports which are not in the country 'Iceland'?",
        "query": "db.airport.find({Country: {$ne: 'Iceland'}}, { name: 1})",
        "gpt4 answer": "db.airport.find({ Country: { $ne: 'Iceland' } }, { name: 1 })",
        "deepseek answer": "db.airport.find({Country: {$ne: 'Iceland'}}, { name: 1})"
    },
    {
        "question_id": 3696,
        "spider_question_id": 6374,
        "db_id": "flight_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "query": "db.operate_company.aggregate([ { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"company_id\", as: \"flights\" } }, { $unwind: \"$flights\" }, { $match: { \"flights.Velocity\": { $lt: 200 } } }, { $group: { _id: \"$Type\" } }, { $project: { Type: \"$_id\" } } ])",
        "gpt4 answer": "db.operate_company.aggregate([ { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"company_id\", as: \"flights\" } }, { $unwind: \"$flights\" }, { $match: { \"flights.Velocity\": { $lt: 200 } } }, { $group: { _id: \"$Type\" } }, { $project: { Type: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3697,
        "spider_question_id": 6375,
        "db_id": "flight_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count(*) > 1",
        "question": "What are the ids and names of the companies that operated more than one flight?",
        "query": "db.operate_company.aggregate([ { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"company_id\", as: \"flight_data\" } }, { $match: { \"flight_data.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])",
        "gpt4 answer": "db.operate_company.aggregate([ { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"company_id\", as: \"flights\" } }, { $match: { \"flights.1\": { $exists: true } } }, { $project: { id: \"$id\", name: \"$name\" } } ])",
        "deepseek answer": "db.operate_company.aggregate([ { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"company_id\", as: \"flight_data\" } }, { $match: { \"flight_data.1\": { $exists: true } } }, { $project: { id: 1, name: 1 } } ])"
    },
    {
        "question_id": 3698,
        "spider_question_id": 6377,
        "db_id": "flight_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "query": "db.airport.aggregate([ { $match: { $or: [ {Country: \"United States\"}, {name: \"Billund Airport\"} ] } }, { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"airport_id\", as: \"flight_info\" } }, { $unwind: \"$flight_info\" }, { $group: { _id: \"$flight_info.Pilot\" } }, { $project: { pilot: \"$_id\" } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $lookup: { from: \"airport\", localField: \"airport_id\", foreignField: \"id\", as: \"airport_info\" } }, { $match: { $or: [ { \"airport_info.Country\": \"United States\" }, { \"airport_info.name\": \"Billund Airport\" } ] } }, { $group: { _id: \"$Pilot\" } } ])",
        "deepseek answer": "db.airport.aggregate([ { $match: { $or: [ {Country: \"United States\"}, {name: \"Billund Airport\"} ] } }, { $lookup: { from: \"flight\", localField: \"id\", foreignField: \"airport_id\", as: \"flight_info\" } }, { $unwind: \"$flight_info\" }, { $group: { _id: \"$flight_info.Pilot\" } }, { $project: { pilot: \"$_id\" } } ])"
    },
    {
        "question_id": 3699,
        "spider_question_id": 6378,
        "db_id": "flight_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE , count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common company type, and how many are there?",
        "query": "db.operate_company.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.operate_company.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.operate_company.aggregate([ { $group: { _id: \"$Type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3700,
        "spider_question_id": 6381,
        "db_id": "flight_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM airport WHERE name LIKE '%international%'",
        "question": "Which of the airport names contains the word 'international'?",
        "query": "db.airport.find({name: {$regex: /international/i}}, { name: 1})",
        "gpt4 answer": "db.airport.find({ \"name\": /international/i }, { \"name\": 1, \"_id\": 0 })",
        "deepseek answer": "db.airport.find({name: {$regex: /international/i}}, { name: 1})"
    },
    {
        "question_id": 3701,
        "spider_question_id": 6383,
        "db_id": "flight_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , country FROM airport GROUP BY country",
        "question": "how many airports are there in each country?",
        "query": "db.airport.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.airport.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3702,
        "spider_question_id": 6384,
        "db_id": "flight_company",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT country FROM airport GROUP BY country HAVING count(*) > 2",
        "question": "which countries have more than 2 airports?",
        "query": "db.airport.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.airport.aggregate([ { $group: { _id: \"$Country\", airportCount: { $sum: 1 } } }, { $match: { airportCount: { $gt: 2 } } }, { $project: { Country: \"$_id\" } } ])",
        "deepseek answer": "db.airport.aggregate([ { $group: { _id: \"$Country\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3703,
        "spider_question_id": 6385,
        "db_id": "flight_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1",
        "question": "which pilot is in charge of the most number of flights?",
        "query": "db.flight.aggregate([ { $group: { _id: \"$Pilot\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { pilot: \"$_id\" } } ])",
        "gpt4 answer": "db.flight.aggregate([ { $group: { _id: \"$Pilot\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Pilot: \"$_id\" } } ])",
        "deepseek answer": "db.flight.aggregate([ { $group: { _id: \"$Pilot\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { pilot: \"$_id\" } } ])"
    },
    {
        "question_id": 3704,
        "spider_question_id": 6388,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT account_id , account_details FROM Accounts",
        "question": "Show all account ids and account details.",
        "query": "db.Accounts.find({}, { Account_ID: 1, Account_Details: 1 })",
        "gpt4 answer": "db.Accounts.find({}, { Account_ID: 1, Account_Details: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3705,
        "spider_question_id": 6389,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT account_id , account_details FROM Accounts",
        "question": "What are the ids and details of all accounts?",
        "query": "db.Accounts.find({}, { Account_ID: 1, Account_Details: 1 })",
        "gpt4 answer": "db.Accounts.find({}, { Account_ID: 1, Account_Details: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3706,
        "spider_question_id": 6392,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT STATEMENT_ID , statement_details FROM Statements",
        "question": "List all statement ids and statement details.",
        "query": "db.Statements.find({}, { Statement_ID: 1, Statement_Details: 1})",
        "gpt4 answer": "db.Statements.find({}, { Statement_ID: 1, Statement_Details: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3707,
        "spider_question_id": 6393,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT STATEMENT_ID , statement_details FROM Statements",
        "question": "What are the ids and details of all statements?",
        "query": "db.Statements.find({}, { Statement_ID: 1, Statement_Details: 1 })",
        "gpt4 answer": "db.Statements.find({}, { Statement_ID: 1, Statement_Details: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3708,
        "spider_question_id": 6394,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "query": "db.Accounts.aggregate([ { $lookup: { from: \"Statements\", localField: \"Statement_ID\", foreignField: \"Statement_ID\", as: \"StatementDetails\" } }, { $unwind: \"$StatementDetails\" }, { $project: { statement_id: \"$Statement_ID\", statement_details: \"$StatementDetails.Statement_Details\", account_details: \"$Account_Details\" } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $lookup: { from: \"Statements\", localField: \"Statement_ID\", foreignField: \"Statement_ID\", as: \"StatementDetails\" } }, { $unwind: \"$StatementDetails\" }, { $project: { statement_id: \"$Statement_ID\", statement_details: \"$StatementDetails.Statement_Details\", account_details: \"$Account_Details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3709,
        "spider_question_id": 6395,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "query": "db.Accounts.aggregate([ { $lookup: { from: \"Statements\", localField: \"Statement_ID\", foreignField: \"Statement_ID\", as: \"statement\" } }, { $unwind: \"$statement\" }, { $project: { statement_id: \"$Statement_ID\", statement_details: \"$statement.Statement_Details\", account_details: \"$Account_Details\" } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $lookup: { from: \"Statements\", localField: \"Statement_ID\", foreignField: \"Statement_ID\", as: \"statement\" } }, { $unwind: \"$statement\" }, { $project: { statement_id: \"$Statement_ID\", statement_details: \"$statement.Statement_Details\", account_details: \"$Account_Details\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3710,
        "spider_question_id": 6396,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "question": "Show all statement id and the number of accounts for each statement.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $project: { STATEMENT_ID: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", numberOfAccounts: { $sum: 1 } } }, { $project: { STATEMENT_ID: \"$_id\", numberOfAccounts: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $project: { STATEMENT_ID: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3711,
        "spider_question_id": 6397,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT STATEMENT_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", NumberOfAccounts: { $sum: 1 } } }, { $project: { Statement_ID: \"$_id\", NumberOfAccounts: 1 } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3712,
        "spider_question_id": 6398,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Statements\", localField: \"_id\", foreignField: \"Statement_ID\", as: \"statement_details\" } }, { $project: { statement_id: \"$_id\", statement_details: { $arrayElemAt: [\"$statement_details.Statement_Details\", 0] } } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Statements\", localField: \"_id\", foreignField: \"Statement_ID\", as: \"statement_details\" } }, { $unwind: \"$statement_details\" }, { $project: { statement_id: \"$_id\", statement_details: \"$statement_details.Statement_Details\" } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Statements\", localField: \"_id\", foreignField: \"Statement_ID\", as: \"statement_details\" } }, { $project: { statement_id: \"$_id\", statement_details: { $arrayElemAt: [\"$statement_details.Statement_Details\", 0] } } } ])"
    },
    {
        "question_id": 3713,
        "spider_question_id": 6399,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.statement_id , T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
        "query": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Statements\", localField: \"_id\", foreignField: \"Statement_ID\", as: \"statement_details\" } }, { $project: { statement_id: \"$_id\", statement_details: { $arrayElemAt: [\"$statement_details.Statement_Details\", 0] } } } ])",
        "gpt4 answer": "db.Accounts.aggregate([ { $lookup: { from: \"Statements\", localField: \"Statement_ID\", foreignField: \"Statement_ID\", as: \"StatementDetails\" } }, { $unwind: \"$StatementDetails\" }, { $group: { _id: \"$Statement_ID\", StatementDetails: { $first: \"$StatementDetails.Statement_Details\" }, Count: { $sum: 1 } } }, { $sort: { Count: -1 } }, { $limit: 1 }, { $project: { Statement_ID: \"$_id\", Statement_Details: \"$StatementDetails\" } } ])",
        "deepseek answer": "db.Accounts.aggregate([ { $group: { _id: \"$Statement_ID\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Statements\", localField: \"_id\", foreignField: \"Statement_ID\", as: \"statement_details\" } }, { $project: { statement_id: \"$_id\", statement_details: { $arrayElemAt: [\"$statement_details.Statement_Details\", 0] } } } ])"
    },
    {
        "question_id": 3714,
        "spider_question_id": 6404,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , document_name FROM Documents",
        "question": "Show the ids and names of all documents.",
        "query": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1})",
        "gpt4 answer": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3715,
        "spider_question_id": 6405,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_id , document_name FROM Documents",
        "question": "What are the ids and names for each of the documents?",
        "query": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1})",
        "gpt4 answer": "db.Documents.find({}, { Document_ID: 1, Document_Name: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3716,
        "spider_question_id": 6406,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , document_id FROM Documents WHERE document_type_code = 'BK'",
        "question": "Find names and ids of all documents with document type code BK.",
        "query": "db.Documents.find({ Document_Type_Code: \"BK\" }, { Document_Name: 1, Document_ID: 1 })",
        "gpt4 answer": "db.Documents.find({ Document_Type_Code: \"BK\" }, { Document_Name: 1, Document_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3717,
        "spider_question_id": 6407,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_name , document_id FROM Documents WHERE document_type_code = 'BK'",
        "question": "What are the names and ids of documents that have the type code BK?",
        "query": "db.Documents.find({ Document_Type_Code: \"BK\" }, { Document_Name: 1, Document_ID: 1 })",
        "gpt4 answer": "db.Documents.find({ Document_Type_Code: \"BK\" }, { Document_Name: 1, Document_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3718,
        "spider_question_id": 6408,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , project_id FROM Documents WHERE document_type_code = 'BK' GROUP BY project_id",
        "question": "How many documents are with document type code BK for each product id?",
        "query": "db.Documents.aggregate([ { $match: { Document_Type_Code: \"BK\" } }, { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { Document_Type_Code: \"BK\" } }, { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3719,
        "spider_question_id": 6409,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , project_id FROM Documents WHERE document_type_code = 'BK' GROUP BY project_id",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "db.Documents.aggregate([ { $match: { Document_Type_Code: 'BK' } }, { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { Document_Type_Code: 'BK' } }, { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3720,
        "spider_question_id": 6412,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT project_id , count(*) FROM Documents GROUP BY project_id",
        "question": "Show project ids and the number of documents in each project.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", NumberOfDocuments: { $sum: 1 } } }, { $project: { Project_ID: \"$_id\", NumberOfDocuments: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3721,
        "spider_question_id": 6413,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT project_id , count(*) FROM Documents GROUP BY project_id",
        "question": "How many documents correspond with each project id?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $project: { project_id: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3722,
        "spider_question_id": 6414,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the id of the project with least number of documents?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 } , { $project: { project_id: \"$_id\" } }])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { Project_ID: \"$_id\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 } , { $project: { project_id: \"$_id\" } }])"
    },
    {
        "question_id": 3723,
        "spider_question_id": 6415,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the project that has the fewest corresponding documents.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { project_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: \"$_id\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { project_id: \"$_id\" } } ])"
    },
    {
        "question_id": 3724,
        "spider_question_id": 6416,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2",
        "question": "Show the ids for projects with at least 2 documents.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Project_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", documentCount: { $sum: 1 } } }, { $match: { documentCount: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Project_ID: \"$_id\" } } ])"
    },
    {
        "question_id": 3725,
        "spider_question_id": 6417,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*) >= 2",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Project_ID: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", documentCount: { $sum: 1 } } }, { $match: { documentCount: { $gte: 2 } } }, { $project: { Project_ID: \"$_id\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Project_ID\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Project_ID: \"$_id\" } } ])"
    },
    {
        "question_id": 3726,
        "spider_question_id": 6418,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code",
        "question": "List document type codes and the number of documents in each code.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $project: { Document_Type_Code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } }} ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $project: { Document_Type_Code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3727,
        "spider_question_id": 6419,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code , count(*) FROM Documents GROUP BY document_type_code",
        "question": "How many documents are there of each type?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3728,
        "spider_question_id": 6420,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document type code with most number of documents?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Document_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Document_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 3729,
        "spider_question_id": 6421,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the document type that is most common.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { document_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { document_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3730,
        "spider_question_id": 6422,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3",
        "question": "Show the document type code with fewer than 3 documents.",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Document_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Document_Type_Code: \"$_id\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Document_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 3731,
        "spider_question_id": 6423,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*) < 3",
        "question": "What are the codes corresponding to document types for which there are less than 3 documents?",
        "query": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Document_Type_Code: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { document_type_code: \"$_id\" } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $group: { _id: \"$Document_Type_Code\", count: { $sum: 1 } } }, { $match: { count: { $lt: 3 } } }, { $project: { Document_Type_Code: \"$_id\" } } ])"
    },
    {
        "question_id": 3732,
        "spider_question_id": 6426,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
        "question": "Show all document type codes, document type names, document type descriptions.",
        "query": "db.Ref_Document_Types.aggregate([ { $project: { Document_Type_Code: 1, Document_Type_Name: 1, Document_Type_Description: 1 } } ])",
        "gpt4 answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1, Document_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Document_Types.aggregate([ { $project: { Document_Type_Code: 1, Document_Type_Name: 1, Document_Type_Description: 1 } } ])"
    },
    {
        "question_id": 3733,
        "spider_question_id": 6427,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "query": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1, Document_Type_Description: 1})",
        "gpt4 answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1, Document_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Document_Types.find({}, { Document_Type_Code: 1, Document_Type_Name: 1, Document_Type_Description: 1})"
    },
    {
        "question_id": 3734,
        "spider_question_id": 6428,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = 'Film'",
        "question": "What is the document type description for document type named Film?",
        "query": "db.Ref_Document_Types.findOne({Document_Type_Name: 'Film'}, {Document_Type_Description: 1})",
        "gpt4 answer": "db.Ref_Document_Types.find({ Document_Type_Name: 'Film' }, { Document_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Document_Types.findOne({Document_Type_Name: 'Film'}, {Document_Type_Description: 1})"
    },
    {
        "question_id": 3735,
        "spider_question_id": 6429,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = 'Film'",
        "question": "Return the description of the document type name 'Film'.",
        "query": "db.Ref_Document_Types.findOne({Document_Type_Name: 'Film'}, {Document_Type_Description: 1})",
        "gpt4 answer": "db.Ref_Document_Types.find({ Document_Type_Name: 'Film' }, { Document_Type_Description: 1 })",
        "deepseek answer": "db.Ref_Document_Types.findOne({Document_Type_Name: 'Film'}, {Document_Type_Description: 1})"
    },
    {
        "question_id": 3736,
        "spider_question_id": 6435,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT project_id , project_details FROM Projects",
        "question": "What are the ids and details for each project?",
        "query": "db.Projects.find({}, { Project_ID: 1, Project_Details: 1 })",
        "gpt4 answer": "db.Projects.find({}, { Project_ID: 1, Project_Details: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3737,
        "spider_question_id": 6436,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2",
        "question": "What is the project id and detail for the project with at least two documents?",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.2\": { $exists: true } } }, { $project: { Project_ID: 1, Project_Details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" }}, { $match: { \"documents.1\": { $exists: true } }}, { $project: { Project_ID: 1, Project_Details: 1 }} ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.2\": { $exists: true } } }, { $project: { Project_ID: 1, Project_Details: 1 } } ])"
    },
    {
        "question_id": 3738,
        "spider_question_id": 6437,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count(*) > 2",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.2\": { $exists: true } } }, { $project: { Project_ID: 1, Project_Details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.2\": { $exists: true } } }, { $project: { Project_ID: 1, Project_Details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.2\": { $exists: true } } }, { $project: { Project_ID: 1, Project_Details: 1 } } ])"
    },
    {
        "question_id": 3739,
        "spider_question_id": 6438,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = 'King Book'",
        "question": "What is the project detail for the project with document 'King Book'?",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"King Book\" } }, { $project: { Project_Details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"DocumentInfo\" } }, { $match: { \"DocumentInfo.Document_Name\": \"King Book\" } }, { $project: { Project_Details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"King Book\" } }, { $project: { Project_Details: 1 } } ])"
    },
    {
        "question_id": 3740,
        "spider_question_id": 6439,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = 'King Book'",
        "question": "Give the details of the project with the document name 'King Book'.",
        "query": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"King Book\" } }, { $project: { Project_Details: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $unwind: \"$documents\" }, { $match: { \"documents.Document_Name\": \"King Book\" } }, { $project: { Project_Details: 1 } } ])",
        "deepseek answer": "db.Projects.aggregate([ { $lookup: { from: \"Documents\", localField: \"Project_ID\", foreignField: \"Project_ID\", as: \"documents\" } }, { $match: { \"documents.Document_Name\": \"King Book\" } }, { $project: { Project_Details: 1 } } ])"
    },
    {
        "question_id": 3741,
        "spider_question_id": 6442,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT budget_type_code , budget_type_description FROM Ref_budget_codes",
        "question": "List all budget type codes and descriptions.",
        "query": "db.Ref_Budget_Codes.find({}, { Budget_Type_Code: 1, Budget_Type_Description: 1})",
        "gpt4 answer": "db.Ref_Budget_Codes.find({}, { Budget_Type_Code: 1, Budget_Type_Description: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3742,
        "spider_question_id": 6443,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT budget_type_code , budget_type_description FROM Ref_budget_codes",
        "question": "What are the type codes and descriptions of each budget type?",
        "query": "db.Ref_Budget_Codes.find({}, { Budget_Type_Code: 1, Budget_Type_Description: 1 })",
        "gpt4 answer": "db.Ref_Budget_Codes.find({}, { Budget_Type_Code: 1, Budget_Type_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3743,
        "spider_question_id": 6444,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = 'ORG'",
        "question": "What is the description for the budget type with code ORG?",
        "query": "db.Ref_Budget_Codes.findOne({ Budget_Type_Code: \"ORG\" }, { Budget_Type_Description: 1 })",
        "gpt4 answer": "db.Ref_Budget_Codes.findOne({ Budget_Type_Code: \"ORG\" }, { Budget_Type_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3744,
        "spider_question_id": 6445,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = 'ORG'",
        "question": "Return the description of the budget type that has the code ORG.",
        "query": "db.Ref_Budget_Codes.find({ Budget_Type_Code: 'ORG' }, { Budget_Type_Description: 1 })",
        "gpt4 answer": "db.Ref_Budget_Codes.find({ Budget_Type_Code: 'ORG' }, { Budget_Type_Description: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3745,
        "spider_question_id": 6448,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'",
        "question": "What are the document ids for the budget type code 'SF'?",
        "query": "db.Documents_with_Expenses.find({ Budget_Type_Code: 'SF' }, { Document_ID: 1 })",
        "gpt4 answer": "db.Documents_with_Expenses.find({ Budget_Type_Code: 'SF' }, { Document_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3746,
        "spider_question_id": 6449,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'",
        "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
        "query": "db.Documents_with_Expenses.find({ Budget_Type_Code: 'SF' }, { Document_ID: 1 })",
        "gpt4 answer": "db.Documents_with_Expenses.find({ Budget_Type_Code: 'SF' }, { Document_ID: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3747,
        "spider_question_id": 6451,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "query": "db.Documents_with_Expenses.aggregate([ { $lookup: { from: \"Ref_Budget_Codes\", localField: \"Budget_Type_Code\", foreignField: \"Budget_Type_Code\", as: \"budget_info\" } }, { $unwind: \"$budget_info\" }, { $project: { Budget_Type_Code: \"$budget_info.Budget_Type_Code\", Budget_Type_Description: \"$budget_info.Budget_Type_Description\", Document_ID: 1 } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $lookup: { from: \"Ref_Budget_Codes\", localField: \"Budget_Type_Code\", foreignField: \"Budget_Type_Code\", as: \"budget_info\" } }, { $unwind: \"$budget_info\" }, { $project: { Budget_Type_Code: \"$budget_info.Budget_Type_Code\", Budget_Type_Description: \"$budget_info.Budget_Type_Description\", Document_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3748,
        "spider_question_id": 6452,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = 'Government'",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "query": "db.Documents_with_Expenses.aggregate([ { $lookup: { from: \"Ref_Budget_Codes\", localField: \"Budget_Type_Code\", foreignField: \"Budget_Type_Code\", as: \"budget_info\" } }, { $unwind: \"$budget_info\" }, { $match: { \"budget_info.Budget_Type_Description\": \"Government\" } }, { $project: { Document_ID: 1 } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $lookup: { from: \"Ref_Budget_Codes\", localField: \"Budget_Type_Code\", foreignField: \"Budget_Type_Code\", as: \"budget_info\" } }, { $unwind: \"$budget_info\" }, { $match: { \"budget_info.Budget_Type_Description\": \"Government\" } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3749,
        "spider_question_id": 6453,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = 'Government'",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "query": "db.Documents_with_Expenses.aggregate([ { $lookup: { from: \"Ref_Budget_Codes\", localField: \"Budget_Type_Code\", foreignField: \"Budget_Type_Code\", as: \"budget_info\" } }, { $unwind: \"$budget_info\" }, { $match: { \"budget_info.Budget_Type_Description\": \"Government\" } }, { $project: { Document_ID: 1 } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $lookup: { from: \"Ref_Budget_Codes\", localField: \"Budget_Type_Code\", foreignField: \"Budget_Type_Code\", as: \"budget_info\" } }, { $unwind: \"$budget_info\" }, { $match: { \"budget_info.Budget_Type_Description\": \"Government\" } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3750,
        "spider_question_id": 6454,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "question": "Show budget type codes and the number of documents in each budget type.",
        "query": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $project: { Budget_Type_Code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", NumberOfDocuments: { $sum: 1 } } }, { $project: { Budget_Type_Code: \"$_id\", NumberOfDocuments: 1 } } ])",
        "deepseek answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $project: { Budget_Type_Code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3751,
        "spider_question_id": 6455,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT budget_type_code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "query": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $project: { budget_type_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3752,
        "spider_question_id": 6456,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the budget type code with most number of documents.",
        "query": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3753,
        "spider_question_id": 6457,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the budget type code that is most common among documents with expenses.",
        "query": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { budget_type_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Documents_with_Expenses.aggregate([ { $group: { _id: \"$Budget_Type_Code\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { budget_type_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3754,
        "spider_question_id": 6458,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "question": "What are the ids of documents which don't have expense budgets?",
        "query": "db.Documents.find( { \"Document_ID\": { \"$nin\": db.Documents_with_Expenses.distinct(\"Document_ID\") } }, { \"Document_ID\": 1, \"_id\": 0 } )",
        "gpt4 answer": "db.Documents.find( { \"Document_ID\": { \"$nin\": db.Documents_with_Expenses.distinct(\"Document_ID\") } }, { \"Document_ID\": 1, \"_id\": 0 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 3755,
        "spider_question_id": 6459,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
        "question": "Return the ids of documents that do not have expenses.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"expenses\": { $size: 0 } } }, { $project: { Document_ID: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { Expenses: { $size: 0 } } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"expenses\": { $size: 0 } } }, { $project: { Document_ID: 1 } } ])"
    },
    {
        "question_id": 3756,
        "spider_question_id": 6460,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id FROM Documents WHERE document_type_code = 'CV' EXCEPT SELECT document_id FROM Documents_with_expenses",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"Document_Type_Code\": \"CV\", \"expenses\": { $size: 0 } } }, { $project: { \"_id\": 0, \"Document_ID\": 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Document_Type_Code\": \"CV\", \"Expenses\": { $size: 0 } } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"Document_Type_Code\": \"CV\", \"expenses\": { $size: 0 } } }, { $project: { \"_id\": 0, \"Document_ID\": 1 } } ])"
    },
    {
        "question_id": 3757,
        "spider_question_id": 6461,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT document_id FROM Documents WHERE document_type_code = 'CV' EXCEPT SELECT document_id FROM Documents_with_expenses",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"Document_Type_Code\": \"CV\", \"expenses\": { $size: 0 } } }, { $project: { \"_id\": 0, \"Document_ID\": 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $match: { Document_Type_Code: \"CV\" } }, { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Expenses\": { $size: 0 } } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"Document_Type_Code\": \"CV\", \"expenses\": { $size: 0 } } }, { $project: { \"_id\": 0, \"Document_ID\": 1 } } ])"
    },
    {
        "question_id": 3758,
        "spider_question_id": 6462,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'",
        "question": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { $and: [ { \"Document_Name\": { $regex: \"s\", $options: \"i\" } }, { \"expenses\": { $ne: [] } } ] } }, { $project: { Document_ID: 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { $and: [ { \"Document_Name\": { $regex: \"s\", $options: \"i\" } }, { \"expenses\": { $ne: [] } } ] } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3759,
        "spider_question_id": 6463,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"Document_Name\": { $regex: /s/, $options: 'i' }, \"expenses\": { $ne: [] } } }, { $project: { \"_id\": 0, \"Document_ID\": 1 } } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Document_Name\": /s/, \"Expenses\": { $ne: [] } } }, { $project: { Document_ID: 1 } } ])",
        "deepseek answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"expenses\" } }, { $match: { \"Document_Name\": { $regex: /s/, $options: 'i' }, \"expenses\": { $ne: [] } } }, { $project: { \"_id\": 0, \"Document_ID\": 1 } } ])"
    },
    {
        "question_id": 3760,
        "spider_question_id": 6464,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "question": "How many documents do not have any expense?",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Expenses\": { $size: 0 } } }, { $count: \"DocumentsWithoutExpenses\" } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Expenses\": { $size: 0 } } }, { $count: \"DocumentsWithoutExpenses\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3761,
        "spider_question_id": 6465,
        "db_id": "cre_Docs_and_Epenses",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
        "question": "Count the number of documents that do not have expenses.",
        "query": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Expenses\": { $size: 0 } } }, { $count: \"NoExpenseDocumentCount\" } ])",
        "gpt4 answer": "db.Documents.aggregate([ { $lookup: { from: \"Documents_with_Expenses\", localField: \"Document_ID\", foreignField: \"Document_ID\", as: \"Expenses\" } }, { $match: { \"Expenses\": { $size: 0 } } }, { $count: \"NoExpenseDocumentCount\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3762,
        "spider_question_id": 6472,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT sum(hours) FROM projects",
        "question": "Find the total hours of all projects.",
        "query": "db.Projects.aggregate([ { $group: { _id: null, totalHours: { $sum: \"$Hours\" } } }, { $project: { totalHours: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $group: { _id: null, totalHours: { $sum: \"$Hours\" } } }, { $project: { totalHours: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3763,
        "spider_question_id": 6474,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT scientist) FROM assignedto",
        "question": "How many different scientists are assigned to any project?",
        "query": "db.AssignedTo.aggregate([ { $group: { _id: \"$Scientist\" } }, { $count: \"distinct_scientists\" } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $group: { _id: \"$Scientist\" } }, { $count: \"distinct_scientists\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3764,
        "spider_question_id": 6478,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(hours) FROM projects",
        "question": "Find the average hours of all projects.",
        "query": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" } } }, { $project: { averageHours: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" } } }, { $project: { averageHours: 1 } } ])"
    },
    {
        "question_id": 3765,
        "spider_question_id": 6479,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(hours) FROM projects",
        "question": "What is the average hours across all projects?",
        "query": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" } } }, { $project: { averageHours: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" } } }, { $project: { averageHours: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3766,
        "spider_question_id": 6480,
        "db_id": "scientist_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "question": "Find the name of project that continues for the longest time.",
        "query": "db.Projects.find({}, { Name: 1}).sort({Hours: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Projects.find({}, { Name: 1}).sort({Hours: -1}).limit(1)"
    },
    {
        "question_id": 3767,
        "spider_question_id": 6481,
        "db_id": "scientist_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
        "question": "What is the name of the project with the most hours?",
        "query": "db.Projects.find({}, { Name: 1}).sort({Hours: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Projects.find({}, { Name: 1}).sort({Hours: -1}).limit(1)"
    },
    {
        "question_id": 3768,
        "spider_question_id": 6482,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "query": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" } } }, { $project: { averageHours: 1 } }, { $lookup: { from: \"Projects\", let: { averageHours: \"$averageHours\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Hours\", \"$$averageHours\"] } } }, { $project: { Name: 1 } } ], as: \"projects\" } }, { $unwind: \"$projects\" }, { $replaceRoot: { newRoot: \"$projects\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" } } }, { $project: { averageHours: 1 } }, { $lookup: { from: \"Projects\", let: { averageHours: \"$averageHours\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Hours\", \"$$averageHours\"] } } }, { $project: { Name: 1 } } ], as: \"projects\" } }, { $unwind: \"$projects\" }, { $replaceRoot: { newRoot: \"$projects\" } } ])"
    },
    {
        "question_id": 3769,
        "spider_question_id": 6483,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM projects WHERE hours > (SELECT avg(hours) FROM projects)",
        "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
        "query": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" }}}, { $lookup: { from: \"Projects\", let: { averageHours: \"$averageHours\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Hours\", \"$$averageHours\" ]} }}, { $project: { Name: 1 }} ], as: \"projects_above_average\" }}, { $unwind: \"$projects_above_average\" }, { $replaceRoot: { newRoot: \"$projects_above_average\" }} ])",
        "gpt4 answer": "db.Projects.aggregate([ { $group: { _id: null, averageHours: { $avg: \"$Hours\" }}}, { $lookup: { from: \"Projects\", let: { averageHours: \"$averageHours\" }, pipeline: [ { $match: { $expr: { $gt: [ \"$Hours\", \"$$averageHours\" ]} }}, { $project: { Name: 1 }} ], as: \"projects_above_average\" }}, { $unwind: \"$projects_above_average\" }, { $replaceRoot: { newRoot: \"$projects_above_average\" }} ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3770,
        "spider_question_id": 6484,
        "db_id": "scientist_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and hours of project that has the most number of scientists.",
        "query": "db.AssignedTo.aggregate([ { $group: { _id: \"$Project\", scientistCount: { $sum: 1 } } }, { $sort: { scientistCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"Code\", as: \"projectDetails\" } }, { $unwind: \"$projectDetails\" }, { $project: { name: \"$projectDetails.Name\", hours: \"$projectDetails.Hours\" } } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $group: { _id: \"$Project\", scientistCount: { $sum: 1 } } }, { $sort: { scientistCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"Code\", as: \"projectDetails\" } }, { $unwind: \"$projectDetails\" }, { $project: { name: \"$projectDetails.Name\", hours: \"$projectDetails.Hours\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3771,
        "spider_question_id": 6485,
        "db_id": "scientist_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and hours for the project which has the most scientists assigned to it?",
        "query": "db.AssignedTo.aggregate([ { $group: { _id: \"$Project\", scientistCount: { $sum: 1 } } }, { $sort: { scientistCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"Code\", as: \"projectDetails\" }}, { $unwind: \"$projectDetails\" }, { $project: { name: \"$projectDetails.Name\", hours: \"$projectDetails.Hours\" } } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $group: { _id: \"$Project\", scientistCount: { $sum: 1 } } }, { $sort: { scientistCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Projects\", localField: \"_id\", foreignField: \"Code\", as: \"projectDetails\" }}, { $unwind: \"$projectDetails\" }, { $project: { name: \"$projectDetails.Name\", hours: \"$projectDetails.Hours\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3772,
        "spider_question_id": 6488,
        "db_id": "scientist_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
        "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
        "query": "db.AssignedTo.aggregate([ { $lookup: { from: \"Projects\", localField: \"Project\", foreignField: \"Code\", as: \"ProjectDetails\" } }, { $lookup: { from: \"Scientists\", localField: \"Scientist\", foreignField: \"SSN\", as: \"ScientistDetails\" } }, { $match: { $or: [ { \"ScientistDetails.Name\": \"Michael Rogers\" }, { \"ScientistDetails.Name\": \"Carol Smith\" } ] } }, { $unwind: \"$ProjectDetails\" }, { $group: { _id: null, totalHours: { $sum: \"$ProjectDetails.Hours\" } } }, { $project: { totalHours: 1 } } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $lookup: { from: \"Projects\", localField: \"Project\", foreignField: \"Code\", as: \"ProjectDetails\" } }, { $lookup: { from: \"Scientists\", localField: \"Scientist\", foreignField: \"SSN\", as: \"ScientistDetails\" } }, { $match: { $or: [ { \"ScientistDetails.Name\": \"Michael Rogers\" }, { \"ScientistDetails.Name\": \"Carol Smith\" } ] } }, { $unwind: \"$ProjectDetails\" }, { $group: { _id: null, totalHours: { $sum: \"$ProjectDetails.Hours\" } } }, { $project: { totalHours: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3773,
        "spider_question_id": 6495,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM scientists ORDER BY name",
        "question": "What are the names of all the scientists in alphabetical order?",
        "query": "db.Scientists.find({}, { Name: 1 }).sort({ Name: 1 })",
        "gpt4 answer": "db.Scientists.find({}, { Name: 1 }).sort({ Name: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3774,
        "spider_question_id": 6496,
        "db_id": "scientist_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
        "question": "Find the number of scientists involved for each project name.",
        "query": "db.AssignedTo.aggregate([ { $lookup: { from: \"Projects\", localField: \"Project\", foreignField: \"Code\", as: \"ProjectDetails\" } }, { $unwind: \"$ProjectDetails\" }, { $group: { _id: \"$ProjectDetails.Name\", NumberOfScientists: { $sum: 1 } } }, { $project: { ProjectName: \"$_id\", NumberOfScientists: 1 } } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $lookup: { from: \"Projects\", localField: \"Project\", foreignField: \"Code\", as: \"ProjectDetails\" } }, { $unwind: \"$ProjectDetails\" }, { $group: { _id: \"$ProjectDetails.Name\", NumberOfScientists: { $sum: 1 } } }, { $project: { ProjectName: \"$_id\", NumberOfScientists: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3775,
        "spider_question_id": 6498,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "query": "db.Projects.aggregate([ { $match: { Hours: { $gt: 300 } } }, { $lookup: { from: \"AssignedTo\", localField: \"Code\", foreignField: \"Project\", as: \"ScientistsAssigned\" } }, { $unwind: \"$ScientistsAssigned\" }, { $group: { _id: \"$Name\", NumOfScientists: { $sum: 1 } } }, { $project: { ProjectName: \"$_id\", NumOfScientists: 1 } } ])",
        "gpt4 answer": "db.Projects.aggregate([ { $match: { Hours: { $gt: 300 } } }, { $lookup: { from: \"AssignedTo\", localField: \"Code\", foreignField: \"Project\", as: \"ScientistsAssigned\" } }, { $unwind: \"$ScientistsAssigned\" }, { $group: { _id: \"$Name\", NumOfScientists: { $sum: 1 } } }, { $project: { ProjectName: \"$_id\", NumOfScientists: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3776,
        "spider_question_id": 6500,
        "db_id": "scientist_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "query": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"ProjectsAssigned\" } }, { $project: { Name: 1, NumberOfProjects: { $size: \"$ProjectsAssigned\" } } } ])",
        "gpt4 answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"ProjectsAssigned\" } }, { $project: { Name: 1, NumberOfProjects: { $size: \"$ProjectsAssigned\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3777,
        "spider_question_id": 6501,
        "db_id": "scientist_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "query": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"projectsAssigned\" } }, { $project: { Name: 1, NumberOfProjects: { $size: \"$projectsAssigned\" } } } ])",
        "gpt4 answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"projectsAssigned\" } }, { $project: { Name: 1, NumberOfProjects: { $size: \"$projectsAssigned\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3778,
        "spider_question_id": 6504,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn",
        "question": "Find the name of scientists who are assigned to some project.",
        "query": "db.AssignedTo.aggregate([ { $lookup: { from: \"Scientists\", localField: \"Scientist\", foreignField: \"SSN\", as: \"ScientistDetails\" } }, { $unwind: \"$ScientistDetails\" }, { $project: { \"ScientistDetails.Name\": 1 } }, { $group: { _id: \"$ScientistDetails.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $lookup: { from: \"Scientists\", localField: \"Scientist\", foreignField: \"SSN\", as: \"ScientistDetails\" } }, { $unwind: \"$ScientistDetails\" }, { $project: { \"ScientistDetails.Name\": 1 } }, { $group: { _id: \"$ScientistDetails.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3779,
        "spider_question_id": 6505,
        "db_id": "scientist_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn",
        "question": "What are the names of scientists who are assigned to any project?",
        "query": "db.AssignedTo.aggregate([ { $lookup: { from: \"Scientists\", localField: \"Scientist\", foreignField: \"SSN\", as: \"ScientistDetails\" } }, { $unwind: \"$ScientistDetails\" }, { $group: { _id: \"$ScientistDetails.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.AssignedTo.aggregate([ { $lookup: { from: \"Scientists\", localField: \"Scientist\", foreignField: \"SSN\", as: \"ScientistDetails\" } }, { $unwind: \"$ScientistDetails\" }, { $group: { _id: \"$ScientistDetails.Name\" } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3780,
        "spider_question_id": 6506,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
        "question": "Select the project names which are not assigned yet.",
        "query": "db.Projects.find({Code: {$nin: db.AssignedTo.distinct(\"Project\")}}, {Name: 1})",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"Code\", foreignField: \"Project\", as: \"Assignments\" } }, { $match: { Assignments: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Projects.find({Code: {$nin: db.AssignedTo.distinct(\"Project\")}}, {Name: 1})"
    },
    {
        "question_id": 3781,
        "spider_question_id": 6507,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
        "question": "What are the names of projects that have not been assigned?",
        "query": "db.Projects.find( { Code: { $nin: db.AssignedTo.distinct(\"Project\") } }, { Name: 1 } )",
        "gpt4 answer": "db.Projects.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"Code\", foreignField: \"Project\", as: \"Assignments\" } }, { $match: { Assignments: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.Projects.find( { Code: { $nin: db.AssignedTo.distinct(\"Project\") } }, { Name: 1 } )"
    },
    {
        "question_id": 3782,
        "spider_question_id": 6512,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT max(hours) FROM projects)",
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "query": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"Assignments\" } }, { $lookup: { from: \"Projects\", localField: \"Assignments.Project\", foreignField: \"Code\", as: \"AssignedProjects\" } }, { $addFields: { maxHours: { $max: \"$AssignedProjects.Hours\" } } }, { $lookup: { from: \"Projects\", pipeline: [ { $group: { _id: null, maxHours: { $max: \"$Hours\" } } } ], as: \"MaxProjectHours\" } }, { $match: { $expr: { $ne: [\"$maxHours\", { $arrayElemAt: [\"$MaxProjectHours.maxHours\", 0] }] } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"Assignments\" } }, { $lookup: { from: \"Projects\", localField: \"Assignments.Project\", foreignField: \"Code\", as: \"AssignedProjects\" } }, { $addFields: { maxHours: { $max: \"$AssignedProjects.Hours\" } } }, { $lookup: { from: \"Projects\", pipeline: [ { $group: { _id: null, maxHours: { $max: \"$Hours\" } } } ], as: \"MaxProjectHours\" } }, { $match: { $expr: { $ne: [\"$maxHours\", { $arrayElemAt: [\"$MaxProjectHours.maxHours\", 0] }] } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3783,
        "spider_question_id": 6514,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name , T1.Name",
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "query": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"assigned_projects\" } }, { $unwind: \"$assigned_projects\" }, { $lookup: { from: \"Projects\", localField: \"assigned_projects.Project\", foreignField: \"Code\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $project: { Name: 1, ProjectName: \"$project_details.Name\", Hours: \"$project_details.Hours\" } }, { $sort: { ProjectName: 1, Name: 1 } } ])",
        "gpt4 answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"Assignments\" } }, { $unwind: \"$Assignments\" }, { $lookup: { from: \"Projects\", localField: \"Assignments.Project\", foreignField: \"Code\", as: \"ProjectDetails\" } }, { $unwind: \"$ProjectDetails\" }, { $project: { ScientistName: \"$Name\", ProjectName: \"$ProjectDetails.Name\", Hours: \"$ProjectDetails.Hours\" } }, { $sort: { ProjectName: 1, ScientistName: 1 } } ])",
        "deepseek answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"assigned_projects\" } }, { $unwind: \"$assigned_projects\" }, { $lookup: { from: \"Projects\", localField: \"assigned_projects.Project\", foreignField: \"Code\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $project: { Name: 1, ProjectName: \"$project_details.Name\", Hours: \"$project_details.Hours\" } }, { $sort: { ProjectName: 1, Name: 1 } } ])"
    },
    {
        "question_id": 3784,
        "spider_question_id": 6515,
        "db_id": "scientist_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.Name , T3.Name , T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name , T1.Name",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "query": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"assigned_projects\" } }, { $unwind: \"$assigned_projects\" }, { $lookup: { from: \"Projects\", localField: \"assigned_projects.Project\", foreignField: \"Code\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $project: { Name: 1, ProjectName: \"$project_details.Name\", Hours: \"$project_details.Hours\" } }, { $sort: { ProjectName: 1, Name: 1 } } ])",
        "gpt4 answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"Assignments\" } }, { $unwind: \"$Assignments\" }, { $lookup: { from: \"Projects\", localField: \"Assignments.Project\", foreignField: \"Code\", as: \"ProjectDetails\" } }, { $unwind: \"$ProjectDetails\" }, { $project: { ScientistName: \"$Name\", ProjectName: \"$ProjectDetails.Name\", Hours: \"$ProjectDetails.Hours\" } }, { $sort: { ProjectName: 1, ScientistName: 1 } } ])",
        "deepseek answer": "db.Scientists.aggregate([ { $lookup: { from: \"AssignedTo\", localField: \"SSN\", foreignField: \"Scientist\", as: \"assigned_projects\" } }, { $unwind: \"$assigned_projects\" }, { $lookup: { from: \"Projects\", localField: \"assigned_projects.Project\", foreignField: \"Code\", as: \"project_details\" } }, { $unwind: \"$project_details\" }, { $project: { Name: 1, ProjectName: \"$project_details.Name\", Hours: \"$project_details.Hours\" } }, { $sort: { ProjectName: 1, Name: 1 } } ])"
    },
    {
        "question_id": 3785,
        "spider_question_id": 6542,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma'",
        "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "query": "db.appellations.aggregate([ { $match: { County: \"Sonoma\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $group: { _id: null, averagePrice: { $avg: \"$wines.Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": "db.appellations.aggregate([ { $match: { County: \"Sonoma\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $group: { _id: null, AveragePrice: { $avg: \"$wines.Price\" } } }, { $project: { AveragePrice: 1 } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $match: { County: \"Sonoma\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $group: { _id: null, averagePrice: { $avg: \"$wines.Price\" } } }, { $project: { averagePrice: 1 } } ])"
    },
    {
        "question_id": 3786,
        "spider_question_id": 6543,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma'",
        "question": "What is the average price of wines produced in appelations in Sonoma County?",
        "query": "db.appellations.aggregate([ { $match: { County: \"Sonoma\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $group: { _id: null, averagePrice: { $avg: \"$wines.Price\" } } } , { $project: { averagePrice: 1 } }])",
        "gpt4 answer": "db.appellations.aggregate([ { $match: { County: \"Sonoma\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wineDetails\" } }, { $unwind: \"$wineDetails\" }, { $group: { _id: null, averagePrice: { $avg: \"$wineDetails.Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $match: { County: \"Sonoma\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $group: { _id: null, averagePrice: { $avg: \"$wines.Price\" } } } , { $project: { averagePrice: 1 } }])"
    },
    {
        "question_id": 3787,
        "spider_question_id": 6546,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = 'Central Coast' AND T2.year < 2005",
        "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "query": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $unwind: \"$appellation_info\" }, { $match: { \"appellation_info.Area\": \"Central Coast\", \"Year\": { $lt: 2005 } } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" } } }, { $project: { maxPrice: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $unwind: \"$appellation_info\" }, { $match: { \"appellation_info.Area\": \"Central Coast\", \"Year\": { $lt: 2005 } } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" } } }, { $project: { maxPrice: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3788,
        "spider_question_id": 6547,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = 'Central Coast' AND T2.year < 2005",
        "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",
        "query": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $unwind: \"$appellation_info\" }, { $match: { \"appellation_info.Area\": \"Central Coast\", \"Year\": { $lt: 2005 } } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" } } }, { $project: { maxPrice: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $unwind: \"$appellation_info\" }, { $match: { \"appellation_info.Area\": \"Central Coast\", \"Year\": { $lt: 2005 } } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" } } }, { $project: { maxPrice: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3789,
        "spider_question_id": 6548,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White' AND T2.score > 90",
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "query": "db.grapes.aggregate([ { $match: { Color: 'White' } }, { $lookup: { from: \"wine\", localField: \"Grape\", foreignField: \"Grape\", as: \"HighScoreWines\" } }, { $unwind: \"$HighScoreWines\" }, { $match: { \"HighScoreWines.Score\": { $gt: 90 } } }, { $group: { _id: \"$Grape\" } }, { $project: { Grape: \"$_id\" } } ])",
        "gpt4 answer": "db.grapes.aggregate([ { $match: { Color: 'White' } }, { $lookup: { from: \"wine\", localField: \"Grape\", foreignField: \"Grape\", as: \"HighScoreWines\" } }, { $unwind: \"$HighScoreWines\" }, { $match: { \"HighScoreWines.Score\": { $gt: 90 } } }, { $group: { _id: \"$Grape\" } }, { $project: { Grape: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3790,
        "spider_question_id": 6549,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White' AND T2.score > 90",
        "question": "Find the white grape used to produce wines with scores above 90.",
        "query": "db.grapes.aggregate([ { $match: { Color: \"White\" } }, { $lookup: { from: \"wine\", localField: \"Grape\", foreignField: \"Grape\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Score\": { $gt: 90 } } }, { $group: { _id: \"$Grape\" } } ])",
        "gpt4 answer": "db.grapes.aggregate([ { $lookup: { from: \"wine\", localField: \"Grape\", foreignField: \"Grape\", as: \"wines\" } }, { $match: { \"Color\": \"White\", \"wines.Score\": { $gt: 90 } } }, { $group: { _id: \"$Grape\" } }, { $project: { Grape: \"$_id\" } } ])",
        "deepseek answer": "db.grapes.aggregate([ { $match: { Color: \"White\" } }, { $lookup: { from: \"wine\", localField: \"Grape\", foreignField: \"Grape\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Score\": { $gt: 90 } } }, { $group: { _id: \"$Grape\" } } ])"
    },
    {
        "question_id": 3791,
        "spider_question_id": 6552,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Monterey' AND T2.price < 50",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "query": "db.appellations.aggregate([ { $match: { County: \"Monterey\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $match: { \"wines.Price\": { $lt: 50 } } }, { $project: { Name: \"$wines.Name\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { $and: [ { \"appellation_info.County\": \"Monterey\" }, { Price: { $lt: 50 } } ] } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $match: { County: \"Monterey\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $match: { \"wines.Price\": { $lt: 50 } } }, { $project: { Name: \"$wines.Name\" } } ])"
    },
    {
        "question_id": 3792,
        "spider_question_id": 6553,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Monterey' AND T2.price < 50",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "query": "db.appellations.aggregate([ { $match: { County: \"Monterey\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $match: { \"wines.Price\": { $lt: 50 } } }, { $project: { Name: \"$wines.Name\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.County\": \"Monterey\", Price: { $lt: 50 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $match: { County: \"Monterey\" } }, { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wines\" } }, { $unwind: \"$wines\" }, { $match: { \"wines.Price\": { $lt: 50 } } }, { $project: { Name: \"$wines.Name\" } } ])"
    },
    {
        "question_id": 3793,
        "spider_question_id": 6554,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , Grape FROM WINE GROUP BY Grape",
        "question": "What are the numbers of wines for different grapes?",
        "query": "db.wine.aggregate([ { $group: { _id: \"$Grape\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Grape\", NumberOfWines: { $sum: 1 } }} ])",
        "deepseek answer": "db.wine.aggregate([ { $group: { _id: \"$Grape\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3794,
        "spider_question_id": 6555,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) , Grape FROM WINE GROUP BY Grape",
        "question": "How many wines are there for each grape?",
        "query": "db.wine.aggregate([ { $group: { _id: \"$Grape\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Grape\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.wine.aggregate([ { $group: { _id: \"$Grape\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3795,
        "spider_question_id": 6556,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(Price) , YEAR FROM WINE GROUP BY YEAR",
        "question": "What are the average prices of wines for different years?",
        "query": "db.wine.aggregate([ { $group: { _id: \"$Year\", averagePrice: { $avg: \"$Price\" } } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", AveragePrice: { $avg: \"$Price\" } } } ])",
        "deepseek answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", averagePrice: { $avg: \"$Price\" } } } ])"
    },
    {
        "question_id": 3796,
        "spider_question_id": 6557,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(Price) , YEAR FROM WINE GROUP BY YEAR",
        "question": "What is the average prices of wines for each each?",
        "query": "db.wine.aggregate([ { $group: { _id: \"$Year\", averagePrice: { $avg: \"$Price\" } } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", averagePrice: { $avg: \"$Price\" } } } ])",
        "deepseek answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", averagePrice: { $avg: \"$Price\" } } } ])"
    },
    {
        "question_id": 3797,
        "spider_question_id": 6564,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "query": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Year\": { $lt: 2010 } } }, { $group: { _id: \"$Appelation\", count: { $sum: 1 }, Area: { $first: \"$Area\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Area: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Year\": { $lt: 2010 } } }, { $group: { _id: \"$Appelation\", count: { $sum: 1 }, Area: { $first: \"$Area\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Area: 1 } } ])"
    },
    {
        "question_id": 3798,
        "spider_question_id": 6565,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area for the appelation which produced the most wines prior to 2010?",
        "query": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Year\": { $lt: 2010 } } }, { $group: { _id: \"$Appelation\", count: { $sum: 1 }, area: { $first: \"$Area\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Area: \"$area\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Year: { $lt: 2010 } } }, { $group: { _id: \"$Appelation\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"appellations\", localField: \"_id\", foreignField: \"Appelation\", as: \"appelationDetails\" }}, { $unwind: \"$appelationDetails\" }, { $project: { area: \"$appelationDetails.Area\" } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Year\": { $lt: 2010 } } }, { $group: { _id: \"$Appelation\", count: { $sum: 1 }, area: { $first: \"$Area\" } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Area: \"$area\" } } ])"
    },
    {
        "question_id": 3799,
        "spider_question_id": 6566,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "question": "What is the color of the grape whose wine products has the highest average price?",
        "query": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $unwind: \"$grape_info\" }, { $group: { _id: \"$Grape\", avgPrice: { $avg: \"$Price\" }, color: { $first: \"$grape_info.Color\" } } }, { $sort: { avgPrice: -1 } }, { $limit: 1 }, { $project: { color: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $unwind: \"$grape_info\" }, { $group: { _id: \"$Grape\", avgPrice: { $avg: \"$Price\" }, color: { $first: \"$grape_info.Color\" } } }, { $sort: { avgPrice: -1 } }, { $limit: 1 }, { $project: { color: 1 } } ])"
    },
    {
        "question_id": 3800,
        "spider_question_id": 6567,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
        "question": "Give the color of the grape whose wine products have the highest average price?",
        "query": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $unwind: \"$grape_info\" }, { $group: { _id: \"$Grape\", avgPrice: { $avg: \"$Price\" }, color: { $first: \"$grape_info.Color\" } } }, { $sort: { avgPrice: -1 } }, { $limit: 1 }, { $project: { color: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Grape\", AvgPrice: { $avg: \"$Price\" } } }, { $sort: { AvgPrice: -1 } }, { $limit: 1 }, { $lookup: { from: \"grapes\", localField: \"_id\", foreignField: \"Grape\", as: \"grapeDetails\" } }, { $unwind: \"$grapeDetails\" }, { $project: { Color: \"$grapeDetails.Color\" } } ])",
        "deepseek answer": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $unwind: \"$grape_info\" }, { $group: { _id: \"$Grape\", avgPrice: { $avg: \"$Price\" }, color: { $first: \"$grape_info.Color\" } } }, { $sort: { avgPrice: -1 } }, { $limit: 1 }, { $project: { color: 1 } } ])"
    },
    {
        "question_id": 3801,
        "spider_question_id": 6572,
        "db_id": "wine_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT AVG(Price) , AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = 'Zinfandel'",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "query": "db.wine.aggregate([ { $match: { Year: 2009, Grape: 'Zinfandel' } }, { $group: { _id: null, AveragePrice: { $avg: \"$Price\" }, AverageCases: { $avg: \"$Cases\" } } }, { $project: { AveragePrice: 1, AverageCases: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Year: 2009, Grape: \"Zinfandel\" } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" }, averageCases: { $avg: \"$Cases\" } } }, { $project: { averagePrice: 1, averageCases: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $match: { Year: 2009, Grape: 'Zinfandel' } }, { $group: { _id: null, AveragePrice: { $avg: \"$Price\" }, AverageCases: { $avg: \"$Cases\" } } }, { $project: { AveragePrice: 1, AverageCases: 1 } } ])"
    },
    {
        "question_id": 3802,
        "spider_question_id": 6573,
        "db_id": "wine_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT AVG(Price) , AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = 'Zinfandel'",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "query": "db.wine.aggregate([ { $match: { Year: 2009, Grape: \"Zinfandel\" } }, { $group: { _id: null, AveragePrice: { $avg: \"$Price\" }, AverageCases: { $avg: \"$Cases\" } } }, { $project: { AveragePrice: 1, AverageCases: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Year: 2009, Grape: \"Zinfandel\" } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" }, averageCases: { $avg: \"$Cases\" } } }, { $project: { averagePrice: 1, averageCases: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $match: { Year: 2009, Grape: \"Zinfandel\" } }, { $group: { _id: null, AveragePrice: { $avg: \"$Price\" }, AverageCases: { $avg: \"$Cases\" } } }, { $project: { AveragePrice: 1, AverageCases: 1 } } ])"
    },
    {
        "question_id": 3803,
        "spider_question_id": 6574,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = 'St. Helena'",
        "question": "What are the maximum price and score of wines produced by St. Helena appelation?",
        "query": "db.wine.aggregate([ { $match: { Appelation: \"St. Helena\" } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { maxPrice: 1, maxScore: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Appelation: 'St. Helena' } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { maxPrice: 1, maxScore: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $match: { Appelation: \"St. Helena\" } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { maxPrice: 1, maxScore: 1 } } ])"
    },
    {
        "question_id": 3804,
        "spider_question_id": 6575,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Price) , max(Score) FROM WINE WHERE Appelation = 'St. Helena'",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "query": "db.wine.aggregate([ { $match: { Appelation: \"St. Helena\" } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { maxPrice: 1, maxScore: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Appelation: \"St. Helena\" } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { maxPrice: 1, maxScore: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $match: { Appelation: \"St. Helena\" } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { maxPrice: 1, maxScore: 1 } } ])"
    },
    {
        "question_id": 3805,
        "spider_question_id": 6576,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR",
        "question": "What are the maximum price and score of wines in each year?",
        "query": "db.wine.aggregate([ { $group: { _id: \"$Year\", maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { Year: \"$_id\", maxPrice: 1, maxScore: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { Year: \"$_id\", maxPrice: 1, maxScore: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { Year: \"$_id\", maxPrice: 1, maxScore: 1 } } ])"
    },
    {
        "question_id": 3806,
        "spider_question_id": 6577,
        "db_id": "wine_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(Price) , max(Score) , YEAR FROM WINE GROUP BY YEAR",
        "question": "What are the maximum price and score of wines for each year?",
        "query": "db.wine.aggregate([ { $group: { _id: \"$Year\", MaxPrice: { $max: \"$Price\" }, MaxScore: { $max: \"$Score\" } } }, { $project: { Year: \"$_id\", MaxPrice: 1, MaxScore: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", maxPrice: { $max: \"$Price\" }, maxScore: { $max: \"$Score\" } } }, { $project: { Year: \"$_id\", maxPrice: 1, maxScore: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $group: { _id: \"$Year\", MaxPrice: { $max: \"$Price\" }, MaxScore: { $max: \"$Score\" } } }, { $project: { Year: \"$_id\", MaxPrice: 1, MaxScore: 1 } } ])"
    },
    {
        "question_id": 3807,
        "spider_question_id": 6586,
        "db_id": "wine_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)",
        "question": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "query": "db.wine.aggregate([ { $group: { _id: { year: \"$Year\" }, maxPrice: { $max: \"$Price\" } } }, { $match: { \"_id.year\": 2006 } }, { $lookup: { from: \"wine\", let: { yearMaxPrice: \"$maxPrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Price\", \"$$yearMaxPrice\"] } } }, { $project: { Name: 1 } } ], as: \"expensiveWines\" } }, { $unwind: \"$expensiveWines\" }, { $replaceRoot: { newRoot: \"$expensiveWines\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $group: { _id: { year: \"$Year\" }, maxPrice: { $max: \"$Price\" } } }, { $match: { \"_id.year\": 2006 } }, { $lookup: { from: \"wine\", let: { yearMaxPrice: \"$maxPrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Price\", \"$$yearMaxPrice\"] } } }, { $project: { Name: 1 } } ], as: \"expensiveWines\" } }, { $unwind: \"$expensiveWines\" }, { $replaceRoot: { newRoot: \"$expensiveWines\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3808,
        "spider_question_id": 6587,
        "db_id": "wine_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Name FROM WINE WHERE Price > (SELECT max(Price) FROM WINE WHERE YEAR = 2006)",
        "question": "Give the names of wines with prices above any wine produced in 2006.",
        "query": "db.wine.aggregate([ { $match: { Year: 2006 } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" } } }, { $lookup: { from: \"wine\", let: { maxPrice: \"$maxPrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Price\", \"$$maxPrice\"] } } }, { $project: { Name: 1 } } ], as: \"wines_above_max_price\" } }, { $unwind: \"$wines_above_max_price\" }, { $replaceRoot: { newRoot: \"$wines_above_max_price\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Year: 2006 } }, { $group: { _id: null, maxPrice: { $max: \"$Price\" } } }, { $lookup: { from: \"wine\", let: { maxPrice: \"$maxPrice\" }, pipeline: [ { $match: { $expr: { $gt: [\"$Price\", \"$$maxPrice\"] } } }, { $project: { Name: 1 } } ], as: \"wines_above_max_price\" } }, { $unwind: \"$wines_above_max_price\" }, { $replaceRoot: { newRoot: \"$wines_above_max_price\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3809,
        "spider_question_id": 6588,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = 'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "query": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $match: { \"grape_info.Color\": \"White\" } }, { $group: { _id: \"$Winery\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { winery: \"$_id\" } }])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $match: { \"grape_info.Color\": \"White\" } }, { $group: { _id: \"$Winery\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $match: { \"grape_info.Color\": \"White\" } }, { $group: { _id: \"$Winery\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { winery: \"$_id\" } }])"
    },
    {
        "question_id": 3810,
        "spider_question_id": 6589,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = 'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "question": "Which 3 wineries produce the most wines made from white grapes?",
        "query": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $match: { \"grape_info.Color\": \"White\" } }, { $group: { _id: \"$Winery\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { winery: \"$_id\" } }])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $unwind: \"$grape_info\" }, { $match: { \"grape_info.Color\": \"White\" } }, { $group: { _id: \"$Winery\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }, { $project: { Winery: \"$_id\" } } ])",
        "deepseek answer": "db.wine.aggregate([ { $lookup: { from: \"grapes\", localField: \"Grape\", foreignField: \"Grape\", as: \"grape_info\" } }, { $match: { \"grape_info.Color\": \"White\" } }, { $group: { _id: \"$Winery\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 } , { $project: { winery: \"$_id\" } }])"
    },
    {
        "question_id": 3811,
        "spider_question_id": 6594,
        "db_id": "wine_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = 'Central Coast'",
        "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "query": "db.wine.aggregate([ { $match: { Year: { $gt: 2008 } } }, { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.Area\": { $ne: \"Central Coast\" } } }, { $group: { _id: \"$Appelation\" } }, { $project: { Appelation: \"$_id\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Year: { $gt: 2008 } } }, { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.Area\": { $ne: \"Central Coast\" } } }, { $group: { _id: \"$Appelation\" } }, { $project: { Appelation: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3812,
        "spider_question_id": 6595,
        "db_id": "wine_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = 'Central Coast'",
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
        "query": "db.wine.aggregate([ { $match: { Year: { $gt: 2008 } } }, { $lookup: { from: 'appellations', localField: 'Appelation', foreignField: 'Appelation', as: 'appellation_info' } }, { $unwind: '$appellation_info' }, { $match: { 'appellation_info.Area': { $ne: 'Central Coast' } } }, { $group: { _id: '$Appelation' } }, { $project: { Appelation: '$_id' } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Year: { $gt: 2008 } } }, { $lookup: { from: 'appellations', localField: 'Appelation', foreignField: 'Appelation', as: 'appellation_info' } }, { $unwind: '$appellation_info' }, { $match: { 'appellation_info.Area': { $ne: 'Central Coast' } } }, { $group: { _id: '$Appelation' } }, { $project: { Appelation: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3813,
        "spider_question_id": 6596,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "query": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.County\": { $ne: \"Sonoma\" } } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } } , { $project: { averagePrice:1 } }])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_appellation\" } }, { $match: { \"wine_appellation.County\": { $ne: \"Sonoma\" } } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.County\": { $ne: \"Sonoma\" } } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } } , { $project: { averagePrice:1 } }])"
    },
    {
        "question_id": 3814,
        "spider_question_id": 6597,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
        "question": "What is the average price for wines not produced in Sonoma county?",
        "query": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.County\": { $ne: \"Sonoma\" } } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $unwind: \"$appellation_info\" }, { $match: { \"appellation_info.County\": { $ne: \"Sonoma\" } } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])",
        "deepseek answer": "db.wine.aggregate([ { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $match: { \"appellation_info.County\": { $ne: \"Sonoma\" } } }, { $group: { _id: null, averagePrice: { $avg: \"$Price\" } } }, { $project: { averagePrice: 1 } } ])"
    },
    {
        "question_id": 3815,
        "spider_question_id": 6598,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "query": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Score\": { $gt: 90 } } }, { $group: { _id: \"$County\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Score: { $gt: 90 } } }, { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appelationDetails\" } }, { $unwind: \"$appelationDetails\" }, { $group: { _id: \"$appelationDetails.County\", totalWines: { $sum: 1 } } }, { $sort: { totalWines: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Score\": { $gt: 90 } } }, { $group: { _id: \"$County\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3816,
        "spider_question_id": 6599,
        "db_id": "wine_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "query": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Score\": { $gt: 90 } } }, { $group: { _id: \"$County\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { country: \"$_id\" } }])",
        "gpt4 answer": "db.wine.aggregate([ { $match: { Score: { $gt: 90 } } }, { $lookup: { from: \"appellations\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"appellation_info\" } }, { $unwind: \"$appellation_info\" }, { $group: { _id: \"$appellation_info.County\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.appellations.aggregate([ { $lookup: { from: \"wine\", localField: \"Appelation\", foreignField: \"Appelation\", as: \"wine_data\" } }, { $unwind: \"$wine_data\" }, { $match: { \"wine_data.Score\": { $gt: 90 } } }, { $group: { _id: \"$County\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { country: \"$_id\" } }])"
    },
    {
        "question_id": 3817,
        "spider_question_id": 6601,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION , number_of_platforms FROM station",
        "question": "Show the name, location, and number of platforms for all stations.",
        "query": "db.station.find({}, { Name: 1, Location: 1, Number_of_Platforms: 1 })",
        "gpt4 answer": "db.station.find({}, { Name: 1, Location: 1, Number_of_Platforms: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3818,
        "spider_question_id": 6603,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , total_passengers FROM station WHERE LOCATION != 'London'",
        "question": "Show the names and total passengers for all train stations not in London.",
        "query": "db.station.find( { Location: { $ne: 'London' } }, { Name: 1, Total_Passengers: 1 } )",
        "gpt4 answer": "db.station.find({\"Location\": {$ne: \"London\"}}, {\"Name\": 1, \"Total_Passengers\": 1, \"_id\": 0})",
        "deepseek answer": "db.station.find( { Location: { $ne: 'London' } }, { Name: 1, Total_Passengers: 1 } )"
    },
    {
        "question_id": 3819,
        "spider_question_id": 6609,
        "db_id": "train_station",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the location with most number of train stations.",
        "query": "db.station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 3820,
        "spider_question_id": 6610,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , TIME , service FROM train",
        "question": "Show the name, time, and service for all trains.",
        "query": "db.train.find({}, { Name: 1, Time: 1, Service: 1 })",
        "gpt4 answer": "db.train.find({}, { Name: 1, Time: 1, Service: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3821,
        "spider_question_id": 6612,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , service FROM train ORDER BY TIME",
        "question": "Show the name and service for all trains in order by time.",
        "query": "db.train.find({}, { Name: 1, Service: 1 }).sort({ Time: 1 })",
        "gpt4 answer": "db.train.find({}, { Name: 1, Service: 1 }).sort({ Time: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3822,
        "spider_question_id": 6613,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
        "question": "Show the station name and number of trains in each station.",
        "query": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $group: { _id: \"$Station_ID\", name: { $first: \"$station_info.Name\" }, count: { $sum: 1 } } }, { $project: { name: 1, count: 1 } } ])",
        "gpt4 answer": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $group: { _id: \"$Station_ID\", name: { $first: \"$station_info.Name\" }, number_of_trains: { $sum: 1 } } }, { $project: { name: 1, number_of_trains: 1 } } ])",
        "deepseek answer": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $group: { _id: \"$Station_ID\", name: { $first: \"$station_info.Name\" }, count: { $sum: 1 } } }, { $project: { name: 1, count: 1 } } ])"
    },
    {
        "question_id": 3823,
        "spider_question_id": 6614,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id",
        "question": "show the train name and station name for each train.",
        "query": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $lookup: { from: \"train\", localField: \"Train_ID\", foreignField: \"Train_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $project: { train_name: \"$train_info.Name\", station_name: \"$station_info.Name\" } } ])",
        "gpt4 answer": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $lookup: { from: \"train\", localField: \"Train_ID\", foreignField: \"Train_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $project: { train_name: \"$train_info.Name\", station_name: \"$station_info.Name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3824,
        "spider_question_id": 6615,
        "db_id": "train_station",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T3.name , T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "query": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $match: { \"station_info.Location\": \"London\" } }, { $lookup: { from: \"train\", localField: \"Train_ID\", foreignField: \"Train_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $project: { \"train_name\": \"$train_info.Name\", \"train_time\": \"$train_info.Time\" } }, { $sort: { \"train_time\": -1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $match: { \"station_info.Location\": \"London\" } }, { $lookup: { from: \"train\", localField: \"Train_ID\", foreignField: \"Train_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $project: { \"train_name\": \"$train_info.Name\", \"train_time\": \"$train_info.Time\" } }, { $sort: { \"train_time\": -1 } } ])"
    },
    {
        "question_id": 3825,
        "spider_question_id": 6617,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count(*) >= 2",
        "question": "Show the station name with at least two trains.",
        "query": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $group: { _id: \"$Station_ID\", count: { $sum: 1 }, name: { $first: \"$station_info.Name\" } } }, { $match: { count: { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "gpt4 answer": "db.train_station.aggregate([ { $lookup: { from: \"station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"station_info\" } }, { $unwind: \"$station_info\" }, { $group: { _id: \"$Station_ID\", count: { $sum: 1 }, name: { $first: \"$station_info.Name\" } } }, { $match: { count: { $gte: 2 } } }, { $project: { name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3826,
        "spider_question_id": 6618,
        "db_id": "train_station",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*) = 1",
        "question": "Show all locations with only 1 station.",
        "query": "db.station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { Location: \"$_id\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $group: { _id: \"$Location\", stationCount: { $sum: 1 } } }, { $match: { stationCount: 1 } }, { $project: { Location: \"$_id\" } } ])",
        "deepseek answer": "db.station.aggregate([ { $group: { _id: \"$Location\", count: { $sum: 1 } } }, { $match: { count: 1 } }, { $project: { Location: \"$_id\" } } ])"
    },
    {
        "question_id": 3827,
        "spider_question_id": 6619,
        "db_id": "train_station",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
        "question": "Show station names without any trains.",
        "query": "db.station.aggregate([ { $lookup: { from: \"train_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"train_info\" } }, { $match: { train_info: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"train_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"train_info\" } }, { $match: { train_info: { $size: 0 } } }, { $project: { Name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3828,
        "spider_question_id": 6620,
        "db_id": "train_station",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Guruvayur Express'",
        "question": "What are the names of the stations which serve both 'Ananthapuri Express' and 'Guruvayur Express' trains?",
        "query": "db.station.aggregate([ { $lookup: { from: \"train_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"train_station_info\" } }, { $unwind: \"$train_station_info\" }, { $lookup: { from: \"train\", localField: \"train_station_info.Train_ID\", foreignField: \"Train_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $match: { \"train_info.Name\": { $in: [\"Ananthapuri Express\", \"Guruvayur Express\"] } } }, { $group: { _id: \"$Name\", trains: { $addToSet: \"$train_info.Name\" } } }, { $match: { \"trains\": { $all: [\"Ananthapuri Express\", \"Guruvayur Express\"] } } }, { $project: { Name: \"$_id\" } } ])",
        "gpt4 answer": "db.station.aggregate([ { $lookup: { from: \"train_station\", localField: \"Station_ID\", foreignField: \"Station_ID\", as: \"train_station_info\" } }, { $unwind: \"$train_station_info\" }, { $lookup: { from: \"train\", localField: \"train_station_info.Train_ID\", foreignField: \"Train_ID\", as: \"train_info\" } }, { $unwind: \"$train_info\" }, { $match: { \"train_info.Name\": { $in: [\"Ananthapuri Express\", \"Guruvayur Express\"] } } }, { $group: { _id: \"$Name\", trains: { $addToSet: \"$train_info.Name\" } } }, { $match: { \"trains\": { $all: [\"Ananthapuri Express\", \"Guruvayur Express\"] } } }, { $project: { Name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3829,
        "spider_question_id": 6621,
        "db_id": "train_station",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = 'London')",
        "question": "Find the names of the trains that do not pass any station located in London.",
        "query": "db.train.aggregate([ { $lookup: { from: \"train_station\", localField: \"Train_ID\", foreignField: \"Train_ID\", as: \"train_station\" } }, { $unwind: \"$train_station\" }, { $lookup: { from: \"station\", localField: \"train_station.Station_ID\", foreignField: \"Station_ID\", as: \"station\" } }, { $unwind: \"$station\" }, { $match: { \"station.Location\": { $ne: \"London\" } } }, { $group: { _id: \"$Name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.train.aggregate([ { $lookup: { from: \"train_station\", localField: \"Train_ID\", foreignField: \"Train_ID\", as: \"train_station\" } }, { $unwind: \"$train_station\" }, { $lookup: { from: \"station\", localField: \"train_station.Station_ID\", foreignField: \"Station_ID\", as: \"station\" } }, { $unwind: \"$station\" }, { $match: { \"station.Location\": { $ne: \"London\" } } }, { $group: { _id: \"$Name\" } } ])"
    },
    {
        "question_id": 3830,
        "spider_question_id": 6622,
        "db_id": "train_station",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , LOCATION FROM station ORDER BY Annual_entry_exit , Annual_interchanges",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "query": "db.station.find({}, { Name: 1, Location: 1}).sort({Annual_entry_exit: 1, Annual_interchanges: 1})",
        "gpt4 answer": "db.station.find({}, { Name: 1, Location: 1 }).sort({ Annual_entry_exit: 1, Annual_interchanges: 1 })",
        "deepseek answer": "db.station.find({}, { Name: 1, Location: 1}).sort({Annual_entry_exit: 1, Annual_interchanges: 1})"
    },
    {
        "question_id": 3831,
        "spider_question_id": 6623,
        "db_id": "driving_school",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT vehicle_id FROM Vehicles",
        "question": "List all vehicle id",
        "query": "db.Vehicles.find({}, {vehicle_id: 1})",
        "gpt4 answer": "db.Vehicles.find({}, { vehicle_id: 1 })",
        "deepseek answer": "db.Vehicles.find({}, {vehicle_id: 1})"
    },
    {
        "question_id": 3832,
        "spider_question_id": 6624,
        "db_id": "driving_school",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT vehicle_id FROM Vehicles",
        "question": "What are the ids of all vehicles?",
        "query": "db.Vehicles.find({}, { vehicle_id: 1})",
        "gpt4 answer": "db.Vehicles.find({}, { vehicle_id: 1 })",
        "deepseek answer": "db.Vehicles.find({}, { vehicle_id: 1})"
    },
    {
        "question_id": 3833,
        "spider_question_id": 6627,
        "db_id": "driving_school",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1",
        "question": "Show the detail of vehicle with id 1.",
        "query": "db.Vehicles.find({vehicle_id: 1}, {vehicle_details: 1})",
        "gpt4 answer": "db.Vehicles.findOne({ vehicle_id: 1 }, { vehicle_details: 1 })",
        "deepseek answer": "db.Vehicles.find({vehicle_id: 1}, {vehicle_details: 1})"
    },
    {
        "question_id": 3834,
        "spider_question_id": 6628,
        "db_id": "driving_school",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1",
        "question": "What are the details of the car with id 1?",
        "query": "db.Vehicles.find({vehicle_id: 1}, { vehicle_details: 1})",
        "gpt4 answer": "db.Vehicles.findOne({ vehicle_id: 1 }, { vehicle_details: 1 })",
        "deepseek answer": "db.Vehicles.find({vehicle_id: 1}, { vehicle_details: 1})"
    },
    {
        "question_id": 3835,
        "spider_question_id": 6629,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , middle_name , last_name FROM Staff",
        "question": "List the first name middle name and last name of all staff.",
        "query": "db.Staff.find({}, {first_name: 1, middle_name: 1, last_name: 1})",
        "gpt4 answer": "db.Staff.find({}, { first_name: 1, middle_name: 1, last_name: 1 })",
        "deepseek answer": "db.Staff.find({}, {first_name: 1, middle_name: 1, last_name: 1})"
    },
    {
        "question_id": 3836,
        "spider_question_id": 6630,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , middle_name , last_name FROM Staff",
        "question": "What are the first, middle, and last names of all staff?",
        "query": "db.Staff.find({}, { first_name: 1, middle_name: 1, last_name: 1})",
        "gpt4 answer": "db.Staff.find({}, { first_name: 1, middle_name: 1, last_name: 1 })",
        "deepseek answer": "db.Staff.find({}, { first_name: 1, middle_name: 1, last_name: 1})"
    },
    {
        "question_id": 3837,
        "spider_question_id": 6639,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'",
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "query": "db.Staff.find( { first_name: 'Janessa', last_name: 'Sawayn' }, { nickname: 1 } )",
        "gpt4 answer": "db.Staff.findOne({ first_name: \"Janessa\", last_name: \"Sawayn\" }, { nickname: 1 })",
        "deepseek answer": "db.Staff.find( { first_name: 'Janessa', last_name: 'Sawayn' }, { nickname: 1 } )"
    },
    {
        "question_id": 3838,
        "spider_question_id": 6640,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'",
        "question": "What is the nickname of the employee named Janessa Sawayn?",
        "query": "db.Staff.find( { first_name: 'Janessa', last_name: 'Sawayn' }, { nickname: 1 } )",
        "gpt4 answer": "db.Staff.findOne({ first_name: \"Janessa\", last_name: \"Sawayn\" }, { nickname: 1 })",
        "deepseek answer": "db.Staff.find( { first_name: 'Janessa', last_name: 'Sawayn' }, { nickname: 1 } )"
    },
    {
        "question_id": 3839,
        "spider_question_id": 6643,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { city: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { city: 1 } } ])"
    },
    {
        "question_id": 3840,
        "spider_question_id": 6644,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "In what city does Janessa Sawayn live?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { city: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { city: 1 } } ])"
    },
    {
        "question_id": 3841,
        "spider_question_id": 6645,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { country: 1, state_province_county: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $match: { first_name: \"Janessa\", last_name: \"Sawayn\" } }, { $lookup: { from: \"Addresses\", localField: \"staff_address_id\", foreignField: \"address_id\", as: \"staff_address\" } }, { $unwind: \"$staff_address\" }, { $project: { country: \"$staff_address.country\", state_province_county: \"$staff_address.state_province_county\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { country: 1, state_province_county: 1 } } ])"
    },
    {
        "question_id": 3842,
        "spider_question_id": 6646,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.country , T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "In which country and state does Janessa Sawayn live?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { country: 1, state_province_county: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $match: { first_name: 'Janessa', last_name: 'Sawayn' } }, { $lookup: { from: 'Addresses', localField: 'staff_address_id', foreignField: 'address_id', as: 'addressInfo' } }, { $unwind: '$addressInfo' }, { $project: { country: '$addressInfo.country', state_province_county: '$addressInfo.state_province_county' } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $project: { country: 1, state_province_county: 1 } } ])"
    },
    {
        "question_id": 3843,
        "spider_question_id": 6649,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $match: { \"staff.first_name\": \"Janessa\", \"staff.last_name\": \"Sawayn\" } }, { $project: { zip_postcode: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $match: { first_name: \"Janessa\", last_name: \"Sawayn\" } }, { $lookup: { from: \"Addresses\", localField: \"staff_address_id\", foreignField: \"address_id\", as: \"staffAddress\" } }, { $unwind: \"$staffAddress\" }, { $project: { zip_postcode: \"$staffAddress.zip_postcode\" } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $match: { \"staff.first_name\": \"Janessa\", \"staff.last_name\": \"Sawayn\" } }, { $project: { zip_postcode: 1 } } ])"
    },
    {
        "question_id": 3844,
        "spider_question_id": 6650,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $match: { \"staff.first_name\": \"Janessa\", \"staff.last_name\": \"Sawayn\" } }, { $project: { zip_postcode: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $match: { \"staff.first_name\": \"Janessa\", \"staff.last_name\": \"Sawayn\" } }, { $project: { zip_postcode: 1 } } ])"
    },
    {
        "question_id": 3845,
        "spider_question_id": 6653,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort'",
        "question": "Find out the first name and last name of staff lived in city Damianfort.",
        "query": "db.Addresses.aggregate([ { $match: { city: \"Damianfort\" } }, { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $project: { first_name: \"$staff.first_name\", last_name: \"$staff.last_name\" } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Addresses\", localField: \"staff_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.city\": \"Damianfort\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $match: { city: \"Damianfort\" } }, { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $project: { first_name: \"$staff.first_name\", last_name: \"$staff.last_name\" } } ])"
    },
    {
        "question_id": 3846,
        "spider_question_id": 6654,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort'",
        "question": "What is the first and last name of all employees who live in the city Damianfort?",
        "query": "db.Addresses.aggregate([ { $match: { city: \"Damianfort\" } }, { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $project: { first_name: \"$staff.first_name\", last_name: \"$staff.last_name\" } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Addresses\", localField: \"staff_address_id\", foreignField: \"address_id\", as: \"addressInfo\" } }, { $match: { \"addressInfo.city\": \"Damianfort\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $match: { city: \"Damianfort\" } }, { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $project: { first_name: \"$staff.first_name\", last_name: \"$staff.last_name\" } } ])"
    },
    {
        "question_id": 3847,
        "spider_question_id": 6655,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.city , count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Addresses\", localField: \"staff_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", numberOfStaffs: { $sum: 1 } } }, { $sort: { numberOfStaffs: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\", numberOfStaffs: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3848,
        "spider_question_id": 6656,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.city , count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1",
        "question": "In which city do the most employees live and how many of them live there?",
        "query": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff_details\" } }, { $unwind: \"$staff_details\" }, { $group: { _id: \"$city\", numEmployees: { $sum: 1 } } }, { $sort: { numEmployees: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\", numEmployees: 1 } } ])",
        "deepseek answer": "db.Addresses.aggregate([ { $lookup: { from: \"Staff\", localField: \"address_id\", foreignField: \"staff_address_id\", as: \"staff\" } }, { $unwind: \"$staff\" }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3849,
        "spider_question_id": 6659,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM Customers",
        "question": "List the first name and last name of all customers.",
        "query": "db.Customers.find({}, {first_name: 1, last_name: 1})",
        "gpt4 answer": "db.Customers.find({}, { first_name: 1, last_name: 1 })",
        "deepseek answer": "db.Customers.find({}, {first_name: 1, last_name: 1})"
    },
    {
        "question_id": 3850,
        "spider_question_id": 6660,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM Customers",
        "question": "What are the first and last names for all customers?",
        "query": "db.Customers.find({}, {first_name: 1, last_name: 1})",
        "gpt4 answer": "db.Customers.find({}, { first_name: 1, last_name: 1 })",
        "deepseek answer": "db.Customers.find({}, {first_name: 1, last_name: 1})"
    },
    {
        "question_id": 3851,
        "spider_question_id": 6663,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone_number , email_address FROM Customers WHERE amount_outstanding > 2000",
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "query": "db.Customers.find({amount_outstanding: {$gt: 2000}}, {phone_number: 1, email_address: 1})",
        "gpt4 answer": "db.Customers.find( { amount_outstanding: { $gt: 2000 } }, { phone_number: 1, email_address: 1 } )",
        "deepseek answer": "db.Customers.find({amount_outstanding: {$gt: 2000}}, {phone_number: 1, email_address: 1})"
    },
    {
        "question_id": 3852,
        "spider_question_id": 6664,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone_number , email_address FROM Customers WHERE amount_outstanding > 2000",
        "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "query": "db.Customers.find( {amount_outstanding: {$gt: 2000}}, {phone_number: 1, email_address: 1} )",
        "gpt4 answer": "db.Customers.find( { amount_outstanding: { $gt: 2000 } }, { phone_number: 1, email_address: 1 } )",
        "deepseek answer": "db.Customers.find( {amount_outstanding: {$gt: 2000}}, {phone_number: 1, email_address: 1} )"
    },
    {
        "question_id": 3853,
        "spider_question_id": 6665,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = 'Marina' OR last_name = 'Kohler'",
        "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "query": "db.Customers.find( { $or: [ { first_name: 'Marina' }, { last_name: 'Kohler' } ] }, { customer_status_code: 1, cell_mobile_phone_number: 1, email_address: 1 } )",
        "gpt4 answer": "db.Customers.find( { $or: [{ first_name: 'Marina' }, { last_name: 'Kohler' }] }, { customer_status_code: 1, cell_mobile_phone_number: 1, email_address: 1 } )",
        "deepseek answer": "db.Customers.find( { $or: [ { first_name: 'Marina' }, { last_name: 'Kohler' } ] }, { customer_status_code: 1, cell_mobile_phone_number: 1, email_address: 1 } )"
    },
    {
        "question_id": 3854,
        "spider_question_id": 6666,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM Customers WHERE first_name = 'Marina' OR last_name = 'Kohler'",
        "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
        "query": "db.Customers.find( { $or: [ {first_name: 'Marina'}, {last_name: 'Kohler'} ] }, { customer_status_code: 1, cell_mobile_phone_number: 1, email_address: 1 } )",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.find( { $or: [ {first_name: 'Marina'}, {last_name: 'Kohler'} ] }, { customer_status_code: 1, cell_mobile_phone_number: 1, email_address: 1 } )"
    },
    {
        "question_id": 3855,
        "spider_question_id": 6673,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
        "question": "List all customer status codes and the number of customers having each status code.",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $project: { customer_status_code: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $project: { customer_status_code: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $project: { customer_status_code: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3856,
        "spider_question_id": 6674,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
        "question": "For each customer status code, how many customers are classified that way?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3857,
        "spider_question_id": 6675,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Which customer status code has least number of customers?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { customer_status_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { customer_status_code: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { customer_status_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3858,
        "spider_question_id": 6676,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the status code with the least number of customers?",
        "query": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { customer_status_code: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: \"$customer_status_code\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { customer_status_code: \"$_id\" } } ])"
    },
    {
        "question_id": 3859,
        "spider_question_id": 6677,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'",
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $match: { \"customer_info.first_name\": \"Rylan\", \"customer_info.last_name\": \"Goodwin\", \"lesson_status_code\": \"Completed\" } }, { $count: \"completed_lessons\" } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $match: { \"customer_info.first_name\": \"Rylan\", \"customer_info.last_name\": \"Goodwin\", \"lesson_status_code\": \"Completed\" } }, { $count: \"completed_lessons\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3860,
        "spider_question_id": 6679,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM Customers",
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "query": "db.Customers.aggregate([ { $group: { _id: null, max_amount_outstanding: { $max: \"$amount_outstanding\" }, min_amount_outstanding: { $min: \"$amount_outstanding\" }, avg_amount_outstanding: { $avg: \"$amount_outstanding\" } } } , { $project: { max_amount_outstanding: 1, min_amount_outstanding:1, avg_amount_outstanding:1} }])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: null, maxAmountOutstanding: { $max: \"$amount_outstanding\" }, minAmountOutstanding: { $min: \"$amount_outstanding\" }, avgAmountOutstanding: { $avg: \"$amount_outstanding\" } } }, { $project: { maxAmountOutstanding: 1, minAmountOutstanding: 1, avgAmountOutstanding: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: null, max_amount_outstanding: { $max: \"$amount_outstanding\" }, min_amount_outstanding: { $min: \"$amount_outstanding\" }, avg_amount_outstanding: { $avg: \"$amount_outstanding\" } } } , { $project: { max_amount_outstanding: 1, min_amount_outstanding:1, avg_amount_outstanding:1} }])"
    },
    {
        "question_id": 3861,
        "spider_question_id": 6680,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT max(amount_outstanding) , min(amount_outstanding) , avg(amount_outstanding) FROM Customers",
        "question": "What is the maximum, minimum, and average amount of money outsanding for all customers?",
        "query": "db.Customers.aggregate([ { $group: { _id: null, max_amount_outstanding: { $max: \"$amount_outstanding\" }, min_amount_outstanding: { $min: \"$amount_outstanding\" }, avg_amount_outstanding: { $avg: \"$amount_outstanding\" } } } , { $project: { max_amount_outstanding: 1, min_amount_outstanding:1, avg_amount_outstanding:1} }])",
        "gpt4 answer": "db.Customers.aggregate([ { $group: { _id: null, max_amount_outstanding: { $max: \"$amount_outstanding\" }, min_amount_outstanding: { $min: \"$amount_outstanding\" }, avg_amount_outstanding: { $avg: \"$amount_outstanding\" } } }, { $project: { max_amount_outstanding: 1, min_amount_outstanding: 1, avg_amount_outstanding: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $group: { _id: null, max_amount_outstanding: { $max: \"$amount_outstanding\" }, min_amount_outstanding: { $min: \"$amount_outstanding\" }, avg_amount_outstanding: { $avg: \"$amount_outstanding\" } } } , { $project: { max_amount_outstanding: 1, min_amount_outstanding:1, avg_amount_outstanding:1} }])"
    },
    {
        "question_id": 3862,
        "spider_question_id": 6681,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000",
        "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
        "query": "db.Customers.find( {amount_outstanding: {$gte: 1000, $lte: 3000}}, {first_name: 1, last_name: 1} )",
        "gpt4 answer": "db.Customers.find({ amount_outstanding: { $gte: 1000, $lte: 3000 } }, { first_name: 1, last_name: 1 })",
        "deepseek answer": "db.Customers.find( {amount_outstanding: {$gte: 1000, $lte: 3000}}, {first_name: 1, last_name: 1} )"
    },
    {
        "question_id": 3863,
        "spider_question_id": 6682,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000",
        "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
        "query": "db.Customers.find( {amount_outstanding: {$gte: 1000, $lte: 3000}}, {first_name: 1, last_name: 1} )",
        "gpt4 answer": "db.Customers.find( { amount_outstanding: { $gte: 1000, $lte: 3000 } }, { first_name: 1, last_name: 1 } )",
        "deepseek answer": "db.Customers.find( {amount_outstanding: {$gte: 1000, $lte: 3000}}, {first_name: 1, last_name: 1} )"
    },
    {
        "question_id": 3864,
        "spider_question_id": 6683,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt'",
        "question": "List first name and last name of customers lived in city Lockmanfurt.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.city\": \"Lockmanfurt\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.city\": \"Lockmanfurt\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.city\": \"Lockmanfurt\" } }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 3865,
        "spider_question_id": 6684,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.first_name , T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt'",
        "question": "What are the first and last names of all customers who lived in Lockmanfurt?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.city\": \"Lockmanfurt\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address\" } }, { $match: { \"address.city\": \"Lockmanfurt\" } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $match: { \"address_info.city\": \"Lockmanfurt\" } }, { $project: { first_name: 1, last_name: 1 } } ])"
    },
    {
        "question_id": 3866,
        "spider_question_id": 6686,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'",
        "question": "What is the country in which the customer Carole Bernhard lived?",
        "query": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { country: \"$address_info.country\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { first_name: 'Carole', last_name: 'Bernhard' } }, { $lookup: { from: 'Addresses', localField: 'customer_address_id', foreignField: 'address_id', as: 'address_info' } }, { $unwind: '$address_info' }, { $project: { country: '$address_info.country' } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { country: \"$address_info.country\" } } ])"
    },
    {
        "question_id": 3867,
        "spider_question_id": 6687,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'",
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "query": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { zip_postcode: \"$address_info.zip_postcode\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { zip_postcode: \"$address_info.zip_postcode\" } } ])"
    },
    {
        "question_id": 3868,
        "spider_question_id": 6688,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'",
        "question": "What is the zip code of the customer Carole Bernhard?",
        "query": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { zip_postcode: \"$address_info.zip_postcode\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $project: { zip_postcode: \"$address_info.zip_postcode\" } } ])"
    },
    {
        "question_id": 3869,
        "spider_question_id": 6689,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city does has most number of customers?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 3870,
        "spider_question_id": 6690,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the city with the most customers?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", customerCount: { $sum: 1 } } }, { $sort: { customerCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Addresses\", localField: \"customer_address_id\", foreignField: \"address_id\", as: \"address_info\" } }, { $unwind: \"$address_info\" }, { $group: { _id: \"$address_info.city\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { city: \"$_id\" } } ])"
    },
    {
        "question_id": 3871,
        "spider_question_id": 6691,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard'",
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "query": "db.Customer_Payments.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $match: { \"customer_info.first_name\": \"Carole\", \"customer_info.last_name\": \"Bernhard\" } }, { $group: { _id: null, total_amount: { $sum: \"$amount_payment\" } } }, { $project: { total_amount: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $unwind: \"$payments\" }, { $group: { _id: null, totalPaid: { $sum: \"$payments.amount_payment\" } } }, { $project: { totalPaid: 1 } } ])",
        "deepseek answer": "db.Customer_Payments.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $unwind: \"$customer_info\" }, { $match: { \"customer_info.first_name\": \"Carole\", \"customer_info.last_name\": \"Bernhard\" } }, { $group: { _id: null, total_amount: { $sum: \"$amount_payment\" } } }, { $project: { total_amount: 1 } } ])"
    },
    {
        "question_id": 3872,
        "spider_question_id": 6692,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard'",
        "question": "What is the total amount of moeny paid by the customer Carole Bernhard?",
        "query": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $project: { totalAmount: { $sum: \"$payments.amount_payment\" } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { first_name: 'Carole', last_name: 'Bernhard' } }, { $lookup: { from: 'Customer_Payments', localField: 'customer_id', foreignField: 'customer_id', as: 'payments' } }, { $unwind: '$payments' }, { $group: { _id: null, totalPaid: { $sum: '$payments.amount_payment' } } }, { $project: { totalPaid: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { first_name: \"Carole\", last_name: \"Bernhard\" } }, { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $project: { totalAmount: { $sum: \"$payments.amount_payment\" } } } ])"
    },
    {
        "question_id": 3873,
        "spider_question_id": 6693,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "question": "List the number of customers that did not have any payment history.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $match: { \"payments\": { $size: 0 } } }, { $count: \"noPaymentCustomers\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $match: { \"payments\": { $size: 0 } } }, { $count: \"noPaymentCustomers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3874,
        "spider_question_id": 6694,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "question": "How many customers have no payment histories?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $match: { payments: { $size: 0 } } }, { $count: \"no_payment_customers\" } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $match: { payments: { $size: 0 } } }, { $count: \"no_payment_customers\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3875,
        "spider_question_id": 6695,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2",
        "question": "List first name and last name of customers that have more than 2 payments.",
        "query": "db.Customer_Payments.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer\" } }, { $unwind: \"$customer\" }, { $project: { first_name: \"$customer.first_name\", last_name: \"$customer.last_name\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Customer_Payments.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer\" } }, { $unwind: \"$customer\" }, { $project: { first_name: \"$customer.first_name\", last_name: \"$customer.last_name\" } } ])"
    },
    {
        "question_id": 3876,
        "spider_question_id": 6696,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2",
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "query": "db.Customer_Payments.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer\" } }, { $unwind: \"$customer\" }, { $project: { first_name: \"$customer.first_name\", last_name: \"$customer.last_name\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Customer_Payments\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"payments\" } }, { $project: { first_name: 1, last_name: 1, numberOfPayments: { $size: \"$payments\" } } }, { $match: { numberOfPayments: { $gt: 2 } } }, { $project: { first_name: 1, last_name: 1 } } ])",
        "deepseek answer": "db.Customer_Payments.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer\" } }, { $unwind: \"$customer\" }, { $project: { first_name: \"$customer.first_name\", last_name: \"$customer.last_name\" } } ])"
    },
    {
        "question_id": 3877,
        "spider_question_id": 6697,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code",
        "question": "List all payment methods and number of payments using each payment methods.",
        "query": "db.Customer_Payments.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customer_Payments.aggregate([ { $group: { _id: \"$payment_method_code\", numberOfPayments: { $sum: 1 } } }, { $project: { payment_method_code: \"$_id\", numberOfPayments: 1 } } ])",
        "deepseek answer": "db.Customer_Payments.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3878,
        "spider_question_id": 6698,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code",
        "question": "For each payment method, how many payments were made?",
        "query": "db.Customer_Payments.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Customer_Payments.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Customer_Payments.aggregate([ { $group: { _id: \"$payment_method_code\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3879,
        "spider_question_id": 6701,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%'",
        "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\", \"staff_info.nickname\": { $regex: /s/, $options: \"i\" } } }, { $project: { lesson_id: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_details\" } }, { $match: { \"staff_details.first_name\": \"Janessa\", \"staff_details.last_name\": \"Sawayn\", \"staff_details.nickname\": { $regex: \"s\" } } }, { $project: { lesson_id: 1 } } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\", \"staff_info.nickname\": { $regex: /s/, $options: \"i\" } } }, { $project: { lesson_id: 1 } } ])"
    },
    {
        "question_id": 3880,
        "spider_question_id": 6702,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%'",
        "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\", \"staff_info.nickname\": { $regex: /s/ } } }, { $project: { lesson_id: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: 'Staff', localField: 'staff_id', foreignField: 'staff_id', as: 'staff_info' } }, { $match: { 'staff_info.first_name': 'Janessa', 'staff_info.last_name': 'Sawayn', 'staff_info.nickname': /s/ } }, { $project: { lesson_id: 1 } } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\", \"staff_info.nickname\": { $regex: /s/ } } }, { $project: { lesson_id: 1 } } ])"
    },
    {
        "question_id": 3881,
        "spider_question_id": 6703,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'",
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": { $regex: /a/, $options: \"i\" } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": /a/ } }, { $count: \"lessons_count\" } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": { $regex: /a/, $options: \"i\" } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3882,
        "spider_question_id": 6704,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'",
        "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": { $regex: /a/, $options: \"i\" } } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": { $regex: 'a', $options: 'i' } } }, { $count: \"lessons_taught_by_staff_with_a\" } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": { $regex: /a/, $options: \"i\" } } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3883,
        "spider_question_id": 6707,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $group: { _id: null, averageLessonPrice: { $avg: \"$price\" } } }, { $project: { averageLessonPrice: 1 } } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } } ])"
    },
    {
        "question_id": 3884,
        "spider_question_id": 6708,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
        "question": "What is the average price for a lesson taught by Janessa Sawayn?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Staff\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"staff_info\" } }, { $unwind: \"$staff_info\" }, { $match: { \"staff_info.first_name\": \"Janessa\", \"staff_info.last_name\": \"Sawayn\" } }, { $group: { _id: null, averagePrice: { $avg: \"$price\" } } }, { $project: { averagePrice: 1 } } ])"
    },
    {
        "question_id": 3885,
        "spider_question_id": 6709,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'",
        "question": "How many lesson does customer with first name Ray took?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.first_name\": \"Ray\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.first_name\": \"Ray\" } }, { $count: \"number_of_lessons\" } ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.first_name\": \"Ray\" } }, { $group: { _id: null, count: { $sum: 1 } } } , { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3886,
        "spider_question_id": 6710,
        "db_id": "driving_school",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'",
        "question": "How many lessons did the customer with the first name Ray take?",
        "query": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.first_name\": \"Ray\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, {$match: {\"customer_info.first_name\": \"Ray\"}}, {$count: \"lessons_count\"} ])",
        "deepseek answer": "db.Lessons.aggregate([ { $lookup: { from: \"Customers\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_info\" } }, { $match: { \"customer_info.first_name\": \"Ray\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3887,
        "spider_question_id": 6711,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "question": "Which last names are both used by customers and by staff?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Staff\", localField: \"last_name\", foreignField: \"last_name\", as: \"staff_matches\" } }, { $match: { \"staff_matches.0\": { $exists: true } } }, { $project: { last_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Staff\", localField: \"last_name\", foreignField: \"last_name\", as: \"matching_staff\" } }, { $match: { \"matching_staff\": { $ne: [] } } }, { $group: { _id: \"$last_name\" } }, { $project: { last_name: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Staff\", localField: \"last_name\", foreignField: \"last_name\", as: \"staff_matches\" } }, { $match: { \"staff_matches.0\": { $exists: true } } }, { $project: { last_name: 1 } } ])"
    },
    {
        "question_id": 3888,
        "spider_question_id": 6712,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "question": "What are the last names that are used by customers and staff?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Staff\", localField: \"last_name\", foreignField: \"last_name\", as: \"shared_last_names\" } }, { $match: { \"shared_last_names\": { $ne: [] } } }, { $group: { _id: \"$last_name\" } }, { $project: { last_name: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Staff\", localField: \"last_name\", foreignField: \"last_name\", as: \"shared_last_names\" } }, { $match: { \"shared_last_names\": { $ne: [] } } }, { $group: { _id: \"$last_name\" } }, { $project: { last_name: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3889,
        "spider_question_id": 6713,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
        "question": "What is the first name of the staff who did not give any lesson?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Lessons\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"lessons\" } }, { $match: { \"lessons\": { $size: 0 } } }, { $project: { first_name: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Lessons\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"lessons\" } }, { $match: { \"lessons\": { $size: 0 } } }, { $project: { first_name: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Lessons\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"lessons\" } }, { $match: { \"lessons\": { $size: 0 } } }, { $project: { first_name: 1 } } ])"
    },
    {
        "question_id": 3890,
        "spider_question_id": 6714,
        "db_id": "driving_school",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
        "question": "What is the first name of all employees who do not give any lessons?",
        "query": "db.Staff.aggregate([ { $lookup: { from: \"Lessons\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"lessons\" } }, { $match: { \"lessons\": { $size: 0 } } }, { $project: { first_name: 1 } } ])",
        "gpt4 answer": "db.Staff.aggregate([ { $lookup: { from: \"Lessons\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"lessons\" } }, { $match: { \"lessons\": { $size: 0 } } }, { $project: { first_name: 1 } } ])",
        "deepseek answer": "db.Staff.aggregate([ { $lookup: { from: \"Lessons\", localField: \"staff_id\", foreignField: \"staff_id\", as: \"lessons\" } }, { $match: { \"lessons\": { $size: 0 } } }, { $project: { first_name: 1 } } ])"
    },
    {
        "question_id": 3891,
        "spider_question_id": 6715,
        "db_id": "driving_school",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.vehicle_id , T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "query": "db.Lessons.aggregate([ { $group: { _id: \"$vehicle_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Vehicles\", localField: \"_id\", foreignField: \"vehicle_id\", as: \"vehicleDetails\" } }, { $project: { vehicle_id: \"$_id\", vehicle_details: { $arrayElemAt: [\"$vehicleDetails.vehicle_details\", 0] } } } ])",
        "gpt4 answer": "db.Lessons.aggregate([ { $group: { _id: \"$vehicle_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Vehicles\", localField: \"_id\", foreignField: \"vehicle_id\", as: \"vehicleDetails\" } }, { $project: { vehicle_id: \"$_id\", vehicle_details: { $arrayElemAt: [\"$vehicleDetails.vehicle_details\", 0] } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3892,
        "spider_question_id": 6724,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "query": "db.Faculty.find({ Sex: 'F' }, { Fname: 1, Lname: 1, Phone: 1 })",
        "gpt4 answer": "db.Faculty.find({ Sex: 'F' }, { Fname: 1, Lname: 1, Phone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3893,
        "spider_question_id": 6725,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
        "question": "What are the first name, last name, and phone number of all the female faculty members?",
        "query": "db.Faculty.find({ Sex: 'F' }, { Fname: 1, Lname: 1, Phone: 1 })",
        "gpt4 answer": "db.Faculty.find({ Sex: 'F' }, { Fname: 1, Lname: 1, Phone: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 3894,
        "spider_question_id": 6730,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone , room , building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince'",
        "question": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "query": "db.Faculty.find({Fname: \"Jerry\", Lname: \"Prince\"}, {Phone: 1, Room: 1, Building: 1})",
        "gpt4 answer": "db.Faculty.find({Fname: \"Jerry\", Lname: \"Prince\"}, {Phone: 1, Room: 1, Building: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 3895,
        "spider_question_id": 6731,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT phone , room , building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince'",
        "question": "What are the phone, room, and building of the faculty member called Jerry Prince?",
        "query": "db.Faculty.find( { Fname: 'Jerry', Lname: 'Prince' }, { Phone: 1, Room: 1, Building: 1 } )",
        "gpt4 answer": "db.Faculty.find( { Fname: 'Jerry', Lname: 'Prince' }, { Phone: 1, Room: 1, Building: 1 } )",
        "deepseek answer": "."
    },
    {
        "question_id": 3896,
        "spider_question_id": 6734,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT fname , lname FROM Faculty WHERE Rank = 'Instructor'",
        "question": "Show the first name and last name for all the instructors.",
        "query": "db.Faculty.find({ Rank: 'Instructor' }, { Fname: 1, Lname: 1 })",
        "gpt4 answer": "db.Faculty.find({ Rank: 'Instructor' }, { Fname: 1, Lname: 1 })",
        "deepseek answer": "db.Faculty.find({ Rank: 'Instructor' }, { Fname: 1, Lname: 1 })"
    },
    {
        "question_id": 3897,
        "spider_question_id": 6735,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT fname , lname FROM Faculty WHERE Rank = 'Instructor'",
        "question": "What are the first name and last name of all the instructors?",
        "query": "db.Faculty.find({Rank: 'Instructor'}, {Fname: 1, Lname: 1})",
        "gpt4 answer": "db.Faculty.find({ Rank: 'Instructor' }, { Fname: 1, Lname: 1 })",
        "deepseek answer": "db.Faculty.find({Rank: 'Instructor'}, {Fname: 1, Lname: 1})"
    },
    {
        "question_id": 3898,
        "spider_question_id": 6736,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building , count(*) FROM Faculty GROUP BY building",
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $project: { building: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", facultyCount: { $sum: 1 } } }, { $project: { building: \"$_id\", facultyCount: 1 } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $project: { building: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3899,
        "spider_question_id": 6737,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building , count(*) FROM Faculty GROUP BY building",
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $project: { Building: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", facultyCount: { $sum: 1 } } }, { $project: { building: \"$_id\", facultyCount: 1 } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $project: { Building: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3900,
        "spider_question_id": 6738,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "question": "Which building has most faculty members?",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3901,
        "spider_question_id": 6740,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building FROM Faculty WHERE rank = 'Professor' GROUP BY building HAVING count(*) >= 10",
        "question": "Show all the buildings that have at least 10 professors.",
        "query": "db.Faculty.aggregate([ { $match: { Rank: 'Professor' } }, { $group: { _id: '$Building', count: { $sum: 1 } } }, { $match: { count: { $gte: 10 } } }, { $project: { Building: '$_id' } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Rank: 'Professor' } }, { $group: { _id: '$Building', count: { $sum: 1 } } }, { $match: { count: { $gte: 10 } } }, { $project: { Building: '$_id' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3902,
        "spider_question_id": 6741,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT building FROM Faculty WHERE rank = 'Professor' GROUP BY building HAVING count(*) >= 10",
        "question": "In which buildings are there at least ten professors?",
        "query": "db.Faculty.aggregate([ { $match: { Rank: \"Professor\" } }, { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $match: { count: { $gte: 10 } } }, { $project: { building: \"$_id\" } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Rank: \"Professor\" } }, { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $match: { count: { $gte: 10 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $match: { Rank: \"Professor\" } }, { $group: { _id: \"$Building\", count: { $sum: 1 } } }, { $match: { count: { $gte: 10 } } }, { $project: { building: \"$_id\" } } ])"
    },
    {
        "question_id": 3903,
        "spider_question_id": 6742,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rank , count(*) FROM Faculty GROUP BY rank",
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $project: { rank: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $project: { rank: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $project: { rank: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 3904,
        "spider_question_id": 6743,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rank , count(*) FROM Faculty GROUP BY rank",
        "question": "How many faculty members do we have for each faculty rank?",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 3905,
        "spider_question_id": 6744,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rank , sex , count(*) FROM Faculty GROUP BY rank , sex",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "query": "db.Faculty.aggregate([ { $group: { _id: { rank: \"$Rank\", sex: \"$Sex\" }, count: { $sum: 1 } } }, { $project: { rank: \"$_id.rank\", sex: \"$_id.sex\", count: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: { Rank: \"$Rank\", Sex: \"$Sex\" }, count: { $sum: 1 } } }, { $project: { rank: \"$_id.Rank\", sex: \"$_id.Sex\", count: \"$count\" } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: { rank: \"$Rank\", sex: \"$Sex\" }, count: { $sum: 1 } } }, { $project: { rank: \"$_id.rank\", sex: \"$_id.sex\", count: 1 } } ])"
    },
    {
        "question_id": 3906,
        "spider_question_id": 6745,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT rank , sex , count(*) FROM Faculty GROUP BY rank , sex",
        "question": "How many faculty members do we have for each rank and gender?",
        "query": "db.Faculty.aggregate([ { $group: { _id: { rank: \"$Rank\", sex: \"$Sex\" }, count: { $sum: 1 } } }, { $project: { rank: \"$_id.rank\", sex: \"$_id.sex\", count: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: { rank: \"$Rank\", sex: \"$Sex\" }, count: { $sum: 1 } } }, { $project: { rank: \"$_id.rank\", sex: \"$_id.sex\", count: 1 } } ])",
        "deepseek answer": "db.Faculty.aggregate([ { $group: { _id: { rank: \"$Rank\", sex: \"$Sex\" }, count: { $sum: 1 } } }, { $project: { rank: \"$_id.rank\", sex: \"$_id.sex\", count: 1 } } ])"
    },
    {
        "question_id": 3907,
        "spider_question_id": 6747,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "question": "Find the faculty rank that has the least members.",
        "query": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { rank: \"$_id\" } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $group: { _id: \"$Rank\", count: { $sum: 1 } } }, { $sort: { count: 1 } }, { $limit: 1 }, { $project: { rank: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3908,
        "spider_question_id": 6748,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sex , count(*) FROM Faculty WHERE rank = 'AsstProf' GROUP BY sex",
        "question": "Show the number of male and female assistant professors.",
        "query": "db.Faculty.aggregate([ { $match: { Rank: 'AsstProf' } }, { $group: { _id: '$Sex', count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Rank: 'AsstProf' } }, { $group: { _id: '$Sex', count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3909,
        "spider_question_id": 6749,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT sex , count(*) FROM Faculty WHERE rank = 'AsstProf' GROUP BY sex",
        "question": "How many male and female assistant professors do we have?",
        "query": "db.Faculty.aggregate([ { $match: { Rank: 'AsstProf' } }, { $group: { _id: \"$Sex\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Rank: 'AsstProf' } }, { $group: { _id: \"$Sex\", count: { $sum: 1 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3910,
        "spider_question_id": 6751,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = 'Linda' AND T2.lname = 'Smith'",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "query": "db.Student.aggregate([ { $match: { Fname: 'Linda', LName: 'Smith' } }, { $lookup: { from: 'Faculty', localField: 'Advisor', foreignField: 'FacID', as: 'advisor_info' } }, { $unwind: '$advisor_info' }, { $project: { fname: '$advisor_info.Fname', lname: '$advisor_info.Lname' } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Fname: 'Linda', LName: 'Smith' } }, { $lookup: { from: 'Faculty', localField: 'Advisor', foreignField: 'FacID', as: 'advisor_info' } }, { $unwind: '$advisor_info' }, { $project: { fname: '$advisor_info.Fname', lname: '$advisor_info.Lname' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3911,
        "spider_question_id": 6752,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = 'Professor'",
        "question": "Show the ids of students whose advisors are professors.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Faculty\", localField: \"Advisor\", foreignField: \"FacID\", as: \"advisor_details\" } }, { $match: { \"advisor_details.Rank\": \"Professor\" } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Faculty\", localField: \"Advisor\", foreignField: \"FacID\", as: \"advisor_details\" } }, { $match: { \"advisor_details.Rank\": \"Professor\" } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3912,
        "spider_question_id": 6753,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = 'Professor'",
        "question": "Which students have professors as their advisors? Find their student ids.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Faculty\", localField: \"Advisor\", foreignField: \"FacID\", as: \"FacultyAdvisor\" } }, { $match: { \"FacultyAdvisor.Rank\": \"Professor\" } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Faculty\", localField: \"Advisor\", foreignField: \"FacID\", as: \"FacultyAdvisor\" } }, { $match: { \"FacultyAdvisor.Rank\": \"Professor\" } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3913,
        "spider_question_id": 6756,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", NumberOfStudents: { $sum: 1 } } }, { $project: { FacID: \"$_id\", NumberOfStudents: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", NumberOfStudents: { $sum: 1 } } }, { $project: { FacID: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3914,
        "spider_question_id": 6757,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.FacID , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
        "question": "What are the faculty id and the number of students each faculty has?",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", NumberOfStudents: { $sum: 1 } } }, { $project: { FacID: \"$_id\", NumberOfStudents: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", NumberOfStudents: { $sum: 1 } } }, { $project: { FacID: \"$_id\", NumberOfStudents: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3915,
        "spider_question_id": 6760,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the first and last name of the faculty who has the most students?",
        "query": "db.Faculty.aggregate([ { $lookup: { from: \"Student\", localField: \"FacID\", foreignField: \"Advisor\", as: \"AdvisedStudents\" } }, { $project: { Fname: 1, Lname: 1, studentCount: { $size: \"$AdvisedStudents\" } } }, { $sort: { studentCount: -1 } }, { $limit: 1 }, { $project: { Lname: 1, Fname: 1 } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $lookup: { from: \"Student\", localField: \"FacID\", foreignField: \"Advisor\", as: \"AdvisedStudents\" } }, { $project: { Fname: 1, Lname: 1, studentCount: { $size: \"$AdvisedStudents\" } } }, { $sort: { studentCount: -1 } }, { $limit: 1 }, { $project: { Lname: 1, Fname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3916,
        "spider_question_id": 6761,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "question": "Give me the the first and last name of the faculty who advises the most students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Faculty\", localField: \"_id\", foreignField: \"FacID\", as: \"faculty\" } }, { $unwind: \"$faculty\" }, { $project: { fname: \"$faculty.Fname\", lname: \"$faculty.Lname\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Faculty\", localField: \"_id\", foreignField: \"FacID\", as: \"faculty\" } }, { $unwind: \"$faculty\" }, { $project: { fname: \"$faculty.Fname\", lname: \"$faculty.Lname\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3917,
        "spider_question_id": 6762,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2",
        "question": "Show the ids for all the faculty members who have at least 2 students.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", studentCount: { $sum: 1 } } }, { $match: { studentCount: { $gte: 2 } } }, { $project: { FacID: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", studentCount: { $sum: 1 } } }, { $match: { studentCount: { $gte: 2 } } }, { $project: { FacID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3918,
        "spider_question_id": 6763,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count(*) >= 2",
        "question": "Which faculty members advise two ore more students? Give me their faculty ids.",
        "query": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { FacID: \"$_id\" } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $group: { _id: \"$Advisor\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { FacID: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3919,
        "spider_question_id": 6766,
        "db_id": "activity_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT activity_name FROM Activity",
        "question": "What activities do we have?",
        "query": "db.Activity.find({}, {activity_name: 1})",
        "gpt4 answer": "db.Activity.find({}, { activity_name: 1 })",
        "deepseek answer": "db.Activity.find({}, {activity_name: 1})"
    },
    {
        "question_id": 3920,
        "spider_question_id": 6767,
        "db_id": "activity_1",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT activity_name FROM Activity",
        "question": "List all the activities we have.",
        "query": "db.Activity.find({}, {activity_name: 1})",
        "gpt4 answer": "db.Activity.find({}, { activity_name: 1 })",
        "deepseek answer": "db.Activity.find({}, {activity_name: 1})"
    },
    {
        "question_id": 3921,
        "spider_question_id": 6774,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "query": "db.Faculty_Participates_in.aggregate([ { $lookup: { from: \"Student\", localField: \"FacID\", foreignField: \"Advisor\", as: \"AdvisingStudents\" } }, { $match: { \"AdvisingStudents\": { $ne: [] } } }, { $group: { _id: \"$FacID\" } } ])",
        "gpt4 answer": "db.Faculty_Participates_in.aggregate([ { $lookup: { from: \"Student\", localField: \"FacID\", foreignField: \"Advisor\", as: \"AdvisingStudents\" } }, { $match: { \"AdvisingStudents\": { $ne: [] } } }, { $group: { _id: \"$FacID\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3922,
        "spider_question_id": 6775,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
        "query": "db.Faculty_Participates_in.aggregate([ { $lookup: { from: \"Student\", localField: \"FacID\", foreignField: \"Advisor\", as: \"Student_Advisor\" } }, { $match: { \"Student_Advisor\": { $ne: [] } } }, { $group: { _id: \"$FacID\" } } ])",
        "gpt4 answer": "db.Faculty_Participates_in.aggregate([ { $lookup: { from: \"Student\", localField: \"FacID\", foreignField: \"Advisor\", as: \"Student_Advisor\" } }, { $match: { \"Student_Advisor\": { $ne: [] } } }, { $group: { _id: \"$FacID\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3923,
        "spider_question_id": 6776,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
        "question": "How many activities does Mark Giuliano participate in?",
        "query": "db.Faculty.aggregate([ { $match: { Fname: \"Mark\", Lname: \"Giuliano\" } }, { $lookup: { from: \"Faculty_Participates_in\", localField: \"FacID\", foreignField: \"FacID\", as: \"activities\" } }, { $project: { activityCount: { $size: \"$activities\" } } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Fname: \"Mark\", Lname: \"Giuliano\" } }, { $lookup: { from: \"Faculty_Participates_in\", localField: \"FacID\", foreignField: \"FacID\", as: \"activities\" } }, { $project: { activityCount: { $size: \"$activities\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3924,
        "spider_question_id": 6777,
        "db_id": "activity_1",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "query": "db.Faculty.aggregate([ { $match: { Fname: \"Mark\", Lname: \"Giuliano\" } }, { $lookup: { from: \"Faculty_Participates_in\", localField: \"FacID\", foreignField: \"FacID\", as: \"FacultyActivities\" }}, { $project: { NumberOfActivities: { $size: \"$FacultyActivities\" } } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Fname: \"Mark\", Lname: \"Giuliano\" } }, { $lookup: { from: \"Faculty_Participates_in\", localField: \"FacID\", foreignField: \"FacID\", as: \"FacultyActivities\" }}, { $project: { NumberOfActivities: { $size: \"$FacultyActivities\" } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3925,
        "spider_question_id": 6778,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "query": "db.Faculty.aggregate([ { $match: { Fname: 'Mark', Lname: 'Giuliano' } }, { $lookup: { from: 'Faculty_Participates_in', localField: 'FacID', foreignField: 'FacID', as: 'participations' } }, { $unwind: '$participations' }, { $lookup: { from: 'Activity', localField: 'participations.actid', foreignField: 'actid', as: 'activities' } }, { $unwind: '$activities' }, { $project: { activity_name: '$activities.activity_name' } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Fname: 'Mark', Lname: 'Giuliano' } }, { $lookup: { from: 'Faculty_Participates_in', localField: 'FacID', foreignField: 'FacID', as: 'participations' } }, { $unwind: '$participations' }, { $lookup: { from: 'Activity', localField: 'participations.actid', foreignField: 'actid', as: 'activities' } }, { $unwind: '$activities' }, { $project: { activity_name: '$activities.activity_name' } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3926,
        "spider_question_id": 6779,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "query": "db.Faculty.aggregate([ { $match: { Fname: \"Mark\", Lname: \"Giuliano\" } }, { $lookup: { from: \"Faculty_Participates_in\", localField: \"FacID\", foreignField: \"FacID\", as: \"activities\" } }, { $unwind: \"$activities\" }, { $lookup: { from: \"Activity\", localField: \"activities.actid\", foreignField: \"actid\", as: \"activityDetails\" } }, { $unwind: \"$activityDetails\" }, { $project: { activity_name: \"$activityDetails.activity_name\" } } ])",
        "gpt4 answer": "db.Faculty.aggregate([ { $match: { Fname: \"Mark\", Lname: \"Giuliano\" } }, { $lookup: { from: \"Faculty_Participates_in\", localField: \"FacID\", foreignField: \"FacID\", as: \"activities\" } }, { $unwind: \"$activities\" }, { $lookup: { from: \"Activity\", localField: \"activities.actid\", foreignField: \"actid\", as: \"activityDetails\" } }, { $unwind: \"$activityDetails\" }, { $project: { activity_name: \"$activityDetails.activity_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3927,
        "spider_question_id": 6786,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "query": "db.Activity.aggregate([ { $lookup: { from: \"Faculty_Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"faculty_participation\" } }, { $project: { activity_name: 1} }, { $sort: { faculty_count: -1 } }, { $limit: 1 }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Activity.aggregate([ { $lookup: { from: \"Faculty_Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"faculty_participation\" } }, { $project: { activity_name: 1} }, { $sort: { faculty_count: -1 } }, { $limit: 1 }])"
    },
    {
        "question_id": 3928,
        "spider_question_id": 6787,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "query": "db.Activity.aggregate([ { $lookup: { from: \"Faculty_Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"faculty_participation\" } }, { $project: { activity_name: 1} }, { $sort: { faculty_count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Faculty_Participates_in.aggregate([ { $group: { _id: \"$actid\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Activity\", localField: \"_id\", foreignField: \"actid\", as: \"activityDetails\" } }, { $unwind: \"$activityDetails\" }, { $project: { activity_name: \"$activityDetails.activity_name\" } } ])",
        "deepseek answer": "db.Activity.aggregate([ { $lookup: { from: \"Faculty_Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"faculty_participation\" } }, { $project: { activity_name: 1} }, { $sort: { faculty_count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3929,
        "spider_question_id": 6788,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "question": "Show the ids of the students who don't participate in any activity.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participates\" } }, { $match: { \"participates\": { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participation\" } }, { $match: { participation: { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participates\" } }, { $match: { \"participates\": { $size: 0 } } }, { $project: { StuID: 1 } } ])"
    },
    {
        "question_id": 3930,
        "spider_question_id": 6789,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "question": "What are the ids of the students who are not involved in any activity",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participates\" } }, { $match: { \"participates\": { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"activities\" } }, { $match: { activities: { $size: 0 } } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participates\" } }, { $match: { \"participates\": { $size: 0 } } }, { $project: { StuID: 1 } } ])"
    },
    {
        "question_id": 3931,
        "spider_question_id": 6791,
        "db_id": "activity_1",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "query": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participates_in\" } }, { $match: { \"Age\": { $lt: 20 }, \"participates_in\": { $ne: [] } } }, { $project: { \"_id\": 0, \"StuID\": 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $match: { Age: { $lt: 20 } } }, { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"Participation\" } }, { $match: { Participation: { $ne: [] } } }, { $project: { StuID: 1 } } ])",
        "deepseek answer": "db.Student.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"StuID\", foreignField: \"stuid\", as: \"participates_in\" } }, { $match: { \"Age\": { $lt: 20 }, \"participates_in\": { $ne: [] } } }, { $project: { \"_id\": 0, \"StuID\": 1 } } ])"
    },
    {
        "question_id": 3932,
        "spider_question_id": 6793,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.fname , T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the first and last name of the student who has the most activities.",
        "query": "db.Student.aggregate([ { $lookup: { from: 'Participates_in', localField: 'StuID', foreignField: 'stuid', as: 'activities' } }, { $unwind: '$activities' }, { $group: { _id: '$StuID', fname: { $first: '$Fname' }, lname: { $first: '$LName' }, count: { $sum: 1 } } }, { $sort: {count: -1} }, { $limit: 1 }, { $project: { fname: 1, lname: 1 } } ])",
        "gpt4 answer": "db.Student.aggregate([ { $lookup: { from: 'Participates_in', localField: 'StuID', foreignField: 'stuid', as: 'activities' } }, { $unwind: '$activities' }, { $group: { _id: '$StuID', fname: { $first: '$Fname' }, lname: { $first: '$LName' }, count: { $sum: 1 } } }, { $sort: {count: -1} }, { $limit: 1 }, { $project: { fname: 1, lname: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3933,
        "spider_question_id": 6794,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the activity with the most students?",
        "query": "db.Activity.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"participants\" } }, { $project: { activity_name: 1} }, { $sort: { participantCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Activity.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"participating_students\" } }, { $project: { activity_name: 1, num_students: { $size: \"$participating_students\" } } }, { $sort: { num_students: -1 } }, { $limit: 1 }, { $project: { activity_name: 1 } } ])",
        "deepseek answer": "db.Activity.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"participants\" } }, { $project: { activity_name: 1} }, { $sort: { participantCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3934,
        "spider_question_id": 6795,
        "db_id": "activity_1",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the activity that has the largest number of student participants.",
        "query": "db.Activity.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"participants\" } }, { $project: { activity_name: 1 } }, { $sort: { participantCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.Participates_in.aggregate([ { $group: { _id: \"$actid\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $lookup: { from: \"Activity\", localField: \"_id\", foreignField: \"actid\", as: \"activityDetails\" } }, { $replaceRoot: { newRoot: { $arrayElemAt: [\"$activityDetails\", 0] } } }, { $project: { activity_name: 1 } } ])",
        "deepseek answer": "db.Activity.aggregate([ { $lookup: { from: \"Participates_in\", localField: \"actid\", foreignField: \"actid\", as: \"participants\" } }, { $project: { activity_name: 1 } }, { $sort: { participantCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3935,
        "spider_question_id": 6804,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM airports WHERE city = 'Goroka'",
        "question": "Find the name of the airport in the city of Goroka.",
        "query": "db.airports.find({city: 'Goroka'}, {name: 1})",
        "gpt4 answer": "db.airports.find({ city: 'Goroka' }, { name: 1 })",
        "deepseek answer": "db.airports.find({city: 'Goroka'}, {name: 1})"
    },
    {
        "question_id": 3936,
        "spider_question_id": 6805,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM airports WHERE city = 'Goroka'",
        "question": "What are the names of the airports in the city of Goroka?",
        "query": "db.airports.find({city: 'Goroka'}, {name: 1})",
        "gpt4 answer": "db.airports.find({ city: 'Goroka' }, { name: 1 })",
        "deepseek answer": "db.airports.find({city: 'Goroka'}, {name: 1})"
    },
    {
        "question_id": 3937,
        "spider_question_id": 6806,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "query": "db.airports.find({city: 'New York'}, {name: 1, city: 1, country: 1, elevation: 1})",
        "gpt4 answer": "db.airports.find( { city: 'New York' }, { name: 1, city: 1, country: 1, elevation: 1 } )",
        "deepseek answer": "db.airports.find({city: 'New York'}, {name: 1, city: 1, country: 1, elevation: 1})"
    },
    {
        "question_id": 3938,
        "spider_question_id": 6807,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "query": "db.airports.find({city: 'New York'}, {name: 1, city: 1, country: 1, elevation: 1})",
        "gpt4 answer": "db.airports.find({ city: \"New York\" }, { name: 1, city: 1, country: 1, elevation: 1 })",
        "deepseek answer": "db.airports.find({city: 'New York'}, {name: 1, city: 1, country: 1, elevation: 1})"
    },
    {
        "question_id": 3939,
        "spider_question_id": 6812,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(elevation) FROM airports WHERE country = 'Iceland'",
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "query": "db.airports.aggregate([ { $match: { country: \"Iceland\" } }, { $group: { _id: null, max_elevation: { $max: \"$elevation\" } } }, { $project: { max_elevation: 1 } } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: \"Iceland\" } }, { $group: { _id: null, maxElevation: { $max: \"$elevation\" } } }, { $project: { maxElevation: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"Iceland\" } }, { $group: { _id: null, max_elevation: { $max: \"$elevation\" } } }, { $project: { max_elevation: 1 } } ])"
    },
    {
        "question_id": 3940,
        "spider_question_id": 6813,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT max(elevation) FROM airports WHERE country = 'Iceland'",
        "question": "What is the highest elevation of an airport in the country of Iceland?",
        "query": "db.airports.aggregate([ { $match: { country: 'Iceland' } }, { $group: { _id: null, maxElevation: { $max: \"$elevation\" } } }, { $project: { maxElevation: 1 } } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: \"Iceland\" } }, { $group: { _id: null, maxElevation: { $max: \"$elevation\" } } }, { $project: { maxElevation: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: 'Iceland' } }, { $group: { _id: null, maxElevation: { $max: \"$elevation\" } } }, { $project: { maxElevation: 1 } } ])"
    },
    {
        "question_id": 3941,
        "spider_question_id": 6816,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "question": "Find the country of the airlines whose name starts with 'Orbit'.",
        "query": "db.airlines.find({name: /^Orbit/}, {country: 1})",
        "gpt4 answer": "db.airlines.find({ name: /^Orbit/ }, { country: 1 })",
        "deepseek answer": "db.airlines.find({name: /^Orbit/}, {country: 1})"
    },
    {
        "question_id": 3942,
        "spider_question_id": 6817,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "question": "What are the countries of all airlines whose names start with Orbit?",
        "query": "db.airlines.find({name: /^Orbit/}, {country: 1})",
        "gpt4 answer": "db.airlines.find({ name: /^Orbit/ }, { country: 1 })",
        "deepseek answer": "db.airlines.find({name: /^Orbit/}, {country: 1})"
    },
    {
        "question_id": 3943,
        "spider_question_id": 6820,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "question": "Which country is the airport that has the highest altitude located in?",
        "query": "db.airports.find({}, {country: 1}).sort({elevation: -1}).limit(1)",
        "gpt4 answer": "db.airports.find({}, {country: 1}).sort({elevation: -1}).limit(1)",
        "deepseek answer": "db.airports.find({}, {country: 1}).sort({elevation: -1}).limit(1)"
    },
    {
        "question_id": 3944,
        "spider_question_id": 6821,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
        "question": "What is the country of the airport with the highest elevation?",
        "query": "db.airports.find({}, { country: 1 }).sort({ elevation: -1 }).limit(1)",
        "gpt4 answer": "db.airports.find({}, { country: 1 }).sort({ elevation: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3945,
        "spider_question_id": 6824,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT city) FROM airports WHERE country = 'Greenland'",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "query": "db.airports.aggregate([ { $match: { country: \"Greenland\" } }, { $group: { _id: \"$city\" } }, { $count: \"distinctCities\" } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: \"Greenland\" } }, { $group: { _id: \"$city\" } }, { $count: \"distinctCities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3946,
        "spider_question_id": 6825,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(DISTINCT city) FROM airports WHERE country = 'Greenland'",
        "question": "In how many cities are there airports in the country of Greenland?",
        "query": "db.airports.aggregate([ { $match: { country: \"Greenland\" } }, { $group: { _id: \"$city\" } }, { $count: \"distinct_cities\" } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: \"Greenland\" } }, { $group: { _id: \"$city\" } }, { $count: \"distinct_cities\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3947,
        "spider_question_id": 6826,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
        "question": "Find the number of routes operated by American Airlines.",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline_info\" } }, { $match: { \"airline_info.name\": \"American Airlines\" } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $match: { name: \"American Airlines\" } }, { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $project: { numberOfRoutes: { $size: \"$routes\" } } } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline_info\" } }, { $match: { \"airline_info.name\": \"American Airlines\" } }, { $count: \"count\" } ])"
    },
    {
        "question_id": 3948,
        "spider_question_id": 6827,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
        "question": "How many routes does American Airlines operate?",
        "query": "db.airlines.aggregate([ { $match: { name: 'American Airlines' } }, { $lookup: { from: 'routes', localField: 'alid', foreignField: 'alid', as: 'routes' } }, { $unwind: '$routes' }, { $count: 'routeCount' } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $match: { name: 'American Airlines' } }, { $lookup: { from: 'routes', localField: 'alid', foreignField: 'alid', as: 'routes' } }, { $unwind: '$routes' }, { $count: 'routeCount' } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3949,
        "spider_question_id": 6828,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'",
        "question": "Find the number of routes whose destination airports are in Canada.",
        "query": "db.airports.aggregate([ { $match: { country: \"Canada\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: 'Canada' } }, { $lookup: { from: 'routes', localField: 'apid', foreignField: 'dst_apid', as: 'canada_routes' } }, { $unwind: '$canada_routes' }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"Canada\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3950,
        "spider_question_id": 6829,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'",
        "question": "How many routes end in a Canadian airport?",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.country\": \"Canada\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: 'Canada' } }, { $lookup: { from: 'routes', localField: 'apid', foreignField: 'dst_apid', as: 'routes_to_canada' } }, { $unwind: '$routes_to_canada' }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.country\": \"Canada\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 3951,
        "spider_question_id": 6830,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1",
        "question": "Find the name, city, and country of the airport that has the lowest altitude.",
        "query": "db.airports.find({}, {name: 1, city: 1, country: 1}).sort({elevation: 1}).limit(1)",
        "gpt4 answer": "db.airports.find({}, {name: 1, city: 1, country: 1}).sort({elevation: 1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3952,
        "spider_question_id": 6831,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1",
        "question": "What is the name, city, and country of the airport with the lowest altitude?",
        "query": "db.airports.find({}, { name: 1, city: 1, country: 1 }).sort({ elevation: 1 }).limit(1)",
        "gpt4 answer": "db.airports.find({}, { name: 1, city: 1, country: 1 }).sort({ elevation: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3953,
        "spider_question_id": 6832,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , city , country FROM airports ORDER BY elevation DESC LIMIT 1",
        "question": "Find the name, city, and country of the airport that has the highest latitude.",
        "query": "db.airports.find({}, {name: 1, city: 1, country: 1}).sort({elevation: -1}).limit(1)",
        "gpt4 answer": "db.airports.find({}, {name: 1, city: 1, country: 1}).sort({elevation: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3954,
        "spider_question_id": 6833,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , city , country FROM airports ORDER BY elevation DESC LIMIT 1",
        "question": "What is the name, city, and country of the airport with the highest elevation?",
        "query": "db.airports.find({}, { name: 1, city: 1, country: 1 }).sort({ elevation: -1 }).limit(1)",
        "gpt4 answer": "db.airports.find({}, { name: 1, city: 1, country: 1 }).sort({ elevation: -1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3955,
        "spider_question_id": 6836,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "question": "Find the names of the top 10 airlines that operate the most number of routes.",
        "query": "db.routes.aggregate([ { $group: { _id: \"$alid\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 10 }, { $lookup: { from: \"airlines\", localField: \"_id\", foreignField: \"alid\", as: \"airlineInfo\" } }, { $unwind: \"$airlineInfo\" }, { $project: { name: \"$airlineInfo.name\", alid: \"$_id\" } } ])",
        "gpt4 answer": "db.routes.aggregate([ { $group: { _id: \"$alid\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 10 }, { $lookup: { from: \"airlines\", localField: \"_id\", foreignField: \"alid\", as: \"airlineInfo\" } }, { $unwind: \"$airlineInfo\" }, { $project: { name: \"$airlineInfo.name\", alid: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3956,
        "spider_question_id": 6840,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
        "question": "Find the number of different airports which are the destinations of the American Airlines.",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline_info\" } }, { $match: { \"airline_info.name\": \"American Airlines\" } }, { $group: { _id: null, uniqueAirports: { $addToSet: \"$dst_apid\" } } }, { $project: { numOfAirports: { $size: \"$uniqueAirports\" } } } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $match: { name: \"American Airlines\" } }, { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$routes.dst_apid\" } }, { $count: \"distinct_destinations\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline_info\" } }, { $match: { \"airline_info.name\": \"American Airlines\" } }, { $group: { _id: null, uniqueAirports: { $addToSet: \"$dst_apid\" } } }, { $project: { numOfAirports: { $size: \"$uniqueAirports\" } } } ])"
    },
    {
        "question_id": 3957,
        "spider_question_id": 6841,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
        "question": "What is the number of different different airports that are destinations for American Airlines?",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline_info\" } }, { $match: { \"airline_info.name\": \"American Airlines\" } }, { $group: { _id: \"$dst_apid\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $match: { name: 'American Airlines' } }, { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$routes.dst_apid\" } }, { $count: \"distinct_destination_airports\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline_info\" } }, { $match: { \"airline_info.name\": \"American Airlines\" } }, { $group: { _id: \"$dst_apid\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1 } } ])"
    },
    {
        "question_id": 3958,
        "spider_question_id": 6842,
        "db_id": "flight_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "question": "Which countries has the most number of airlines?",
        "query": "db.airlines.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $group: { _id: \"$country\", numberOfAirlines: { $sum: 1 } } }, { $sort: { numberOfAirlines: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.airlines.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3959,
        "spider_question_id": 6843,
        "db_id": "flight_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the country with the most number of home airlines?",
        "query": "db.airlines.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3960,
        "spider_question_id": 6844,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "question": "Which countries has the most number of airlines whose active status is 'Y'?",
        "query": "db.airlines.aggregate([ { $match: { active: 'Y' } }, { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $match: { active: 'Y' } }, { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.airlines.aggregate([ { $match: { active: 'Y' } }, { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3961,
        "spider_question_id": 6845,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the countries with the most airlines whose active status is Y?",
        "query": "db.airlines.aggregate([ { $match: { active: 'Y' } }, { $group: { _id: '$country', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])",
        "gpt4 answer": "db.airlines.aggregate([ { $match: { active: 'Y' } }, { $group: { _id: \"$country\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.airlines.aggregate([ { $match: { active: 'Y' } }, { $group: { _id: '$country', count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { country: \"$_id\" } } ])"
    },
    {
        "question_id": 3962,
        "spider_question_id": 6852,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 3",
        "question": "Return the cities with more than 3 airports in the United States.",
        "query": "db.airports.aggregate([ { $match: { country: \"United States\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } , { $project: { city: \"$_id\" } }])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: 'United States' } }, { $group: { _id: \"$city\", airportCount: { $sum: 1 } } }, { $match: { airportCount: { $gt: 3 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"United States\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } , { $project: { city: \"$_id\" } }])"
    },
    {
        "question_id": 3963,
        "spider_question_id": 6853,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING count(*) > 3",
        "question": "What is the number of cities in the United States with more than 3 airports?",
        "query": "db.airports.aggregate([ { $match: { country: \"United States\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } , { $project: { city: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"United States\" } }, { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } , { $project: { city: \"$_id\" } }])"
    },
    {
        "question_id": 3964,
        "spider_question_id": 6854,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 3)",
        "question": "How many cities are there that have more than 3 airports?",
        "query": "db.airports.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $count: \"cities\" } ])",
        "gpt4 answer": "db.airports.aggregate([ { $group: { _id: \"$city\", airportCount: { $sum: 1 } } }, { $match: { airportCount: { $gt: 3 } } }, { $group: { _id: null, cityCount: { $sum: 1 } } }, { $project: { cityCount: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $count: \"cities\" } ])"
    },
    {
        "question_id": 3965,
        "spider_question_id": 6855,
        "db_id": "flight_4",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*) > 3)",
        "question": "What is the count of cities with more than 3 airports?",
        "query": "db.airports.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": "db.airports.aggregate([ { $group: { _id: \"$city\", airportCount: { $sum: 1 } } }, { $match: { airportCount: { $gt: 3 } } }, { $count: \"cityCount\" } ])",
        "deepseek answer": "db.airports.aggregate([ { $group: { _id: \"$city\", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 3966,
        "spider_question_id": 6870,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
        "question": "Find the number of routes with destination airports in Italy.",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.country\": \"Italy\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $match: { \"destination_airport.country\": \"Italy\" } }, { $count: \"number_of_routes\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.country\": \"Italy\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 3967,
        "spider_question_id": 6871,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
        "question": "What is the number of routes whose destinations are Italian airports?",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.country\": \"Italy\" } }, { $count: \"total\" } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $match: { \"destination_airport.country\": \"Italy\" } }, { $count: \"number_of_routes\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.country\": \"Italy\" } }, { $count: \"total\" } ])"
    },
    {
        "question_id": 3968,
        "spider_question_id": 6872,
        "db_id": "flight_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline\" } }, { $match: { \"dst_ap.country\": \"Italy\", \"airline.name\": \"American Airlines\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline\" } }, { $match: { \"destination_airport.country\": \"Italy\", \"airline.name\": \"American Airlines\" } }, { $count: \"number_of_routes\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline\" } }, { $match: { \"dst_ap.country\": \"Italy\", \"airline.name\": \"American Airlines\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 3969,
        "spider_question_id": 6873,
        "db_id": "flight_4",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
        "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"al\" } }, { $match: { \"dst_ap.country\": \"Italy\", \"al.name\": \"American Airlines\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $unwind: \"$destination_airport\" }, { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"airline\" } }, { $unwind: \"$airline\" }, { $match: { \"destination_airport.country\": \"Italy\", \"airline.name\": \"American Airlines\" } }, { $count: \"num_routes\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $lookup: { from: \"airlines\", localField: \"alid\", foreignField: \"alid\", as: \"al\" } }, { $match: { \"dst_ap.country\": \"Italy\", \"al.name\": \"American Airlines\" } }, { $group: { _id: null, count: { $sum: 1 } } }, { $project: { count: 1} } ])"
    },
    {
        "question_id": 3970,
        "spider_question_id": 6874,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.name\": \"John F Kennedy International Airport\" } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { name: \"John F Kennedy International Airport\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes_to_jfk\" } }, { $unwind: \"$routes_to_jfk\" }, { $count: \"num_routes\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.name\": \"John F Kennedy International Airport\" } }, { $count: \"count\" } ])"
    },
    {
        "question_id": 3971,
        "spider_question_id": 6875,
        "db_id": "flight_4",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
        "question": "What is the number of routes that end at John F Kennedy International Airport?",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.name\": \"John F Kennedy International Airport\" } }, { $count: \"count\" } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"airport_info\" } }, { $unwind: \"$airport_info\" }, { $match: { \"airport_info.name\": \"John F Kennedy International Airport\" } }, { $count: \"num_routes\" } ])",
        "deepseek answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"dst_ap\" } }, { $match: { \"dst_ap.name\": \"John F Kennedy International Airport\" } }, { $count: \"count\" } ])"
    },
    {
        "question_id": 3972,
        "spider_question_id": 6876,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "question": "Find the number of routes from the United States to Canada.",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"src_apid\", foreignField: \"apid\", as: \"source_airport\" } }, { $match: { \"source_airport.country\": \"United States\" } }, { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $match: { \"destination_airport.country\": \"Canada\" } }, { $count: \"num_routes\" } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"src_apid\", foreignField: \"apid\", as: \"source_airport\" } }, { $match: { \"source_airport.country\": \"United States\" } }, { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $match: { \"destination_airport.country\": \"Canada\" } }, { $count: \"num_routes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3973,
        "spider_question_id": 6877,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')",
        "question": "How many routes go from the United States to Canada?",
        "query": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"src_apid\", foreignField: \"apid\", as: \"source_airport\" } }, { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $match: { \"source_airport.country\": \"United States\", \"destination_airport.country\": \"Canada\" } }, { $count: \"total_routes\" } ])",
        "gpt4 answer": "db.routes.aggregate([ { $lookup: { from: \"airports\", localField: \"src_apid\", foreignField: \"apid\", as: \"source_airport\" } }, { $lookup: { from: \"airports\", localField: \"dst_apid\", foreignField: \"apid\", as: \"destination_airport\" } }, { $match: { \"source_airport.country\": \"United States\", \"destination_airport.country\": \"Canada\" } }, { $count: \"total_routes\" } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3974,
        "spider_question_id": 6880,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of airline which runs the most number of routes.",
        "query": "db.airlines.aggregate([ { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $project: { name: 1 } }, { $sort: { routeCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.airlines.aggregate([ { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $project: { name: 1 } }, { $sort: { routeCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3975,
        "spider_question_id": 6881,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the airline with the most routes?",
        "query": "db.airlines.aggregate([ { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $project: { name: 1} }, { $sort: { routeCount: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.routes.aggregate([ { $group: { _id: '$alid', routeCount: { $sum: 1 } } }, { $sort: { routeCount: -1 } }, { $limit: 1 }, { $lookup: { from: 'airlines', localField: '_id', foreignField: 'alid', as: 'airline' } }, { $unwind: '$airline' }, { $project: { name: '$airline.name' } } ])",
        "deepseek answer": "db.airlines.aggregate([ { $lookup: { from: \"routes\", localField: \"alid\", foreignField: \"alid\", as: \"routes\" } }, { $project: { name: 1} }, { $sort: { routeCount: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 3976,
        "spider_question_id": 6882,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "query": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"src_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { name: \"$_id\" } }])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"src_apid\", as: \"routesDetails\" }}, { $unwind: \"$routesDetails\" }, { $group: { _id: \"$name\", routeCount: { $sum: 1 } }}, { $sort: { routeCount: -1 }}, { $limit: 1 }, { $project: { _id: 1 }} ])",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"src_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { name: \"$_id\" } }])"
    },
    {
        "question_id": 3977,
        "spider_question_id": 6883,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "query": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"src_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": "db.airports.aggregate([ { $match: { country: 'China' } }, { $lookup: { from: 'routes', localField: 'apid', foreignField: 'src_apid', as: 'routes' }}, { $project: { name: 1, numOfRoutes: { $size: \"$routes\" } }}, { $sort: { numOfRoutes: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"src_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 3978,
        "spider_question_id": 6884,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the busiest destination airport that runs most number of routes in China.",
        "query": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { name: \"$_id\" } }])",
        "gpt4 answer": ".",
        "deepseek answer": "db.airports.aggregate([ { $match: { country: \"China\" } }, { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes\" } }, { $unwind: \"$routes\" }, { $group: { _id: \"$name\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } , { $project: { name: \"$_id\" } }])"
    },
    {
        "question_id": 3979,
        "spider_question_id": 6885,
        "db_id": "flight_4",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "query": "db.airports.aggregate([ { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes\" } }, { $match: { \"country\": \"China\" } }, { $unwind: \"$routes\" }, { $group: { \"_id\": \"$name\", \"count\": { \"$sum\": 1 } } }, { $sort: { \"count\": -1 } }, { $limit: 1 } , { $project: { name: \"$_id\" } }])",
        "gpt4 answer": "db.airports.aggregate([ { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"src_apid\", as: \"routes_from\" } }, { $match: { country: \"China\" } }, { $unwind: \"$routes_from\" }, { $group: { _id: \"$routes_from.dst_apid\", count: { $sum: 1 } } }, { $lookup: { from: \"airports\", localField: \"_id\", foreignField: \"apid\", as: \"destination_airport\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [{ $arrayElemAt: [\"$destination_airport\", 0] }, \"$$ROOT\"] } } }, { $project: { name: 1, count: 1 } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { name: 1 } } ])",
        "deepseek answer": "db.airports.aggregate([ { $lookup: { from: \"routes\", localField: \"apid\", foreignField: \"dst_apid\", as: \"routes\" } }, { $match: { \"country\": \"China\" } }, { $unwind: \"$routes\" }, { $group: { \"_id\": \"$name\", \"count\": { \"$sum\": 1 } } }, { $sort: { \"count\": -1 } }, { $limit: 1 } , { $project: { name: \"$_id\" } }])"
    },
    {
        "question_id": 3980,
        "spider_question_id": 6886,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "question": "What is the id of the most recent order?",
        "query": "db.Orders.find({}, {order_id: 1}).sort({date_order_placed: -1}).limit(1)",
        "gpt4 answer": "db.Orders.find({}, {order_id: 1}).sort({date_order_placed: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3981,
        "spider_question_id": 6887,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "question": "Find the id of the order made most recently.",
        "query": "db.Orders.find({}, {order_id: 1}).sort({date_order_placed: -1}).limit(1)",
        "gpt4 answer": "db.Orders.find({}, {order_id: 1}).sort({date_order_placed: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3982,
        "spider_question_id": 6888,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "question": "what are the order id and customer id of the oldest order?",
        "query": "db.Orders.find({}, {order_id: 1}).sort({date_order_placed: -1}).limit(1)",
        "gpt4 answer": "db.Orders.find({}, {order_id: 1}).sort({date_order_placed: -1}).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3983,
        "spider_question_id": 6889,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "question": "Find the order id and customer id associated with the oldest order.",
        "query": "db.Orders.find({}, { order_id: 1, customer_id: 1 }).sort({ date_order_placed: 1 }).limit(1)",
        "gpt4 answer": "db.Orders.find({}, { order_id: 1, customer_id: 1 }).sort({ date_order_placed: 1 }).limit(1)",
        "deepseek answer": "."
    },
    {
        "question_id": 3984,
        "spider_question_id": 6890,
        "db_id": "tracking_orders",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452'",
        "question": "Find the id of the order whose shipment tracking number is '3452'.",
        "query": "db.Shipments.findOne({shipment_tracking_number: '3452'}, {order_id: 1})",
        "gpt4 answer": ".",
        "deepseek answer": "db.Shipments.findOne({shipment_tracking_number: '3452'}, {order_id: 1})"
    },
    {
        "question_id": 3985,
        "spider_question_id": 6891,
        "db_id": "tracking_orders",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452'",
        "question": "Which order's shipment tracking number is '3452'? Give me the id of the order.",
        "query": "db.Shipments.findOne({shipment_tracking_number: '3452'}, {order_id: 1})",
        "gpt4 answer": "db.Shipments.find({ shipment_tracking_number: '3452' }, { order_id: 1 })",
        "deepseek answer": "db.Shipments.findOne({shipment_tracking_number: '3452'}, {order_id: 1})"
    },
    {
        "question_id": 3986,
        "spider_question_id": 6892,
        "db_id": "tracking_orders",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "question": "Find the ids of all the order items whose product id is 11.",
        "query": "db.Order_Items.find({product_id: 11}, {order_item_id: 1})",
        "gpt4 answer": "db.Order_Items.find({ product_id: 11 }, { order_item_id: 1 })",
        "deepseek answer": "db.Order_Items.find({product_id: 11}, {order_item_id: 1})"
    },
    {
        "question_id": 3987,
        "spider_question_id": 6893,
        "db_id": "tracking_orders",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "query": "db.Order_Items.find({product_id: 11}, {order_item_id: 1})",
        "gpt4 answer": "db.Order_Items.find({ product_id: 11 }, { order_item_id: 1 })",
        "deepseek answer": "db.Order_Items.find({product_id: 11}, {order_item_id: 1})"
    },
    {
        "question_id": 3988,
        "spider_question_id": 6894,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing'",
        "question": "List the name of all the distinct customers who have orders with status 'Packing'.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $match: { \"customer_orders.order_status\": \"Packing\" } }, { $group: { _id: \"$customer_name\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $match: { \"customer_orders.order_status\": \"Packing\" } }, { $group: { _id: \"$customer_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3989,
        "spider_question_id": 6895,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing'",
        "question": "Which customers have orders with status 'Packing'? Give me the customer names.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"Packing\" } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"Packing\" } }, { $project: { customer_name: 1 } }, { $group: { _id: \"$customer_name\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"Packing\" } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3990,
        "spider_question_id": 6896,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'",
        "question": "Find the details of all the distinct customers who have orders with status 'On Road'.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"On Road\" } }, { $project: { customer_details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $match: { \"customer_orders.order_status\": \"On Road\" } }, { $group: { _id: \"$customer_details\" } }, { $project: { customer_details: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"On Road\" } }, { $project: { customer_details: 1 } } ])"
    },
    {
        "question_id": 3991,
        "spider_question_id": 6897,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'",
        "question": "What are the distinct customers who have orders with status 'On Road'? Give me the customer details?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"On Road\" } }, { $project: { customer_details: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"Orders\" } }, { $unwind: \"$Orders\" }, { $match: { \"Orders.order_status\": \"On Road\" } }, { $group: { _id: \"$customer_details\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": \"On Road\" } }, { $project: { customer_details: 1 } } ])"
    },
    {
        "question_id": 3992,
        "spider_question_id": 6900,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id of the customer who has the most orders?",
        "query": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", orderCount: { $sum: 1 } } }, { $sort: { orderCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", orderCount: { $sum: 1 } } }, { $sort: { orderCount: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3993,
        "spider_question_id": 6901,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id of the customer who made the most orders.",
        "query": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", total: { $sum: 1 } }}, { $sort: { total: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", total: { $sum: 1 } }}, { $sort: { total: -1 }}, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3994,
        "spider_question_id": 6902,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'",
        "question": "Give me a list of id and status of orders which belong to the customer named 'Jeramie'.",
        "query": "db.Customers.aggregate([ { $match: { customer_name: \"Jeramie\" } }, { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $project: { order_id: \"$orders.order_id\", order_status: \"$orders.order_status\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: 'Jeramie' } }, { $lookup: { from: 'Orders', localField: 'customer_id', foreignField: 'customer_id', as: 'customer_orders' } }, { $unwind: '$customer_orders' }, { $project: { _id: '$customer_orders.order_id', status: '$customer_orders.order_status' } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_name: \"Jeramie\" } }, { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $project: { order_id: \"$orders.order_id\", order_status: \"$orders.order_status\" } } ])"
    },
    {
        "question_id": 3995,
        "spider_question_id": 6903,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.order_id , T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'",
        "question": "Which orders are made by the customer named 'Jeramie'? Give me the order ids and status.",
        "query": "db.Customers.aggregate([ { $match: { customer_name: \"Jeramie\" } }, { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $project: { order_id: \"$orders.order_id\", order_status: \"$orders.order_status\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $match: { customer_name: 'Jeramie' } }, { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $project: { order_id: \"$orders.order_id\", order_status: \"$orders.order_status\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $match: { customer_name: \"Jeramie\" } }, { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $project: { order_id: \"$orders.order_id\", order_status: \"$orders.order_status\" } } ])"
    },
    {
        "question_id": 3996,
        "spider_question_id": 6910,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
        "question": "Find the names of the customers who have order status both 'On Road' and 'Shipped'.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $match: { \"customer_orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $match: { \"customer_orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3997,
        "spider_question_id": 6911,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
        "question": "Which customers have both 'On Road' and 'Shipped' as order status? List the customer names.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $project: { customer_name: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $group: { _id: \"$customer_name\" } }, { $project: { customer_name: \"$_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $project: { customer_name: 1 } } ])"
    },
    {
        "question_id": 3998,
        "spider_question_id": 6912,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
        "question": "Find the id of the customers who have order status both 'On Road' and 'Shipped'.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $group: { _id: \"$customer_id\" } }, { $project: { customer_id: \"$_id\" } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $group: { _id: \"$customer_id\" } }, { $project: { customer_id: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 3999,
        "spider_question_id": 6913,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
        "question": "Which customers have both 'On Road' and 'Shipped' as order status? List the customer ids.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $project: { customer_id: 1 } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $group: { _id: \"$customer_id\" } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $match: { \"orders.order_status\": { $all: [\"On Road\", \"Shipped\"] } } }, { $project: { customer_id: 1 } } ])"
    },
    {
        "question_id": 4000,
        "spider_question_id": 6918,
        "db_id": "tracking_orders",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "question": "List the count and id of each product in all the orders.",
        "query": "db.Orders.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"product\" } }, { $unwind: \"$product\" }, { $group: { _id: \"$product.product_id\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.Orders.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $group: { _id: \"$order_items.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])",
        "deepseek answer": "db.Orders.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"product\" } }, { $unwind: \"$product\" }, { $group: { _id: \"$product.product_id\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 4001,
        "spider_question_id": 6919,
        "db_id": "tracking_orders",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT count(*) , T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "question": "For each product, return its id and the number of times it was ordered.",
        "query": "db.Orders.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"product\" } }, { $unwind: \"$product\" }, { $group: { _id: \"$product.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$product_id\", numOfOrders: { $sum: 1 } } }, { $project: { product_id: \"$_id\", numOfOrders: 1 } } ])",
        "deepseek answer": "db.Orders.aggregate([ { $lookup: { from: \"Order_Items\", localField: \"order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"product\" } }, { $unwind: \"$product\" }, { $group: { _id: \"$product.product_id\", count: { $sum: 1 } } }, { $project: { product_id: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 4002,
        "spider_question_id": 6924,
        "db_id": "tracking_orders",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
        "question": "Find the id of the order which is shipped most recently.",
        "query": "db.Shipments.find({}, {order_id: 1}).sort({shipment_date: -1}).limit(1)",
        "gpt4 answer": ".",
        "deepseek answer": "db.Shipments.find({}, {order_id: 1}).sort({shipment_date: -1}).limit(1)"
    },
    {
        "question_id": 4003,
        "spider_question_id": 6925,
        "db_id": "tracking_orders",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
        "question": "Which order has the most recent shipment? Give me the order id.",
        "query": "db.Shipments.aggregate([ { $sort: { shipment_date: -1 } }, { $limit: 1 }, { $project: { order_id: 1 } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.Shipments.aggregate([ { $sort: { shipment_date: -1 } }, { $limit: 1 }, { $project: { order_id: 1 } } ])"
    },
    {
        "question_id": 4004,
        "spider_question_id": 6930,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id of the order which has the most items?",
        "query": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.Order_Items.aggregate([ { $group: { _id: \"$order_id\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4005,
        "spider_question_id": 6933,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the customer who made the most orders.",
        "query": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", orderCount: { $sum: 1 } } }, { $sort: { orderCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customerDetails\" } }, { $unwind: \"$customerDetails\" }, { $project: { customer_name: \"$customerDetails.customer_name\" } } ])",
        "gpt4 answer": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", orderCount: { $sum: 1 } } }, { $sort: { orderCount: -1 } }, { $limit: 1 }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customerDetails\" } }, { $unwind: \"$customerDetails\" }, { $project: { customer_name: \"$customerDetails.customer_name\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4006,
        "spider_question_id": 6938,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2",
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $project: { customer_name: 1, numberOfOrders: { $size: \"$customer_orders\" } } }, { $match: { numberOfOrders: { $gte: 2 } } } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"customer_orders\" } }, { $project: { customer_name: 1, numberOfOrders: { $size: \"$customer_orders\" } } }, { $match: { numberOfOrders: { $gte: 2 } } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4007,
        "spider_question_id": 6939,
        "db_id": "tracking_orders",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT T2.customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) >= 2",
        "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
        "query": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ \"$customer\", 0 ] }, \"$$ROOT\" ] } } }, { $project: { customer_name: 1, count: 1 } } ])",
        "gpt4 answer": "db.Orders.aggregate([ { $group: { _id: \"$customer_id\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $lookup: { from: \"Customers\", localField: \"_id\", foreignField: \"customer_id\", as: \"customer\" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ \"$customer\", 0 ] }, \"$$ROOT\" ] } } }, { $project: { customer_name: 1, count: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4008,
        "spider_question_id": 6942,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1",
        "question": "List the names of the customers who have once bought product 'food'.",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } } , { $project: { customer_name: 1 } }])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } } , { $project: { customer_name: 1 } }])"
    },
    {
        "question_id": 4009,
        "spider_question_id": 6943,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1",
        "question": "What are the names of the customers who bought product 'food' at least once?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } } , { $project: { customer_name: 1} }])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } } , { $project: { customer_name: 1} }])"
    },
    {
        "question_id": 4010,
        "spider_question_id": 6944,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1",
        "question": "List the names of customers who have once canceled the purchase of the product 'food' (the item status is 'Cancel').",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"order_items.order_item_status\": \"Cancel\", \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1} } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"order_items.order_item_status\": \"Cancel\", \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"order_items.order_item_status\": \"Cancel\", \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1} } ])"
    },
    {
        "question_id": 4011,
        "spider_question_id": 6945,
        "db_id": "tracking_orders",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*) >= 1",
        "question": "Which customers have ever canceled the purchase of the product 'food' (the item status is 'Cancel')?",
        "query": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"order_items.order_item_status\": \"Cancel\", \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1} } ])",
        "gpt4 answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orderInfo\" } }, { $unwind: \"$orderInfo\" }, { $lookup: { from: \"Order_Items\", localField: \"orderInfo.order_id\", foreignField: \"order_id\", as: \"orderItemInfo\" } }, { $unwind: \"$orderItemInfo\" }, { $match: { \"orderItemInfo.order_item_status\": \"Cancel\" } }, { $lookup: { from: \"Products\", localField: \"orderItemInfo.product_id\", foreignField: \"product_id\", as: \"productInfo\" } }, { $unwind: \"$productInfo\" }, { $match: { \"productInfo.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1 } } ])",
        "deepseek answer": "db.Customers.aggregate([ { $lookup: { from: \"Orders\", localField: \"customer_id\", foreignField: \"customer_id\", as: \"orders\" } }, { $unwind: \"$orders\" }, { $lookup: { from: \"Order_Items\", localField: \"orders.order_id\", foreignField: \"order_id\", as: \"order_items\" } }, { $unwind: \"$order_items\" }, { $lookup: { from: \"Products\", localField: \"order_items.product_id\", foreignField: \"product_id\", as: \"products\" } }, { $unwind: \"$products\" }, { $match: { \"order_items.order_item_status\": \"Cancel\", \"products.product_name\": \"food\" } }, { $group: { _id: \"$customer_id\", customer_name: { $first: \"$customer_name\" } } }, { $project: { customer_name: 1} } ])"
    },
    {
        "question_id": 4012,
        "spider_question_id": 6949,
        "db_id": "architecture",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT avg(length_feet) FROM bridge",
        "question": "What is the average length in feet of the bridges?",
        "query": "db.bridge.aggregate([ { $group: { _id: null, averageLengthFeet: { $avg: \"$length_feet\" } } } , { $project: { averageLengthFeet: 1} }])",
        "gpt4 answer": "db.bridge.aggregate([ { $group: { _id: null, avgLengthFeet: { $avg: \"$length_feet\" } } }, { $project: { avgLengthFeet: 1 } } ])",
        "deepseek answer": "db.bridge.aggregate([ { $group: { _id: null, averageLengthFeet: { $avg: \"$length_feet\" } } } , { $project: { averageLengthFeet: 1} }])"
    },
    {
        "question_id": 4013,
        "spider_question_id": 6950,
        "db_id": "architecture",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name , built_year FROM mill WHERE TYPE = 'Grondzeiler'",
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "query": "db.mill.find({ type: 'Grondzeiler' }, { name: 1, built_year: 1 })",
        "gpt4 answer": "db.mill.find({ type: 'Grondzeiler' }, { name: 1, built_year: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 4014,
        "spider_question_id": 6952,
        "db_id": "architecture",
        "difficulty": "easy",
        "spider_gold_sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "query": "db.mill.find( { location: { $ne: 'Donceel' } }, { name: 1 } )",
        "gpt4 answer": "db.mill.find({ location: { $ne: 'Donceel' }}, { name: 1 })",
        "deepseek answer": "db.mill.find( { location: { $ne: 'Donceel' } }, { name: 1 } )"
    },
    {
        "question_id": 4015,
        "spider_question_id": 6955,
        "db_id": "architecture",
        "difficulty": "extra",
        "spider_gold_sql": "SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "query": "db.architect.aggregate([ { $lookup: { from: \"mill\", localField: \"id\", foreignField: \"architect_id\", as: \"mills\" } }, { $project: { _id: \"$id\", name: 1, nationality: 1, millsCount: { $size: \"$mills\" } } }, { $sort: { millsCount: -1 } }, { $limit: 1 }, { $project: { _id: 1, name: 1, nationality: 1 } } ])",
        "gpt4 answer": "db.architect.aggregate([ { $lookup: { from: \"mill\", localField: \"id\", foreignField: \"architect_id\", as: \"mills\" } }, { $project: { _id: \"$id\", name: 1, nationality: 1, millsCount: { $size: \"$mills\" } } }, { $sort: { millsCount: -1 } }, { $limit: 1 }, { $project: { _id: 1, name: 1, nationality: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4016,
        "spider_question_id": 6957,
        "db_id": "architecture",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'",
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "query": "db.bridge.find({name: {$in: ['Kolob Arch', 'Rainbow Bridge']}}, {location: 1})",
        "gpt4 answer": "db.bridge.find({name: {$in: ['Kolob Arch', 'Rainbow Bridge']}}, {location: 1})",
        "deepseek answer": "db.bridge.find({name: {$in: ['Kolob Arch', 'Rainbow Bridge']}}, {location: 1})"
    },
    {
        "question_id": 4017,
        "spider_question_id": 6958,
        "db_id": "architecture",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "query": "db.mill.find( { name: { $regex: /Moulin/, $options: 'i' } }, { name: 1 } )",
        "gpt4 answer": "db.mill.find({ name: /Moulin/ }, { name: 1 })",
        "deepseek answer": "db.mill.find( { name: { $regex: /Moulin/, $options: 'i' } }, { name: 1 } )"
    },
    {
        "question_id": 4018,
        "spider_question_id": 6959,
        "db_id": "architecture",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80",
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "query": "db.mill.aggregate([ { $lookup: { from: \"architect\", localField: \"architect_id\", foreignField: \"id\", as: \"architect_info\" } }, { $lookup: { from: \"bridge\", localField: \"architect_id\", foreignField: \"architect_id\", as: \"bridge_info\" } }, { $match: { \"bridge_info.length_meters\": { $gt: 80 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])",
        "gpt4 answer": ".",
        "deepseek answer": "db.mill.aggregate([ { $lookup: { from: \"architect\", localField: \"architect_id\", foreignField: \"id\", as: \"architect_info\" } }, { $lookup: { from: \"bridge\", localField: \"architect_id\", foreignField: \"architect_id\", as: \"bridge_info\" } }, { $match: { \"bridge_info.length_meters\": { $gt: 80 } } }, { $group: { _id: \"$name\" } }, { $project: { name: \"$_id\" } } ])"
    },
    {
        "question_id": 4019,
        "spider_question_id": 6960,
        "db_id": "architecture",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT TYPE , count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common mill type, and how many are there?",
        "query": "db.mill.aggregate([ { $group: { _id: \"$type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "gpt4 answer": "db.mill.aggregate([ { $group: { _id: \"$type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])",
        "deepseek answer": "db.mill.aggregate([ { $group: { _id: \"$type\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 } ])"
    },
    {
        "question_id": 4020,
        "spider_question_id": 6965,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT book_title , author_or_editor FROM book_club WHERE YEAR > 1989",
        "question": "show the titles, and authors or editors for all books made after the year 1989.",
        "query": "db.book_club.find({Year: {$gt: 1989}}, { Book_Title: 1, Author_or_Editor: 1})",
        "gpt4 answer": "db.book_club.find( { Year: { $gt: 1989 }}, { Book_Title: 1, Author_or_Editor: 1 } )",
        "deepseek answer": "db.book_club.find({Year: {$gt: 1989}}, { Book_Title: 1, Author_or_Editor: 1})"
    },
    {
        "question_id": 4021,
        "spider_question_id": 6966,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT book_title , author_or_editor FROM book_club WHERE YEAR > 1989",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "db.book_club.find({Year: {$gt: 1989}}, { Book_Title: 1, Author_or_Editor: 1})",
        "gpt4 answer": "db.book_club.find( { Year: { $gt: 1989 } }, { Book_Title: 1, Author_or_Editor: 1 } )",
        "deepseek answer": "db.book_club.find({Year: {$gt: 1989}}, { Book_Title: 1, Author_or_Editor: 1})"
    },
    {
        "question_id": 4022,
        "spider_question_id": 6969,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC",
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "query": "db.book_club.find({}, {Year: 1, Book_Title: 1, Publisher: 1}).sort({Year: -1})",
        "gpt4 answer": "db.book_club.find({}, {Year: 1, Book_Title: 1, Publisher: 1}).sort({Year: -1})",
        "deepseek answer": "."
    },
    {
        "question_id": 4023,
        "spider_question_id": 6970,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "query": "db.book_club.find({}, { Year: 1, Book_Title: 1, Publisher: 1 }).sort({ Year: -1 })",
        "gpt4 answer": "db.book_club.find({}, { Year: 1, Book_Title: 1, Publisher: 1 }).sort({ Year: -1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 4024,
        "spider_question_id": 6971,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT publisher , count(*) FROM book_club GROUP BY publisher",
        "question": "Show all publishers and the number of books for each publisher.",
        "query": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $project: { Publisher: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", NumberOfBooks: { $sum: 1 } }} ])",
        "deepseek answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $project: { Publisher: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 4025,
        "spider_question_id": 6972,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT publisher , count(*) FROM book_club GROUP BY publisher",
        "question": "How many books are there for each publisher?",
        "query": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 4026,
        "spider_question_id": 6973,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the publisher with most number of books?",
        "query": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publisher: \"$_id\" } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publisher: \"$_id\" } } ])"
    },
    {
        "question_id": 4027,
        "spider_question_id": 6974,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the publisher that has published the most books.",
        "query": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publisher: \"$_id\" } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.book_club.aggregate([ { $group: { _id: \"$Publisher\", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 1 }, { $project: { Publisher: \"$_id\" } } ])"
    },
    {
        "question_id": 4028,
        "spider_question_id": 6975,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT category , count(*) FROM book_club GROUP BY category",
        "question": "Show all book categories and the number of books in each category.",
        "query": "db.book_club.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $project: { category: \"$_id\", count: 1 } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $group: { _id: \"$Category\", NumberOfBooks: { $sum: 1 } }} ])",
        "deepseek answer": "db.book_club.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $project: { category: \"$_id\", count: 1 } } ])"
    },
    {
        "question_id": 4029,
        "spider_question_id": 6976,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT category , count(*) FROM book_club GROUP BY category",
        "question": "How many books fall into each category?",
        "query": "db.book_club.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } } ])",
        "deepseek answer": "db.book_club.aggregate([ { $group: { _id: \"$Category\", count: { $sum: 1 } } } ])"
    },
    {
        "question_id": 4030,
        "spider_question_id": 6977,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count(*) >= 2",
        "question": "List categories that have at least two books after year 1989.",
        "query": "db.book_club.aggregate([ { $match: { Year: { $gt: 1989 } } }, { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Category: \"$_id\" } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $match: { Year: { $gt: 1989 } } }, { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.book_club.aggregate([ { $match: { Year: { $gt: 1989 } } }, { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Category: \"$_id\" } } ])"
    },
    {
        "question_id": 4031,
        "spider_question_id": 6978,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING count(*) >= 2",
        "question": "What categories have two or more corresponding books that were made after 1989?",
        "query": "db.book_club.aggregate([ { $match: { Year: { $gt: 1989 } } }, { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Category: \"$_id\" } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $match: { Year: { $gt: 1989 } } }, { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "db.book_club.aggregate([ { $match: { Year: { $gt: 1989 } } }, { $group: { _id: \"$Category\", count: { $sum: 1 } } }, { $match: { count: { $gte: 2 } } }, { $project: { Category: \"$_id\" } } ])"
    },
    {
        "question_id": 4032,
        "spider_question_id": 6979,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
        "question": "Show publishers with a book published in 1989 and a book in 1990.",
        "query": "db.book_club.aggregate([ { $match: { Year: { $in: [1989, 1990] } } }, { $group: { _id: \"$Publisher\", distinctYears: { $addToSet: \"$Year\" } } }, { $match: { distinctYears: { $all: [1989, 1990] } } }, { $project: { _id: 1 } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $match: { Year: { $in: [1989, 1990] } } }, { $group: { _id: \"$Publisher\", distinctYears: { $addToSet: \"$Year\" } } }, { $match: { distinctYears: { $all: [1989, 1990] } } }, { $project: { _id: 1 } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4033,
        "spider_question_id": 6980,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
        "question": "What are the publishers who have published a book in both 1989 and 1990?",
        "query": "db.book_club.aggregate([ { $match: { Year: { $in: [1989, 1990] } } }, { $group: { _id: \"$Publisher\", years: { $addToSet: \"$Year\" } } }, { $match: { years: { $all: [1989, 1990] } } }, { $project: { Publisher: \"$_id\" } } ])",
        "gpt4 answer": "db.book_club.aggregate([ { $match: { Year: { $in: [1989, 1990] } } }, { $group: { _id: \"$Publisher\", years: { $addToSet: \"$Year\" } } }, { $match: { years: { $all: [1989, 1990] } } }, { $project: { Publisher: \"$_id\" } } ])",
        "deepseek answer": "."
    },
    {
        "question_id": 4034,
        "spider_question_id": 6983,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , YEAR , director FROM movie ORDER BY budget_million",
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "query": "db.movie.find({}, { Title: 1, Year: 1, Director: 1 }).sort({ Budget_million: 1 })",
        "gpt4 answer": "db.movie.find({}, { Title: 1, Year: 1, Director: 1 }).sort({ Budget_million: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 4035,
        "spider_question_id": 6984,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT title , YEAR , director FROM movie ORDER BY budget_million",
        "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
        "query": "db.movie.find({}, {Title: 1, Year: 1, Director: 1}).sort({Budget_million: 1})",
        "gpt4 answer": "db.movie.find({}, {Title: 1, Year: 1, Director: 1}).sort({Budget_million: 1})",
        "deepseek answer": "."
    },
    {
        "question_id": 4036,
        "spider_question_id": 6987,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "query": "db.movie.find( { Year: { $lte: 2000 } }, { Title: 1, Director: 1 } ).sort({ Gross_worldwide: -1 }).limit(1)",
        "gpt4 answer": "db.movie.find({ Year: { $lte: 2000 } }, { Title: 1, Director: 1 }).sort({ Gross_worldwide: -1 }).limit(1)",
        "deepseek answer": "db.movie.find( { Year: { $lte: 2000 } }, { Title: 1, Director: 1 } ).sort({ Gross_worldwide: -1 }).limit(1)"
    },
    {
        "question_id": 4037,
        "spider_question_id": 6988,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT title , director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "query": "db.movie.find( { Year: { $lte: 2000 } }, { Title: 1, Director: 1 } ).sort({ Gross_worldwide: -1 }).limit(1)",
        "gpt4 answer": "db.movie.find({ Year: { $lte: 2000 } }, { Title: 1, Director: 1 }).sort({ Gross_worldwide: -1 }).limit(1)",
        "deepseek answer": "db.movie.find( { Year: { $lte: 2000 } }, { Title: 1, Director: 1 } ).sort({ Gross_worldwide: -1 }).limit(1)"
    },
    {
        "question_id": 4038,
        "spider_question_id": 6989,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999",
        "question": "Show all director names who have a movie in both year 1999 and 2000.",
        "query": "db.movie.aggregate([ { $match: { Year: { $in: [1999, 2000] } } }, { $group: { _id: \"$Director\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Director: \"$_id\" } } ])",
        "gpt4 answer": "db.movie.aggregate([ { $match: { Year: { $in: [1999, 2000] } } }, { $group: { _id: \"$Director\", years: { $addToSet: \"$Year\" }, count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Director: \"$_id\" } } ])",
        "deepseek answer": "db.movie.aggregate([ { $match: { Year: { $in: [1999, 2000] } } }, { $group: { _id: \"$Director\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Director: \"$_id\" } } ])"
    },
    {
        "question_id": 4039,
        "spider_question_id": 6990,
        "db_id": "culture_company",
        "difficulty": "hard",
        "spider_gold_sql": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999",
        "question": "Which directors had a movie both in the year 1999 and 2000?",
        "query": "db.movie.aggregate([ { $match: { Year: { $in: [1999, 2000] } } }, { $group: { _id: \"$Director\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Director: \"$_id\" } } ])",
        "gpt4 answer": "db.movie.aggregate([ { $match: { $or: [{ Year: 1999 }, { Year: 2000 }] } }, { $group: { _id: \"$Director\", years: { $addToSet: \"$Year\" } } }, { $match: { years: { $all: [1999, 2000] } } }, { $project: { Director: \"$_id\" } } ])",
        "deepseek answer": "db.movie.aggregate([ { $match: { Year: { $in: [1999, 2000] } } }, { $group: { _id: \"$Director\", count: { $sum: 1 } } }, { $match: { count: 2 } }, { $project: { Director: \"$_id\" } } ])"
    },
    {
        "question_id": 4040,
        "spider_question_id": 6991,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "query": "db.movie.find({ Year: { $in: [1999, 2000] } }, { Director: 1 })",
        "gpt4 answer": "db.movie.find({ $or: [{ Year: 1999 }, { Year: 2000 }] }, { Director: 1 })",
        "deepseek answer": "db.movie.find({ Year: { $in: [1999, 2000] } }, { Director: 1 })"
    },
    {
        "question_id": 4041,
        "spider_question_id": 6992,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
        "question": "Which directors had a movie in either 1999 or 2000?",
        "query": "db.movie.find({ $or: [{ Year: 1999 }, { Year: 2000 }] }, { Director: 1 })",
        "gpt4 answer": "db.movie.find({ $or: [{ Year: 1999 }, { Year: 2000 }] }, { Director: 1 })",
        "deepseek answer": "."
    },
    {
        "question_id": 4042,
        "spider_question_id": 6993,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(budget_million) , max(budget_million) , min(budget_million) FROM movie WHERE YEAR < 2000",
        "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "query": "db.movie.aggregate([ { $match: { Year: { $lt: 2000 } } }, { $group: { _id: null, avgBudget: { $avg: \"$Budget_million\" }, maxBudget: { $max: \"$Budget_million\" }, minBudget: { $min: \"$Budget_million\" } } }, { $project: { avgBudget: 1, maxBudget: 1, minBudget: 1 } } ])",
        "gpt4 answer": "db.movie.aggregate([ { $match: { Year: { $lt: 2000 } } }, { $group: { _id: null, averageBudget: { $avg: \"$Budget_million\" }, maximumBudget: { $max: \"$Budget_million\" }, minimumBudget: { $min: \"$Budget_million\" } } }, { $project: { averageBudget: 1, maximumBudget: 1, minimumBudget: 1 } } ])",
        "deepseek answer": "db.movie.aggregate([ { $match: { Year: { $lt: 2000 } } }, { $group: { _id: null, avgBudget: { $avg: \"$Budget_million\" }, maxBudget: { $max: \"$Budget_million\" }, minBudget: { $min: \"$Budget_million\" } } }, { $project: { avgBudget: 1, maxBudget: 1, minBudget: 1 } } ])"
    },
    {
        "question_id": 4043,
        "spider_question_id": 6994,
        "db_id": "culture_company",
        "difficulty": "medium",
        "spider_gold_sql": "SELECT avg(budget_million) , max(budget_million) , min(budget_million) FROM movie WHERE YEAR < 2000",
        "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
        "query": "db.movie.aggregate([ { $match: { Year: { $lt: 2000 } } }, { $group: { _id: null, avgBudget: { $avg: \"$Budget_million\" }, maxBudget: { $max: \"$Budget_million\" }, minBudget: { $min: \"$Budget_million\" } } }, { $project: { avgBudget: 1, maxBudget: 1, minBudget: 1 } } ])",
        "gpt4 answer": "db.movie.aggregate([ { $match: { Year: { $lt: 2000 } } }, { $group: { _id: null, averageBudget: { $avg: \"$Budget_million\" }, maxBudget: { $max: \"$Budget_million\" }, minBudget: { $min: \"$Budget_million\" } } }, { $project: { averageBudget: 1, maxBudget: 1, minBudget: 1 } } ])",
        "deepseek answer": "db.movie.aggregate([ { $match: { Year: { $lt: 2000 } } }, { $group: { _id: null, avgBudget: { $avg: \"$Budget_million\" }, maxBudget: { $max: \"$Budget_million\" }, minBudget: { $min: \"$Budget_million\" } } }, { $project: { avgBudget: 1, maxBudget: 1, minBudget: 1 } } ])"
    }
]